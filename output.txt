
      

-----------------------------------------------


      File name :../UniSoftLaravel/server.php

      
-----------------------------------------------


      <?php

/**
 * Laravel - A PHP Framework For Web Artisans
 *
 * @package  Laravel
 * @author   Taylor Otwell <taylor@laravel.com>
 */

$uri = urldecode(
    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH) ?? ''
);

// This file allows us to emulate Apache's "mod_rewrite" functionality from the
// built-in PHP web server. This provides a convenient way to test a Laravel
// application without having installed a "real" web server software here.
if ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {
    return false;
}

require_once __DIR__.'/public/index.php';

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/_ide_helper.php

      
-----------------------------------------------


      <?php
// @formatter:off
// phpcs:ignoreFile

/**
 * A helper file for Laravel, to provide autocomplete information to your IDE
 * Generated for Laravel 9.52.16.
 *
 * This file should not be included in your code, only analyzed by your IDE!
 *
 * @author Barry vd. Heuvel <barryvdh@gmail.com>
 * @see https://github.com/barryvdh/laravel-ide-helper
 */

    namespace Illuminate\Support\Facades { 
            /**
     * 
     *
     * @see \Illuminate\Foundation\Application
     */ 
        class App {
                    /**
         * Get the version number of the application.
         *
         * @return string 
         * @static 
         */ 
        public static function version()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->version();
        }
                    /**
         * Run the given array of bootstrap classes.
         *
         * @param string[] $bootstrappers
         * @return void 
         * @static 
         */ 
        public static function bootstrapWith($bootstrappers)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->bootstrapWith($bootstrappers);
        }
                    /**
         * Register a callback to run after loading the environment.
         *
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function afterLoadingEnvironment($callback)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->afterLoadingEnvironment($callback);
        }
                    /**
         * Register a callback to run before a bootstrapper.
         *
         * @param string $bootstrapper
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function beforeBootstrapping($bootstrapper, $callback)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->beforeBootstrapping($bootstrapper, $callback);
        }
                    /**
         * Register a callback to run after a bootstrapper.
         *
         * @param string $bootstrapper
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function afterBootstrapping($bootstrapper, $callback)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->afterBootstrapping($bootstrapper, $callback);
        }
                    /**
         * Determine if the application has been bootstrapped before.
         *
         * @return bool 
         * @static 
         */ 
        public static function hasBeenBootstrapped()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->hasBeenBootstrapped();
        }
                    /**
         * Set the base path for the application.
         *
         * @param string $basePath
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function setBasePath($basePath)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->setBasePath($basePath);
        }
                    /**
         * Get the path to the application "app" directory.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function path($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->path($path);
        }
                    /**
         * Set the application directory.
         *
         * @param string $path
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function useAppPath($path)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->useAppPath($path);
        }
                    /**
         * Get the base path of the Laravel installation.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function basePath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->basePath($path);
        }
                    /**
         * Get the path to the bootstrap directory.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function bootstrapPath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->bootstrapPath($path);
        }
                    /**
         * Get the path to the application configuration files.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function configPath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->configPath($path);
        }
                    /**
         * Get the path to the database directory.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function databasePath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->databasePath($path);
        }
                    /**
         * Set the database directory.
         *
         * @param string $path
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function useDatabasePath($path)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->useDatabasePath($path);
        }
                    /**
         * Get the path to the language files.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function langPath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->langPath($path);
        }
                    /**
         * Set the language file directory.
         *
         * @param string $path
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function useLangPath($path)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->useLangPath($path);
        }
                    /**
         * Get the path to the public / web directory.
         *
         * @return string 
         * @static 
         */ 
        public static function publicPath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->publicPath();
        }
                    /**
         * Get the path to the storage directory.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function storagePath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->storagePath($path);
        }
                    /**
         * Set the storage directory.
         *
         * @param string $path
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function useStoragePath($path)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->useStoragePath($path);
        }
                    /**
         * Get the path to the resources directory.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function resourcePath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->resourcePath($path);
        }
                    /**
         * Get the path to the views directory.
         * 
         * This method returns the first configured path in the array of view paths.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function viewPath($path = '')
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->viewPath($path);
        }
                    /**
         * Get the path to the environment file directory.
         *
         * @return string 
         * @static 
         */ 
        public static function environmentPath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->environmentPath();
        }
                    /**
         * Set the directory for the environment file.
         *
         * @param string $path
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function useEnvironmentPath($path)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->useEnvironmentPath($path);
        }
                    /**
         * Set the environment file to be loaded during bootstrapping.
         *
         * @param string $file
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function loadEnvironmentFrom($file)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->loadEnvironmentFrom($file);
        }
                    /**
         * Get the environment file the application is using.
         *
         * @return string 
         * @static 
         */ 
        public static function environmentFile()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->environmentFile();
        }
                    /**
         * Get the fully qualified path to the environment file.
         *
         * @return string 
         * @static 
         */ 
        public static function environmentFilePath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->environmentFilePath();
        }
                    /**
         * Get or check the current application environment.
         *
         * @param string|array $environments
         * @return string|bool 
         * @static 
         */ 
        public static function environment(...$environments)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->environment(...$environments);
        }
                    /**
         * Determine if the application is in the local environment.
         *
         * @return bool 
         * @static 
         */ 
        public static function isLocal()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isLocal();
        }
                    /**
         * Determine if the application is in the production environment.
         *
         * @return bool 
         * @static 
         */ 
        public static function isProduction()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isProduction();
        }
                    /**
         * Detect the application's current environment.
         *
         * @param \Closure $callback
         * @return string 
         * @static 
         */ 
        public static function detectEnvironment($callback)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->detectEnvironment($callback);
        }
                    /**
         * Determine if the application is running in the console.
         *
         * @return bool 
         * @static 
         */ 
        public static function runningInConsole()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->runningInConsole();
        }
                    /**
         * Determine if the application is running unit tests.
         *
         * @return bool 
         * @static 
         */ 
        public static function runningUnitTests()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->runningUnitTests();
        }
                    /**
         * Determine if the application is running with debug mode enabled.
         *
         * @return bool 
         * @static 
         */ 
        public static function hasDebugModeEnabled()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->hasDebugModeEnabled();
        }
                    /**
         * Register all of the configured providers.
         *
         * @return void 
         * @static 
         */ 
        public static function registerConfiguredProviders()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->registerConfiguredProviders();
        }
                    /**
         * Register a service provider with the application.
         *
         * @param \Illuminate\Support\ServiceProvider|string $provider
         * @param bool $force
         * @return \Illuminate\Support\ServiceProvider 
         * @static 
         */ 
        public static function register($provider, $force = false)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->register($provider, $force);
        }
                    /**
         * Get the registered service provider instance if it exists.
         *
         * @param \Illuminate\Support\ServiceProvider|string $provider
         * @return \Illuminate\Support\ServiceProvider|null 
         * @static 
         */ 
        public static function getProvider($provider)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getProvider($provider);
        }
                    /**
         * Get the registered service provider instances if any exist.
         *
         * @param \Illuminate\Support\ServiceProvider|string $provider
         * @return array 
         * @static 
         */ 
        public static function getProviders($provider)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getProviders($provider);
        }
                    /**
         * Resolve a service provider instance from the class name.
         *
         * @param string $provider
         * @return \Illuminate\Support\ServiceProvider 
         * @static 
         */ 
        public static function resolveProvider($provider)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->resolveProvider($provider);
        }
                    /**
         * Load and boot all of the remaining deferred providers.
         *
         * @return void 
         * @static 
         */ 
        public static function loadDeferredProviders()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->loadDeferredProviders();
        }
                    /**
         * Load the provider for a deferred service.
         *
         * @param string $service
         * @return void 
         * @static 
         */ 
        public static function loadDeferredProvider($service)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->loadDeferredProvider($service);
        }
                    /**
         * Register a deferred provider and service.
         *
         * @param string $provider
         * @param string|null $service
         * @return void 
         * @static 
         */ 
        public static function registerDeferredProvider($provider, $service = null)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->registerDeferredProvider($provider, $service);
        }
                    /**
         * Resolve the given type from the container.
         *
         * @param string $abstract
         * @param array $parameters
         * @return mixed 
         * @static 
         */ 
        public static function make($abstract, $parameters = [])
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->make($abstract, $parameters);
        }
                    /**
         * Determine if the given abstract type has been bound.
         *
         * @param string $abstract
         * @return bool 
         * @static 
         */ 
        public static function bound($abstract)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->bound($abstract);
        }
                    /**
         * Determine if the application has booted.
         *
         * @return bool 
         * @static 
         */ 
        public static function isBooted()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isBooted();
        }
                    /**
         * Boot the application's service providers.
         *
         * @return void 
         * @static 
         */ 
        public static function boot()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->boot();
        }
                    /**
         * Register a new boot listener.
         *
         * @param callable $callback
         * @return void 
         * @static 
         */ 
        public static function booting($callback)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->booting($callback);
        }
                    /**
         * Register a new "booted" listener.
         *
         * @param callable $callback
         * @return void 
         * @static 
         */ 
        public static function booted($callback)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->booted($callback);
        }
                    /**
         * {@inheritdoc}
         *
         * @return \Symfony\Component\HttpFoundation\Response 
         * @static 
         */ 
        public static function handle($request, $type = 1, $catch = true)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->handle($request, $type, $catch);
        }
                    /**
         * Determine if middleware has been disabled for the application.
         *
         * @return bool 
         * @static 
         */ 
        public static function shouldSkipMiddleware()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->shouldSkipMiddleware();
        }
                    /**
         * Get the path to the cached services.php file.
         *
         * @return string 
         * @static 
         */ 
        public static function getCachedServicesPath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getCachedServicesPath();
        }
                    /**
         * Get the path to the cached packages.php file.
         *
         * @return string 
         * @static 
         */ 
        public static function getCachedPackagesPath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getCachedPackagesPath();
        }
                    /**
         * Determine if the application configuration is cached.
         *
         * @return bool 
         * @static 
         */ 
        public static function configurationIsCached()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->configurationIsCached();
        }
                    /**
         * Get the path to the configuration cache file.
         *
         * @return string 
         * @static 
         */ 
        public static function getCachedConfigPath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getCachedConfigPath();
        }
                    /**
         * Determine if the application routes are cached.
         *
         * @return bool 
         * @static 
         */ 
        public static function routesAreCached()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->routesAreCached();
        }
                    /**
         * Get the path to the routes cache file.
         *
         * @return string 
         * @static 
         */ 
        public static function getCachedRoutesPath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getCachedRoutesPath();
        }
                    /**
         * Determine if the application events are cached.
         *
         * @return bool 
         * @static 
         */ 
        public static function eventsAreCached()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->eventsAreCached();
        }
                    /**
         * Get the path to the events cache file.
         *
         * @return string 
         * @static 
         */ 
        public static function getCachedEventsPath()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getCachedEventsPath();
        }
                    /**
         * Add new prefix to list of absolute path prefixes.
         *
         * @param string $prefix
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function addAbsoluteCachePathPrefix($prefix)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->addAbsoluteCachePathPrefix($prefix);
        }
                    /**
         * Get an instance of the maintenance mode manager implementation.
         *
         * @return \Illuminate\Contracts\Foundation\MaintenanceMode 
         * @static 
         */ 
        public static function maintenanceMode()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->maintenanceMode();
        }
                    /**
         * Determine if the application is currently down for maintenance.
         *
         * @return bool 
         * @static 
         */ 
        public static function isDownForMaintenance()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isDownForMaintenance();
        }
                    /**
         * Throw an HttpException with the given data.
         *
         * @param int $code
         * @param string $message
         * @param array $headers
         * @return \Illuminate\Foundation\never 
         * @throws \Symfony\Component\HttpKernel\Exception\HttpException
         * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
         * @static 
         */ 
        public static function abort($code, $message = '', $headers = [])
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->abort($code, $message, $headers);
        }
                    /**
         * Register a terminating callback with the application.
         *
         * @param callable|string $callback
         * @return \Illuminate\Foundation\Application 
         * @static 
         */ 
        public static function terminating($callback)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->terminating($callback);
        }
                    /**
         * Terminate the application.
         *
         * @return void 
         * @static 
         */ 
        public static function terminate()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->terminate();
        }
                    /**
         * Get the service providers that have been loaded.
         *
         * @return array 
         * @static 
         */ 
        public static function getLoadedProviders()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getLoadedProviders();
        }
                    /**
         * Determine if the given service provider is loaded.
         *
         * @param string $provider
         * @return bool 
         * @static 
         */ 
        public static function providerIsLoaded($provider)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->providerIsLoaded($provider);
        }
                    /**
         * Get the application's deferred services.
         *
         * @return array 
         * @static 
         */ 
        public static function getDeferredServices()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getDeferredServices();
        }
                    /**
         * Set the application's deferred services.
         *
         * @param array $services
         * @return void 
         * @static 
         */ 
        public static function setDeferredServices($services)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->setDeferredServices($services);
        }
                    /**
         * Add an array of services to the application's deferred services.
         *
         * @param array $services
         * @return void 
         * @static 
         */ 
        public static function addDeferredServices($services)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->addDeferredServices($services);
        }
                    /**
         * Determine if the given service is a deferred service.
         *
         * @param string $service
         * @return bool 
         * @static 
         */ 
        public static function isDeferredService($service)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isDeferredService($service);
        }
                    /**
         * Configure the real-time facade namespace.
         *
         * @param string $namespace
         * @return void 
         * @static 
         */ 
        public static function provideFacades($namespace)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->provideFacades($namespace);
        }
                    /**
         * Get the current application locale.
         *
         * @return string 
         * @static 
         */ 
        public static function getLocale()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getLocale();
        }
                    /**
         * Get the current application locale.
         *
         * @return string 
         * @static 
         */ 
        public static function currentLocale()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->currentLocale();
        }
                    /**
         * Get the current application fallback locale.
         *
         * @return string 
         * @static 
         */ 
        public static function getFallbackLocale()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getFallbackLocale();
        }
                    /**
         * Set the current application locale.
         *
         * @param string $locale
         * @return void 
         * @static 
         */ 
        public static function setLocale($locale)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->setLocale($locale);
        }
                    /**
         * Set the current application fallback locale.
         *
         * @param string $fallbackLocale
         * @return void 
         * @static 
         */ 
        public static function setFallbackLocale($fallbackLocale)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->setFallbackLocale($fallbackLocale);
        }
                    /**
         * Determine if the application locale is the given locale.
         *
         * @param string $locale
         * @return bool 
         * @static 
         */ 
        public static function isLocale($locale)
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isLocale($locale);
        }
                    /**
         * Register the core class aliases in the container.
         *
         * @return void 
         * @static 
         */ 
        public static function registerCoreContainerAliases()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->registerCoreContainerAliases();
        }
                    /**
         * Flush the container of all bindings and resolved instances.
         *
         * @return void 
         * @static 
         */ 
        public static function flush()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->flush();
        }
                    /**
         * Get the application namespace.
         *
         * @return string 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function getNamespace()
        {
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getNamespace();
        }
                    /**
         * Define a contextual binding.
         *
         * @param array|string $concrete
         * @return \Illuminate\Contracts\Container\ContextualBindingBuilder 
         * @static 
         */ 
        public static function when($concrete)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->when($concrete);
        }
                    /**
         * Returns true if the container can return an entry for the given identifier.
         * 
         * Returns false otherwise.
         * 
         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
         *
         * @return bool 
         * @param string $id Identifier of the entry to look for.
         * @return bool 
         * @static 
         */ 
        public static function has($id)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->has($id);
        }
                    /**
         * Determine if the given abstract type has been resolved.
         *
         * @param string $abstract
         * @return bool 
         * @static 
         */ 
        public static function resolved($abstract)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->resolved($abstract);
        }
                    /**
         * Determine if a given type is shared.
         *
         * @param string $abstract
         * @return bool 
         * @static 
         */ 
        public static function isShared($abstract)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isShared($abstract);
        }
                    /**
         * Determine if a given string is an alias.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function isAlias($name)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->isAlias($name);
        }
                    /**
         * Register a binding with the container.
         *
         * @param string $abstract
         * @param \Closure|string|null $concrete
         * @param bool $shared
         * @return void 
         * @throws \TypeError
         * @static 
         */ 
        public static function bind($abstract, $concrete = null, $shared = false)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->bind($abstract, $concrete, $shared);
        }
                    /**
         * Determine if the container has a method binding.
         *
         * @param string $method
         * @return bool 
         * @static 
         */ 
        public static function hasMethodBinding($method)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->hasMethodBinding($method);
        }
                    /**
         * Bind a callback to resolve with Container::call.
         *
         * @param array|string $method
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function bindMethod($method, $callback)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->bindMethod($method, $callback);
        }
                    /**
         * Get the method binding for the given method.
         *
         * @param string $method
         * @param mixed $instance
         * @return mixed 
         * @static 
         */ 
        public static function callMethodBinding($method, $instance)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->callMethodBinding($method, $instance);
        }
                    /**
         * Add a contextual binding to the container.
         *
         * @param string $concrete
         * @param string $abstract
         * @param \Closure|string $implementation
         * @return void 
         * @static 
         */ 
        public static function addContextualBinding($concrete, $abstract, $implementation)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->addContextualBinding($concrete, $abstract, $implementation);
        }
                    /**
         * Register a binding if it hasn't already been registered.
         *
         * @param string $abstract
         * @param \Closure|string|null $concrete
         * @param bool $shared
         * @return void 
         * @static 
         */ 
        public static function bindIf($abstract, $concrete = null, $shared = false)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->bindIf($abstract, $concrete, $shared);
        }
                    /**
         * Register a shared binding in the container.
         *
         * @param string $abstract
         * @param \Closure|string|null $concrete
         * @return void 
         * @static 
         */ 
        public static function singleton($abstract, $concrete = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->singleton($abstract, $concrete);
        }
                    /**
         * Register a shared binding if it hasn't already been registered.
         *
         * @param string $abstract
         * @param \Closure|string|null $concrete
         * @return void 
         * @static 
         */ 
        public static function singletonIf($abstract, $concrete = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->singletonIf($abstract, $concrete);
        }
                    /**
         * Register a scoped binding in the container.
         *
         * @param string $abstract
         * @param \Closure|string|null $concrete
         * @return void 
         * @static 
         */ 
        public static function scoped($abstract, $concrete = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->scoped($abstract, $concrete);
        }
                    /**
         * Register a scoped binding if it hasn't already been registered.
         *
         * @param string $abstract
         * @param \Closure|string|null $concrete
         * @return void 
         * @static 
         */ 
        public static function scopedIf($abstract, $concrete = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->scopedIf($abstract, $concrete);
        }
                    /**
         * "Extend" an abstract type in the container.
         *
         * @param string $abstract
         * @param \Closure $closure
         * @return void 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function extend($abstract, $closure)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->extend($abstract, $closure);
        }
                    /**
         * Register an existing instance as shared in the container.
         *
         * @param string $abstract
         * @param mixed $instance
         * @return mixed 
         * @static 
         */ 
        public static function instance($abstract, $instance)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->instance($abstract, $instance);
        }
                    /**
         * Assign a set of tags to a given binding.
         *
         * @param array|string $abstracts
         * @param array|mixed $tags
         * @return void 
         * @static 
         */ 
        public static function tag($abstracts, $tags)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->tag($abstracts, $tags);
        }
                    /**
         * Resolve all of the bindings for a given tag.
         *
         * @param string $tag
         * @return \Illuminate\Container\iterable 
         * @static 
         */ 
        public static function tagged($tag)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->tagged($tag);
        }
                    /**
         * Alias a type to a different name.
         *
         * @param string $abstract
         * @param string $alias
         * @return void 
         * @throws \LogicException
         * @static 
         */ 
        public static function alias($abstract, $alias)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->alias($abstract, $alias);
        }
                    /**
         * Bind a new callback to an abstract's rebind event.
         *
         * @param string $abstract
         * @param \Closure $callback
         * @return mixed 
         * @static 
         */ 
        public static function rebinding($abstract, $callback)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->rebinding($abstract, $callback);
        }
                    /**
         * Refresh an instance on the given target and method.
         *
         * @param string $abstract
         * @param mixed $target
         * @param string $method
         * @return mixed 
         * @static 
         */ 
        public static function refresh($abstract, $target, $method)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->refresh($abstract, $target, $method);
        }
                    /**
         * Wrap the given closure such that its dependencies will be injected when executed.
         *
         * @param \Closure $callback
         * @param array $parameters
         * @return \Closure 
         * @static 
         */ 
        public static function wrap($callback, $parameters = [])
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->wrap($callback, $parameters);
        }
                    /**
         * Call the given Closure / class@method and inject its dependencies.
         *
         * @param callable|string $callback
         * @param array<string, mixed> $parameters
         * @param string|null $defaultMethod
         * @return mixed 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function call($callback, $parameters = [], $defaultMethod = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->call($callback, $parameters, $defaultMethod);
        }
                    /**
         * Get a closure to resolve the given type from the container.
         *
         * @param string $abstract
         * @return \Closure 
         * @static 
         */ 
        public static function factory($abstract)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->factory($abstract);
        }
                    /**
         * An alias function name for make().
         *
         * @param string|callable $abstract
         * @param array $parameters
         * @return mixed 
         * @throws \Illuminate\Contracts\Container\BindingResolutionException
         * @static 
         */ 
        public static function makeWith($abstract, $parameters = [])
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->makeWith($abstract, $parameters);
        }
                    /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @return mixed 
         * @param string $id Identifier of the entry to look for.
         * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
         * @throws ContainerExceptionInterface Error while retrieving the entry.
         * @return mixed Entry.
         * @static 
         */ 
        public static function get($id)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->get($id);
        }
                    /**
         * Instantiate a concrete instance of the given type.
         *
         * @param \Closure|string $concrete
         * @return mixed 
         * @throws \Illuminate\Contracts\Container\BindingResolutionException
         * @throws \Illuminate\Contracts\Container\CircularDependencyException
         * @static 
         */ 
        public static function build($concrete)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->build($concrete);
        }
                    /**
         * Register a new before resolving callback for all types.
         *
         * @param \Closure|string $abstract
         * @param \Closure|null $callback
         * @return void 
         * @static 
         */ 
        public static function beforeResolving($abstract, $callback = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->beforeResolving($abstract, $callback);
        }
                    /**
         * Register a new resolving callback.
         *
         * @param \Closure|string $abstract
         * @param \Closure|null $callback
         * @return void 
         * @static 
         */ 
        public static function resolving($abstract, $callback = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->resolving($abstract, $callback);
        }
                    /**
         * Register a new after resolving callback for all types.
         *
         * @param \Closure|string $abstract
         * @param \Closure|null $callback
         * @return void 
         * @static 
         */ 
        public static function afterResolving($abstract, $callback = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->afterResolving($abstract, $callback);
        }
                    /**
         * Get the container's bindings.
         *
         * @return array 
         * @static 
         */ 
        public static function getBindings()
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getBindings();
        }
                    /**
         * Get the alias for an abstract if available.
         *
         * @param string $abstract
         * @return string 
         * @static 
         */ 
        public static function getAlias($abstract)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->getAlias($abstract);
        }
                    /**
         * Remove all of the extender callbacks for a given type.
         *
         * @param string $abstract
         * @return void 
         * @static 
         */ 
        public static function forgetExtenders($abstract)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->forgetExtenders($abstract);
        }
                    /**
         * Remove a resolved instance from the instance cache.
         *
         * @param string $abstract
         * @return void 
         * @static 
         */ 
        public static function forgetInstance($abstract)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->forgetInstance($abstract);
        }
                    /**
         * Clear all of the instances from the container.
         *
         * @return void 
         * @static 
         */ 
        public static function forgetInstances()
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->forgetInstances();
        }
                    /**
         * Clear all of the scoped instances from the container.
         *
         * @return void 
         * @static 
         */ 
        public static function forgetScopedInstances()
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->forgetScopedInstances();
        }
                    /**
         * Get the globally available instance of the container.
         *
         * @return static 
         * @static 
         */ 
        public static function getInstance()
        {            //Method inherited from \Illuminate\Container\Container         
                        return \Illuminate\Foundation\Application::getInstance();
        }
                    /**
         * Set the shared instance of the container.
         *
         * @param \Illuminate\Contracts\Container\Container|null $container
         * @return \Illuminate\Contracts\Container\Container|static 
         * @static 
         */ 
        public static function setInstance($container = null)
        {            //Method inherited from \Illuminate\Container\Container         
                        return \Illuminate\Foundation\Application::setInstance($container);
        }
                    /**
         * Determine if a given offset exists.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function offsetExists($key)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->offsetExists($key);
        }
                    /**
         * Get the value at a given offset.
         *
         * @param string $key
         * @return mixed 
         * @static 
         */ 
        public static function offsetGet($key)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        return $instance->offsetGet($key);
        }
                    /**
         * Set the value at a given offset.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function offsetSet($key, $value)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->offsetSet($key, $value);
        }
                    /**
         * Unset the value at a given offset.
         *
         * @param string $key
         * @return void 
         * @static 
         */ 
        public static function offsetUnset($key)
        {            //Method inherited from \Illuminate\Container\Container         
                        /** @var \Illuminate\Foundation\Application $instance */
                        $instance->offsetUnset($key);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Foundation\Application::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Foundation\Application::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Foundation\Application::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Foundation\Application::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Foundation\Console\Kernel
     */ 
        class Artisan {
                    /**
         * Run the console application.
         *
         * @param \Symfony\Component\Console\Input\InputInterface $input
         * @param \Symfony\Component\Console\Output\OutputInterface|null $output
         * @return int 
         * @static 
         */ 
        public static function handle($input, $output = null)
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        return $instance->handle($input, $output);
        }
                    /**
         * Terminate the application.
         *
         * @param \Symfony\Component\Console\Input\InputInterface $input
         * @param int $status
         * @return void 
         * @static 
         */ 
        public static function terminate($input, $status)
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        $instance->terminate($input, $status);
        }
                    /**
         * Register a callback to be invoked when the command lifecycle duration exceeds a given amount of time.
         *
         * @param \DateTimeInterface|\Carbon\CarbonInterval|float|int $threshold
         * @param callable $handler
         * @return void 
         * @static 
         */ 
        public static function whenCommandLifecycleIsLongerThan($threshold, $handler)
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        $instance->whenCommandLifecycleIsLongerThan($threshold, $handler);
        }
                    /**
         * When the command being handled started.
         *
         * @return \Illuminate\Support\Carbon|null 
         * @static 
         */ 
        public static function commandStartedAt()
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        return $instance->commandStartedAt();
        }
                    /**
         * Register a Closure based command with the application.
         *
         * @param string $signature
         * @param \Closure $callback
         * @return \Illuminate\Foundation\Console\ClosureCommand 
         * @static 
         */ 
        public static function command($signature, $callback)
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        return $instance->command($signature, $callback);
        }
                    /**
         * Register the given command with the console application.
         *
         * @param \Symfony\Component\Console\Command\Command $command
         * @return void 
         * @static 
         */ 
        public static function registerCommand($command)
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        $instance->registerCommand($command);
        }
                    /**
         * Run an Artisan console command by name.
         *
         * @param string $command
         * @param array $parameters
         * @param \Symfony\Component\Console\Output\OutputInterface|null $outputBuffer
         * @return int 
         * @throws \Symfony\Component\Console\Exception\CommandNotFoundException
         * @static 
         */ 
        public static function call($command, $parameters = [], $outputBuffer = null)
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        return $instance->call($command, $parameters, $outputBuffer);
        }
                    /**
         * Queue the given console command.
         *
         * @param string $command
         * @param array $parameters
         * @return \Illuminate\Foundation\Bus\PendingDispatch 
         * @static 
         */ 
        public static function queue($command, $parameters = [])
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        return $instance->queue($command, $parameters);
        }
                    /**
         * Get all of the commands registered with the console.
         *
         * @return array 
         * @static 
         */ 
        public static function all()
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        return $instance->all();
        }
                    /**
         * Get the output for the last run command.
         *
         * @return string 
         * @static 
         */ 
        public static function output()
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        return $instance->output();
        }
                    /**
         * Bootstrap the application for artisan commands.
         *
         * @return void 
         * @static 
         */ 
        public static function bootstrap()
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        $instance->bootstrap();
        }
                    /**
         * Bootstrap the application without booting service providers.
         *
         * @return void 
         * @static 
         */ 
        public static function bootstrapWithoutBootingProviders()
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        $instance->bootstrapWithoutBootingProviders();
        }
                    /**
         * Set the Artisan application instance.
         *
         * @param \Illuminate\Console\Application $artisan
         * @return void 
         * @static 
         */ 
        public static function setArtisan($artisan)
        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
                        /** @var \App\Console\Kernel $instance */
                        $instance->setArtisan($artisan);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Auth\AuthManager
     * @see \Illuminate\Auth\SessionGuard
     */ 
        class Auth {
                    /**
         * Attempt to get the guard from the local cache.
         *
         * @param string|null $name
         * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard 
         * @static 
         */ 
        public static function guard($name = null)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->guard($name);
        }
                    /**
         * Create a session based authentication guard.
         *
         * @param string $name
         * @param array $config
         * @return \Illuminate\Auth\SessionGuard 
         * @static 
         */ 
        public static function createSessionDriver($name, $config)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->createSessionDriver($name, $config);
        }
                    /**
         * Create a token based authentication guard.
         *
         * @param string $name
         * @param array $config
         * @return \Illuminate\Auth\TokenGuard 
         * @static 
         */ 
        public static function createTokenDriver($name, $config)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->createTokenDriver($name, $config);
        }
                    /**
         * Get the default authentication driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the default guard driver the factory should serve.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function shouldUse($name)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        $instance->shouldUse($name);
        }
                    /**
         * Set the default authentication driver name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        $instance->setDefaultDriver($name);
        }
                    /**
         * Register a new callback based request guard.
         *
         * @param string $driver
         * @param callable $callback
         * @return \Illuminate\Auth\AuthManager 
         * @static 
         */ 
        public static function viaRequest($driver, $callback)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->viaRequest($driver, $callback);
        }
                    /**
         * Get the user resolver callback.
         *
         * @return \Closure 
         * @static 
         */ 
        public static function userResolver()
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->userResolver();
        }
                    /**
         * Set the callback to be used to resolve users.
         *
         * @param \Closure $userResolver
         * @return \Illuminate\Auth\AuthManager 
         * @static 
         */ 
        public static function resolveUsersUsing($userResolver)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->resolveUsersUsing($userResolver);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Auth\AuthManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Register a custom provider creator Closure.
         *
         * @param string $name
         * @param \Closure $callback
         * @return \Illuminate\Auth\AuthManager 
         * @static 
         */ 
        public static function provider($name, $callback)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->provider($name, $callback);
        }
                    /**
         * Determines if any guards have already been resolved.
         *
         * @return bool 
         * @static 
         */ 
        public static function hasResolvedGuards()
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->hasResolvedGuards();
        }
                    /**
         * Forget all of the resolved guard instances.
         *
         * @return \Illuminate\Auth\AuthManager 
         * @static 
         */ 
        public static function forgetGuards()
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->forgetGuards();
        }
                    /**
         * Set the application instance used by the manager.
         *
         * @param \Illuminate\Contracts\Foundation\Application $app
         * @return \Illuminate\Auth\AuthManager 
         * @static 
         */ 
        public static function setApplication($app)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->setApplication($app);
        }
                    /**
         * Create the user provider implementation for the driver.
         *
         * @param string|null $provider
         * @return \Illuminate\Contracts\Auth\UserProvider|null 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function createUserProvider($provider = null)
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->createUserProvider($provider);
        }
                    /**
         * Get the default user provider name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultUserProvider()
        {
                        /** @var \Illuminate\Auth\AuthManager $instance */
                        return $instance->getDefaultUserProvider();
        }
                    /**
         * Get the currently authenticated user.
         *
         * @return \App\Models\User|null 
         * @static 
         */ 
        public static function user()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->user();
        }
                    /**
         * Get the ID for the currently authenticated user.
         *
         * @return int|string|null 
         * @static 
         */ 
        public static function id()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->id();
        }
                    /**
         * Log a user into the application without sessions or cookies.
         *
         * @param array $credentials
         * @return bool 
         * @static 
         */ 
        public static function once($credentials = [])
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->once($credentials);
        }
                    /**
         * Log the given user ID into the application without sessions or cookies.
         *
         * @param mixed $id
         * @return \App\Models\User|false 
         * @static 
         */ 
        public static function onceUsingId($id)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->onceUsingId($id);
        }
                    /**
         * Validate a user's credentials.
         *
         * @param array $credentials
         * @return bool 
         * @static 
         */ 
        public static function validate($credentials = [])
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->validate($credentials);
        }
                    /**
         * Attempt to authenticate using HTTP Basic Auth.
         *
         * @param string $field
         * @param array $extraConditions
         * @return \Symfony\Component\HttpFoundation\Response|null 
         * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException
         * @static 
         */ 
        public static function basic($field = 'email', $extraConditions = [])
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->basic($field, $extraConditions);
        }
                    /**
         * Perform a stateless HTTP Basic login attempt.
         *
         * @param string $field
         * @param array $extraConditions
         * @return \Symfony\Component\HttpFoundation\Response|null 
         * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException
         * @static 
         */ 
        public static function onceBasic($field = 'email', $extraConditions = [])
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->onceBasic($field, $extraConditions);
        }
                    /**
         * Attempt to authenticate a user using the given credentials.
         *
         * @param array $credentials
         * @param bool $remember
         * @return bool 
         * @static 
         */ 
        public static function attempt($credentials = [], $remember = false)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->attempt($credentials, $remember);
        }
                    /**
         * Attempt to authenticate a user with credentials and additional callbacks.
         *
         * @param array $credentials
         * @param array|callable|null $callbacks
         * @param bool $remember
         * @return bool 
         * @static 
         */ 
        public static function attemptWhen($credentials = [], $callbacks = null, $remember = false)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->attemptWhen($credentials, $callbacks, $remember);
        }
                    /**
         * Log the given user ID into the application.
         *
         * @param mixed $id
         * @param bool $remember
         * @return \App\Models\User|false 
         * @static 
         */ 
        public static function loginUsingId($id, $remember = false)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->loginUsingId($id, $remember);
        }
                    /**
         * Log a user into the application.
         *
         * @param \Illuminate\Contracts\Auth\Authenticatable $user
         * @param bool $remember
         * @return void 
         * @static 
         */ 
        public static function login($user, $remember = false)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        $instance->login($user, $remember);
        }
                    /**
         * Log the user out of the application.
         *
         * @return void 
         * @static 
         */ 
        public static function logout()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        $instance->logout();
        }
                    /**
         * Log the user out of the application on their current device only.
         * 
         * This method does not cycle the "remember" token.
         *
         * @return void 
         * @static 
         */ 
        public static function logoutCurrentDevice()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        $instance->logoutCurrentDevice();
        }
                    /**
         * Invalidate other sessions for the current user.
         * 
         * The application must be using the AuthenticateSession middleware.
         *
         * @param string $password
         * @param string $attribute
         * @return \App\Models\User|null 
         * @throws \Illuminate\Auth\AuthenticationException
         * @static 
         */ 
        public static function logoutOtherDevices($password, $attribute = 'password')
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->logoutOtherDevices($password, $attribute);
        }
                    /**
         * Register an authentication attempt event listener.
         *
         * @param mixed $callback
         * @return void 
         * @static 
         */ 
        public static function attempting($callback)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        $instance->attempting($callback);
        }
                    /**
         * Get the last user we attempted to authenticate.
         *
         * @return \App\Models\User 
         * @static 
         */ 
        public static function getLastAttempted()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getLastAttempted();
        }
                    /**
         * Get a unique identifier for the auth session value.
         *
         * @return string 
         * @static 
         */ 
        public static function getName()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getName();
        }
                    /**
         * Get the name of the cookie used to store the "recaller".
         *
         * @return string 
         * @static 
         */ 
        public static function getRecallerName()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getRecallerName();
        }
                    /**
         * Determine if the user was authenticated via "remember me" cookie.
         *
         * @return bool 
         * @static 
         */ 
        public static function viaRemember()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->viaRemember();
        }
                    /**
         * Set the number of minutes the remember me cookie should be valid for.
         *
         * @param int $minutes
         * @return \Illuminate\Auth\SessionGuard 
         * @static 
         */ 
        public static function setRememberDuration($minutes)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->setRememberDuration($minutes);
        }
                    /**
         * Get the cookie creator instance used by the guard.
         *
         * @return \Illuminate\Contracts\Cookie\QueueingFactory 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function getCookieJar()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getCookieJar();
        }
                    /**
         * Set the cookie creator instance used by the guard.
         *
         * @param \Illuminate\Contracts\Cookie\QueueingFactory $cookie
         * @return void 
         * @static 
         */ 
        public static function setCookieJar($cookie)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        $instance->setCookieJar($cookie);
        }
                    /**
         * Get the event dispatcher instance.
         *
         * @return \Illuminate\Contracts\Events\Dispatcher 
         * @static 
         */ 
        public static function getDispatcher()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getDispatcher();
        }
                    /**
         * Set the event dispatcher instance.
         *
         * @param \Illuminate\Contracts\Events\Dispatcher $events
         * @return void 
         * @static 
         */ 
        public static function setDispatcher($events)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        $instance->setDispatcher($events);
        }
                    /**
         * Get the session store used by the guard.
         *
         * @return \Illuminate\Contracts\Session\Session 
         * @static 
         */ 
        public static function getSession()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getSession();
        }
                    /**
         * Return the currently cached user.
         *
         * @return \App\Models\User|null 
         * @static 
         */ 
        public static function getUser()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getUser();
        }
                    /**
         * Set the current user.
         *
         * @param \Illuminate\Contracts\Auth\Authenticatable $user
         * @return \Illuminate\Auth\SessionGuard 
         * @static 
         */ 
        public static function setUser($user)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->setUser($user);
        }
                    /**
         * Get the current request instance.
         *
         * @return \Symfony\Component\HttpFoundation\Request 
         * @static 
         */ 
        public static function getRequest()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getRequest();
        }
                    /**
         * Set the current request instance.
         *
         * @param \Symfony\Component\HttpFoundation\Request $request
         * @return \Illuminate\Auth\SessionGuard 
         * @static 
         */ 
        public static function setRequest($request)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->setRequest($request);
        }
                    /**
         * Get the timebox instance used by the guard.
         *
         * @return \Illuminate\Support\Timebox 
         * @static 
         */ 
        public static function getTimebox()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getTimebox();
        }
                    /**
         * Determine if the current user is authenticated. If not, throw an exception.
         *
         * @return \App\Models\User 
         * @throws \Illuminate\Auth\AuthenticationException
         * @static 
         */ 
        public static function authenticate()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->authenticate();
        }
                    /**
         * Determine if the guard has a user instance.
         *
         * @return bool 
         * @static 
         */ 
        public static function hasUser()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->hasUser();
        }
                    /**
         * Determine if the current user is authenticated.
         *
         * @return bool 
         * @static 
         */ 
        public static function check()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->check();
        }
                    /**
         * Determine if the current user is a guest.
         *
         * @return bool 
         * @static 
         */ 
        public static function guest()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->guest();
        }
                    /**
         * Forget the current user.
         *
         * @return \Illuminate\Auth\SessionGuard 
         * @static 
         */ 
        public static function forgetUser()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->forgetUser();
        }
                    /**
         * Get the user provider used by the guard.
         *
         * @return \Illuminate\Contracts\Auth\UserProvider 
         * @static 
         */ 
        public static function getProvider()
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        return $instance->getProvider();
        }
                    /**
         * Set the user provider used by the guard.
         *
         * @param \Illuminate\Contracts\Auth\UserProvider $provider
         * @return void 
         * @static 
         */ 
        public static function setProvider($provider)
        {
                        /** @var \Illuminate\Auth\SessionGuard $instance */
                        $instance->setProvider($provider);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Auth\SessionGuard::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Auth\SessionGuard::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Auth\SessionGuard::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Auth\SessionGuard::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\View\Compilers\BladeCompiler
     */ 
        class Blade {
                    /**
         * Returns a regex pattern to match an HTML tag and its contents.
         *
         * @static 
         */ 
        public static function regexForTag($tag)
        {
                        return \ProtoneMedia\Splade\CustomBladeCompiler::regexForTag($tag);
        }
                    /**
         * Compile the view at the given path.
         *
         * @param string|null $path
         * @return void 
         * @static 
         */ 
        public static function compile($path = null)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->compile($path);
        }
                    /**
         * Get the path currently being compiled.
         *
         * @return string 
         * @static 
         */ 
        public static function getPath()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getPath();
        }
                    /**
         * Set the path currently being compiled.
         *
         * @param string $path
         * @return void 
         * @static 
         */ 
        public static function setPath($path)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->setPath($path);
        }
                    /**
         * Compile the given Blade template contents.
         *
         * @param string $value
         * @return string 
         * @static 
         */ 
        public static function compileString($value)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->compileString($value);
        }
                    /**
         * Evaluate and render a Blade string to HTML.
         *
         * @param string $string
         * @param array $data
         * @param bool $deleteCachedView
         * @return string 
         * @static 
         */ 
        public static function render($string, $data = [], $deleteCachedView = false)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        return \ProtoneMedia\Splade\CustomBladeCompiler::render($string, $data, $deleteCachedView);
        }
                    /**
         * Render a component instance to HTML.
         *
         * @param \Illuminate\View\Component $component
         * @return string 
         * @static 
         */ 
        public static function renderComponent($component)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        return \ProtoneMedia\Splade\CustomBladeCompiler::renderComponent($component);
        }
                    /**
         * Strip the parentheses from the given expression.
         *
         * @param string $expression
         * @return string 
         * @static 
         */ 
        public static function stripParentheses($expression)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->stripParentheses($expression);
        }
                    /**
         * Register a custom Blade compiler.
         *
         * @param callable $compiler
         * @return void 
         * @static 
         */ 
        public static function extend($compiler)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->extend($compiler);
        }
                    /**
         * Get the extensions used by the compiler.
         *
         * @return array 
         * @static 
         */ 
        public static function getExtensions()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getExtensions();
        }
                    /**
         * Register an "if" statement directive.
         *
         * @param string $name
         * @param callable $callback
         * @return void 
         * @static 
         */ 
        public static function if($name, $callback)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->if($name, $callback);
        }
                    /**
         * Check the result of a condition.
         *
         * @param string $name
         * @param mixed $parameters
         * @return bool 
         * @static 
         */ 
        public static function check($name, ...$parameters)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->check($name, ...$parameters);
        }
                    /**
         * Register a class-based component alias directive.
         *
         * @param string $class
         * @param string|null $alias
         * @param string $prefix
         * @return void 
         * @static 
         */ 
        public static function component($class, $alias = null, $prefix = '')
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->component($class, $alias, $prefix);
        }
                    /**
         * Register an array of class-based components.
         *
         * @param array $components
         * @param string $prefix
         * @return void 
         * @static 
         */ 
        public static function components($components, $prefix = '')
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->components($components, $prefix);
        }
                    /**
         * Get the registered class component aliases.
         *
         * @return array 
         * @static 
         */ 
        public static function getClassComponentAliases()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getClassComponentAliases();
        }
                    /**
         * Register a new anonymous component path.
         *
         * @param string $path
         * @param string|null $prefix
         * @return void 
         * @static 
         */ 
        public static function anonymousComponentPath($path, $prefix = null)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->anonymousComponentPath($path, $prefix);
        }
                    /**
         * Register an anonymous component namespace.
         *
         * @param string $directory
         * @param string|null $prefix
         * @return void 
         * @static 
         */ 
        public static function anonymousComponentNamespace($directory, $prefix = null)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->anonymousComponentNamespace($directory, $prefix);
        }
                    /**
         * Register a class-based component namespace.
         *
         * @param string $namespace
         * @param string $prefix
         * @return void 
         * @static 
         */ 
        public static function componentNamespace($namespace, $prefix)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->componentNamespace($namespace, $prefix);
        }
                    /**
         * Get the registered anonymous component paths.
         *
         * @return array 
         * @static 
         */ 
        public static function getAnonymousComponentPaths()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getAnonymousComponentPaths();
        }
                    /**
         * Get the registered anonymous component namespaces.
         *
         * @return array 
         * @static 
         */ 
        public static function getAnonymousComponentNamespaces()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getAnonymousComponentNamespaces();
        }
                    /**
         * Get the registered class component namespaces.
         *
         * @return array 
         * @static 
         */ 
        public static function getClassComponentNamespaces()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getClassComponentNamespaces();
        }
                    /**
         * Register a component alias directive.
         *
         * @param string $path
         * @param string|null $alias
         * @return void 
         * @static 
         */ 
        public static function aliasComponent($path, $alias = null)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->aliasComponent($path, $alias);
        }
                    /**
         * Register an include alias directive.
         *
         * @param string $path
         * @param string|null $alias
         * @return void 
         * @static 
         */ 
        public static function include($path, $alias = null)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->include($path, $alias);
        }
                    /**
         * Register an include alias directive.
         *
         * @param string $path
         * @param string|null $alias
         * @return void 
         * @static 
         */ 
        public static function aliasInclude($path, $alias = null)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->aliasInclude($path, $alias);
        }
                    /**
         * Register a handler for custom directives.
         *
         * @param string $name
         * @param callable $handler
         * @return void 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function directive($name, $handler)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->directive($name, $handler);
        }
                    /**
         * Get the list of custom directives.
         *
         * @return array 
         * @static 
         */ 
        public static function getCustomDirectives()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getCustomDirectives();
        }
                    /**
         * Register a new precompiler.
         *
         * @param callable $precompiler
         * @return void 
         * @static 
         */ 
        public static function precompiler($precompiler)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->precompiler($precompiler);
        }
                    /**
         * Set the echo format to be used by the compiler.
         *
         * @param string $format
         * @return void 
         * @static 
         */ 
        public static function setEchoFormat($format)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->setEchoFormat($format);
        }
                    /**
         * Set the "echo" format to double encode entities.
         *
         * @return void 
         * @static 
         */ 
        public static function withDoubleEncoding()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->withDoubleEncoding();
        }
                    /**
         * Set the "echo" format to not double encode entities.
         *
         * @return void 
         * @static 
         */ 
        public static function withoutDoubleEncoding()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->withoutDoubleEncoding();
        }
                    /**
         * Indicate that component tags should not be compiled.
         *
         * @return void 
         * @static 
         */ 
        public static function withoutComponentTags()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->withoutComponentTags();
        }
                    /**
         * Get the path to the compiled version of a view.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function getCompiledPath($path)
        {            //Method inherited from \Illuminate\View\Compilers\Compiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->getCompiledPath($path);
        }
                    /**
         * Determine if the view at the given path is expired.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function isExpired($path)
        {            //Method inherited from \Illuminate\View\Compilers\Compiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->isExpired($path);
        }
                    /**
         * Get a new component hash for a component name.
         *
         * @param string $component
         * @return string 
         * @static 
         */ 
        public static function newComponentHash($component)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        return \ProtoneMedia\Splade\CustomBladeCompiler::newComponentHash($component);
        }
                    /**
         * Compile a class component opening.
         *
         * @param string $component
         * @param string $alias
         * @param string $data
         * @param string $hash
         * @return string 
         * @static 
         */ 
        public static function compileClassComponentOpening($component, $alias, $data, $hash)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        return \ProtoneMedia\Splade\CustomBladeCompiler::compileClassComponentOpening($component, $alias, $data, $hash);
        }
                    /**
         * Compile the end-component statements into valid PHP.
         *
         * @return string 
         * @static 
         */ 
        public static function compileEndComponentClass()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->compileEndComponentClass();
        }
                    /**
         * Sanitize the given component attribute value.
         *
         * @param mixed $value
         * @return mixed 
         * @static 
         */ 
        public static function sanitizeComponentAttribute($value)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        return \ProtoneMedia\Splade\CustomBladeCompiler::sanitizeComponentAttribute($value);
        }
                    /**
         * Compile an end-once block into valid PHP.
         *
         * @return string 
         * @static 
         */ 
        public static function compileEndOnce()
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->compileEndOnce();
        }
                    /**
         * Add a handler to be executed before echoing a given class.
         *
         * @param string|callable $class
         * @param callable|null $handler
         * @return void 
         * @static 
         */ 
        public static function stringable($class, $handler = null)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        $instance->stringable($class, $handler);
        }
                    /**
         * Compile Blade echos into valid PHP.
         *
         * @param string $value
         * @return string 
         * @static 
         */ 
        public static function compileEchos($value)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->compileEchos($value);
        }
                    /**
         * Apply the echo handler for the value if it exists.
         *
         * @param string $value
         * @return string 
         * @static 
         */ 
        public static function applyEchoHandler($value)
        {            //Method inherited from \Illuminate\View\Compilers\BladeCompiler         
                        /** @var \ProtoneMedia\Splade\CustomBladeCompiler $instance */
                        return $instance->applyEchoHandler($value);
        }
         
    }
            /**
     * 
     *
     * @method static mixed auth(\Illuminate\Http\Request $request)
     * @method static mixed validAuthenticationResponse(\Illuminate\Http\Request $request, mixed $result)
     * @method static void broadcast(array $channels, string $event, array $payload = [])
     * @method static array|null resolveAuthenticatedUser(\Illuminate\Http\Request $request)
     * @method static void resolveAuthenticatedUserUsing(\Closure $callback)
     * @method static \Illuminate\Broadcasting\Broadcasters\Broadcaster channel(\Illuminate\Contracts\Broadcasting\HasBroadcastChannel|string $channel, callable|string $callback, array $options = [])
     * @see \Illuminate\Broadcasting\BroadcastManager
     * @see \Illuminate\Broadcasting\Broadcasters\Broadcaster
     */ 
        class Broadcast {
                    /**
         * Register the routes for handling broadcast channel authentication and sockets.
         *
         * @param array|null $attributes
         * @return void 
         * @static 
         */ 
        public static function routes($attributes = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        $instance->routes($attributes);
        }
                    /**
         * Register the routes for handling broadcast user authentication.
         *
         * @param array|null $attributes
         * @return void 
         * @static 
         */ 
        public static function userRoutes($attributes = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        $instance->userRoutes($attributes);
        }
                    /**
         * Register the routes for handling broadcast authentication and sockets.
         * 
         * Alias of "routes" method.
         *
         * @param array|null $attributes
         * @return void 
         * @static 
         */ 
        public static function channelRoutes($attributes = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        $instance->channelRoutes($attributes);
        }
                    /**
         * Get the socket ID for the given request.
         *
         * @param \Illuminate\Http\Request|null $request
         * @return string|null 
         * @static 
         */ 
        public static function socket($request = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->socket($request);
        }
                    /**
         * Begin broadcasting an event.
         *
         * @param mixed|null $event
         * @return \Illuminate\Broadcasting\PendingBroadcast 
         * @static 
         */ 
        public static function event($event = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->event($event);
        }
                    /**
         * Queue the given event for broadcast.
         *
         * @param mixed $event
         * @return void 
         * @static 
         */ 
        public static function queue($event)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        $instance->queue($event);
        }
                    /**
         * Get a driver instance.
         *
         * @param string|null $driver
         * @return mixed 
         * @static 
         */ 
        public static function connection($driver = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->connection($driver);
        }
                    /**
         * Get a driver instance.
         *
         * @param string|null $name
         * @return mixed 
         * @static 
         */ 
        public static function driver($name = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->driver($name);
        }
                    /**
         * Get a Pusher instance for the given configuration.
         *
         * @param array $config
         * @return \Pusher\Pusher 
         * @static 
         */ 
        public static function pusher($config)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->pusher($config);
        }
                    /**
         * Get an Ably instance for the given configuration.
         *
         * @param array $config
         * @return \Ably\AblyRest 
         * @static 
         */ 
        public static function ably($config)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->ably($config);
        }
                    /**
         * Get the default driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the default driver name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        $instance->setDefaultDriver($name);
        }
                    /**
         * Disconnect the given disk and remove from local cache.
         *
         * @param string|null $name
         * @return void 
         * @static 
         */ 
        public static function purge($name = null)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        $instance->purge($name);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Broadcasting\BroadcastManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Get the application instance used by the manager.
         *
         * @return \Illuminate\Contracts\Foundation\Application 
         * @static 
         */ 
        public static function getApplication()
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->getApplication();
        }
                    /**
         * Set the application instance used by the manager.
         *
         * @param \Illuminate\Contracts\Foundation\Application $app
         * @return \Illuminate\Broadcasting\BroadcastManager 
         * @static 
         */ 
        public static function setApplication($app)
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->setApplication($app);
        }
                    /**
         * Forget all of the resolved driver instances.
         *
         * @return \Illuminate\Broadcasting\BroadcastManager 
         * @static 
         */ 
        public static function forgetDrivers()
        {
                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                        return $instance->forgetDrivers();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Bus\Dispatcher
     * @see \Illuminate\Support\Testing\Fakes\BusFake
     */ 
        class Bus {
                    /**
         * Dispatch a command to its appropriate handler.
         *
         * @param mixed $command
         * @return mixed 
         * @static 
         */ 
        public static function dispatch($command)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->dispatch($command);
        }
                    /**
         * Dispatch a command to its appropriate handler in the current process.
         * 
         * Queueable jobs will be dispatched to the "sync" queue.
         *
         * @param mixed $command
         * @param mixed $handler
         * @return mixed 
         * @static 
         */ 
        public static function dispatchSync($command, $handler = null)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->dispatchSync($command, $handler);
        }
                    /**
         * Dispatch a command to its appropriate handler in the current process without using the synchronous queue.
         *
         * @param mixed $command
         * @param mixed $handler
         * @return mixed 
         * @static 
         */ 
        public static function dispatchNow($command, $handler = null)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->dispatchNow($command, $handler);
        }
                    /**
         * Attempt to find the batch with the given ID.
         *
         * @param string $batchId
         * @return \Illuminate\Bus\Batch|null 
         * @static 
         */ 
        public static function findBatch($batchId)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->findBatch($batchId);
        }
                    /**
         * Create a new batch of queueable jobs.
         *
         * @param \Illuminate\Support\Collection|array|mixed $jobs
         * @return \Illuminate\Bus\PendingBatch 
         * @static 
         */ 
        public static function batch($jobs)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->batch($jobs);
        }
                    /**
         * Create a new chain of queueable jobs.
         *
         * @param \Illuminate\Support\Collection|array $jobs
         * @return \Illuminate\Foundation\Bus\PendingChain 
         * @static 
         */ 
        public static function chain($jobs)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->chain($jobs);
        }
                    /**
         * Determine if the given command has a handler.
         *
         * @param mixed $command
         * @return bool 
         * @static 
         */ 
        public static function hasCommandHandler($command)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->hasCommandHandler($command);
        }
                    /**
         * Retrieve the handler for a command.
         *
         * @param mixed $command
         * @return bool|mixed 
         * @static 
         */ 
        public static function getCommandHandler($command)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->getCommandHandler($command);
        }
                    /**
         * Dispatch a command to its appropriate handler behind a queue.
         *
         * @param mixed $command
         * @return mixed 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function dispatchToQueue($command)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->dispatchToQueue($command);
        }
                    /**
         * Dispatch a command to its appropriate handler after the current process.
         *
         * @param mixed $command
         * @param mixed $handler
         * @return void 
         * @static 
         */ 
        public static function dispatchAfterResponse($command, $handler = null)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        $instance->dispatchAfterResponse($command, $handler);
        }
                    /**
         * Set the pipes through which commands should be piped before dispatching.
         *
         * @param array $pipes
         * @return \Illuminate\Bus\Dispatcher 
         * @static 
         */ 
        public static function pipeThrough($pipes)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->pipeThrough($pipes);
        }
                    /**
         * Map a command to a handler.
         *
         * @param array $map
         * @return \Illuminate\Bus\Dispatcher 
         * @static 
         */ 
        public static function map($map)
        {
                        /** @var \Illuminate\Bus\Dispatcher $instance */
                        return $instance->map($map);
        }
                    /**
         * Specify the jobs that should be dispatched instead of faked.
         *
         * @param array|string $jobsToDispatch
         * @return void 
         * @static 
         */ 
        public static function except($jobsToDispatch)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->except($jobsToDispatch);
        }
                    /**
         * Assert if a job was dispatched based on a truth-test callback.
         *
         * @param string|\Closure $command
         * @param callable|int|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertDispatched($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertDispatched($command, $callback);
        }
                    /**
         * Assert if a job was pushed a number of times.
         *
         * @param string|\Closure $command
         * @param int $times
         * @return void 
         * @static 
         */ 
        public static function assertDispatchedTimes($command, $times = 1)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertDispatchedTimes($command, $times);
        }
                    /**
         * Determine if a job was dispatched based on a truth-test callback.
         *
         * @param string|\Closure $command
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotDispatched($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertNotDispatched($command, $callback);
        }
                    /**
         * Assert that no jobs were dispatched.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingDispatched()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertNothingDispatched();
        }
                    /**
         * Assert if a job was explicitly dispatched synchronously based on a truth-test callback.
         *
         * @param string|\Closure $command
         * @param callable|int|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertDispatchedSync($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertDispatchedSync($command, $callback);
        }
                    /**
         * Assert if a job was pushed synchronously a number of times.
         *
         * @param string|\Closure $command
         * @param int $times
         * @return void 
         * @static 
         */ 
        public static function assertDispatchedSyncTimes($command, $times = 1)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertDispatchedSyncTimes($command, $times);
        }
                    /**
         * Determine if a job was dispatched based on a truth-test callback.
         *
         * @param string|\Closure $command
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotDispatchedSync($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertNotDispatchedSync($command, $callback);
        }
                    /**
         * Assert if a job was dispatched after the response was sent based on a truth-test callback.
         *
         * @param string|\Closure $command
         * @param callable|int|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertDispatchedAfterResponse($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertDispatchedAfterResponse($command, $callback);
        }
                    /**
         * Assert if a job was pushed after the response was sent a number of times.
         *
         * @param string|\Closure $command
         * @param int $times
         * @return void 
         * @static 
         */ 
        public static function assertDispatchedAfterResponseTimes($command, $times = 1)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertDispatchedAfterResponseTimes($command, $times);
        }
                    /**
         * Determine if a job was dispatched based on a truth-test callback.
         *
         * @param string|\Closure $command
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotDispatchedAfterResponse($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertNotDispatchedAfterResponse($command, $callback);
        }
                    /**
         * Assert if a chain of jobs was dispatched.
         *
         * @param array $expectedChain
         * @return void 
         * @static 
         */ 
        public static function assertChained($expectedChain)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertChained($expectedChain);
        }
                    /**
         * Assert if a job was dispatched with an empty chain based on a truth-test callback.
         *
         * @param string|\Closure $command
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertDispatchedWithoutChain($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertDispatchedWithoutChain($command, $callback);
        }
                    /**
         * Assert if a batch was dispatched based on a truth-test callback.
         *
         * @param callable $callback
         * @return void 
         * @static 
         */ 
        public static function assertBatched($callback)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertBatched($callback);
        }
                    /**
         * Assert the number of batches that have been dispatched.
         *
         * @param int $count
         * @return void 
         * @static 
         */ 
        public static function assertBatchCount($count)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertBatchCount($count);
        }
                    /**
         * Assert that no batched jobs were dispatched.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingBatched()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        $instance->assertNothingBatched();
        }
                    /**
         * Get all of the jobs matching a truth-test callback.
         *
         * @param string $command
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function dispatched($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->dispatched($command, $callback);
        }
                    /**
         * Get all of the jobs dispatched synchronously matching a truth-test callback.
         *
         * @param string $command
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function dispatchedSync($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->dispatchedSync($command, $callback);
        }
                    /**
         * Get all of the jobs dispatched after the response was sent matching a truth-test callback.
         *
         * @param string $command
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function dispatchedAfterResponse($command, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->dispatchedAfterResponse($command, $callback);
        }
                    /**
         * Get all of the pending batches matching a truth-test callback.
         *
         * @param callable $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function batched($callback)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->batched($callback);
        }
                    /**
         * Determine if there are any stored commands for a given class.
         *
         * @param string $command
         * @return bool 
         * @static 
         */ 
        public static function hasDispatched($command)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->hasDispatched($command);
        }
                    /**
         * Determine if there are any stored commands for a given class.
         *
         * @param string $command
         * @return bool 
         * @static 
         */ 
        public static function hasDispatchedSync($command)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->hasDispatchedSync($command);
        }
                    /**
         * Determine if there are any stored commands for a given class.
         *
         * @param string $command
         * @return bool 
         * @static 
         */ 
        public static function hasDispatchedAfterResponse($command)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->hasDispatchedAfterResponse($command);
        }
                    /**
         * Dispatch an empty job batch for testing.
         *
         * @param string $name
         * @return \Illuminate\Bus\Batch 
         * @static 
         */ 
        public static function dispatchFakeBatch($name = '')
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->dispatchFakeBatch($name);
        }
                    /**
         * Record the fake pending batch dispatch.
         *
         * @param \Illuminate\Bus\PendingBatch $pendingBatch
         * @return \Illuminate\Bus\Batch 
         * @static 
         */ 
        public static function recordPendingBatch($pendingBatch)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                        return $instance->recordPendingBatch($pendingBatch);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Cache\CacheManager
     * @mixin \Illuminate\Cache\Repository
     */ 
        class Cache {
                    /**
         * Get a cache store instance by name, wrapped in a repository.
         *
         * @param string|null $name
         * @return \Illuminate\Contracts\Cache\Repository 
         * @static 
         */ 
        public static function store($name = null)
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        return $instance->store($name);
        }
                    /**
         * Get a cache driver instance.
         *
         * @param string|null $driver
         * @return \Illuminate\Contracts\Cache\Repository 
         * @static 
         */ 
        public static function driver($driver = null)
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        return $instance->driver($driver);
        }
                    /**
         * Create a new cache repository with the given implementation.
         *
         * @param \Illuminate\Contracts\Cache\Store $store
         * @return \Illuminate\Cache\Repository 
         * @static 
         */ 
        public static function repository($store)
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        return $instance->repository($store);
        }
                    /**
         * Re-set the event dispatcher on all resolved cache repositories.
         *
         * @return void 
         * @static 
         */ 
        public static function refreshEventDispatcher()
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        $instance->refreshEventDispatcher();
        }
                    /**
         * Get the default cache driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the default cache driver name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        $instance->setDefaultDriver($name);
        }
                    /**
         * Unset the given driver instances.
         *
         * @param array|string|null $name
         * @return \Illuminate\Cache\CacheManager 
         * @static 
         */ 
        public static function forgetDriver($name = null)
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        return $instance->forgetDriver($name);
        }
                    /**
         * Disconnect the given driver and remove from local cache.
         *
         * @param string|null $name
         * @return void 
         * @static 
         */ 
        public static function purge($name = null)
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        $instance->purge($name);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Cache\CacheManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {
                        /** @var \Illuminate\Cache\CacheManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Determine if an item exists in the cache.
         *
         * @param array|string $key
         * @return bool 
         * @static 
         */ 
        public static function has($key)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->has($key);
        }
                    /**
         * Determine if an item doesn't exist in the cache.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function missing($key)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->missing($key);
        }
                    /**
         * Retrieve an item from the cache by key.
         *
         * @template TCacheValue
         * @param array|string $key
         * @param \Illuminate\Cache\TCacheValue|\Illuminate\Cache\(\Closure():  TCacheValue)  $default
         * @return \Illuminate\Cache\(TCacheValue is null ? mixed : TCacheValue)
         * @static 
         */ 
        public static function get($key, $default = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->get($key, $default);
        }
                    /**
         * Retrieve multiple items from the cache by key.
         * 
         * Items not found in the cache will have a null value.
         *
         * @param array $keys
         * @return array 
         * @static 
         */ 
        public static function many($keys)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->many($keys);
        }
                    /**
         * Obtains multiple cache items by their unique keys.
         *
         * @return \Illuminate\Cache\iterable 
         * @param \Psr\SimpleCache\iterable $keys A list of keys that can obtained in a single operation.
         * @param mixed $default Default value to return for keys that do not exist.
         * @return \Psr\SimpleCache\iterable A list of key => value pairs. Cache keys that do not exist or are stale will have $default as value.
         * @throws \Psr\SimpleCache\InvalidArgumentException
         *   MUST be thrown if $keys is neither an array nor a Traversable,
         *   or if any of the $keys are not a legal value.
         * @static 
         */ 
        public static function getMultiple($keys, $default = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->getMultiple($keys, $default);
        }
                    /**
         * Retrieve an item from the cache and delete it.
         *
         * @template TCacheValue
         * @param array|string $key
         * @param \Illuminate\Cache\TCacheValue|\Illuminate\Cache\(\Closure():  TCacheValue)  $default
         * @return \Illuminate\Cache\(TCacheValue is null ? mixed : TCacheValue)
         * @static 
         */ 
        public static function pull($key, $default = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->pull($key, $default);
        }
                    /**
         * Store an item in the cache.
         *
         * @param array|string $key
         * @param mixed $value
         * @param \DateTimeInterface|\DateInterval|int|null $ttl
         * @return bool 
         * @static 
         */ 
        public static function put($key, $value, $ttl = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->put($key, $value, $ttl);
        }
                    /**
         * Persists data in the cache, uniquely referenced by a key with an optional expiration TTL time.
         *
         * @return bool 
         * @param string $key The key of the item to store.
         * @param mixed $value The value of the item to store, must be serializable.
         * @param null|int|\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and
         *                                      the driver supports TTL then the library may set a default value
         *                                      for it or let the driver take care of that.
         * @return bool True on success and false on failure.
         * @throws \Psr\SimpleCache\InvalidArgumentException
         *   MUST be thrown if the $key string is not a legal value.
         * @static 
         */ 
        public static function set($key, $value, $ttl = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->set($key, $value, $ttl);
        }
                    /**
         * Store multiple items in the cache for a given number of seconds.
         *
         * @param array $values
         * @param \DateTimeInterface|\DateInterval|int|null $ttl
         * @return bool 
         * @static 
         */ 
        public static function putMany($values, $ttl = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->putMany($values, $ttl);
        }
                    /**
         * Persists a set of key => value pairs in the cache, with an optional TTL.
         *
         * @return bool 
         * @param \Psr\SimpleCache\iterable $values A list of key => value pairs for a multiple-set operation.
         * @param null|int|\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and
         *                                       the driver supports TTL then the library may set a default value
         *                                       for it or let the driver take care of that.
         * @return bool True on success and false on failure.
         * @throws \Psr\SimpleCache\InvalidArgumentException
         *   MUST be thrown if $values is neither an array nor a Traversable,
         *   or if any of the $values are not a legal value.
         * @static 
         */ 
        public static function setMultiple($values, $ttl = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->setMultiple($values, $ttl);
        }
                    /**
         * Store an item in the cache if the key does not exist.
         *
         * @param string $key
         * @param mixed $value
         * @param \DateTimeInterface|\DateInterval|int|null $ttl
         * @return bool 
         * @static 
         */ 
        public static function add($key, $value, $ttl = null)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->add($key, $value, $ttl);
        }
                    /**
         * Increment the value of an item in the cache.
         *
         * @param string $key
         * @param mixed $value
         * @return int|bool 
         * @static 
         */ 
        public static function increment($key, $value = 1)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->increment($key, $value);
        }
                    /**
         * Decrement the value of an item in the cache.
         *
         * @param string $key
         * @param mixed $value
         * @return int|bool 
         * @static 
         */ 
        public static function decrement($key, $value = 1)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->decrement($key, $value);
        }
                    /**
         * Store an item in the cache indefinitely.
         *
         * @param string $key
         * @param mixed $value
         * @return bool 
         * @static 
         */ 
        public static function forever($key, $value)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->forever($key, $value);
        }
                    /**
         * Get an item from the cache, or execute the given Closure and store the result.
         *
         * @template TCacheValue
         * @param string $key
         * @param \Closure|\DateTimeInterface|\DateInterval|int|null $ttl
         * @param \Closure():  TCacheValue  $callback
         * @return \Illuminate\Cache\TCacheValue 
         * @static 
         */ 
        public static function remember($key, $ttl, $callback)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->remember($key, $ttl, $callback);
        }
                    /**
         * Get an item from the cache, or execute the given Closure and store the result forever.
         *
         * @template TCacheValue
         * @param string $key
         * @param \Closure():  TCacheValue  $callback
         * @return \Illuminate\Cache\TCacheValue 
         * @static 
         */ 
        public static function sear($key, $callback)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->sear($key, $callback);
        }
                    /**
         * Get an item from the cache, or execute the given Closure and store the result forever.
         *
         * @template TCacheValue
         * @param string $key
         * @param \Closure():  TCacheValue  $callback
         * @return \Illuminate\Cache\TCacheValue 
         * @static 
         */ 
        public static function rememberForever($key, $callback)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->rememberForever($key, $callback);
        }
                    /**
         * Remove an item from the cache.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function forget($key)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->forget($key);
        }
                    /**
         * Delete an item from the cache by its unique key.
         *
         * @return bool 
         * @param string $key The unique cache key of the item to delete.
         * @return bool True if the item was successfully removed. False if there was an error.
         * @throws \Psr\SimpleCache\InvalidArgumentException
         *   MUST be thrown if the $key string is not a legal value.
         * @static 
         */ 
        public static function delete($key)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->delete($key);
        }
                    /**
         * Deletes multiple cache items in a single operation.
         *
         * @return bool 
         * @param \Psr\SimpleCache\iterable $keys A list of string-based keys to be deleted.
         * @return bool True if the items were successfully removed. False if there was an error.
         * @throws \Psr\SimpleCache\InvalidArgumentException
         *   MUST be thrown if $keys is neither an array nor a Traversable,
         *   or if any of the $keys are not a legal value.
         * @static 
         */ 
        public static function deleteMultiple($keys)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->deleteMultiple($keys);
        }
                    /**
         * Wipes clean the entire cache's keys.
         *
         * @return bool 
         * @return bool True on success and false on failure.
         * @static 
         */ 
        public static function clear()
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->clear();
        }
                    /**
         * Begin executing a new tags operation if the store supports it.
         *
         * @param array|mixed $names
         * @return \Illuminate\Cache\TaggedCache 
         * @throws \BadMethodCallException
         * @static 
         */ 
        public static function tags($names)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->tags($names);
        }
                    /**
         * Determine if the current store supports tags.
         *
         * @return bool 
         * @static 
         */ 
        public static function supportsTags()
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->supportsTags();
        }
                    /**
         * Get the default cache time.
         *
         * @return int|null 
         * @static 
         */ 
        public static function getDefaultCacheTime()
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->getDefaultCacheTime();
        }
                    /**
         * Set the default cache time in seconds.
         *
         * @param int|null $seconds
         * @return \Illuminate\Cache\Repository 
         * @static 
         */ 
        public static function setDefaultCacheTime($seconds)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->setDefaultCacheTime($seconds);
        }
                    /**
         * Get the cache store implementation.
         *
         * @return \Illuminate\Contracts\Cache\Store 
         * @static 
         */ 
        public static function getStore()
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->getStore();
        }
                    /**
         * Get the event dispatcher instance.
         *
         * @return \Illuminate\Contracts\Events\Dispatcher 
         * @static 
         */ 
        public static function getEventDispatcher()
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->getEventDispatcher();
        }
                    /**
         * Set the event dispatcher instance.
         *
         * @param \Illuminate\Contracts\Events\Dispatcher $events
         * @return void 
         * @static 
         */ 
        public static function setEventDispatcher($events)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        $instance->setEventDispatcher($events);
        }
                    /**
         * Determine if a cached value exists.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function offsetExists($key)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->offsetExists($key);
        }
                    /**
         * Retrieve an item from the cache by key.
         *
         * @param string $key
         * @return mixed 
         * @static 
         */ 
        public static function offsetGet($key)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->offsetGet($key);
        }
                    /**
         * Store an item in the cache for the default time.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function offsetSet($key, $value)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        $instance->offsetSet($key, $value);
        }
                    /**
         * Remove an item from the cache.
         *
         * @param string $key
         * @return void 
         * @static 
         */ 
        public static function offsetUnset($key)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        $instance->offsetUnset($key);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Cache\Repository::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Cache\Repository::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Cache\Repository::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Cache\Repository::flushMacros();
        }
                    /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param array $parameters
         * @return mixed 
         * @throws \BadMethodCallException
         * @static 
         */ 
        public static function macroCall($method, $parameters)
        {
                        /** @var \Illuminate\Cache\Repository $instance */
                        return $instance->macroCall($method, $parameters);
        }
                    /**
         * Get a lock instance.
         *
         * @param string $name
         * @param int $seconds
         * @param string|null $owner
         * @return \Illuminate\Contracts\Cache\Lock 
         * @static 
         */ 
        public static function lock($name, $seconds = 0, $owner = null)
        {
                        /** @var \Illuminate\Cache\FileStore $instance */
                        return $instance->lock($name, $seconds, $owner);
        }
                    /**
         * Restore a lock instance using the owner identifier.
         *
         * @param string $name
         * @param string $owner
         * @return \Illuminate\Contracts\Cache\Lock 
         * @static 
         */ 
        public static function restoreLock($name, $owner)
        {
                        /** @var \Illuminate\Cache\FileStore $instance */
                        return $instance->restoreLock($name, $owner);
        }
                    /**
         * Remove all items from the cache.
         *
         * @return bool 
         * @static 
         */ 
        public static function flush()
        {
                        /** @var \Illuminate\Cache\FileStore $instance */
                        return $instance->flush();
        }
                    /**
         * Get the Filesystem instance.
         *
         * @return \Illuminate\Filesystem\Filesystem 
         * @static 
         */ 
        public static function getFilesystem()
        {
                        /** @var \Illuminate\Cache\FileStore $instance */
                        return $instance->getFilesystem();
        }
                    /**
         * Get the working directory of the cache.
         *
         * @return string 
         * @static 
         */ 
        public static function getDirectory()
        {
                        /** @var \Illuminate\Cache\FileStore $instance */
                        return $instance->getDirectory();
        }
                    /**
         * Get the cache key prefix.
         *
         * @return string 
         * @static 
         */ 
        public static function getPrefix()
        {
                        /** @var \Illuminate\Cache\FileStore $instance */
                        return $instance->getPrefix();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Config\Repository
     */ 
        class Config {
                    /**
         * Determine if the given configuration value exists.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function has($key)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        return $instance->has($key);
        }
                    /**
         * Get the specified configuration value.
         *
         * @param array|string $key
         * @param mixed $default
         * @return mixed 
         * @static 
         */ 
        public static function get($key, $default = null)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        return $instance->get($key, $default);
        }
                    /**
         * Get many configuration values.
         *
         * @param array $keys
         * @return array 
         * @static 
         */ 
        public static function getMany($keys)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        return $instance->getMany($keys);
        }
                    /**
         * Set a given configuration value.
         *
         * @param array|string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function set($key, $value = null)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        $instance->set($key, $value);
        }
                    /**
         * Prepend a value onto an array configuration value.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function prepend($key, $value)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        $instance->prepend($key, $value);
        }
                    /**
         * Push a value onto an array configuration value.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function push($key, $value)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        $instance->push($key, $value);
        }
                    /**
         * Get all of the configuration items for the application.
         *
         * @return array 
         * @static 
         */ 
        public static function all()
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        return $instance->all();
        }
                    /**
         * Determine if the given configuration option exists.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function offsetExists($key)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        return $instance->offsetExists($key);
        }
                    /**
         * Get a configuration option.
         *
         * @param string $key
         * @return mixed 
         * @static 
         */ 
        public static function offsetGet($key)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        return $instance->offsetGet($key);
        }
                    /**
         * Set a configuration option.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function offsetSet($key, $value)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        $instance->offsetSet($key, $value);
        }
                    /**
         * Unset a configuration option.
         *
         * @param string $key
         * @return void 
         * @static 
         */ 
        public static function offsetUnset($key)
        {
                        /** @var \Illuminate\Config\Repository $instance */
                        $instance->offsetUnset($key);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Config\Repository::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Config\Repository::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Config\Repository::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Config\Repository::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Cookie\CookieJar
     */ 
        class Cookie {
                    /**
         * Create a new cookie instance.
         *
         * @param string $name
         * @param string $value
         * @param int $minutes
         * @param string|null $path
         * @param string|null $domain
         * @param bool|null $secure
         * @param bool $httpOnly
         * @param bool $raw
         * @param string|null $sameSite
         * @return \Symfony\Component\HttpFoundation\Cookie 
         * @static 
         */ 
        public static function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->make($name, $value, $minutes, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
        }
                    /**
         * Create a cookie that lasts "forever" (400 days).
         *
         * @param string $name
         * @param string $value
         * @param string|null $path
         * @param string|null $domain
         * @param bool|null $secure
         * @param bool $httpOnly
         * @param bool $raw
         * @param string|null $sameSite
         * @return \Symfony\Component\HttpFoundation\Cookie 
         * @static 
         */ 
        public static function forever($name, $value, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->forever($name, $value, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
        }
                    /**
         * Expire the given cookie.
         *
         * @param string $name
         * @param string|null $path
         * @param string|null $domain
         * @return \Symfony\Component\HttpFoundation\Cookie 
         * @static 
         */ 
        public static function forget($name, $path = null, $domain = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->forget($name, $path, $domain);
        }
                    /**
         * Determine if a cookie has been queued.
         *
         * @param string $key
         * @param string|null $path
         * @return bool 
         * @static 
         */ 
        public static function hasQueued($key, $path = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->hasQueued($key, $path);
        }
                    /**
         * Get a queued cookie instance.
         *
         * @param string $key
         * @param mixed $default
         * @param string|null $path
         * @return \Symfony\Component\HttpFoundation\Cookie|null 
         * @static 
         */ 
        public static function queued($key, $default = null, $path = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->queued($key, $default, $path);
        }
                    /**
         * Queue a cookie to send with the next response.
         *
         * @param mixed $parameters
         * @return void 
         * @static 
         */ 
        public static function queue(...$parameters)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        $instance->queue(...$parameters);
        }
                    /**
         * Queue a cookie to expire with the next response.
         *
         * @param string $name
         * @param string|null $path
         * @param string|null $domain
         * @return void 
         * @static 
         */ 
        public static function expire($name, $path = null, $domain = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        $instance->expire($name, $path, $domain);
        }
                    /**
         * Remove a cookie from the queue.
         *
         * @param string $name
         * @param string|null $path
         * @return void 
         * @static 
         */ 
        public static function unqueue($name, $path = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        $instance->unqueue($name, $path);
        }
                    /**
         * Set the default path and domain for the jar.
         *
         * @param string $path
         * @param string|null $domain
         * @param bool|null $secure
         * @param string|null $sameSite
         * @return \Illuminate\Cookie\CookieJar 
         * @static 
         */ 
        public static function setDefaultPathAndDomain($path, $domain, $secure = false, $sameSite = null)
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->setDefaultPathAndDomain($path, $domain, $secure, $sameSite);
        }
                    /**
         * Get the cookies which have been queued for the next request.
         *
         * @return \Symfony\Component\HttpFoundation\Cookie[] 
         * @static 
         */ 
        public static function getQueuedCookies()
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->getQueuedCookies();
        }
                    /**
         * Flush the cookies which have been queued for the next request.
         *
         * @return \Illuminate\Cookie\CookieJar 
         * @static 
         */ 
        public static function flushQueuedCookies()
        {
                        /** @var \Illuminate\Cookie\CookieJar $instance */
                        return $instance->flushQueuedCookies();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Cookie\CookieJar::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Cookie\CookieJar::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Cookie\CookieJar::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Cookie\CookieJar::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Encryption\Encrypter
     */ 
        class Crypt {
                    /**
         * Determine if the given key and cipher combination is valid.
         *
         * @param string $key
         * @param string $cipher
         * @return bool 
         * @static 
         */ 
        public static function supported($key, $cipher)
        {
                        return \Illuminate\Encryption\Encrypter::supported($key, $cipher);
        }
                    /**
         * Create a new encryption key for the given cipher.
         *
         * @param string $cipher
         * @return string 
         * @static 
         */ 
        public static function generateKey($cipher)
        {
                        return \Illuminate\Encryption\Encrypter::generateKey($cipher);
        }
                    /**
         * Encrypt the given value.
         *
         * @param mixed $value
         * @param bool $serialize
         * @return string 
         * @throws \Illuminate\Contracts\Encryption\EncryptException
         * @static 
         */ 
        public static function encrypt($value, $serialize = true)
        {
                        /** @var \Illuminate\Encryption\Encrypter $instance */
                        return $instance->encrypt($value, $serialize);
        }
                    /**
         * Encrypt a string without serialization.
         *
         * @param string $value
         * @return string 
         * @throws \Illuminate\Contracts\Encryption\EncryptException
         * @static 
         */ 
        public static function encryptString($value)
        {
                        /** @var \Illuminate\Encryption\Encrypter $instance */
                        return $instance->encryptString($value);
        }
                    /**
         * Decrypt the given value.
         *
         * @param string $payload
         * @param bool $unserialize
         * @return mixed 
         * @throws \Illuminate\Contracts\Encryption\DecryptException
         * @static 
         */ 
        public static function decrypt($payload, $unserialize = true)
        {
                        /** @var \Illuminate\Encryption\Encrypter $instance */
                        return $instance->decrypt($payload, $unserialize);
        }
                    /**
         * Decrypt the given string without unserialization.
         *
         * @param string $payload
         * @return string 
         * @throws \Illuminate\Contracts\Encryption\DecryptException
         * @static 
         */ 
        public static function decryptString($payload)
        {
                        /** @var \Illuminate\Encryption\Encrypter $instance */
                        return $instance->decryptString($payload);
        }
                    /**
         * Get the encryption key that the encrypter is currently using.
         *
         * @return string 
         * @static 
         */ 
        public static function getKey()
        {
                        /** @var \Illuminate\Encryption\Encrypter $instance */
                        return $instance->getKey();
        }
         
    }
            /**
     * 
     *
     * @see https://carbon.nesbot.com/docs/
     * @see https://github.com/briannesbitt/Carbon/blob/master/src/Carbon/Factory.php
     * @method static \Illuminate\Support\Carbon create($year = 0, $month = 1, $day = 1, $hour = 0, $minute = 0, $second = 0, $tz = null)
     * @method static \Illuminate\Support\Carbon createFromDate($year = null, $month = null, $day = null, $tz = null)
     * @method static \Illuminate\Support\Carbon|false createFromFormat($format, $time, $tz = null)
     * @method static \Illuminate\Support\Carbon createFromTime($hour = 0, $minute = 0, $second = 0, $tz = null)
     * @method static \Illuminate\Support\Carbon createFromTimeString($time, $tz = null)
     * @method static \Illuminate\Support\Carbon createFromTimestamp($timestamp, $tz = null)
     * @method static \Illuminate\Support\Carbon createFromTimestampMs($timestamp, $tz = null)
     * @method static \Illuminate\Support\Carbon createFromTimestampUTC($timestamp)
     * @method static \Illuminate\Support\Carbon createMidnightDate($year = null, $month = null, $day = null, $tz = null)
     * @method static \Illuminate\Support\Carbon|false createSafe($year = null, $month = null, $day = null, $hour = null, $minute = null, $second = null, $tz = null)
     * @method static void disableHumanDiffOption($humanDiffOption)
     * @method static void enableHumanDiffOption($humanDiffOption)
     * @method static mixed executeWithLocale($locale, $func)
     * @method static \Illuminate\Support\Carbon fromSerialized($value)
     * @method static array getAvailableLocales()
     * @method static array getDays()
     * @method static int getHumanDiffOptions()
     * @method static array getIsoUnits()
     * @method static array getLastErrors()
     * @method static string getLocale()
     * @method static int getMidDayAt()
     * @method static \Illuminate\Support\Carbon|null getTestNow()
     * @method static \Symfony\Component\Translation\TranslatorInterface getTranslator()
     * @method static int getWeekEndsAt()
     * @method static int getWeekStartsAt()
     * @method static array getWeekendDays()
     * @method static bool hasFormat($date, $format)
     * @method static bool hasMacro($name)
     * @method static bool hasRelativeKeywords($time)
     * @method static bool hasTestNow()
     * @method static \Illuminate\Support\Carbon instance($date)
     * @method static bool isImmutable()
     * @method static bool isModifiableUnit($unit)
     * @method static bool isMutable()
     * @method static bool isStrictModeEnabled()
     * @method static bool localeHasDiffOneDayWords($locale)
     * @method static bool localeHasDiffSyntax($locale)
     * @method static bool localeHasDiffTwoDayWords($locale)
     * @method static bool localeHasPeriodSyntax($locale)
     * @method static bool localeHasShortUnits($locale)
     * @method static void macro($name, $macro)
     * @method static \Illuminate\Support\Carbon|null make($var)
     * @method static \Illuminate\Support\Carbon maxValue()
     * @method static \Illuminate\Support\Carbon minValue()
     * @method static void mixin($mixin)
     * @method static \Illuminate\Support\Carbon now($tz = null)
     * @method static \Illuminate\Support\Carbon parse($time = null, $tz = null)
     * @method static string pluralUnit(string $unit)
     * @method static void resetMonthsOverflow()
     * @method static void resetToStringFormat()
     * @method static void resetYearsOverflow()
     * @method static void serializeUsing($callback)
     * @method static void setHumanDiffOptions($humanDiffOptions)
     * @method static bool setLocale($locale)
     * @method static void setMidDayAt($hour)
     * @method static void setTestNow($testNow = null)
     * @method static void setToStringFormat($format)
     * @method static void setTranslator(\Symfony\Component\Translation\TranslatorInterface $translator)
     * @method static void setUtf8($utf8)
     * @method static void setWeekEndsAt($day)
     * @method static void setWeekStartsAt($day)
     * @method static void setWeekendDays($days)
     * @method static bool shouldOverflowMonths()
     * @method static bool shouldOverflowYears()
     * @method static string singularUnit(string $unit)
     * @method static \Illuminate\Support\Carbon today($tz = null)
     * @method static \Illuminate\Support\Carbon tomorrow($tz = null)
     * @method static void useMonthsOverflow($monthsOverflow = true)
     * @method static void useStrictMode($strictModeEnabled = true)
     * @method static void useYearsOverflow($yearsOverflow = true)
     * @method static \Illuminate\Support\Carbon yesterday($tz = null)
     * @see \Illuminate\Support\DateFactory
     */ 
        class Date {
                    /**
         * Use the given handler when generating dates (class name, callable, or factory).
         *
         * @param mixed $handler
         * @return mixed 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function use($handler)
        {
                        return \Illuminate\Support\DateFactory::use($handler);
        }
                    /**
         * Use the default date class when generating dates.
         *
         * @return void 
         * @static 
         */ 
        public static function useDefault()
        {
                        \Illuminate\Support\DateFactory::useDefault();
        }
                    /**
         * Execute the given callable on each date creation.
         *
         * @param callable $callable
         * @return void 
         * @static 
         */ 
        public static function useCallable($callable)
        {
                        \Illuminate\Support\DateFactory::useCallable($callable);
        }
                    /**
         * Use the given date type (class) when generating dates.
         *
         * @param string $dateClass
         * @return void 
         * @static 
         */ 
        public static function useClass($dateClass)
        {
                        \Illuminate\Support\DateFactory::useClass($dateClass);
        }
                    /**
         * Use the given Carbon factory when generating dates.
         *
         * @param object $factory
         * @return void 
         * @static 
         */ 
        public static function useFactory($factory)
        {
                        \Illuminate\Support\DateFactory::useFactory($factory);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Database\DatabaseManager
     */ 
        class DB {
                    /**
         * Get a database connection instance.
         *
         * @param string|null $name
         * @return \Illuminate\Database\Connection 
         * @static 
         */ 
        public static function connection($name = null)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->connection($name);
        }
                    /**
         * Register a custom Doctrine type.
         *
         * @param string $class
         * @param string $name
         * @param string $type
         * @return void 
         * @throws \Doctrine\DBAL\DBALException
         * @throws \RuntimeException
         * @static 
         */ 
        public static function registerDoctrineType($class, $name, $type)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        $instance->registerDoctrineType($class, $name, $type);
        }
                    /**
         * Disconnect from the given database and remove from local cache.
         *
         * @param string|null $name
         * @return void 
         * @static 
         */ 
        public static function purge($name = null)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        $instance->purge($name);
        }
                    /**
         * Disconnect from the given database.
         *
         * @param string|null $name
         * @return void 
         * @static 
         */ 
        public static function disconnect($name = null)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        $instance->disconnect($name);
        }
                    /**
         * Reconnect to the given database.
         *
         * @param string|null $name
         * @return \Illuminate\Database\Connection 
         * @static 
         */ 
        public static function reconnect($name = null)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->reconnect($name);
        }
                    /**
         * Set the default database connection for the callback execution.
         *
         * @param string $name
         * @param callable $callback
         * @return mixed 
         * @static 
         */ 
        public static function usingConnection($name, $callback)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->usingConnection($name, $callback);
        }
                    /**
         * Get the default connection name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultConnection()
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->getDefaultConnection();
        }
                    /**
         * Set the default connection name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultConnection($name)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        $instance->setDefaultConnection($name);
        }
                    /**
         * Get all of the support drivers.
         *
         * @return string[] 
         * @static 
         */ 
        public static function supportedDrivers()
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->supportedDrivers();
        }
                    /**
         * Get all of the drivers that are actually available.
         *
         * @return string[] 
         * @static 
         */ 
        public static function availableDrivers()
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->availableDrivers();
        }
                    /**
         * Register an extension connection resolver.
         *
         * @param string $name
         * @param callable $resolver
         * @return void 
         * @static 
         */ 
        public static function extend($name, $resolver)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        $instance->extend($name, $resolver);
        }
                    /**
         * Remove an extension connection resolver.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function forgetExtension($name)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        $instance->forgetExtension($name);
        }
                    /**
         * Return all of the created connections.
         *
         * @return array<string, \Illuminate\Database\Connection> 
         * @static 
         */ 
        public static function getConnections()
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->getConnections();
        }
                    /**
         * Set the database reconnector callback.
         *
         * @param callable $reconnector
         * @return void 
         * @static 
         */ 
        public static function setReconnector($reconnector)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        $instance->setReconnector($reconnector);
        }
                    /**
         * Set the application instance used by the manager.
         *
         * @param \Illuminate\Contracts\Foundation\Application $app
         * @return \Illuminate\Database\DatabaseManager 
         * @static 
         */ 
        public static function setApplication($app)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->setApplication($app);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Database\DatabaseManager::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Database\DatabaseManager::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Database\DatabaseManager::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Database\DatabaseManager::flushMacros();
        }
                    /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param array $parameters
         * @return mixed 
         * @throws \BadMethodCallException
         * @static 
         */ 
        public static function macroCall($method, $parameters)
        {
                        /** @var \Illuminate\Database\DatabaseManager $instance */
                        return $instance->macroCall($method, $parameters);
        }
                    /**
         * Determine if the connected database is a MariaDB database.
         *
         * @return bool 
         * @static 
         */ 
        public static function isMaria()
        {
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->isMaria();
        }
                    /**
         * Get a schema builder instance for the connection.
         *
         * @return \Illuminate\Database\Schema\MySqlBuilder 
         * @static 
         */ 
        public static function getSchemaBuilder()
        {
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getSchemaBuilder();
        }
                    /**
         * Get the schema state for the connection.
         *
         * @param \Illuminate\Filesystem\Filesystem|null $files
         * @param callable|null $processFactory
         * @return \Illuminate\Database\Schema\MySqlSchemaState 
         * @static 
         */ 
        public static function getSchemaState($files = null, $processFactory = null)
        {
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getSchemaState($files, $processFactory);
        }
                    /**
         * Set the query grammar to the default implementation.
         *
         * @return void 
         * @static 
         */ 
        public static function useDefaultQueryGrammar()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->useDefaultQueryGrammar();
        }
                    /**
         * Set the schema grammar to the default implementation.
         *
         * @return void 
         * @static 
         */ 
        public static function useDefaultSchemaGrammar()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->useDefaultSchemaGrammar();
        }
                    /**
         * Set the query post processor to the default implementation.
         *
         * @return void 
         * @static 
         */ 
        public static function useDefaultPostProcessor()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->useDefaultPostProcessor();
        }
                    /**
         * Begin a fluent query against a database table.
         *
         * @param \Closure|\Illuminate\Database\Query\Builder|string $table
         * @param string|null $as
         * @return \Illuminate\Database\Query\Builder 
         * @static 
         */ 
        public static function table($table, $as = null)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->table($table, $as);
        }
                    /**
         * Get a new query builder instance.
         *
         * @return \Illuminate\Database\Query\Builder 
         * @static 
         */ 
        public static function query()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->query();
        }
                    /**
         * Run a select statement and return a single result.
         *
         * @param string $query
         * @param array $bindings
         * @param bool $useReadPdo
         * @return mixed 
         * @static 
         */ 
        public static function selectOne($query, $bindings = [], $useReadPdo = true)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->selectOne($query, $bindings, $useReadPdo);
        }
                    /**
         * Run a select statement and return the first column of the first row.
         *
         * @param string $query
         * @param array $bindings
         * @param bool $useReadPdo
         * @return mixed 
         * @throws \Illuminate\Database\MultipleColumnsSelectedException
         * @static 
         */ 
        public static function scalar($query, $bindings = [], $useReadPdo = true)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->scalar($query, $bindings, $useReadPdo);
        }
                    /**
         * Run a select statement against the database.
         *
         * @param string $query
         * @param array $bindings
         * @return array 
         * @static 
         */ 
        public static function selectFromWriteConnection($query, $bindings = [])
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->selectFromWriteConnection($query, $bindings);
        }
                    /**
         * Run a select statement against the database.
         *
         * @param string $query
         * @param array $bindings
         * @param bool $useReadPdo
         * @return array 
         * @static 
         */ 
        public static function select($query, $bindings = [], $useReadPdo = true)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->select($query, $bindings, $useReadPdo);
        }
                    /**
         * Run a select statement against the database and returns a generator.
         *
         * @param string $query
         * @param array $bindings
         * @param bool $useReadPdo
         * @return \Generator 
         * @static 
         */ 
        public static function cursor($query, $bindings = [], $useReadPdo = true)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->cursor($query, $bindings, $useReadPdo);
        }
                    /**
         * Run an insert statement against the database.
         *
         * @param string $query
         * @param array $bindings
         * @return bool 
         * @static 
         */ 
        public static function insert($query, $bindings = [])
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->insert($query, $bindings);
        }
                    /**
         * Run an update statement against the database.
         *
         * @param string $query
         * @param array $bindings
         * @return int 
         * @static 
         */ 
        public static function update($query, $bindings = [])
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->update($query, $bindings);
        }
                    /**
         * Run a delete statement against the database.
         *
         * @param string $query
         * @param array $bindings
         * @return int 
         * @static 
         */ 
        public static function delete($query, $bindings = [])
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->delete($query, $bindings);
        }
                    /**
         * Execute an SQL statement and return the boolean result.
         *
         * @param string $query
         * @param array $bindings
         * @return bool 
         * @static 
         */ 
        public static function statement($query, $bindings = [])
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->statement($query, $bindings);
        }
                    /**
         * Run an SQL statement and get the number of rows affected.
         *
         * @param string $query
         * @param array $bindings
         * @return int 
         * @static 
         */ 
        public static function affectingStatement($query, $bindings = [])
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->affectingStatement($query, $bindings);
        }
                    /**
         * Run a raw, unprepared query against the PDO connection.
         *
         * @param string $query
         * @return bool 
         * @static 
         */ 
        public static function unprepared($query)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->unprepared($query);
        }
                    /**
         * Execute the given callback in "dry run" mode.
         *
         * @param \Closure $callback
         * @return array 
         * @static 
         */ 
        public static function pretend($callback)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->pretend($callback);
        }
                    /**
         * Bind values to their parameters in the given statement.
         *
         * @param \PDOStatement $statement
         * @param array $bindings
         * @return void 
         * @static 
         */ 
        public static function bindValues($statement, $bindings)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->bindValues($statement, $bindings);
        }
                    /**
         * Prepare the query bindings for execution.
         *
         * @param array $bindings
         * @return array 
         * @static 
         */ 
        public static function prepareBindings($bindings)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->prepareBindings($bindings);
        }
                    /**
         * Log a query in the connection's query log.
         *
         * @param string $query
         * @param array $bindings
         * @param float|null $time
         * @return void 
         * @static 
         */ 
        public static function logQuery($query, $bindings, $time = null)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->logQuery($query, $bindings, $time);
        }
                    /**
         * Register a callback to be invoked when the connection queries for longer than a given amount of time.
         *
         * @param \DateTimeInterface|\Carbon\CarbonInterval|float|int $threshold
         * @param callable $handler
         * @return void 
         * @static 
         */ 
        public static function whenQueryingForLongerThan($threshold, $handler)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->whenQueryingForLongerThan($threshold, $handler);
        }
                    /**
         * Allow all the query duration handlers to run again, even if they have already run.
         *
         * @return void 
         * @static 
         */ 
        public static function allowQueryDurationHandlersToRunAgain()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->allowQueryDurationHandlersToRunAgain();
        }
                    /**
         * Get the duration of all run queries in milliseconds.
         *
         * @return float 
         * @static 
         */ 
        public static function totalQueryDuration()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->totalQueryDuration();
        }
                    /**
         * Reset the duration of all run queries.
         *
         * @return void 
         * @static 
         */ 
        public static function resetTotalQueryDuration()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->resetTotalQueryDuration();
        }
                    /**
         * Register a hook to be run just before a database query is executed.
         *
         * @param \Closure $callback
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function beforeExecuting($callback)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->beforeExecuting($callback);
        }
                    /**
         * Register a database query listener with the connection.
         *
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function listen($callback)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->listen($callback);
        }
                    /**
         * Get a new raw query expression.
         *
         * @param mixed $value
         * @return \Illuminate\Database\Query\Expression 
         * @static 
         */ 
        public static function raw($value)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->raw($value);
        }
                    /**
         * Determine if the database connection has modified any database records.
         *
         * @return bool 
         * @static 
         */ 
        public static function hasModifiedRecords()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->hasModifiedRecords();
        }
                    /**
         * Indicate if any records have been modified.
         *
         * @param bool $value
         * @return void 
         * @static 
         */ 
        public static function recordsHaveBeenModified($value = true)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->recordsHaveBeenModified($value);
        }
                    /**
         * Set the record modification state.
         *
         * @param bool $value
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setRecordModificationState($value)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setRecordModificationState($value);
        }
                    /**
         * Reset the record modification state.
         *
         * @return void 
         * @static 
         */ 
        public static function forgetRecordModificationState()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->forgetRecordModificationState();
        }
                    /**
         * Indicate that the connection should use the write PDO connection for reads.
         *
         * @param bool $value
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function useWriteConnectionWhenReading($value = true)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->useWriteConnectionWhenReading($value);
        }
                    /**
         * Is Doctrine available?
         *
         * @return bool 
         * @static 
         */ 
        public static function isDoctrineAvailable()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->isDoctrineAvailable();
        }
                    /**
         * Indicates whether native alter operations will be used when dropping or renaming columns, even if Doctrine DBAL is installed.
         *
         * @return bool 
         * @static 
         */ 
        public static function usingNativeSchemaOperations()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->usingNativeSchemaOperations();
        }
                    /**
         * Get a Doctrine Schema Column instance.
         *
         * @param string $table
         * @param string $column
         * @return \Doctrine\DBAL\Schema\Column 
         * @static 
         */ 
        public static function getDoctrineColumn($table, $column)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getDoctrineColumn($table, $column);
        }
                    /**
         * Get the Doctrine DBAL schema manager for the connection.
         *
         * @return \Doctrine\DBAL\Schema\AbstractSchemaManager 
         * @static 
         */ 
        public static function getDoctrineSchemaManager()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getDoctrineSchemaManager();
        }
                    /**
         * Get the Doctrine DBAL database connection instance.
         *
         * @return \Doctrine\DBAL\Connection 
         * @static 
         */ 
        public static function getDoctrineConnection()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getDoctrineConnection();
        }
                    /**
         * Get the current PDO connection.
         *
         * @return \PDO 
         * @static 
         */ 
        public static function getPdo()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getPdo();
        }
                    /**
         * Get the current PDO connection parameter without executing any reconnect logic.
         *
         * @return \PDO|\Closure|null 
         * @static 
         */ 
        public static function getRawPdo()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getRawPdo();
        }
                    /**
         * Get the current PDO connection used for reading.
         *
         * @return \PDO 
         * @static 
         */ 
        public static function getReadPdo()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getReadPdo();
        }
                    /**
         * Get the current read PDO connection parameter without executing any reconnect logic.
         *
         * @return \PDO|\Closure|null 
         * @static 
         */ 
        public static function getRawReadPdo()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getRawReadPdo();
        }
                    /**
         * Set the PDO connection.
         *
         * @param \PDO|\Closure|null $pdo
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setPdo($pdo)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setPdo($pdo);
        }
                    /**
         * Set the PDO connection used for reading.
         *
         * @param \PDO|\Closure|null $pdo
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setReadPdo($pdo)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setReadPdo($pdo);
        }
                    /**
         * Get the database connection name.
         *
         * @return string|null 
         * @static 
         */ 
        public static function getName()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getName();
        }
                    /**
         * Get the database connection full name.
         *
         * @return string|null 
         * @static 
         */ 
        public static function getNameWithReadWriteType()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getNameWithReadWriteType();
        }
                    /**
         * Get an option from the configuration options.
         *
         * @param string|null $option
         * @return mixed 
         * @static 
         */ 
        public static function getConfig($option = null)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getConfig($option);
        }
                    /**
         * Get the PDO driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDriverName()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getDriverName();
        }
                    /**
         * Get the query grammar used by the connection.
         *
         * @return \Illuminate\Database\Query\Grammars\Grammar 
         * @static 
         */ 
        public static function getQueryGrammar()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getQueryGrammar();
        }
                    /**
         * Set the query grammar used by the connection.
         *
         * @param \Illuminate\Database\Query\Grammars\Grammar $grammar
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setQueryGrammar($grammar)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setQueryGrammar($grammar);
        }
                    /**
         * Get the schema grammar used by the connection.
         *
         * @return \Illuminate\Database\Schema\Grammars\Grammar 
         * @static 
         */ 
        public static function getSchemaGrammar()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getSchemaGrammar();
        }
                    /**
         * Set the schema grammar used by the connection.
         *
         * @param \Illuminate\Database\Schema\Grammars\Grammar $grammar
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setSchemaGrammar($grammar)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setSchemaGrammar($grammar);
        }
                    /**
         * Get the query post processor used by the connection.
         *
         * @return \Illuminate\Database\Query\Processors\Processor 
         * @static 
         */ 
        public static function getPostProcessor()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getPostProcessor();
        }
                    /**
         * Set the query post processor used by the connection.
         *
         * @param \Illuminate\Database\Query\Processors\Processor $processor
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setPostProcessor($processor)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setPostProcessor($processor);
        }
                    /**
         * Get the event dispatcher used by the connection.
         *
         * @return \Illuminate\Contracts\Events\Dispatcher 
         * @static 
         */ 
        public static function getEventDispatcher()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getEventDispatcher();
        }
                    /**
         * Set the event dispatcher instance on the connection.
         *
         * @param \Illuminate\Contracts\Events\Dispatcher $events
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setEventDispatcher($events)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setEventDispatcher($events);
        }
                    /**
         * Unset the event dispatcher for this connection.
         *
         * @return void 
         * @static 
         */ 
        public static function unsetEventDispatcher()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->unsetEventDispatcher();
        }
                    /**
         * Set the transaction manager instance on the connection.
         *
         * @param \Illuminate\Database\DatabaseTransactionsManager $manager
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setTransactionManager($manager)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setTransactionManager($manager);
        }
                    /**
         * Unset the transaction manager for this connection.
         *
         * @return void 
         * @static 
         */ 
        public static function unsetTransactionManager()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->unsetTransactionManager();
        }
                    /**
         * Determine if the connection is in a "dry run".
         *
         * @return bool 
         * @static 
         */ 
        public static function pretending()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->pretending();
        }
                    /**
         * Get the connection query log.
         *
         * @return array 
         * @static 
         */ 
        public static function getQueryLog()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getQueryLog();
        }
                    /**
         * Clear the query log.
         *
         * @return void 
         * @static 
         */ 
        public static function flushQueryLog()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->flushQueryLog();
        }
                    /**
         * Enable the query log on the connection.
         *
         * @return void 
         * @static 
         */ 
        public static function enableQueryLog()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->enableQueryLog();
        }
                    /**
         * Disable the query log on the connection.
         *
         * @return void 
         * @static 
         */ 
        public static function disableQueryLog()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->disableQueryLog();
        }
                    /**
         * Determine whether we're logging queries.
         *
         * @return bool 
         * @static 
         */ 
        public static function logging()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->logging();
        }
                    /**
         * Get the name of the connected database.
         *
         * @return string 
         * @static 
         */ 
        public static function getDatabaseName()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getDatabaseName();
        }
                    /**
         * Set the name of the connected database.
         *
         * @param string $database
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setDatabaseName($database)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setDatabaseName($database);
        }
                    /**
         * Set the read / write type of the connection.
         *
         * @param string|null $readWriteType
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setReadWriteType($readWriteType)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setReadWriteType($readWriteType);
        }
                    /**
         * Get the table prefix for the connection.
         *
         * @return string 
         * @static 
         */ 
        public static function getTablePrefix()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->getTablePrefix();
        }
                    /**
         * Set the table prefix in use by the connection.
         *
         * @param string $prefix
         * @return \Illuminate\Database\MySqlConnection 
         * @static 
         */ 
        public static function setTablePrefix($prefix)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->setTablePrefix($prefix);
        }
                    /**
         * Set the table prefix and return the grammar.
         *
         * @param \Illuminate\Database\Grammar $grammar
         * @return \Illuminate\Database\Grammar 
         * @static 
         */ 
        public static function withTablePrefix($grammar)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->withTablePrefix($grammar);
        }
                    /**
         * Register a connection resolver.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function resolverFor($driver, $callback)
        {            //Method inherited from \Illuminate\Database\Connection         
                        \Illuminate\Database\MySqlConnection::resolverFor($driver, $callback);
        }
                    /**
         * Get the connection resolver for the given driver.
         *
         * @param string $driver
         * @return mixed 
         * @static 
         */ 
        public static function getResolver($driver)
        {            //Method inherited from \Illuminate\Database\Connection         
                        return \Illuminate\Database\MySqlConnection::getResolver($driver);
        }
                    /**
         * Execute a Closure within a transaction.
         *
         * @param \Closure $callback
         * @param int $attempts
         * @return mixed 
         * @throws \Throwable
         * @static 
         */ 
        public static function transaction($callback, $attempts = 1)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->transaction($callback, $attempts);
        }
                    /**
         * Start a new database transaction.
         *
         * @return void 
         * @throws \Throwable
         * @static 
         */ 
        public static function beginTransaction()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->beginTransaction();
        }
                    /**
         * Commit the active database transaction.
         *
         * @return void 
         * @throws \Throwable
         * @static 
         */ 
        public static function commit()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->commit();
        }
                    /**
         * Rollback the active database transaction.
         *
         * @param int|null $toLevel
         * @return void 
         * @throws \Throwable
         * @static 
         */ 
        public static function rollBack($toLevel = null)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->rollBack($toLevel);
        }
                    /**
         * Get the number of active transactions.
         *
         * @return int 
         * @static 
         */ 
        public static function transactionLevel()
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        return $instance->transactionLevel();
        }
                    /**
         * Execute the callback after a transaction commits.
         *
         * @param callable $callback
         * @return void 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function afterCommit($callback)
        {            //Method inherited from \Illuminate\Database\Connection         
                        /** @var \Illuminate\Database\MySqlConnection $instance */
                        $instance->afterCommit($callback);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Events\Dispatcher
     * @see \Illuminate\Support\Testing\Fakes\EventFake
     */ 
        class Event {
                    /**
         * Register an event listener with the dispatcher.
         *
         * @param \Closure|string|array $events
         * @param \Closure|string|array|null $listener
         * @return void 
         * @static 
         */ 
        public static function listen($events, $listener = null)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        $instance->listen($events, $listener);
        }
                    /**
         * Determine if a given event has listeners.
         *
         * @param string $eventName
         * @return bool 
         * @static 
         */ 
        public static function hasListeners($eventName)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->hasListeners($eventName);
        }
                    /**
         * Determine if the given event has any wildcard listeners.
         *
         * @param string $eventName
         * @return bool 
         * @static 
         */ 
        public static function hasWildcardListeners($eventName)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->hasWildcardListeners($eventName);
        }
                    /**
         * Register an event and payload to be fired later.
         *
         * @param string $event
         * @param object|array $payload
         * @return void 
         * @static 
         */ 
        public static function push($event, $payload = [])
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        $instance->push($event, $payload);
        }
                    /**
         * Flush a set of pushed events.
         *
         * @param string $event
         * @return void 
         * @static 
         */ 
        public static function flush($event)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        $instance->flush($event);
        }
                    /**
         * Register an event subscriber with the dispatcher.
         *
         * @param object|string $subscriber
         * @return void 
         * @static 
         */ 
        public static function subscribe($subscriber)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        $instance->subscribe($subscriber);
        }
                    /**
         * Fire an event until the first non-null response is returned.
         *
         * @param string|object $event
         * @param mixed $payload
         * @return array|null 
         * @static 
         */ 
        public static function until($event, $payload = [])
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->until($event, $payload);
        }
                    /**
         * Fire an event and call the listeners.
         *
         * @param string|object $event
         * @param mixed $payload
         * @param bool $halt
         * @return array|null 
         * @static 
         */ 
        public static function dispatch($event, $payload = [], $halt = false)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->dispatch($event, $payload, $halt);
        }
                    /**
         * Get all of the listeners for a given event name.
         *
         * @param string $eventName
         * @return array 
         * @static 
         */ 
        public static function getListeners($eventName)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->getListeners($eventName);
        }
                    /**
         * Register an event listener with the dispatcher.
         *
         * @param \Closure|string|array $listener
         * @param bool $wildcard
         * @return \Closure 
         * @static 
         */ 
        public static function makeListener($listener, $wildcard = false)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->makeListener($listener, $wildcard);
        }
                    /**
         * Create a class based listener using the IoC container.
         *
         * @param string $listener
         * @param bool $wildcard
         * @return \Closure 
         * @static 
         */ 
        public static function createClassListener($listener, $wildcard = false)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->createClassListener($listener, $wildcard);
        }
                    /**
         * Remove a set of listeners from the dispatcher.
         *
         * @param string $event
         * @return void 
         * @static 
         */ 
        public static function forget($event)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        $instance->forget($event);
        }
                    /**
         * Forget all of the pushed listeners.
         *
         * @return void 
         * @static 
         */ 
        public static function forgetPushed()
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        $instance->forgetPushed();
        }
                    /**
         * Set the queue resolver implementation.
         *
         * @param callable $resolver
         * @return \Illuminate\Events\Dispatcher 
         * @static 
         */ 
        public static function setQueueResolver($resolver)
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->setQueueResolver($resolver);
        }
                    /**
         * Gets the raw, unprepared listeners.
         *
         * @return array 
         * @static 
         */ 
        public static function getRawListeners()
        {
                        /** @var \Illuminate\Events\Dispatcher $instance */
                        return $instance->getRawListeners();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Events\Dispatcher::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Events\Dispatcher::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Events\Dispatcher::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Events\Dispatcher::flushMacros();
        }
                    /**
         * Specify the events that should be dispatched instead of faked.
         *
         * @param array|string $eventsToDispatch
         * @return \Illuminate\Support\Testing\Fakes\EventFake 
         * @static 
         */ 
        public static function except($eventsToDispatch)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        return $instance->except($eventsToDispatch);
        }
                    /**
         * Assert if an event has a listener attached to it.
         *
         * @param string $expectedEvent
         * @param string|array $expectedListener
         * @return void 
         * @static 
         */ 
        public static function assertListening($expectedEvent, $expectedListener)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        $instance->assertListening($expectedEvent, $expectedListener);
        }
                    /**
         * Assert if an event was dispatched based on a truth-test callback.
         *
         * @param string|\Closure $event
         * @param callable|int|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertDispatched($event, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        $instance->assertDispatched($event, $callback);
        }
                    /**
         * Assert if an event was dispatched a number of times.
         *
         * @param string $event
         * @param int $times
         * @return void 
         * @static 
         */ 
        public static function assertDispatchedTimes($event, $times = 1)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        $instance->assertDispatchedTimes($event, $times);
        }
                    /**
         * Determine if an event was dispatched based on a truth-test callback.
         *
         * @param string|\Closure $event
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotDispatched($event, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        $instance->assertNotDispatched($event, $callback);
        }
                    /**
         * Assert that no events were dispatched.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingDispatched()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        $instance->assertNothingDispatched();
        }
                    /**
         * Get all of the events matching a truth-test callback.
         *
         * @param string $event
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function dispatched($event, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        return $instance->dispatched($event, $callback);
        }
                    /**
         * Determine if the given event has been dispatched.
         *
         * @param string $event
         * @return bool 
         * @static 
         */ 
        public static function hasDispatched($event)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                        return $instance->hasDispatched($event);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Filesystem\Filesystem
     */ 
        class File {
                    /**
         * Determine if a file or directory exists.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function exists($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->exists($path);
        }
                    /**
         * Determine if a file or directory is missing.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function missing($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->missing($path);
        }
                    /**
         * Get the contents of a file.
         *
         * @param string $path
         * @param bool $lock
         * @return string 
         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
         * @static 
         */ 
        public static function get($path, $lock = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->get($path, $lock);
        }
                    /**
         * Get contents of a file with shared access.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function sharedGet($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->sharedGet($path);
        }
                    /**
         * Get the returned value of a file.
         *
         * @param string $path
         * @param array $data
         * @return mixed 
         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
         * @static 
         */ 
        public static function getRequire($path, $data = [])
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->getRequire($path, $data);
        }
                    /**
         * Require the given file once.
         *
         * @param string $path
         * @param array $data
         * @return mixed 
         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
         * @static 
         */ 
        public static function requireOnce($path, $data = [])
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->requireOnce($path, $data);
        }
                    /**
         * Get the contents of a file one line at a time.
         *
         * @param string $path
         * @return \Illuminate\Support\LazyCollection 
         * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
         * @static 
         */ 
        public static function lines($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->lines($path);
        }
                    /**
         * Get the hash of the file at the given path.
         *
         * @param string $path
         * @param string $algorithm
         * @return string 
         * @static 
         */ 
        public static function hash($path, $algorithm = 'md5')
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->hash($path, $algorithm);
        }
                    /**
         * Write the contents of a file.
         *
         * @param string $path
         * @param string $contents
         * @param bool $lock
         * @return int|bool 
         * @static 
         */ 
        public static function put($path, $contents, $lock = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->put($path, $contents, $lock);
        }
                    /**
         * Write the contents of a file, replacing it atomically if it already exists.
         *
         * @param string $path
         * @param string $content
         * @param int|null $mode
         * @return void 
         * @static 
         */ 
        public static function replace($path, $content, $mode = null)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        $instance->replace($path, $content, $mode);
        }
                    /**
         * Replace a given string within a given file.
         *
         * @param array|string $search
         * @param array|string $replace
         * @param string $path
         * @return void 
         * @static 
         */ 
        public static function replaceInFile($search, $replace, $path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        $instance->replaceInFile($search, $replace, $path);
        }
                    /**
         * Prepend to a file.
         *
         * @param string $path
         * @param string $data
         * @return int 
         * @static 
         */ 
        public static function prepend($path, $data)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->prepend($path, $data);
        }
                    /**
         * Append to a file.
         *
         * @param string $path
         * @param string $data
         * @return int 
         * @static 
         */ 
        public static function append($path, $data)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->append($path, $data);
        }
                    /**
         * Get or set UNIX mode of a file or directory.
         *
         * @param string $path
         * @param int|null $mode
         * @return mixed 
         * @static 
         */ 
        public static function chmod($path, $mode = null)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->chmod($path, $mode);
        }
                    /**
         * Delete the file at a given path.
         *
         * @param string|array $paths
         * @return bool 
         * @static 
         */ 
        public static function delete($paths)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->delete($paths);
        }
                    /**
         * Move a file to a new location.
         *
         * @param string $path
         * @param string $target
         * @return bool 
         * @static 
         */ 
        public static function move($path, $target)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->move($path, $target);
        }
                    /**
         * Copy a file to a new location.
         *
         * @param string $path
         * @param string $target
         * @return bool 
         * @static 
         */ 
        public static function copy($path, $target)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->copy($path, $target);
        }
                    /**
         * Create a symlink to the target file or directory. On Windows, a hard link is created if the target is a file.
         *
         * @param string $target
         * @param string $link
         * @return void 
         * @static 
         */ 
        public static function link($target, $link)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        $instance->link($target, $link);
        }
                    /**
         * Create a relative symlink to the target file or directory.
         *
         * @param string $target
         * @param string $link
         * @return void 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function relativeLink($target, $link)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        $instance->relativeLink($target, $link);
        }
                    /**
         * Extract the file name from a file path.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function name($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->name($path);
        }
                    /**
         * Extract the trailing name component from a file path.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function basename($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->basename($path);
        }
                    /**
         * Extract the parent directory from a file path.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function dirname($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->dirname($path);
        }
                    /**
         * Extract the file extension from a file path.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function extension($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->extension($path);
        }
                    /**
         * Guess the file extension from the mime-type of a given file.
         *
         * @param string $path
         * @return string|null 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function guessExtension($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->guessExtension($path);
        }
                    /**
         * Get the file type of a given file.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function type($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->type($path);
        }
                    /**
         * Get the mime-type of a given file.
         *
         * @param string $path
         * @return string|false 
         * @static 
         */ 
        public static function mimeType($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->mimeType($path);
        }
                    /**
         * Get the file size of a given file.
         *
         * @param string $path
         * @return int 
         * @static 
         */ 
        public static function size($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->size($path);
        }
                    /**
         * Get the file's last modification time.
         *
         * @param string $path
         * @return int 
         * @static 
         */ 
        public static function lastModified($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->lastModified($path);
        }
                    /**
         * Determine if the given path is a directory.
         *
         * @param string $directory
         * @return bool 
         * @static 
         */ 
        public static function isDirectory($directory)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->isDirectory($directory);
        }
                    /**
         * Determine if the given path is a directory that does not contain any other files or directories.
         *
         * @param string $directory
         * @param bool $ignoreDotFiles
         * @return bool 
         * @static 
         */ 
        public static function isEmptyDirectory($directory, $ignoreDotFiles = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->isEmptyDirectory($directory, $ignoreDotFiles);
        }
                    /**
         * Determine if the given path is readable.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function isReadable($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->isReadable($path);
        }
                    /**
         * Determine if the given path is writable.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function isWritable($path)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->isWritable($path);
        }
                    /**
         * Determine if two files are the same by comparing their hashes.
         *
         * @param string $firstFile
         * @param string $secondFile
         * @return bool 
         * @static 
         */ 
        public static function hasSameHash($firstFile, $secondFile)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->hasSameHash($firstFile, $secondFile);
        }
                    /**
         * Determine if the given path is a file.
         *
         * @param string $file
         * @return bool 
         * @static 
         */ 
        public static function isFile($file)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->isFile($file);
        }
                    /**
         * Find path names matching a given pattern.
         *
         * @param string $pattern
         * @param int $flags
         * @return array 
         * @static 
         */ 
        public static function glob($pattern, $flags = 0)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->glob($pattern, $flags);
        }
                    /**
         * Get an array of all files in a directory.
         *
         * @param string $directory
         * @param bool $hidden
         * @return \Symfony\Component\Finder\SplFileInfo[] 
         * @static 
         */ 
        public static function files($directory, $hidden = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->files($directory, $hidden);
        }
                    /**
         * Get all of the files from the given directory (recursive).
         *
         * @param string $directory
         * @param bool $hidden
         * @return \Symfony\Component\Finder\SplFileInfo[] 
         * @static 
         */ 
        public static function allFiles($directory, $hidden = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->allFiles($directory, $hidden);
        }
                    /**
         * Get all of the directories within a given directory.
         *
         * @param string $directory
         * @return array 
         * @static 
         */ 
        public static function directories($directory)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->directories($directory);
        }
                    /**
         * Ensure a directory exists.
         *
         * @param string $path
         * @param int $mode
         * @param bool $recursive
         * @return void 
         * @static 
         */ 
        public static function ensureDirectoryExists($path, $mode = 493, $recursive = true)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        $instance->ensureDirectoryExists($path, $mode, $recursive);
        }
                    /**
         * Create a directory.
         *
         * @param string $path
         * @param int $mode
         * @param bool $recursive
         * @param bool $force
         * @return bool 
         * @static 
         */ 
        public static function makeDirectory($path, $mode = 493, $recursive = false, $force = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->makeDirectory($path, $mode, $recursive, $force);
        }
                    /**
         * Move a directory.
         *
         * @param string $from
         * @param string $to
         * @param bool $overwrite
         * @return bool 
         * @static 
         */ 
        public static function moveDirectory($from, $to, $overwrite = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->moveDirectory($from, $to, $overwrite);
        }
                    /**
         * Copy a directory from one location to another.
         *
         * @param string $directory
         * @param string $destination
         * @param int|null $options
         * @return bool 
         * @static 
         */ 
        public static function copyDirectory($directory, $destination, $options = null)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->copyDirectory($directory, $destination, $options);
        }
                    /**
         * Recursively delete a directory.
         * 
         * The directory itself may be optionally preserved.
         *
         * @param string $directory
         * @param bool $preserve
         * @return bool 
         * @static 
         */ 
        public static function deleteDirectory($directory, $preserve = false)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->deleteDirectory($directory, $preserve);
        }
                    /**
         * Remove all of the directories within a given directory.
         *
         * @param string $directory
         * @return bool 
         * @static 
         */ 
        public static function deleteDirectories($directory)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->deleteDirectories($directory);
        }
                    /**
         * Empty the specified directory of all files and folders.
         *
         * @param string $directory
         * @return bool 
         * @static 
         */ 
        public static function cleanDirectory($directory)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->cleanDirectory($directory);
        }
                    /**
         * Apply the callback if the given "value" is (or resolves to) truthy.
         *
         * @template TWhenParameter
         * @template TWhenReturnType
         * @param \Illuminate\Filesystem\(\Closure($this):  TWhenParameter)|TWhenParameter|null  $value
         * @param \Illuminate\Filesystem\(callable($this,  TWhenParameter): TWhenReturnType)|null  $callback
         * @param \Illuminate\Filesystem\(callable($this,  TWhenParameter): TWhenReturnType)|null  $default
         * @return $this|\Illuminate\Filesystem\TWhenReturnType 
         * @static 
         */ 
        public static function when($value = null, $callback = null, $default = null)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->when($value, $callback, $default);
        }
                    /**
         * Apply the callback if the given "value" is (or resolves to) falsy.
         *
         * @template TUnlessParameter
         * @template TUnlessReturnType
         * @param \Illuminate\Filesystem\(\Closure($this):  TUnlessParameter)|TUnlessParameter|null  $value
         * @param \Illuminate\Filesystem\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $callback
         * @param \Illuminate\Filesystem\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $default
         * @return $this|\Illuminate\Filesystem\TUnlessReturnType 
         * @static 
         */ 
        public static function unless($value = null, $callback = null, $default = null)
        {
                        /** @var \Illuminate\Filesystem\Filesystem $instance */
                        return $instance->unless($value, $callback, $default);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Filesystem\Filesystem::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Filesystem\Filesystem::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Filesystem\Filesystem::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Filesystem\Filesystem::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Auth\Access\Gate
     */ 
        class Gate {
                    /**
         * Determine if a given ability has been defined.
         *
         * @param string|array $ability
         * @return bool 
         * @static 
         */ 
        public static function has($ability)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->has($ability);
        }
                    /**
         * Perform an on-demand authorization check. Throw an authorization exception if the condition or callback is false.
         *
         * @param \Illuminate\Auth\Access\Response|\Closure|bool $condition
         * @param string|null $message
         * @param string|null $code
         * @return \Illuminate\Auth\Access\Response 
         * @throws \Illuminate\Auth\Access\AuthorizationException
         * @static 
         */ 
        public static function allowIf($condition, $message = null, $code = null)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->allowIf($condition, $message, $code);
        }
                    /**
         * Perform an on-demand authorization check. Throw an authorization exception if the condition or callback is true.
         *
         * @param \Illuminate\Auth\Access\Response|\Closure|bool $condition
         * @param string|null $message
         * @param string|null $code
         * @return \Illuminate\Auth\Access\Response 
         * @throws \Illuminate\Auth\Access\AuthorizationException
         * @static 
         */ 
        public static function denyIf($condition, $message = null, $code = null)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->denyIf($condition, $message, $code);
        }
                    /**
         * Define a new ability.
         *
         * @param string $ability
         * @param callable|array|string $callback
         * @return \Illuminate\Auth\Access\Gate 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function define($ability, $callback)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->define($ability, $callback);
        }
                    /**
         * Define abilities for a resource.
         *
         * @param string $name
         * @param string $class
         * @param array|null $abilities
         * @return \Illuminate\Auth\Access\Gate 
         * @static 
         */ 
        public static function resource($name, $class, $abilities = null)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->resource($name, $class, $abilities);
        }
                    /**
         * Define a policy class for a given class type.
         *
         * @param string $class
         * @param string $policy
         * @return \Illuminate\Auth\Access\Gate 
         * @static 
         */ 
        public static function policy($class, $policy)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->policy($class, $policy);
        }
                    /**
         * Register a callback to run before all Gate checks.
         *
         * @param callable $callback
         * @return \Illuminate\Auth\Access\Gate 
         * @static 
         */ 
        public static function before($callback)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->before($callback);
        }
                    /**
         * Register a callback to run after all Gate checks.
         *
         * @param callable $callback
         * @return \Illuminate\Auth\Access\Gate 
         * @static 
         */ 
        public static function after($callback)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->after($callback);
        }
                    /**
         * Determine if the given ability should be granted for the current user.
         *
         * @param string $ability
         * @param array|mixed $arguments
         * @return bool 
         * @static 
         */ 
        public static function allows($ability, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->allows($ability, $arguments);
        }
                    /**
         * Determine if the given ability should be denied for the current user.
         *
         * @param string $ability
         * @param array|mixed $arguments
         * @return bool 
         * @static 
         */ 
        public static function denies($ability, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->denies($ability, $arguments);
        }
                    /**
         * Determine if all of the given abilities should be granted for the current user.
         *
         * @param \Illuminate\Auth\Access\iterable|string $abilities
         * @param array|mixed $arguments
         * @return bool 
         * @static 
         */ 
        public static function check($abilities, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->check($abilities, $arguments);
        }
                    /**
         * Determine if any one of the given abilities should be granted for the current user.
         *
         * @param \Illuminate\Auth\Access\iterable|string $abilities
         * @param array|mixed $arguments
         * @return bool 
         * @static 
         */ 
        public static function any($abilities, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->any($abilities, $arguments);
        }
                    /**
         * Determine if all of the given abilities should be denied for the current user.
         *
         * @param \Illuminate\Auth\Access\iterable|string $abilities
         * @param array|mixed $arguments
         * @return bool 
         * @static 
         */ 
        public static function none($abilities, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->none($abilities, $arguments);
        }
                    /**
         * Determine if the given ability should be granted for the current user.
         *
         * @param string $ability
         * @param array|mixed $arguments
         * @return \Illuminate\Auth\Access\Response 
         * @throws \Illuminate\Auth\Access\AuthorizationException
         * @static 
         */ 
        public static function authorize($ability, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->authorize($ability, $arguments);
        }
                    /**
         * Inspect the user for the given ability.
         *
         * @param string $ability
         * @param array|mixed $arguments
         * @return \Illuminate\Auth\Access\Response 
         * @static 
         */ 
        public static function inspect($ability, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->inspect($ability, $arguments);
        }
                    /**
         * Get the raw result from the authorization callback.
         *
         * @param string $ability
         * @param array|mixed $arguments
         * @return mixed 
         * @throws \Illuminate\Auth\Access\AuthorizationException
         * @static 
         */ 
        public static function raw($ability, $arguments = [])
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->raw($ability, $arguments);
        }
                    /**
         * Get a policy instance for a given class.
         *
         * @param object|string $class
         * @return mixed 
         * @static 
         */ 
        public static function getPolicyFor($class)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->getPolicyFor($class);
        }
                    /**
         * Specify a callback to be used to guess policy names.
         *
         * @param callable $callback
         * @return \Illuminate\Auth\Access\Gate 
         * @static 
         */ 
        public static function guessPolicyNamesUsing($callback)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->guessPolicyNamesUsing($callback);
        }
                    /**
         * Build a policy class instance of the given type.
         *
         * @param object|string $class
         * @return mixed 
         * @throws \Illuminate\Contracts\Container\BindingResolutionException
         * @static 
         */ 
        public static function resolvePolicy($class)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->resolvePolicy($class);
        }
                    /**
         * Get a gate instance for the given user.
         *
         * @param \Illuminate\Contracts\Auth\Authenticatable|mixed $user
         * @return static 
         * @static 
         */ 
        public static function forUser($user)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->forUser($user);
        }
                    /**
         * Get all of the defined abilities.
         *
         * @return array 
         * @static 
         */ 
        public static function abilities()
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->abilities();
        }
                    /**
         * Get all of the defined policies.
         *
         * @return array 
         * @static 
         */ 
        public static function policies()
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->policies();
        }
                    /**
         * Set the container instance used by the gate.
         *
         * @param \Illuminate\Contracts\Container\Container $container
         * @return \Illuminate\Auth\Access\Gate 
         * @static 
         */ 
        public static function setContainer($container)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->setContainer($container);
        }
                    /**
         * Deny with a HTTP status code.
         *
         * @param int $status
         * @param string|null $message
         * @param int|null $code
         * @return \Illuminate\Auth\Access\Response 
         * @static 
         */ 
        public static function denyWithStatus($status, $message = null, $code = null)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->denyWithStatus($status, $message, $code);
        }
                    /**
         * Deny with a 404 HTTP status code.
         *
         * @param string|null $message
         * @param int|null $code
         * @return \Illuminate\Auth\Access\Response 
         * @static 
         */ 
        public static function denyAsNotFound($message = null, $code = null)
        {
                        /** @var \Illuminate\Auth\Access\Gate $instance */
                        return $instance->denyAsNotFound($message, $code);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Hashing\HashManager
     * @see \Illuminate\Hashing\AbstractHasher
     */ 
        class Hash {
                    /**
         * Create an instance of the Bcrypt hash Driver.
         *
         * @return \Illuminate\Hashing\BcryptHasher 
         * @static 
         */ 
        public static function createBcryptDriver()
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->createBcryptDriver();
        }
                    /**
         * Create an instance of the Argon2i hash Driver.
         *
         * @return \Illuminate\Hashing\ArgonHasher 
         * @static 
         */ 
        public static function createArgonDriver()
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->createArgonDriver();
        }
                    /**
         * Create an instance of the Argon2id hash Driver.
         *
         * @return \Illuminate\Hashing\Argon2IdHasher 
         * @static 
         */ 
        public static function createArgon2idDriver()
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->createArgon2idDriver();
        }
                    /**
         * Get information about the given hashed value.
         *
         * @param string $hashedValue
         * @return array 
         * @static 
         */ 
        public static function info($hashedValue)
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->info($hashedValue);
        }
                    /**
         * Hash the given value.
         *
         * @param string $value
         * @param array $options
         * @return string 
         * @static 
         */ 
        public static function make($value, $options = [])
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->make($value, $options);
        }
                    /**
         * Check the given plain value against a hash.
         *
         * @param string $value
         * @param string $hashedValue
         * @param array $options
         * @return bool 
         * @static 
         */ 
        public static function check($value, $hashedValue, $options = [])
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->check($value, $hashedValue, $options);
        }
                    /**
         * Check if the given hash has been hashed using the given options.
         *
         * @param string $hashedValue
         * @param array $options
         * @return bool 
         * @static 
         */ 
        public static function needsRehash($hashedValue, $options = [])
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->needsRehash($hashedValue, $options);
        }
                    /**
         * Get the default driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Get a driver instance.
         *
         * @param string|null $driver
         * @return mixed 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function driver($driver = null)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->driver($driver);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Hashing\HashManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Get all of the created "drivers".
         *
         * @return array 
         * @static 
         */ 
        public static function getDrivers()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->getDrivers();
        }
                    /**
         * Get the container instance used by the manager.
         *
         * @return \Illuminate\Contracts\Container\Container 
         * @static 
         */ 
        public static function getContainer()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->getContainer();
        }
                    /**
         * Set the container instance used by the manager.
         *
         * @param \Illuminate\Contracts\Container\Container $container
         * @return \Illuminate\Hashing\HashManager 
         * @static 
         */ 
        public static function setContainer($container)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->setContainer($container);
        }
                    /**
         * Forget all of the resolved driver instances.
         *
         * @return \Illuminate\Hashing\HashManager 
         * @static 
         */ 
        public static function forgetDrivers()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Hashing\HashManager $instance */
                        return $instance->forgetDrivers();
        }
         
    }
            /**
     * 
     *
     * @method static \Illuminate\Http\Client\PendingRequest baseUrl(string $url)
     * @method static \Illuminate\Http\Client\PendingRequest withBody(string $content, string $contentType)
     * @method static \Illuminate\Http\Client\PendingRequest asJson()
     * @method static \Illuminate\Http\Client\PendingRequest asForm()
     * @method static \Illuminate\Http\Client\PendingRequest attach(string|array $name, string|resource $contents = '', string|null $filename = null, array $headers = [])
     * @method static \Illuminate\Http\Client\PendingRequest asMultipart()
     * @method static \Illuminate\Http\Client\PendingRequest bodyFormat(string $format)
     * @method static \Illuminate\Http\Client\PendingRequest contentType(string $contentType)
     * @method static \Illuminate\Http\Client\PendingRequest acceptJson()
     * @method static \Illuminate\Http\Client\PendingRequest accept(string $contentType)
     * @method static \Illuminate\Http\Client\PendingRequest withHeaders(array $headers)
     * @method static \Illuminate\Http\Client\PendingRequest withBasicAuth(string $username, string $password)
     * @method static \Illuminate\Http\Client\PendingRequest withDigestAuth(string $username, string $password)
     * @method static \Illuminate\Http\Client\PendingRequest withToken(string $token, string $type = 'Bearer')
     * @method static \Illuminate\Http\Client\PendingRequest withUserAgent(string $userAgent)
     * @method static \Illuminate\Http\Client\PendingRequest withUrlParameters(array $parameters = [])
     * @method static \Illuminate\Http\Client\PendingRequest withCookies(array $cookies, string $domain)
     * @method static \Illuminate\Http\Client\PendingRequest maxRedirects(int $max)
     * @method static \Illuminate\Http\Client\PendingRequest withoutRedirecting()
     * @method static \Illuminate\Http\Client\PendingRequest withoutVerifying()
     * @method static \Illuminate\Http\Client\PendingRequest sink(string|resource $to)
     * @method static \Illuminate\Http\Client\PendingRequest timeout(int $seconds)
     * @method static \Illuminate\Http\Client\PendingRequest connectTimeout(int $seconds)
     * @method static \Illuminate\Http\Client\PendingRequest retry(int $times, int $sleepMilliseconds = 0, callable|null $when = null, bool $throw = true)
     * @method static \Illuminate\Http\Client\PendingRequest withOptions(array $options)
     * @method static \Illuminate\Http\Client\PendingRequest withMiddleware(callable $middleware)
     * @method static \Illuminate\Http\Client\PendingRequest beforeSending(callable $callback)
     * @method static \Illuminate\Http\Client\PendingRequest throw(callable|null $callback = null)
     * @method static \Illuminate\Http\Client\PendingRequest throwIf(callable|bool $condition, callable|null $throwCallback = null)
     * @method static \Illuminate\Http\Client\PendingRequest throwUnless(bool $condition)
     * @method static \Illuminate\Http\Client\PendingRequest dump()
     * @method static \Illuminate\Http\Client\PendingRequest dd()
     * @method static \Illuminate\Http\Client\Response get(string $url, array|string|null $query = null)
     * @method static \Illuminate\Http\Client\Response head(string $url, array|string|null $query = null)
     * @method static \Illuminate\Http\Client\Response post(string $url, array $data = [])
     * @method static \Illuminate\Http\Client\Response patch(string $url, array $data = [])
     * @method static \Illuminate\Http\Client\Response put(string $url, array $data = [])
     * @method static \Illuminate\Http\Client\Response delete(string $url, array $data = [])
     * @method static array pool(callable $callback)
     * @method static \Illuminate\Http\Client\Response send(string $method, string $url, array $options = [])
     * @method static \GuzzleHttp\Client buildClient()
     * @method static \GuzzleHttp\Client createClient(\GuzzleHttp\HandlerStack $handlerStack)
     * @method static \GuzzleHttp\HandlerStack buildHandlerStack()
     * @method static \GuzzleHttp\HandlerStack pushHandlers(\GuzzleHttp\HandlerStack $handlerStack)
     * @method static \Closure buildBeforeSendingHandler()
     * @method static \Closure buildRecorderHandler()
     * @method static \Closure buildStubHandler()
     * @method static \GuzzleHttp\Psr7\RequestInterface runBeforeSendingCallbacks(\GuzzleHttp\Psr7\RequestInterface $request, array $options)
     * @method static array mergeOptions(array ...$options)
     * @method static \Illuminate\Http\Client\PendingRequest stub(callable $callback)
     * @method static \Illuminate\Http\Client\PendingRequest async(bool $async = true)
     * @method static \GuzzleHttp\Promise\PromiseInterface|null getPromise()
     * @method static \Illuminate\Http\Client\PendingRequest setClient(\GuzzleHttp\Client $client)
     * @method static \Illuminate\Http\Client\PendingRequest setHandler(callable $handler)
     * @method static array getOptions()
     * @method static \Illuminate\Http\Client\PendingRequest|mixed when(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
     * @method static \Illuminate\Http\Client\PendingRequest|mixed unless(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
     * @see \Illuminate\Http\Client\Factory
     */ 
        class Http {
                    /**
         * Create a new response instance for use during stubbing.
         *
         * @param array|string|null $body
         * @param int $status
         * @param array $headers
         * @return \GuzzleHttp\Promise\PromiseInterface 
         * @static 
         */ 
        public static function response($body = null, $status = 200, $headers = [])
        {
                        return \Illuminate\Http\Client\Factory::response($body, $status, $headers);
        }
                    /**
         * Get an invokable object that returns a sequence of responses in order for use during stubbing.
         *
         * @param array $responses
         * @return \Illuminate\Http\Client\ResponseSequence 
         * @static 
         */ 
        public static function sequence($responses = [])
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->sequence($responses);
        }
                    /**
         * Register a stub callable that will intercept requests and be able to return stub responses.
         *
         * @param callable|array|null $callback
         * @return \Illuminate\Http\Client\Factory 
         * @static 
         */ 
        public static function fake($callback = null)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->fake($callback);
        }
                    /**
         * Register a response sequence for the given URL pattern.
         *
         * @param string $url
         * @return \Illuminate\Http\Client\ResponseSequence 
         * @static 
         */ 
        public static function fakeSequence($url = '*')
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->fakeSequence($url);
        }
                    /**
         * Stub the given URL using the given callback.
         *
         * @param string $url
         * @param \Illuminate\Http\Client\Response|\GuzzleHttp\Promise\PromiseInterface|callable $callback
         * @return \Illuminate\Http\Client\Factory 
         * @static 
         */ 
        public static function stubUrl($url, $callback)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->stubUrl($url, $callback);
        }
                    /**
         * Indicate that an exception should be thrown if any request is not faked.
         *
         * @param bool $prevent
         * @return \Illuminate\Http\Client\Factory 
         * @static 
         */ 
        public static function preventStrayRequests($prevent = true)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->preventStrayRequests($prevent);
        }
                    /**
         * Indicate that an exception should not be thrown if any request is not faked.
         *
         * @return \Illuminate\Http\Client\Factory 
         * @static 
         */ 
        public static function allowStrayRequests()
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->allowStrayRequests();
        }
                    /**
         * Record a request response pair.
         *
         * @param \Illuminate\Http\Client\Request $request
         * @param \Illuminate\Http\Client\Response $response
         * @return void 
         * @static 
         */ 
        public static function recordRequestResponsePair($request, $response)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        $instance->recordRequestResponsePair($request, $response);
        }
                    /**
         * Assert that a request / response pair was recorded matching a given truth test.
         *
         * @param callable $callback
         * @return void 
         * @static 
         */ 
        public static function assertSent($callback)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        $instance->assertSent($callback);
        }
                    /**
         * Assert that the given request was sent in the given order.
         *
         * @param array $callbacks
         * @return void 
         * @static 
         */ 
        public static function assertSentInOrder($callbacks)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        $instance->assertSentInOrder($callbacks);
        }
                    /**
         * Assert that a request / response pair was not recorded matching a given truth test.
         *
         * @param callable $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotSent($callback)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        $instance->assertNotSent($callback);
        }
                    /**
         * Assert that no request / response pair was recorded.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingSent()
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        $instance->assertNothingSent();
        }
                    /**
         * Assert how many requests have been recorded.
         *
         * @param int $count
         * @return void 
         * @static 
         */ 
        public static function assertSentCount($count)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        $instance->assertSentCount($count);
        }
                    /**
         * Assert that every created response sequence is empty.
         *
         * @return void 
         * @static 
         */ 
        public static function assertSequencesAreEmpty()
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        $instance->assertSequencesAreEmpty();
        }
                    /**
         * Get a collection of the request / response pairs matching the given truth test.
         *
         * @param callable $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function recorded($callback = null)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->recorded($callback);
        }
                    /**
         * Get the current event dispatcher implementation.
         *
         * @return \Illuminate\Contracts\Events\Dispatcher|null 
         * @static 
         */ 
        public static function getDispatcher()
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->getDispatcher();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Http\Client\Factory::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Http\Client\Factory::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Http\Client\Factory::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Http\Client\Factory::flushMacros();
        }
                    /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param array $parameters
         * @return mixed 
         * @throws \BadMethodCallException
         * @static 
         */ 
        public static function macroCall($method, $parameters)
        {
                        /** @var \Illuminate\Http\Client\Factory $instance */
                        return $instance->macroCall($method, $parameters);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Translation\Translator
     */ 
        class Lang {
                    /**
         * Determine if a translation exists for a given locale.
         *
         * @param string $key
         * @param string|null $locale
         * @return bool 
         * @static 
         */ 
        public static function hasForLocale($key, $locale = null)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->hasForLocale($key, $locale);
        }
                    /**
         * Determine if a translation exists.
         *
         * @param string $key
         * @param string|null $locale
         * @param bool $fallback
         * @return bool 
         * @static 
         */ 
        public static function has($key, $locale = null, $fallback = true)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->has($key, $locale, $fallback);
        }
                    /**
         * Get the translation for the given key.
         *
         * @param string $key
         * @param array $replace
         * @param string|null $locale
         * @param bool $fallback
         * @return string|array 
         * @static 
         */ 
        public static function get($key, $replace = [], $locale = null, $fallback = true)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->get($key, $replace, $locale, $fallback);
        }
                    /**
         * Get a translation according to an integer value.
         *
         * @param string $key
         * @param \Countable|int|array $number
         * @param array $replace
         * @param string|null $locale
         * @return string 
         * @static 
         */ 
        public static function choice($key, $number, $replace = [], $locale = null)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->choice($key, $number, $replace, $locale);
        }
                    /**
         * Add translation lines to the given locale.
         *
         * @param array $lines
         * @param string $locale
         * @param string $namespace
         * @return void 
         * @static 
         */ 
        public static function addLines($lines, $locale, $namespace = '*')
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->addLines($lines, $locale, $namespace);
        }
                    /**
         * Load the specified language group.
         *
         * @param string $namespace
         * @param string $group
         * @param string $locale
         * @return void 
         * @static 
         */ 
        public static function load($namespace, $group, $locale)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->load($namespace, $group, $locale);
        }
                    /**
         * Add a new namespace to the loader.
         *
         * @param string $namespace
         * @param string $hint
         * @return void 
         * @static 
         */ 
        public static function addNamespace($namespace, $hint)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->addNamespace($namespace, $hint);
        }
                    /**
         * Add a new JSON path to the loader.
         *
         * @param string $path
         * @return void 
         * @static 
         */ 
        public static function addJsonPath($path)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->addJsonPath($path);
        }
                    /**
         * Parse a key into namespace, group, and item.
         *
         * @param string $key
         * @return array 
         * @static 
         */ 
        public static function parseKey($key)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->parseKey($key);
        }
                    /**
         * Specify a callback that should be invoked to determined the applicable locale array.
         *
         * @param callable $callback
         * @return void 
         * @static 
         */ 
        public static function determineLocalesUsing($callback)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->determineLocalesUsing($callback);
        }
                    /**
         * Get the message selector instance.
         *
         * @return \Illuminate\Translation\MessageSelector 
         * @static 
         */ 
        public static function getSelector()
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->getSelector();
        }
                    /**
         * Set the message selector instance.
         *
         * @param \Illuminate\Translation\MessageSelector $selector
         * @return void 
         * @static 
         */ 
        public static function setSelector($selector)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->setSelector($selector);
        }
                    /**
         * Get the language line loader implementation.
         *
         * @return \Illuminate\Contracts\Translation\Loader 
         * @static 
         */ 
        public static function getLoader()
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->getLoader();
        }
                    /**
         * Get the default locale being used.
         *
         * @return string 
         * @static 
         */ 
        public static function locale()
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->locale();
        }
                    /**
         * Get the default locale being used.
         *
         * @return string 
         * @static 
         */ 
        public static function getLocale()
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->getLocale();
        }
                    /**
         * Set the default locale.
         *
         * @param string $locale
         * @return void 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function setLocale($locale)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->setLocale($locale);
        }
                    /**
         * Get the fallback locale being used.
         *
         * @return string 
         * @static 
         */ 
        public static function getFallback()
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        return $instance->getFallback();
        }
                    /**
         * Set the fallback locale being used.
         *
         * @param string $fallback
         * @return void 
         * @static 
         */ 
        public static function setFallback($fallback)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->setFallback($fallback);
        }
                    /**
         * Set the loaded translation groups.
         *
         * @param array $loaded
         * @return void 
         * @static 
         */ 
        public static function setLoaded($loaded)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->setLoaded($loaded);
        }
                    /**
         * Add a handler to be executed in order to format a given class to a string during translation replacements.
         *
         * @param callable|string $class
         * @param callable|null $handler
         * @return void 
         * @static 
         */ 
        public static function stringable($class, $handler = null)
        {
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->stringable($class, $handler);
        }
                    /**
         * Set the parsed value of a key.
         *
         * @param string $key
         * @param array $parsed
         * @return void 
         * @static 
         */ 
        public static function setParsedKey($key, $parsed)
        {            //Method inherited from \Illuminate\Support\NamespacedItemResolver         
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->setParsedKey($key, $parsed);
        }
                    /**
         * Flush the cache of parsed keys.
         *
         * @return void 
         * @static 
         */ 
        public static function flushParsedKeys()
        {            //Method inherited from \Illuminate\Support\NamespacedItemResolver         
                        /** @var \Illuminate\Translation\Translator $instance */
                        $instance->flushParsedKeys();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Translation\Translator::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Translation\Translator::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Translation\Translator::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Translation\Translator::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @method static void write(string $level, \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
     * @method static \Illuminate\Log\Logger withContext(array $context = [])
     * @method static \Illuminate\Log\Logger withoutContext()
     * @method static void listen(\Closure $callback)
     * @method static \Psr\Log\LoggerInterface getLogger()
     * @method static \Illuminate\Contracts\Events\Dispatcher getEventDispatcher()
     * @method static void setEventDispatcher(\Illuminate\Contracts\Events\Dispatcher $dispatcher)
     * @see \Illuminate\Log\LogManager
     */ 
        class Log {
                    /**
         * Build an on-demand log channel.
         *
         * @param array $config
         * @return \Psr\Log\LoggerInterface 
         * @static 
         */ 
        public static function build($config)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->build($config);
        }
                    /**
         * Create a new, on-demand aggregate logger instance.
         *
         * @param array $channels
         * @param string|null $channel
         * @return \Psr\Log\LoggerInterface 
         * @static 
         */ 
        public static function stack($channels, $channel = null)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->stack($channels, $channel);
        }
                    /**
         * Get a log channel instance.
         *
         * @param string|null $channel
         * @return \Psr\Log\LoggerInterface 
         * @static 
         */ 
        public static function channel($channel = null)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->channel($channel);
        }
                    /**
         * Get a log driver instance.
         *
         * @param string|null $driver
         * @return \Psr\Log\LoggerInterface 
         * @static 
         */ 
        public static function driver($driver = null)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->driver($driver);
        }
                    /**
         * Share context across channels and stacks.
         *
         * @param array $context
         * @return \Illuminate\Log\LogManager 
         * @static 
         */ 
        public static function shareContext($context)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->shareContext($context);
        }
                    /**
         * The context shared across channels and stacks.
         *
         * @return array 
         * @static 
         */ 
        public static function sharedContext()
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->sharedContext();
        }
                    /**
         * Flush the shared context.
         *
         * @return \Illuminate\Log\LogManager 
         * @static 
         */ 
        public static function flushSharedContext()
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->flushSharedContext();
        }
                    /**
         * Get the default log driver name.
         *
         * @return string|null 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the default log driver name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->setDefaultDriver($name);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Log\LogManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Unset the given channel instance.
         *
         * @param string|null $driver
         * @return void 
         * @static 
         */ 
        public static function forgetChannel($driver = null)
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->forgetChannel($driver);
        }
                    /**
         * Get all of the resolved log channels.
         *
         * @return array 
         * @static 
         */ 
        public static function getChannels()
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        return $instance->getChannels();
        }
                    /**
         * System is unusable.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function emergency($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->emergency($message, $context);
        }
                    /**
         * Action must be taken immediately.
         * 
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function alert($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->alert($message, $context);
        }
                    /**
         * Critical conditions.
         * 
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function critical($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->critical($message, $context);
        }
                    /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function error($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->error($message, $context);
        }
                    /**
         * Exceptional occurrences that are not errors.
         * 
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function warning($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->warning($message, $context);
        }
                    /**
         * Normal but significant events.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function notice($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->notice($message, $context);
        }
                    /**
         * Interesting events.
         * 
         * Example: User logs in, SQL logs.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function info($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->info($message, $context);
        }
                    /**
         * Detailed debug information.
         *
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function debug($message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->debug($message, $context);
        }
                    /**
         * Logs with an arbitrary level.
         *
         * @param mixed $level
         * @param string $message
         * @param array $context
         * @return void 
         * @static 
         */ 
        public static function log($level, $message, $context = [])
        {
                        /** @var \Illuminate\Log\LogManager $instance */
                        $instance->log($level, $message, $context);
        }
         
    }
            /**
     * 
     *
     * @method static void alwaysFrom(string $address, string|null $name = null)
     * @method static void alwaysReplyTo(string $address, string|null $name = null)
     * @method static void alwaysReturnPath(string $address)
     * @method static void alwaysTo(string $address, string|null $name = null)
     * @method static \Illuminate\Mail\SentMessage|null html(string $html, mixed $callback)
     * @method static \Illuminate\Mail\SentMessage|null plain(string $view, array $data, mixed $callback)
     * @method static string render(string|array $view, array $data = [])
     * @method static mixed onQueue(string $queue, \Illuminate\Contracts\Mail\Mailable $view)
     * @method static mixed queueOn(string $queue, \Illuminate\Contracts\Mail\Mailable $view)
     * @method static mixed laterOn(string $queue, \DateTimeInterface|\DateInterval|int $delay, \Illuminate\Contracts\Mail\Mailable $view)
     * @method static \Symfony\Component\Mailer\Transport\TransportInterface getSymfonyTransport()
     * @method static \Illuminate\Contracts\View\Factory getViewFactory()
     * @method static void setSymfonyTransport(\Symfony\Component\Mailer\Transport\TransportInterface $transport)
     * @method static \Illuminate\Mail\Mailer setQueue(\Illuminate\Contracts\Queue\Factory $queue)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace = true)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @see \Illuminate\Mail\MailManager
     * @see \Illuminate\Support\Testing\Fakes\MailFake
     */ 
        class Mail {
                    /**
         * Get a mailer instance by name.
         *
         * @param string|null $name
         * @return \Illuminate\Contracts\Mail\Mailer 
         * @static 
         */ 
        public static function mailer($name = null)
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->mailer($name);
        }
                    /**
         * Get a mailer driver instance.
         *
         * @param string|null $driver
         * @return \Illuminate\Mail\Mailer 
         * @static 
         */ 
        public static function driver($driver = null)
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->driver($driver);
        }
                    /**
         * Create a new transport instance.
         *
         * @param array $config
         * @return \Symfony\Component\Mailer\Transport\TransportInterface 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function createSymfonyTransport($config)
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->createSymfonyTransport($config);
        }
                    /**
         * Get the default mail driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the default mail driver name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        $instance->setDefaultDriver($name);
        }
                    /**
         * Disconnect the given mailer and remove from local cache.
         *
         * @param string|null $name
         * @return void 
         * @static 
         */ 
        public static function purge($name = null)
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        $instance->purge($name);
        }
                    /**
         * Register a custom transport creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Mail\MailManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Get the application instance used by the manager.
         *
         * @return \Illuminate\Contracts\Foundation\Application 
         * @static 
         */ 
        public static function getApplication()
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->getApplication();
        }
                    /**
         * Set the application instance used by the manager.
         *
         * @param \Illuminate\Contracts\Foundation\Application $app
         * @return \Illuminate\Mail\MailManager 
         * @static 
         */ 
        public static function setApplication($app)
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->setApplication($app);
        }
                    /**
         * Forget all of the resolved mailer instances.
         *
         * @return \Illuminate\Mail\MailManager 
         * @static 
         */ 
        public static function forgetMailers()
        {
                        /** @var \Illuminate\Mail\MailManager $instance */
                        return $instance->forgetMailers();
        }
                    /**
         * Assert if a mailable was sent based on a truth-test callback.
         *
         * @param string|\Closure $mailable
         * @param callable|int|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertSent($mailable, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertSent($mailable, $callback);
        }
                    /**
         * Determine if a mailable was not sent or queued to be sent based on a truth-test callback.
         *
         * @param string|\Closure $mailable
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotOutgoing($mailable, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertNotOutgoing($mailable, $callback);
        }
                    /**
         * Determine if a mailable was not sent based on a truth-test callback.
         *
         * @param string|\Closure $mailable
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotSent($mailable, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertNotSent($mailable, $callback);
        }
                    /**
         * Assert that no mailables were sent or queued to be sent.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingOutgoing()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertNothingOutgoing();
        }
                    /**
         * Assert that no mailables were sent.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingSent()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertNothingSent();
        }
                    /**
         * Assert if a mailable was queued based on a truth-test callback.
         *
         * @param string|\Closure $mailable
         * @param callable|int|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertQueued($mailable, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertQueued($mailable, $callback);
        }
                    /**
         * Determine if a mailable was not queued based on a truth-test callback.
         *
         * @param string|\Closure $mailable
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotQueued($mailable, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertNotQueued($mailable, $callback);
        }
                    /**
         * Assert that no mailables were queued.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingQueued()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->assertNothingQueued();
        }
                    /**
         * Get all of the mailables matching a truth-test callback.
         *
         * @param string|\Closure $mailable
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function sent($mailable, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->sent($mailable, $callback);
        }
                    /**
         * Determine if the given mailable has been sent.
         *
         * @param string $mailable
         * @return bool 
         * @static 
         */ 
        public static function hasSent($mailable)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->hasSent($mailable);
        }
                    /**
         * Get all of the queued mailables matching a truth-test callback.
         *
         * @param string|\Closure $mailable
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function queued($mailable, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->queued($mailable, $callback);
        }
                    /**
         * Determine if the given mailable has been queued.
         *
         * @param string $mailable
         * @return bool 
         * @static 
         */ 
        public static function hasQueued($mailable)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->hasQueued($mailable);
        }
                    /**
         * Begin the process of mailing a mailable class instance.
         *
         * @param mixed $users
         * @return \Illuminate\Mail\PendingMail 
         * @static 
         */ 
        public static function to($users)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->to($users);
        }
                    /**
         * Begin the process of mailing a mailable class instance.
         *
         * @param mixed $users
         * @return \Illuminate\Mail\PendingMail 
         * @static 
         */ 
        public static function cc($users)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->cc($users);
        }
                    /**
         * Begin the process of mailing a mailable class instance.
         *
         * @param mixed $users
         * @return \Illuminate\Mail\PendingMail 
         * @static 
         */ 
        public static function bcc($users)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->bcc($users);
        }
                    /**
         * Send a new message with only a raw text part.
         *
         * @param string $text
         * @param \Closure|string $callback
         * @return void 
         * @static 
         */ 
        public static function raw($text, $callback)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->raw($text, $callback);
        }
                    /**
         * Send a new message using a view.
         *
         * @param \Illuminate\Contracts\Mail\Mailable|string|array $view
         * @param array $data
         * @param \Closure|string|null $callback
         * @return void 
         * @static 
         */ 
        public static function send($view, $data = [], $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        $instance->send($view, $data, $callback);
        }
                    /**
         * Queue a new e-mail message for sending.
         *
         * @param \Illuminate\Contracts\Mail\Mailable|string|array $view
         * @param string|null $queue
         * @return mixed 
         * @static 
         */ 
        public static function queue($view, $queue = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->queue($view, $queue);
        }
                    /**
         * Queue a new e-mail message for sending after (n) seconds.
         *
         * @param \DateTimeInterface|\DateInterval|int $delay
         * @param \Illuminate\Contracts\Mail\Mailable|string|array $view
         * @param string|null $queue
         * @return mixed 
         * @static 
         */ 
        public static function later($delay, $view, $queue = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->later($delay, $view, $queue);
        }
                    /**
         * Get the array of failed recipients.
         *
         * @return array 
         * @static 
         */ 
        public static function failures()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                        return $instance->failures();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Notifications\ChannelManager
     * @see \Illuminate\Support\Testing\Fakes\NotificationFake
     */ 
        class Notification {
                    /**
         * Send the given notification to the given notifiable entities.
         *
         * @param \Illuminate\Support\Collection|array|mixed $notifiables
         * @param mixed $notification
         * @return void 
         * @static 
         */ 
        public static function send($notifiables, $notification)
        {
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        $instance->send($notifiables, $notification);
        }
                    /**
         * Send the given notification immediately.
         *
         * @param \Illuminate\Support\Collection|array|mixed $notifiables
         * @param mixed $notification
         * @param array|null $channels
         * @return void 
         * @static 
         */ 
        public static function sendNow($notifiables, $notification, $channels = null)
        {
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        $instance->sendNow($notifiables, $notification, $channels);
        }
                    /**
         * Get a channel instance.
         *
         * @param string|null $name
         * @return mixed 
         * @static 
         */ 
        public static function channel($name = null)
        {
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->channel($name);
        }
                    /**
         * Get the default channel driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Get the default channel driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function deliversVia()
        {
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->deliversVia();
        }
                    /**
         * Set the default channel driver name.
         *
         * @param string $channel
         * @return void 
         * @static 
         */ 
        public static function deliverVia($channel)
        {
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        $instance->deliverVia($channel);
        }
                    /**
         * Set the locale of notifications.
         *
         * @param string $locale
         * @return \Illuminate\Notifications\ChannelManager 
         * @static 
         */ 
        public static function locale($locale)
        {
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->locale($locale);
        }
                    /**
         * Get a driver instance.
         *
         * @param string|null $driver
         * @return mixed 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function driver($driver = null)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->driver($driver);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Notifications\ChannelManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Get all of the created "drivers".
         *
         * @return array 
         * @static 
         */ 
        public static function getDrivers()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->getDrivers();
        }
                    /**
         * Get the container instance used by the manager.
         *
         * @return \Illuminate\Contracts\Container\Container 
         * @static 
         */ 
        public static function getContainer()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->getContainer();
        }
                    /**
         * Set the container instance used by the manager.
         *
         * @param \Illuminate\Contracts\Container\Container $container
         * @return \Illuminate\Notifications\ChannelManager 
         * @static 
         */ 
        public static function setContainer($container)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->setContainer($container);
        }
                    /**
         * Forget all of the resolved driver instances.
         *
         * @return \Illuminate\Notifications\ChannelManager 
         * @static 
         */ 
        public static function forgetDrivers()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Notifications\ChannelManager $instance */
                        return $instance->forgetDrivers();
        }
                    /**
         * Assert if a notification was sent on-demand based on a truth-test callback.
         *
         * @param string|\Closure $notification
         * @param callable|null $callback
         * @return void 
         * @throws \Exception
         * @static 
         */ 
        public static function assertSentOnDemand($notification, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertSentOnDemand($notification, $callback);
        }
                    /**
         * Assert if a notification was sent based on a truth-test callback.
         *
         * @param mixed $notifiable
         * @param string|\Closure $notification
         * @param callable|null $callback
         * @return void 
         * @throws \Exception
         * @static 
         */ 
        public static function assertSentTo($notifiable, $notification, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertSentTo($notifiable, $notification, $callback);
        }
                    /**
         * Assert if a notification was sent on-demand a number of times.
         *
         * @param string $notification
         * @param int $times
         * @return void 
         * @static 
         */ 
        public static function assertSentOnDemandTimes($notification, $times = 1)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertSentOnDemandTimes($notification, $times);
        }
                    /**
         * Assert if a notification was sent a number of times.
         *
         * @param mixed $notifiable
         * @param string $notification
         * @param int $times
         * @return void 
         * @static 
         */ 
        public static function assertSentToTimes($notifiable, $notification, $times = 1)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertSentToTimes($notifiable, $notification, $times);
        }
                    /**
         * Determine if a notification was sent based on a truth-test callback.
         *
         * @param mixed $notifiable
         * @param string|\Closure $notification
         * @param callable|null $callback
         * @return void 
         * @throws \Exception
         * @static 
         */ 
        public static function assertNotSentTo($notifiable, $notification, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertNotSentTo($notifiable, $notification, $callback);
        }
                    /**
         * Assert that no notifications were sent.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingSent()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertNothingSent();
        }
                    /**
         * Assert that no notifications were sent to the given notifiable.
         *
         * @param mixed $notifiable
         * @return void 
         * @throws \Exception
         * @static 
         */ 
        public static function assertNothingSentTo($notifiable)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertNothingSentTo($notifiable);
        }
                    /**
         * Assert the total amount of times a notification was sent.
         *
         * @param string $notification
         * @param int $expectedCount
         * @return void 
         * @static 
         */ 
        public static function assertSentTimes($notification, $expectedCount)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertSentTimes($notification, $expectedCount);
        }
                    /**
         * Assert the total count of notification that were sent.
         *
         * @param int $expectedCount
         * @return void 
         * @static 
         */ 
        public static function assertCount($expectedCount)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertCount($expectedCount);
        }
                    /**
         * Assert the total amount of times a notification was sent.
         *
         * @param int $expectedCount
         * @param string $notification
         * @return void 
         * @deprecated Use the assertSentTimes method instead
         * @static 
         */ 
        public static function assertTimesSent($expectedCount, $notification)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        $instance->assertTimesSent($expectedCount, $notification);
        }
                    /**
         * Get all of the notifications matching a truth-test callback.
         *
         * @param mixed $notifiable
         * @param string $notification
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function sent($notifiable, $notification, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        return $instance->sent($notifiable, $notification, $callback);
        }
                    /**
         * Determine if there are more notifications left to inspect.
         *
         * @param mixed $notifiable
         * @param string $notification
         * @return bool 
         * @static 
         */ 
        public static function hasSent($notifiable, $notification)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        return $instance->hasSent($notifiable, $notification);
        }
                    /**
         * Get the notifications that have been sent.
         *
         * @return array 
         * @static 
         */ 
        public static function sentNotifications()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
                        return $instance->sentNotifications();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Support\Testing\Fakes\NotificationFake::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Support\Testing\Fakes\NotificationFake::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Support\Testing\Fakes\NotificationFake::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Support\Testing\Fakes\NotificationFake::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @method static string sendResetLink(array $credentials, \Closure|null $callback = null)
     * @method static mixed reset(array $credentials, \Closure $callback)
     * @method static \Illuminate\Contracts\Auth\CanResetPassword|null getUser(array $credentials)
     * @method static string createToken(\Illuminate\Contracts\Auth\CanResetPassword $user)
     * @method static void deleteToken(\Illuminate\Contracts\Auth\CanResetPassword $user)
     * @method static bool tokenExists(\Illuminate\Contracts\Auth\CanResetPassword $user, string $token)
     * @method static \Illuminate\Auth\Passwords\TokenRepositoryInterface getRepository()
     * @see \Illuminate\Auth\Passwords\PasswordBrokerManager
     * @see \Illuminate\Auth\Passwords\PasswordBroker
     */ 
        class Password {
                    /**
         * Attempt to get the broker from the local cache.
         *
         * @param string|null $name
         * @return \Illuminate\Contracts\Auth\PasswordBroker 
         * @static 
         */ 
        public static function broker($name = null)
        {
                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
                        return $instance->broker($name);
        }
                    /**
         * Get the default password broker name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the default password broker name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
                        $instance->setDefaultDriver($name);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Queue\QueueManager
     * @see \Illuminate\Queue\Queue
     * @see \Illuminate\Support\Testing\Fakes\QueueFake
     */ 
        class Queue {
                    /**
         * Register an event listener for the before job event.
         *
         * @param mixed $callback
         * @return void 
         * @static 
         */ 
        public static function before($callback)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->before($callback);
        }
                    /**
         * Register an event listener for the after job event.
         *
         * @param mixed $callback
         * @return void 
         * @static 
         */ 
        public static function after($callback)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->after($callback);
        }
                    /**
         * Register an event listener for the exception occurred job event.
         *
         * @param mixed $callback
         * @return void 
         * @static 
         */ 
        public static function exceptionOccurred($callback)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->exceptionOccurred($callback);
        }
                    /**
         * Register an event listener for the daemon queue loop.
         *
         * @param mixed $callback
         * @return void 
         * @static 
         */ 
        public static function looping($callback)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->looping($callback);
        }
                    /**
         * Register an event listener for the failed job event.
         *
         * @param mixed $callback
         * @return void 
         * @static 
         */ 
        public static function failing($callback)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->failing($callback);
        }
                    /**
         * Register an event listener for the daemon queue stopping.
         *
         * @param mixed $callback
         * @return void 
         * @static 
         */ 
        public static function stopping($callback)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->stopping($callback);
        }
                    /**
         * Determine if the driver is connected.
         *
         * @param string|null $name
         * @return bool 
         * @static 
         */ 
        public static function connected($name = null)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        return $instance->connected($name);
        }
                    /**
         * Resolve a queue connection instance.
         *
         * @param string|null $name
         * @return \Illuminate\Contracts\Queue\Queue 
         * @static 
         */ 
        public static function connection($name = null)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        return $instance->connection($name);
        }
                    /**
         * Add a queue connection resolver.
         *
         * @param string $driver
         * @param \Closure $resolver
         * @return void 
         * @static 
         */ 
        public static function extend($driver, $resolver)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->extend($driver, $resolver);
        }
                    /**
         * Add a queue connection resolver.
         *
         * @param string $driver
         * @param \Closure $resolver
         * @return void 
         * @static 
         */ 
        public static function addConnector($driver, $resolver)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->addConnector($driver, $resolver);
        }
                    /**
         * Get the name of the default queue connection.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the name of the default queue connection.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        $instance->setDefaultDriver($name);
        }
                    /**
         * Get the full name for the given connection.
         *
         * @param string|null $connection
         * @return string 
         * @static 
         */ 
        public static function getName($connection = null)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        return $instance->getName($connection);
        }
                    /**
         * Get the application instance used by the manager.
         *
         * @return \Illuminate\Contracts\Foundation\Application 
         * @static 
         */ 
        public static function getApplication()
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        return $instance->getApplication();
        }
                    /**
         * Set the application instance used by the manager.
         *
         * @param \Illuminate\Contracts\Foundation\Application $app
         * @return \Illuminate\Queue\QueueManager 
         * @static 
         */ 
        public static function setApplication($app)
        {
                        /** @var \Illuminate\Queue\QueueManager $instance */
                        return $instance->setApplication($app);
        }
                    /**
         * Specify the jobs that should be queued instead of faked.
         *
         * @param array|string $jobsToBeQueued
         * @return \Illuminate\Support\Testing\Fakes\QueueFake 
         * @static 
         */ 
        public static function except($jobsToBeQueued)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->except($jobsToBeQueued);
        }
                    /**
         * Assert if a job was pushed based on a truth-test callback.
         *
         * @param string|\Closure $job
         * @param callable|int|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertPushed($job, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        $instance->assertPushed($job, $callback);
        }
                    /**
         * Assert if a job was pushed based on a truth-test callback.
         *
         * @param string $queue
         * @param string|\Closure $job
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertPushedOn($queue, $job, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        $instance->assertPushedOn($queue, $job, $callback);
        }
                    /**
         * Assert if a job was pushed with chained jobs based on a truth-test callback.
         *
         * @param string $job
         * @param array $expectedChain
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertPushedWithChain($job, $expectedChain = [], $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        $instance->assertPushedWithChain($job, $expectedChain, $callback);
        }
                    /**
         * Assert if a job was pushed with an empty chain based on a truth-test callback.
         *
         * @param string $job
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertPushedWithoutChain($job, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        $instance->assertPushedWithoutChain($job, $callback);
        }
                    /**
         * Determine if a job was pushed based on a truth-test callback.
         *
         * @param string|\Closure $job
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function assertNotPushed($job, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        $instance->assertNotPushed($job, $callback);
        }
                    /**
         * Assert that no jobs were pushed.
         *
         * @return void 
         * @static 
         */ 
        public static function assertNothingPushed()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        $instance->assertNothingPushed();
        }
                    /**
         * Get all of the jobs matching a truth-test callback.
         *
         * @param string $job
         * @param callable|null $callback
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function pushed($job, $callback = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->pushed($job, $callback);
        }
                    /**
         * Determine if there are any stored jobs for a given class.
         *
         * @param string $job
         * @return bool 
         * @static 
         */ 
        public static function hasPushed($job)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->hasPushed($job);
        }
                    /**
         * Get the size of the queue.
         *
         * @param string|null $queue
         * @return int 
         * @static 
         */ 
        public static function size($queue = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->size($queue);
        }
                    /**
         * Push a new job onto the queue.
         *
         * @param string|object $job
         * @param mixed $data
         * @param string|null $queue
         * @return mixed 
         * @static 
         */ 
        public static function push($job, $data = '', $queue = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->push($job, $data, $queue);
        }
                    /**
         * Determine if a job should be faked or actually dispatched.
         *
         * @param object $job
         * @return bool 
         * @static 
         */ 
        public static function shouldFakeJob($job)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->shouldFakeJob($job);
        }
                    /**
         * Push a raw payload onto the queue.
         *
         * @param string $payload
         * @param string|null $queue
         * @param array $options
         * @return mixed 
         * @static 
         */ 
        public static function pushRaw($payload, $queue = null, $options = [])
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->pushRaw($payload, $queue, $options);
        }
                    /**
         * Push a new job onto the queue after (n) seconds.
         *
         * @param \DateTimeInterface|\DateInterval|int $delay
         * @param string|object $job
         * @param mixed $data
         * @param string|null $queue
         * @return mixed 
         * @static 
         */ 
        public static function later($delay, $job, $data = '', $queue = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->later($delay, $job, $data, $queue);
        }
                    /**
         * Push a new job onto the queue.
         *
         * @param string $queue
         * @param string|object $job
         * @param mixed $data
         * @return mixed 
         * @static 
         */ 
        public static function pushOn($queue, $job, $data = '')
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->pushOn($queue, $job, $data);
        }
                    /**
         * Push a new job onto a specific queue after (n) seconds.
         *
         * @param string $queue
         * @param \DateTimeInterface|\DateInterval|int $delay
         * @param string|object $job
         * @param mixed $data
         * @return mixed 
         * @static 
         */ 
        public static function laterOn($queue, $delay, $job, $data = '')
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->laterOn($queue, $delay, $job, $data);
        }
                    /**
         * Pop the next job off of the queue.
         *
         * @param string|null $queue
         * @return \Illuminate\Contracts\Queue\Job|null 
         * @static 
         */ 
        public static function pop($queue = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->pop($queue);
        }
                    /**
         * Push an array of jobs onto the queue.
         *
         * @param array $jobs
         * @param mixed $data
         * @param string|null $queue
         * @return mixed 
         * @static 
         */ 
        public static function bulk($jobs, $data = '', $queue = null)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->bulk($jobs, $data, $queue);
        }
                    /**
         * Get the jobs that have been pushed.
         *
         * @return array 
         * @static 
         */ 
        public static function pushedJobs()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->pushedJobs();
        }
                    /**
         * Get the connection name for the queue.
         *
         * @return string 
         * @static 
         */ 
        public static function getConnectionName()
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->getConnectionName();
        }
                    /**
         * Set the connection name for the queue.
         *
         * @param string $name
         * @return \Illuminate\Support\Testing\Fakes\QueueFake 
         * @static 
         */ 
        public static function setConnectionName($name)
        {
                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
                        return $instance->setConnectionName($name);
        }
                    /**
         * Get the backoff for an object-based queue handler.
         *
         * @param mixed $job
         * @return mixed 
         * @static 
         */ 
        public static function getJobBackoff($job)
        {            //Method inherited from \Illuminate\Queue\Queue         
                        /** @var \Illuminate\Queue\SyncQueue $instance */
                        return $instance->getJobBackoff($job);
        }
                    /**
         * Get the expiration timestamp for an object-based queue handler.
         *
         * @param mixed $job
         * @return mixed 
         * @static 
         */ 
        public static function getJobExpiration($job)
        {            //Method inherited from \Illuminate\Queue\Queue         
                        /** @var \Illuminate\Queue\SyncQueue $instance */
                        return $instance->getJobExpiration($job);
        }
                    /**
         * Register a callback to be executed when creating job payloads.
         *
         * @param callable|null $callback
         * @return void 
         * @static 
         */ 
        public static function createPayloadUsing($callback)
        {            //Method inherited from \Illuminate\Queue\Queue         
                        \Illuminate\Queue\SyncQueue::createPayloadUsing($callback);
        }
                    /**
         * Get the container instance being used by the connection.
         *
         * @return \Illuminate\Container\Container 
         * @static 
         */ 
        public static function getContainer()
        {            //Method inherited from \Illuminate\Queue\Queue         
                        /** @var \Illuminate\Queue\SyncQueue $instance */
                        return $instance->getContainer();
        }
                    /**
         * Set the IoC container instance.
         *
         * @param \Illuminate\Container\Container $container
         * @return void 
         * @static 
         */ 
        public static function setContainer($container)
        {            //Method inherited from \Illuminate\Queue\Queue         
                        /** @var \Illuminate\Queue\SyncQueue $instance */
                        $instance->setContainer($container);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Cache\RateLimiter
     */ 
        class RateLimiter {
                    /**
         * Register a named limiter configuration.
         *
         * @param string $name
         * @param \Closure $callback
         * @return \Illuminate\Cache\RateLimiter 
         * @static 
         */ 
        public static function for($name, $callback)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->for($name, $callback);
        }
                    /**
         * Get the given named rate limiter.
         *
         * @param string $name
         * @return \Closure 
         * @static 
         */ 
        public static function limiter($name)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->limiter($name);
        }
                    /**
         * Attempts to execute a callback if it's not limited.
         *
         * @param string $key
         * @param int $maxAttempts
         * @param \Closure $callback
         * @param int $decaySeconds
         * @return mixed 
         * @static 
         */ 
        public static function attempt($key, $maxAttempts, $callback, $decaySeconds = 60)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->attempt($key, $maxAttempts, $callback, $decaySeconds);
        }
                    /**
         * Determine if the given key has been "accessed" too many times.
         *
         * @param string $key
         * @param int $maxAttempts
         * @return bool 
         * @static 
         */ 
        public static function tooManyAttempts($key, $maxAttempts)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->tooManyAttempts($key, $maxAttempts);
        }
                    /**
         * Increment the counter for a given key for a given decay time.
         *
         * @param string $key
         * @param int $decaySeconds
         * @return int 
         * @static 
         */ 
        public static function hit($key, $decaySeconds = 60)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->hit($key, $decaySeconds);
        }
                    /**
         * Get the number of attempts for the given key.
         *
         * @param string $key
         * @return mixed 
         * @static 
         */ 
        public static function attempts($key)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->attempts($key);
        }
                    /**
         * Reset the number of attempts for the given key.
         *
         * @param string $key
         * @return mixed 
         * @static 
         */ 
        public static function resetAttempts($key)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->resetAttempts($key);
        }
                    /**
         * Get the number of retries left for the given key.
         *
         * @param string $key
         * @param int $maxAttempts
         * @return int 
         * @static 
         */ 
        public static function remaining($key, $maxAttempts)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->remaining($key, $maxAttempts);
        }
                    /**
         * Get the number of retries left for the given key.
         *
         * @param string $key
         * @param int $maxAttempts
         * @return int 
         * @static 
         */ 
        public static function retriesLeft($key, $maxAttempts)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->retriesLeft($key, $maxAttempts);
        }
                    /**
         * Clear the hits and lockout timer for the given key.
         *
         * @param string $key
         * @return void 
         * @static 
         */ 
        public static function clear($key)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        $instance->clear($key);
        }
                    /**
         * Get the number of seconds until the "key" is accessible again.
         *
         * @param string $key
         * @return int 
         * @static 
         */ 
        public static function availableIn($key)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->availableIn($key);
        }
                    /**
         * Clean the rate limiter key from unicode characters.
         *
         * @param string $key
         * @return string 
         * @static 
         */ 
        public static function cleanRateLimiterKey($key)
        {
                        /** @var \Illuminate\Cache\RateLimiter $instance */
                        return $instance->cleanRateLimiterKey($key);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Routing\Redirector
     */ 
        class Redirect {
                    /**
         * Create a new redirect response to the "home" route.
         *
         * @param int $status
         * @return \Illuminate\Http\RedirectResponse 
         * @deprecated Will be removed in a future Laravel version.
         * @static 
         */ 
        public static function home($status = 302)
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->home($status);
        }
                    /**
         * Create a new redirect response to the previous location.
         *
         * @param int $status
         * @param array $headers
         * @param mixed $fallback
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function back($status = 302, $headers = [], $fallback = false)
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->back($status, $headers, $fallback);
        }
                    /**
         * Create a new redirect response to the current URI.
         *
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function refresh($status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->refresh($status, $headers);
        }
                    /**
         * Create a new redirect response, while putting the current URL in the session.
         *
         * @param string $path
         * @param int $status
         * @param array $headers
         * @param bool|null $secure
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function guest($path, $status = 302, $headers = [], $secure = null)
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->guest($path, $status, $headers, $secure);
        }
                    /**
         * Create a new redirect response to the previously intended location.
         *
         * @param mixed $default
         * @param int $status
         * @param array $headers
         * @param bool|null $secure
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function intended($default = '/', $status = 302, $headers = [], $secure = null)
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->intended($default, $status, $headers, $secure);
        }
                    /**
         * Create a new redirect response to the given path.
         *
         * @param string $path
         * @param int $status
         * @param array $headers
         * @param bool|null $secure
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function to($path, $status = 302, $headers = [], $secure = null)
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->to($path, $status, $headers, $secure);
        }
                    /**
         * Create a new redirect response to an external URL (no validation).
         *
         * @param string $path
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function away($path, $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->away($path, $status, $headers);
        }
                    /**
         * Create a new redirect response to the given HTTPS path.
         *
         * @param string $path
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function secure($path, $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->secure($path, $status, $headers);
        }
                    /**
         * Create a new redirect response to a named route.
         *
         * @param string $route
         * @param mixed $parameters
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function route($route, $parameters = [], $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->route($route, $parameters, $status, $headers);
        }
                    /**
         * Create a new redirect response to a signed named route.
         *
         * @param string $route
         * @param mixed $parameters
         * @param \DateTimeInterface|\DateInterval|int|null $expiration
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function signedRoute($route, $parameters = [], $expiration = null, $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->signedRoute($route, $parameters, $expiration, $status, $headers);
        }
                    /**
         * Create a new redirect response to a signed named route.
         *
         * @param string $route
         * @param \DateTimeInterface|\DateInterval|int|null $expiration
         * @param mixed $parameters
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function temporarySignedRoute($route, $expiration, $parameters = [], $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->temporarySignedRoute($route, $expiration, $parameters, $status, $headers);
        }
                    /**
         * Create a new redirect response to a controller action.
         *
         * @param string|array $action
         * @param mixed $parameters
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function action($action, $parameters = [], $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->action($action, $parameters, $status, $headers);
        }
                    /**
         * Get the URL generator instance.
         *
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function getUrlGenerator()
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->getUrlGenerator();
        }
                    /**
         * Set the active session store.
         *
         * @param \Illuminate\Session\Store $session
         * @return void 
         * @static 
         */ 
        public static function setSession($session)
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        $instance->setSession($session);
        }
                    /**
         * Get the "intended" URL from the session.
         *
         * @return string|null 
         * @static 
         */ 
        public static function getIntendedUrl()
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->getIntendedUrl();
        }
                    /**
         * Set the "intended" URL in the session.
         *
         * @param string $url
         * @return \Illuminate\Routing\Redirector 
         * @static 
         */ 
        public static function setIntendedUrl($url)
        {
                        /** @var \Illuminate\Routing\Redirector $instance */
                        return $instance->setIntendedUrl($url);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Routing\Redirector::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Routing\Redirector::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Routing\Redirector::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Routing\Redirector::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Http\Request
     */ 
        class Request {
                    /**
         * Create a new Illuminate HTTP request from server variables.
         *
         * @return static 
         * @static 
         */ 
        public static function capture()
        {
                        return \Illuminate\Http\Request::capture();
        }
                    /**
         * Return the Request instance.
         *
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function instance()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->instance();
        }
                    /**
         * Get the request method.
         *
         * @return string 
         * @static 
         */ 
        public static function method()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->method();
        }
                    /**
         * Get the root URL for the application.
         *
         * @return string 
         * @static 
         */ 
        public static function root()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->root();
        }
                    /**
         * Get the URL (no query string) for the request.
         *
         * @return string 
         * @static 
         */ 
        public static function url()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->url();
        }
                    /**
         * Get the full URL for the request.
         *
         * @return string 
         * @static 
         */ 
        public static function fullUrl()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->fullUrl();
        }
                    /**
         * Get the full URL for the request with the added query string parameters.
         *
         * @param array $query
         * @return string 
         * @static 
         */ 
        public static function fullUrlWithQuery($query)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->fullUrlWithQuery($query);
        }
                    /**
         * Get the full URL for the request without the given query string parameters.
         *
         * @param array|string $keys
         * @return string 
         * @static 
         */ 
        public static function fullUrlWithoutQuery($keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->fullUrlWithoutQuery($keys);
        }
                    /**
         * Get the current path info for the request.
         *
         * @return string 
         * @static 
         */ 
        public static function path()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->path();
        }
                    /**
         * Get the current decoded path info for the request.
         *
         * @return string 
         * @static 
         */ 
        public static function decodedPath()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->decodedPath();
        }
                    /**
         * Get a segment from the URI (1 based index).
         *
         * @param int $index
         * @param string|null $default
         * @return string|null 
         * @static 
         */ 
        public static function segment($index, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->segment($index, $default);
        }
                    /**
         * Get all of the segments for the request path.
         *
         * @return array 
         * @static 
         */ 
        public static function segments()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->segments();
        }
                    /**
         * Determine if the current request URI matches a pattern.
         *
         * @param mixed $patterns
         * @return bool 
         * @static 
         */ 
        public static function is(...$patterns)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->is(...$patterns);
        }
                    /**
         * Determine if the route name matches a given pattern.
         *
         * @param mixed $patterns
         * @return bool 
         * @static 
         */ 
        public static function routeIs(...$patterns)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->routeIs(...$patterns);
        }
                    /**
         * Determine if the current request URL and query string match a pattern.
         *
         * @param mixed $patterns
         * @return bool 
         * @static 
         */ 
        public static function fullUrlIs(...$patterns)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->fullUrlIs(...$patterns);
        }
                    /**
         * Get the host name.
         *
         * @return string 
         * @static 
         */ 
        public static function host()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->host();
        }
                    /**
         * Get the HTTP host being requested.
         *
         * @return string 
         * @static 
         */ 
        public static function httpHost()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->httpHost();
        }
                    /**
         * Get the scheme and HTTP host.
         *
         * @return string 
         * @static 
         */ 
        public static function schemeAndHttpHost()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->schemeAndHttpHost();
        }
                    /**
         * Determine if the request is the result of an AJAX call.
         *
         * @return bool 
         * @static 
         */ 
        public static function ajax()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->ajax();
        }
                    /**
         * Determine if the request is the result of a PJAX call.
         *
         * @return bool 
         * @static 
         */ 
        public static function pjax()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->pjax();
        }
                    /**
         * Determine if the request is the result of a prefetch call.
         *
         * @return bool 
         * @static 
         */ 
        public static function prefetch()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->prefetch();
        }
                    /**
         * Determine if the request is over HTTPS.
         *
         * @return bool 
         * @static 
         */ 
        public static function secure()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->secure();
        }
                    /**
         * Get the client IP address.
         *
         * @return string|null 
         * @static 
         */ 
        public static function ip()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->ip();
        }
                    /**
         * Get the client IP addresses.
         *
         * @return array 
         * @static 
         */ 
        public static function ips()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->ips();
        }
                    /**
         * Get the client user agent.
         *
         * @return string|null 
         * @static 
         */ 
        public static function userAgent()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->userAgent();
        }
                    /**
         * Merge new input into the current request's input array.
         *
         * @param array $input
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function merge($input)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->merge($input);
        }
                    /**
         * Merge new input into the request's input, but only when that key is missing from the request.
         *
         * @param array $input
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function mergeIfMissing($input)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->mergeIfMissing($input);
        }
                    /**
         * Replace the input for the current request.
         *
         * @param array $input
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function replace($input)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->replace($input);
        }
                    /**
         * This method belongs to Symfony HttpFoundation and is not usually needed when using Laravel.
         * 
         * Instead, you may use the "input" method.
         *
         * @param string $key
         * @param mixed $default
         * @return mixed 
         * @static 
         */ 
        public static function get($key, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->get($key, $default);
        }
                    /**
         * Get the JSON payload for the request.
         *
         * @param string|null $key
         * @param mixed $default
         * @return \Symfony\Component\HttpFoundation\ParameterBag|mixed 
         * @static 
         */ 
        public static function json($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->json($key, $default);
        }
                    /**
         * Create a new request instance from the given Laravel request.
         *
         * @param \Illuminate\Http\Request $from
         * @param \Illuminate\Http\Request|null $to
         * @return static 
         * @static 
         */ 
        public static function createFrom($from, $to = null)
        {
                        return \Illuminate\Http\Request::createFrom($from, $to);
        }
                    /**
         * Create an Illuminate request from a Symfony instance.
         *
         * @param \Symfony\Component\HttpFoundation\Request $request
         * @return static 
         * @static 
         */ 
        public static function createFromBase($request)
        {
                        return \Illuminate\Http\Request::createFromBase($request);
        }
                    /**
         * Clones a request and overrides some of its parameters.
         *
         * @return static 
         * @param array|null $query The GET parameters
         * @param array|null $request The POST parameters
         * @param array|null $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
         * @param array|null $cookies The COOKIE parameters
         * @param array|null $files The FILES parameters
         * @param array|null $server The SERVER parameters
         * @static 
         */ 
        public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->duplicate($query, $request, $attributes, $cookies, $files, $server);
        }
                    /**
         * Whether the request contains a Session object.
         * 
         * This method does not give any information about the state of the session object,
         * like whether the session is started or not. It is just a way to check if this Request
         * is associated with a Session instance.
         *
         * @param bool $skipIfUninitialized When true, ignores factories injected by `setSessionFactory`
         * @static 
         */ 
        public static function hasSession($skipIfUninitialized = false)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->hasSession($skipIfUninitialized);
        }
                    /**
         * Gets the Session.
         *
         * @throws SessionNotFoundException When session is not set properly
         * @static 
         */ 
        public static function getSession()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getSession();
        }
                    /**
         * Get the session associated with the request.
         *
         * @return \Illuminate\Contracts\Session\Session 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function session()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->session();
        }
                    /**
         * Set the session instance on the request.
         *
         * @param \Illuminate\Contracts\Session\Session $session
         * @return void 
         * @static 
         */ 
        public static function setLaravelSession($session)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setLaravelSession($session);
        }
                    /**
         * Set the locale for the request instance.
         *
         * @param string $locale
         * @return void 
         * @static 
         */ 
        public static function setRequestLocale($locale)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setRequestLocale($locale);
        }
                    /**
         * Set the default locale for the request instance.
         *
         * @param string $locale
         * @return void 
         * @static 
         */ 
        public static function setDefaultRequestLocale($locale)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setDefaultRequestLocale($locale);
        }
                    /**
         * Get the user making the request.
         *
         * @param string|null $guard
         * @return mixed 
         * @static 
         */ 
        public static function user($guard = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->user($guard);
        }
                    /**
         * Get the route handling the request.
         *
         * @param string|null $param
         * @param mixed $default
         * @return \Illuminate\Routing\Route|object|string|null 
         * @static 
         */ 
        public static function route($param = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->route($param, $default);
        }
                    /**
         * Get a unique fingerprint for the request / route / IP address.
         *
         * @return string 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function fingerprint()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->fingerprint();
        }
                    /**
         * Set the JSON payload for the request.
         *
         * @param \Symfony\Component\HttpFoundation\ParameterBag $json
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function setJson($json)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->setJson($json);
        }
                    /**
         * Get the user resolver callback.
         *
         * @return \Closure 
         * @static 
         */ 
        public static function getUserResolver()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getUserResolver();
        }
                    /**
         * Set the user resolver callback.
         *
         * @param \Closure $callback
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function setUserResolver($callback)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->setUserResolver($callback);
        }
                    /**
         * Get the route resolver callback.
         *
         * @return \Closure 
         * @static 
         */ 
        public static function getRouteResolver()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getRouteResolver();
        }
                    /**
         * Set the route resolver callback.
         *
         * @param \Closure $callback
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function setRouteResolver($callback)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->setRouteResolver($callback);
        }
                    /**
         * Get all of the input and files for the request.
         *
         * @return array 
         * @static 
         */ 
        public static function toArray()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->toArray();
        }
                    /**
         * Determine if the given offset exists.
         *
         * @param string $offset
         * @return bool 
         * @static 
         */ 
        public static function offsetExists($offset)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->offsetExists($offset);
        }
                    /**
         * Get the value at the given offset.
         *
         * @param string $offset
         * @return mixed 
         * @static 
         */ 
        public static function offsetGet($offset)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->offsetGet($offset);
        }
                    /**
         * Set the value at the given offset.
         *
         * @param string $offset
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function offsetSet($offset, $value)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->offsetSet($offset, $value);
        }
                    /**
         * Remove the value at the given offset.
         *
         * @param string $offset
         * @return void 
         * @static 
         */ 
        public static function offsetUnset($offset)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->offsetUnset($offset);
        }
                    /**
         * Sets the parameters for this request.
         * 
         * This method also re-initializes all properties.
         *
         * @param array $query The GET parameters
         * @param array $request The POST parameters
         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
         * @param array $cookies The COOKIE parameters
         * @param array $files The FILES parameters
         * @param array $server The SERVER parameters
         * @param string|resource|null $content The raw body data
         * @return void 
         * @static 
         */ 
        public static function initialize($query = [], $request = [], $attributes = [], $cookies = [], $files = [], $server = [], $content = null)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->initialize($query, $request, $attributes, $cookies, $files, $server, $content);
        }
                    /**
         * Creates a new request with values from PHP's super globals.
         *
         * @static 
         */ 
        public static function createFromGlobals()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::createFromGlobals();
        }
                    /**
         * Creates a Request based on a given URI and configuration.
         * 
         * The information contained in the URI always take precedence
         * over the other information (server and parameters).
         *
         * @param string $uri The URI
         * @param string $method The HTTP method
         * @param array $parameters The query (GET) or request (POST) parameters
         * @param array $cookies The request cookies ($_COOKIE)
         * @param array $files The request files ($_FILES)
         * @param array $server The server parameters ($_SERVER)
         * @param string|resource|null $content The raw body data
         * @static 
         */ 
        public static function create($uri, $method = 'GET', $parameters = [], $cookies = [], $files = [], $server = [], $content = null)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);
        }
                    /**
         * Sets a callable able to create a Request instance.
         * 
         * This is mainly useful when you need to override the Request class
         * to keep BC with an existing system. It should not be used for any
         * other purpose.
         *
         * @return void 
         * @static 
         */ 
        public static function setFactory($callable)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        \Illuminate\Http\Request::setFactory($callable);
        }
                    /**
         * Overrides the PHP global variables according to this request instance.
         * 
         * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.
         * $_FILES is never overridden, see rfc1867
         *
         * @return void 
         * @static 
         */ 
        public static function overrideGlobals()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->overrideGlobals();
        }
                    /**
         * Sets a list of trusted proxies.
         * 
         * You should only list the reverse proxies that you manage directly.
         *
         * @param array $proxies A list of trusted proxies, the string 'REMOTE_ADDR' will be replaced with $_SERVER['REMOTE_ADDR']
         * @param int $trustedHeaderSet A bit field of Request::HEADER_*, to set which headers to trust from your proxies
         * @return void 
         * @static 
         */ 
        public static function setTrustedProxies($proxies, $trustedHeaderSet)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        \Illuminate\Http\Request::setTrustedProxies($proxies, $trustedHeaderSet);
        }
                    /**
         * Gets the list of trusted proxies.
         *
         * @return string[] 
         * @static 
         */ 
        public static function getTrustedProxies()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::getTrustedProxies();
        }
                    /**
         * Gets the set of trusted headers from trusted proxies.
         *
         * @return int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies
         * @static 
         */ 
        public static function getTrustedHeaderSet()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::getTrustedHeaderSet();
        }
                    /**
         * Sets a list of trusted host patterns.
         * 
         * You should only list the hosts you manage using regexs.
         *
         * @param array $hostPatterns A list of trusted host patterns
         * @return void 
         * @static 
         */ 
        public static function setTrustedHosts($hostPatterns)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        \Illuminate\Http\Request::setTrustedHosts($hostPatterns);
        }
                    /**
         * Gets the list of trusted host patterns.
         *
         * @return string[] 
         * @static 
         */ 
        public static function getTrustedHosts()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::getTrustedHosts();
        }
                    /**
         * Normalizes a query string.
         * 
         * It builds a normalized query string, where keys/value pairs are alphabetized,
         * have consistent escaping and unneeded delimiters are removed.
         *
         * @static 
         */ 
        public static function normalizeQueryString($qs)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::normalizeQueryString($qs);
        }
                    /**
         * Enables support for the _method request parameter to determine the intended HTTP method.
         * 
         * Be warned that enabling this feature might lead to CSRF issues in your code.
         * Check that you are using CSRF tokens when required.
         * If the HTTP method parameter override is enabled, an html-form with method "POST" can be altered
         * and used to send a "PUT" or "DELETE" request via the _method request parameter.
         * If these methods are not protected against CSRF, this presents a possible vulnerability.
         * 
         * The HTTP method can only be overridden when the real HTTP method is POST.
         *
         * @return void 
         * @static 
         */ 
        public static function enableHttpMethodParameterOverride()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        \Illuminate\Http\Request::enableHttpMethodParameterOverride();
        }
                    /**
         * Checks whether support for the _method request parameter is enabled.
         *
         * @static 
         */ 
        public static function getHttpMethodParameterOverride()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::getHttpMethodParameterOverride();
        }
                    /**
         * Whether the request contains a Session which was started in one of the
         * previous requests.
         *
         * @static 
         */ 
        public static function hasPreviousSession()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->hasPreviousSession();
        }
                    /**
         * 
         *
         * @return void 
         * @static 
         */ 
        public static function setSession($session)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setSession($session);
        }
                    /**
         * 
         *
         * @internal 
         * @param \Symfony\Component\HttpFoundation\callable():  SessionInterface $factory
         * @static 
         */ 
        public static function setSessionFactory($factory)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->setSessionFactory($factory);
        }
                    /**
         * Returns the client IP addresses.
         * 
         * In the returned array the most trusted IP address is first, and the
         * least trusted one last. The "real" client IP address is the last one,
         * but this is also the least trusted one. Trusted proxies are stripped.
         * 
         * Use this method carefully; you should use getClientIp() instead.
         *
         * @see getClientIp()
         * @static 
         */ 
        public static function getClientIps()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getClientIps();
        }
                    /**
         * Returns the client IP address.
         * 
         * This method can read the client IP address from the "X-Forwarded-For" header
         * when trusted proxies were set via "setTrustedProxies()". The "X-Forwarded-For"
         * header value is a comma+space separated list of IP addresses, the left-most
         * being the original client, and each successive proxy that passed the request
         * adding the IP address where it received the request from.
         * 
         * If your reverse proxy uses a different header name than "X-Forwarded-For",
         * ("Client-Ip" for instance), configure it via the $trustedHeaderSet
         * argument of the Request::setTrustedProxies() method instead.
         *
         * @see getClientIps()
         * @see https://wikipedia.org/wiki/X-Forwarded-For
         * @static 
         */ 
        public static function getClientIp()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getClientIp();
        }
                    /**
         * Returns current script name.
         *
         * @static 
         */ 
        public static function getScriptName()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getScriptName();
        }
                    /**
         * Returns the path being requested relative to the executed script.
         * 
         * The path info always starts with a /.
         * 
         * Suppose this request is instantiated from /mysite on localhost:
         * 
         *  * http://localhost/mysite              returns an empty string
         *  * http://localhost/mysite/about        returns '/about'
         *  * http://localhost/mysite/enco%20ded   returns '/enco%20ded'
         *  * http://localhost/mysite/about?var=1  returns '/about'
         *
         * @return string The raw path (i.e. not urldecoded)
         * @static 
         */ 
        public static function getPathInfo()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getPathInfo();
        }
                    /**
         * Returns the root path from which this request is executed.
         * 
         * Suppose that an index.php file instantiates this request object:
         * 
         *  * http://localhost/index.php         returns an empty string
         *  * http://localhost/index.php/page    returns an empty string
         *  * http://localhost/web/index.php     returns '/web'
         *  * http://localhost/we%20b/index.php  returns '/we%20b'
         *
         * @return string The raw path (i.e. not urldecoded)
         * @static 
         */ 
        public static function getBasePath()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getBasePath();
        }
                    /**
         * Returns the root URL from which this request is executed.
         * 
         * The base URL never ends with a /.
         * 
         * This is similar to getBasePath(), except that it also includes the
         * script filename (e.g. index.php) if one exists.
         *
         * @return string The raw URL (i.e. not urldecoded)
         * @static 
         */ 
        public static function getBaseUrl()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getBaseUrl();
        }
                    /**
         * Gets the request's scheme.
         *
         * @static 
         */ 
        public static function getScheme()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getScheme();
        }
                    /**
         * Returns the port on which the request is made.
         * 
         * This method can read the client port from the "X-Forwarded-Port" header
         * when trusted proxies were set via "setTrustedProxies()".
         * 
         * The "X-Forwarded-Port" header must contain the client port.
         *
         * @return int|string|null Can be a string if fetched from the server bag
         * @static 
         */ 
        public static function getPort()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getPort();
        }
                    /**
         * Returns the user.
         *
         * @static 
         */ 
        public static function getUser()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getUser();
        }
                    /**
         * Returns the password.
         *
         * @static 
         */ 
        public static function getPassword()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getPassword();
        }
                    /**
         * Gets the user info.
         *
         * @return string|null A user name if any and, optionally, scheme-specific information about how to gain authorization to access the server
         * @static 
         */ 
        public static function getUserInfo()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getUserInfo();
        }
                    /**
         * Returns the HTTP host being requested.
         * 
         * The port name will be appended to the host if it's non-standard.
         *
         * @static 
         */ 
        public static function getHttpHost()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getHttpHost();
        }
                    /**
         * Returns the requested URI (path and query string).
         *
         * @return string The raw URI (i.e. not URI decoded)
         * @static 
         */ 
        public static function getRequestUri()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getRequestUri();
        }
                    /**
         * Gets the scheme and HTTP host.
         * 
         * If the URL was called with basic authentication, the user
         * and the password are not added to the generated string.
         *
         * @static 
         */ 
        public static function getSchemeAndHttpHost()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getSchemeAndHttpHost();
        }
                    /**
         * Generates a normalized URI (URL) for the Request.
         *
         * @see getQueryString()
         * @static 
         */ 
        public static function getUri()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getUri();
        }
                    /**
         * Generates a normalized URI for the given path.
         *
         * @param string $path A path to use instead of the current one
         * @static 
         */ 
        public static function getUriForPath($path)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getUriForPath($path);
        }
                    /**
         * Returns the path as relative reference from the current Request path.
         * 
         * Only the URIs path component (no schema, host etc.) is relevant and must be given.
         * Both paths must be absolute and not contain relative parts.
         * Relative URLs from one resource to another are useful when generating self-contained downloadable document archives.
         * Furthermore, they can be used to reduce the link size in documents.
         * 
         * Example target paths, given a base path of "/a/b/c/d":
         * - "/a/b/c/d"     -> ""
         * - "/a/b/c/"      -> "./"
         * - "/a/b/"        -> "../"
         * - "/a/b/c/other" -> "other"
         * - "/a/x/y"       -> "../../x/y"
         *
         * @static 
         */ 
        public static function getRelativeUriForPath($path)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getRelativeUriForPath($path);
        }
                    /**
         * Generates the normalized query string for the Request.
         * 
         * It builds a normalized query string, where keys/value pairs are alphabetized
         * and have consistent escaping.
         *
         * @static 
         */ 
        public static function getQueryString()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getQueryString();
        }
                    /**
         * Checks whether the request is secure or not.
         * 
         * This method can read the client protocol from the "X-Forwarded-Proto" header
         * when trusted proxies were set via "setTrustedProxies()".
         * 
         * The "X-Forwarded-Proto" header must contain the protocol: "https" or "http".
         *
         * @static 
         */ 
        public static function isSecure()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isSecure();
        }
                    /**
         * Returns the host name.
         * 
         * This method can read the client host name from the "X-Forwarded-Host" header
         * when trusted proxies were set via "setTrustedProxies()".
         * 
         * The "X-Forwarded-Host" header must contain the client host name.
         *
         * @throws SuspiciousOperationException when the host name is invalid or not trusted
         * @static 
         */ 
        public static function getHost()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getHost();
        }
                    /**
         * Sets the request method.
         *
         * @return void 
         * @static 
         */ 
        public static function setMethod($method)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setMethod($method);
        }
                    /**
         * Gets the request "intended" method.
         * 
         * If the X-HTTP-Method-Override header is set, and if the method is a POST,
         * then it is used to determine the "real" intended HTTP method.
         * 
         * The _method request parameter can also be used to determine the HTTP method,
         * but only if enableHttpMethodParameterOverride() has been called.
         * 
         * The method is always an uppercased string.
         *
         * @see getRealMethod()
         * @static 
         */ 
        public static function getMethod()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getMethod();
        }
                    /**
         * Gets the "real" request method.
         *
         * @see getMethod()
         * @static 
         */ 
        public static function getRealMethod()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getRealMethod();
        }
                    /**
         * Gets the mime type associated with the format.
         *
         * @static 
         */ 
        public static function getMimeType($format)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getMimeType($format);
        }
                    /**
         * Gets the mime types associated with the format.
         *
         * @return string[] 
         * @static 
         */ 
        public static function getMimeTypes($format)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        return \Illuminate\Http\Request::getMimeTypes($format);
        }
                    /**
         * Gets the format associated with the mime type.
         *
         * @static 
         */ 
        public static function getFormat($mimeType)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getFormat($mimeType);
        }
                    /**
         * Associates a format with mime types.
         *
         * @param string|string[] $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type)
         * @return void 
         * @static 
         */ 
        public static function setFormat($format, $mimeTypes)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setFormat($format, $mimeTypes);
        }
                    /**
         * Gets the request format.
         * 
         * Here is the process to determine the format:
         * 
         *  * format defined by the user (with setRequestFormat())
         *  * _format request attribute
         *  * $default
         *
         * @see getPreferredFormat
         * @static 
         */ 
        public static function getRequestFormat($default = 'html')
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getRequestFormat($default);
        }
                    /**
         * Sets the request format.
         *
         * @return void 
         * @static 
         */ 
        public static function setRequestFormat($format)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setRequestFormat($format);
        }
                    /**
         * Gets the usual name of the format associated with the request's media type (provided in the Content-Type header).
         *
         * @deprecated since Symfony 6.2, use getContentTypeFormat() instead
         * @static 
         */ 
        public static function getContentType()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getContentType();
        }
                    /**
         * Gets the usual name of the format associated with the request's media type (provided in the Content-Type header).
         *
         * @see Request::$formats
         * @static 
         */ 
        public static function getContentTypeFormat()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getContentTypeFormat();
        }
                    /**
         * Sets the default locale.
         *
         * @return void 
         * @static 
         */ 
        public static function setDefaultLocale($locale)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setDefaultLocale($locale);
        }
                    /**
         * Get the default locale.
         *
         * @static 
         */ 
        public static function getDefaultLocale()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getDefaultLocale();
        }
                    /**
         * Sets the locale.
         *
         * @return void 
         * @static 
         */ 
        public static function setLocale($locale)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->setLocale($locale);
        }
                    /**
         * Get the locale.
         *
         * @static 
         */ 
        public static function getLocale()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getLocale();
        }
                    /**
         * Checks if the request method is of specified type.
         *
         * @param string $method Uppercase request method (GET, POST etc)
         * @static 
         */ 
        public static function isMethod($method)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isMethod($method);
        }
                    /**
         * Checks whether or not the method is safe.
         *
         * @see https://tools.ietf.org/html/rfc7231#section-4.2.1
         * @static 
         */ 
        public static function isMethodSafe()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isMethodSafe();
        }
                    /**
         * Checks whether or not the method is idempotent.
         *
         * @static 
         */ 
        public static function isMethodIdempotent()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isMethodIdempotent();
        }
                    /**
         * Checks whether the method is cacheable or not.
         *
         * @see https://tools.ietf.org/html/rfc7231#section-4.2.3
         * @static 
         */ 
        public static function isMethodCacheable()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isMethodCacheable();
        }
                    /**
         * Returns the protocol version.
         * 
         * If the application is behind a proxy, the protocol version used in the
         * requests between the client and the proxy and between the proxy and the
         * server might be different. This returns the former (from the "Via" header)
         * if the proxy is trusted (see "setTrustedProxies()"), otherwise it returns
         * the latter (from the "SERVER_PROTOCOL" server parameter).
         *
         * @static 
         */ 
        public static function getProtocolVersion()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getProtocolVersion();
        }
                    /**
         * Returns the request body content.
         *
         * @param bool $asResource If true, a resource will be returned
         * @return string|resource 
         * @psalm-return ($asResource is true ? resource : string)
         * @static 
         */ 
        public static function getContent($asResource = false)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getContent($asResource);
        }
                    /**
         * Gets the decoded form or json request body.
         *
         * @throws JsonException When the body cannot be decoded to an array
         * @static 
         */ 
        public static function getPayload()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getPayload();
        }
                    /**
         * Gets the Etags.
         *
         * @static 
         */ 
        public static function getETags()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getETags();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function isNoCache()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isNoCache();
        }
                    /**
         * Gets the preferred format for the response by inspecting, in the following order:
         *   * the request format set using setRequestFormat;
         *   * the values of the Accept HTTP header.
         * 
         * Note that if you use this method, you should send the "Vary: Accept" header
         * in the response to prevent any issues with intermediary HTTP caches.
         *
         * @static 
         */ 
        public static function getPreferredFormat($default = 'html')
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getPreferredFormat($default);
        }
                    /**
         * Returns the preferred language.
         *
         * @param string[] $locales An array of ordered available locales
         * @static 
         */ 
        public static function getPreferredLanguage($locales = null)
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getPreferredLanguage($locales);
        }
                    /**
         * Gets a list of languages acceptable by the client browser ordered in the user browser preferences.
         *
         * @return string[] 
         * @static 
         */ 
        public static function getLanguages()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getLanguages();
        }
                    /**
         * Gets a list of charsets acceptable by the client browser in preferable order.
         *
         * @return string[] 
         * @static 
         */ 
        public static function getCharsets()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getCharsets();
        }
                    /**
         * Gets a list of encodings acceptable by the client browser in preferable order.
         *
         * @return string[] 
         * @static 
         */ 
        public static function getEncodings()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getEncodings();
        }
                    /**
         * Gets a list of content types acceptable by the client browser in preferable order.
         *
         * @return string[] 
         * @static 
         */ 
        public static function getAcceptableContentTypes()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->getAcceptableContentTypes();
        }
                    /**
         * Returns true if the request is an XMLHttpRequest.
         * 
         * It works if your JavaScript library sets an X-Requested-With HTTP header.
         * It is known to work with common JavaScript frameworks:
         *
         * @see https://wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript
         * @static 
         */ 
        public static function isXmlHttpRequest()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isXmlHttpRequest();
        }
                    /**
         * Checks whether the client browser prefers safe content or not according to RFC8674.
         *
         * @see https://tools.ietf.org/html/rfc8674
         * @static 
         */ 
        public static function preferSafeContent()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->preferSafeContent();
        }
                    /**
         * Indicates whether this request originated from a trusted proxy.
         * 
         * This can be useful to determine whether or not to trust the
         * contents of a proxy-specific header.
         *
         * @static 
         */ 
        public static function isFromTrustedProxy()
        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isFromTrustedProxy();
        }
                    /**
         * Filter the given array of rules into an array of rules that are included in precognitive headers.
         *
         * @param array $rules
         * @return array 
         * @static 
         */ 
        public static function filterPrecognitiveRules($rules)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->filterPrecognitiveRules($rules);
        }
                    /**
         * Determine if the request is attempting to be precognitive.
         *
         * @return bool 
         * @static 
         */ 
        public static function isAttemptingPrecognition()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isAttemptingPrecognition();
        }
                    /**
         * Determine if the request is precognitive.
         *
         * @return bool 
         * @static 
         */ 
        public static function isPrecognitive()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isPrecognitive();
        }
                    /**
         * Determine if the request is sending JSON.
         *
         * @return bool 
         * @static 
         */ 
        public static function isJson()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isJson();
        }
                    /**
         * Determine if the current request probably expects a JSON response.
         *
         * @return bool 
         * @static 
         */ 
        public static function expectsJson()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->expectsJson();
        }
                    /**
         * Determine if the current request is asking for JSON.
         *
         * @return bool 
         * @static 
         */ 
        public static function wantsJson()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->wantsJson();
        }
                    /**
         * Determines whether the current requests accepts a given content type.
         *
         * @param string|array $contentTypes
         * @return bool 
         * @static 
         */ 
        public static function accepts($contentTypes)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->accepts($contentTypes);
        }
                    /**
         * Return the most suitable content type from the given array based on content negotiation.
         *
         * @param string|array $contentTypes
         * @return string|null 
         * @static 
         */ 
        public static function prefers($contentTypes)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->prefers($contentTypes);
        }
                    /**
         * Determine if the current request accepts any content type.
         *
         * @return bool 
         * @static 
         */ 
        public static function acceptsAnyContentType()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->acceptsAnyContentType();
        }
                    /**
         * Determines whether a request accepts JSON.
         *
         * @return bool 
         * @static 
         */ 
        public static function acceptsJson()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->acceptsJson();
        }
                    /**
         * Determines whether a request accepts HTML.
         *
         * @return bool 
         * @static 
         */ 
        public static function acceptsHtml()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->acceptsHtml();
        }
                    /**
         * Determine if the given content types match.
         *
         * @param string $actual
         * @param string $type
         * @return bool 
         * @static 
         */ 
        public static function matchesType($actual, $type)
        {
                        return \Illuminate\Http\Request::matchesType($actual, $type);
        }
                    /**
         * Get the data format expected in the response.
         *
         * @param string $default
         * @return string 
         * @static 
         */ 
        public static function format($default = 'html')
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->format($default);
        }
                    /**
         * Retrieve an old input item.
         *
         * @param string|null $key
         * @param \Illuminate\Database\Eloquent\Model|string|array|null $default
         * @return string|array|null 
         * @static 
         */ 
        public static function old($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->old($key, $default);
        }
                    /**
         * Flash the input for the current request to the session.
         *
         * @return void 
         * @static 
         */ 
        public static function flash()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->flash();
        }
                    /**
         * Flash only some of the input to the session.
         *
         * @param array|mixed $keys
         * @return void 
         * @static 
         */ 
        public static function flashOnly($keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->flashOnly($keys);
        }
                    /**
         * Flash only some of the input to the session.
         *
         * @param array|mixed $keys
         * @return void 
         * @static 
         */ 
        public static function flashExcept($keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->flashExcept($keys);
        }
                    /**
         * Flush all of the old input from the session.
         *
         * @return void 
         * @static 
         */ 
        public static function flush()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        $instance->flush();
        }
                    /**
         * Retrieve a server variable from the request.
         *
         * @param string|null $key
         * @param string|array|null $default
         * @return string|array|null 
         * @static 
         */ 
        public static function server($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->server($key, $default);
        }
                    /**
         * Determine if a header is set on the request.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function hasHeader($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->hasHeader($key);
        }
                    /**
         * Retrieve a header from the request.
         *
         * @param string|null $key
         * @param string|array|null $default
         * @return string|array|null 
         * @static 
         */ 
        public static function header($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->header($key, $default);
        }
                    /**
         * Get the bearer token from the request headers.
         *
         * @return string|null 
         * @static 
         */ 
        public static function bearerToken()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->bearerToken();
        }
                    /**
         * Determine if the request contains a given input item key.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function exists($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->exists($key);
        }
                    /**
         * Determine if the request contains a given input item key.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function has($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->has($key);
        }
                    /**
         * Determine if the request contains any of the given inputs.
         *
         * @param string|array $keys
         * @return bool 
         * @static 
         */ 
        public static function hasAny($keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->hasAny($keys);
        }
                    /**
         * Apply the callback if the request contains the given input item key.
         *
         * @param string $key
         * @param callable $callback
         * @param callable|null $default
         * @return $this|mixed 
         * @static 
         */ 
        public static function whenHas($key, $callback, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->whenHas($key, $callback, $default);
        }
                    /**
         * Determine if the request contains a non-empty value for an input item.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function filled($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->filled($key);
        }
                    /**
         * Determine if the request contains an empty value for an input item.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function isNotFilled($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->isNotFilled($key);
        }
                    /**
         * Determine if the request contains a non-empty value for any of the given inputs.
         *
         * @param string|array $keys
         * @return bool 
         * @static 
         */ 
        public static function anyFilled($keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->anyFilled($keys);
        }
                    /**
         * Apply the callback if the request contains a non-empty value for the given input item key.
         *
         * @param string $key
         * @param callable $callback
         * @param callable|null $default
         * @return $this|mixed 
         * @static 
         */ 
        public static function whenFilled($key, $callback, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->whenFilled($key, $callback, $default);
        }
                    /**
         * Determine if the request is missing a given input item key.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function missing($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->missing($key);
        }
                    /**
         * Apply the callback if the request is missing the given input item key.
         *
         * @param string $key
         * @param callable $callback
         * @param callable|null $default
         * @return $this|mixed 
         * @static 
         */ 
        public static function whenMissing($key, $callback, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->whenMissing($key, $callback, $default);
        }
                    /**
         * Get the keys for all of the input and files.
         *
         * @return array 
         * @static 
         */ 
        public static function keys()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->keys();
        }
                    /**
         * Get all of the input and files for the request.
         *
         * @param array|mixed|null $keys
         * @return array 
         * @static 
         */ 
        public static function all($keys = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->all($keys);
        }
                    /**
         * Retrieve an input item from the request.
         *
         * @param string|null $key
         * @param mixed $default
         * @return mixed 
         * @static 
         */ 
        public static function input($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->input($key, $default);
        }
                    /**
         * Retrieve input from the request as a Stringable instance.
         *
         * @param string $key
         * @param mixed $default
         * @return \Illuminate\Support\Stringable 
         * @static 
         */ 
        public static function str($key, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->str($key, $default);
        }
                    /**
         * Retrieve input from the request as a Stringable instance.
         *
         * @param string $key
         * @param mixed $default
         * @return \Illuminate\Support\Stringable 
         * @static 
         */ 
        public static function string($key, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->string($key, $default);
        }
                    /**
         * Retrieve input as a boolean value.
         * 
         * Returns true when value is "1", "true", "on", and "yes". Otherwise, returns false.
         *
         * @param string|null $key
         * @param bool $default
         * @return bool 
         * @static 
         */ 
        public static function boolean($key = null, $default = false)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->boolean($key, $default);
        }
                    /**
         * Retrieve input as an integer value.
         *
         * @param string $key
         * @param int $default
         * @return int 
         * @static 
         */ 
        public static function integer($key, $default = 0)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->integer($key, $default);
        }
                    /**
         * Retrieve input as a float value.
         *
         * @param string $key
         * @param float $default
         * @return float 
         * @static 
         */ 
        public static function float($key, $default = 0.0)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->float($key, $default);
        }
                    /**
         * Retrieve input from the request as a Carbon instance.
         *
         * @param string $key
         * @param string|null $format
         * @param string|null $tz
         * @return \Illuminate\Support\Carbon|null 
         * @throws \Carbon\Exceptions\InvalidFormatException
         * @static 
         */ 
        public static function date($key, $format = null, $tz = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->date($key, $format, $tz);
        }
                    /**
         * Retrieve input from the request as an enum.
         *
         * @template TEnum
         * @param string $key
         * @param \Illuminate\Http\class-string<TEnum> $enumClass
         * @return \Illuminate\Http\TEnum|null 
         * @static 
         */ 
        public static function enum($key, $enumClass)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->enum($key, $enumClass);
        }
                    /**
         * Retrieve input from the request as a collection.
         *
         * @param array|string|null $key
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function collect($key = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->collect($key);
        }
                    /**
         * Get a subset containing the provided keys with values from the input data.
         *
         * @param array|mixed $keys
         * @return array 
         * @static 
         */ 
        public static function only($keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->only($keys);
        }
                    /**
         * Get all of the input except for a specified array of items.
         *
         * @param array|mixed $keys
         * @return array 
         * @static 
         */ 
        public static function except($keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->except($keys);
        }
                    /**
         * Retrieve a query string item from the request.
         *
         * @param string|null $key
         * @param string|array|null $default
         * @return string|array|null 
         * @static 
         */ 
        public static function query($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->query($key, $default);
        }
                    /**
         * Retrieve a request payload item from the request.
         *
         * @param string|null $key
         * @param string|array|null $default
         * @return string|array|null 
         * @static 
         */ 
        public static function post($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->post($key, $default);
        }
                    /**
         * Determine if a cookie is set on the request.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function hasCookie($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->hasCookie($key);
        }
                    /**
         * Retrieve a cookie from the request.
         *
         * @param string|null $key
         * @param string|array|null $default
         * @return string|array|null 
         * @static 
         */ 
        public static function cookie($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->cookie($key, $default);
        }
                    /**
         * Get an array of all of the files on the request.
         *
         * @return array 
         * @static 
         */ 
        public static function allFiles()
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->allFiles();
        }
                    /**
         * Determine if the uploaded data contains a file.
         *
         * @param string $key
         * @return bool 
         * @static 
         */ 
        public static function hasFile($key)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->hasFile($key);
        }
                    /**
         * Retrieve a file from the request.
         *
         * @param string|null $key
         * @param mixed $default
         * @return \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null 
         * @static 
         */ 
        public static function file($key = null, $default = null)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->file($key, $default);
        }
                    /**
         * Dump the request items and end the script.
         *
         * @param mixed $keys
         * @return \Illuminate\Http\never 
         * @static 
         */ 
        public static function dd(...$keys)
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->dd(...$keys);
        }
                    /**
         * Dump the items.
         *
         * @param mixed $keys
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function dump($keys = [])
        {
                        /** @var \Illuminate\Http\Request $instance */
                        return $instance->dump($keys);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Http\Request::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Http\Request::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Http\Request::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Http\Request::flushMacros();
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
         * @param array $rules
         * @param mixed $params
         * @static 
         */ 
        public static function validate($rules, ...$params)
        {
                        return \Illuminate\Http\Request::validate($rules, ...$params);
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
         * @param string $errorBag
         * @param array $rules
         * @param mixed $params
         * @static 
         */ 
        public static function validateWithBag($errorBag, $rules, ...$params)
        {
                        return \Illuminate\Http\Request::validateWithBag($errorBag, $rules, ...$params);
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
         * @param mixed $absolute
         * @static 
         */ 
        public static function hasValidSignature($absolute = true)
        {
                        return \Illuminate\Http\Request::hasValidSignature($absolute);
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
         * @static 
         */ 
        public static function hasValidRelativeSignature()
        {
                        return \Illuminate\Http\Request::hasValidRelativeSignature();
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
         * @param mixed $ignoreQuery
         * @param mixed $absolute
         * @static 
         */ 
        public static function hasValidSignatureWhileIgnoring($ignoreQuery = [], $absolute = true)
        {
                        return \Illuminate\Http\Request::hasValidSignatureWhileIgnoring($ignoreQuery, $absolute);
        }
                    /**
         * 
         *
         * @see \Inertia\ServiceProvider::registerRequestMacro()
         * @static 
         */ 
        public static function inertia()
        {
                        return \Illuminate\Http\Request::inertia();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerRequestMacros()
         * @static 
         */ 
        public static function clearConvertedFiles()
        {
                        return \Illuminate\Http\Request::clearConvertedFiles();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerRequestMacros()
         * @param mixed $key
         * @static 
         */ 
        public static function orderedSpladeFileUploads($key)
        {
                        return \Illuminate\Http\Request::orderedSpladeFileUploads($key);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Routing\ResponseFactory
     */ 
        class Response {
                    /**
         * Create a new response instance.
         *
         * @param mixed $content
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\Response 
         * @static 
         */ 
        public static function make($content = '', $status = 200, $headers = [])
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->make($content, $status, $headers);
        }
                    /**
         * Create a new "no content" response.
         *
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\Response 
         * @static 
         */ 
        public static function noContent($status = 204, $headers = [])
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->noContent($status, $headers);
        }
                    /**
         * Create a new response for a given view.
         *
         * @param string|array $view
         * @param array $data
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\Response 
         * @static 
         */ 
        public static function view($view, $data = [], $status = 200, $headers = [])
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->view($view, $data, $status, $headers);
        }
                    /**
         * Create a new JSON response instance.
         *
         * @param mixed $data
         * @param int $status
         * @param array $headers
         * @param int $options
         * @return \Illuminate\Http\JsonResponse 
         * @static 
         */ 
        public static function json($data = [], $status = 200, $headers = [], $options = 0)
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->json($data, $status, $headers, $options);
        }
                    /**
         * Create a new JSONP response instance.
         *
         * @param string $callback
         * @param mixed $data
         * @param int $status
         * @param array $headers
         * @param int $options
         * @return \Illuminate\Http\JsonResponse 
         * @static 
         */ 
        public static function jsonp($callback, $data = [], $status = 200, $headers = [], $options = 0)
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->jsonp($callback, $data, $status, $headers, $options);
        }
                    /**
         * Create a new streamed response instance.
         *
         * @param callable $callback
         * @param int $status
         * @param array $headers
         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
         * @static 
         */ 
        public static function stream($callback, $status = 200, $headers = [])
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->stream($callback, $status, $headers);
        }
                    /**
         * Create a new streamed response instance as a file download.
         *
         * @param callable $callback
         * @param string|null $name
         * @param array $headers
         * @param string|null $disposition
         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
         * @static 
         */ 
        public static function streamDownload($callback, $name = null, $headers = [], $disposition = 'attachment')
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->streamDownload($callback, $name, $headers, $disposition);
        }
                    /**
         * Create a new file download response.
         *
         * @param \SplFileInfo|string $file
         * @param string|null $name
         * @param array $headers
         * @param string|null $disposition
         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse 
         * @static 
         */ 
        public static function download($file, $name = null, $headers = [], $disposition = 'attachment')
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->download($file, $name, $headers, $disposition);
        }
                    /**
         * Return the raw contents of a binary file.
         *
         * @param \SplFileInfo|string $file
         * @param array $headers
         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse 
         * @static 
         */ 
        public static function file($file, $headers = [])
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->file($file, $headers);
        }
                    /**
         * Create a new redirect response to the given path.
         *
         * @param string $path
         * @param int $status
         * @param array $headers
         * @param bool|null $secure
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function redirectTo($path, $status = 302, $headers = [], $secure = null)
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->redirectTo($path, $status, $headers, $secure);
        }
                    /**
         * Create a new redirect response to a named route.
         *
         * @param string $route
         * @param mixed $parameters
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function redirectToRoute($route, $parameters = [], $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->redirectToRoute($route, $parameters, $status, $headers);
        }
                    /**
         * Create a new redirect response to a controller action.
         *
         * @param string $action
         * @param mixed $parameters
         * @param int $status
         * @param array $headers
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function redirectToAction($action, $parameters = [], $status = 302, $headers = [])
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->redirectToAction($action, $parameters, $status, $headers);
        }
                    /**
         * Create a new redirect response, while putting the current URL in the session.
         *
         * @param string $path
         * @param int $status
         * @param array $headers
         * @param bool|null $secure
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function redirectGuest($path, $status = 302, $headers = [], $secure = null)
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->redirectGuest($path, $status, $headers, $secure);
        }
                    /**
         * Create a new redirect response to the previously intended location.
         *
         * @param string $default
         * @param int $status
         * @param array $headers
         * @param bool|null $secure
         * @return \Illuminate\Http\RedirectResponse 
         * @static 
         */ 
        public static function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null)
        {
                        /** @var \Illuminate\Routing\ResponseFactory $instance */
                        return $instance->redirectToIntended($default, $status, $headers, $secure);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Routing\ResponseFactory::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Routing\ResponseFactory::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Routing\ResponseFactory::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Routing\ResponseFactory::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @method static \Illuminate\Routing\RouteRegistrar attribute(string $key, mixed $value)
     * @method static \Illuminate\Routing\RouteRegistrar whereAlpha(array|string $parameters)
     * @method static \Illuminate\Routing\RouteRegistrar whereAlphaNumeric(array|string $parameters)
     * @method static \Illuminate\Routing\RouteRegistrar whereNumber(array|string $parameters)
     * @method static \Illuminate\Routing\RouteRegistrar whereUlid(array|string $parameters)
     * @method static \Illuminate\Routing\RouteRegistrar whereUuid(array|string $parameters)
     * @method static \Illuminate\Routing\RouteRegistrar whereIn(array|string $parameters, array $values)
     * @method static \Illuminate\Routing\RouteRegistrar as(string $value)
     * @method static \Illuminate\Routing\RouteRegistrar controller(string $controller)
     * @method static \Illuminate\Routing\RouteRegistrar domain(string $value)
     * @method static \Illuminate\Routing\RouteRegistrar middleware(array|string|null $middleware)
     * @method static \Illuminate\Routing\RouteRegistrar name(string $value)
     * @method static \Illuminate\Routing\RouteRegistrar namespace(string|null $value)
     * @method static \Illuminate\Routing\RouteRegistrar prefix(string $prefix)
     * @method static \Illuminate\Routing\RouteRegistrar scopeBindings()
     * @method static \Illuminate\Routing\RouteRegistrar where(array $where)
     * @method static \Illuminate\Routing\RouteRegistrar withoutMiddleware(array|string $middleware)
     * @method static \Illuminate\Routing\RouteRegistrar withoutScopedBindings()
     * @see \Illuminate\Routing\Router
     */ 
        class Route {
                    /**
         * Register a new GET route with the router.
         *
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function get($uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->get($uri, $action);
        }
                    /**
         * Register a new POST route with the router.
         *
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function post($uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->post($uri, $action);
        }
                    /**
         * Register a new PUT route with the router.
         *
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function put($uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->put($uri, $action);
        }
                    /**
         * Register a new PATCH route with the router.
         *
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function patch($uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->patch($uri, $action);
        }
                    /**
         * Register a new DELETE route with the router.
         *
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function delete($uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->delete($uri, $action);
        }
                    /**
         * Register a new OPTIONS route with the router.
         *
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function options($uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->options($uri, $action);
        }
                    /**
         * Register a new route responding to all verbs.
         *
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function any($uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->any($uri, $action);
        }
                    /**
         * Register a new Fallback route with the router.
         *
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function fallback($action)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->fallback($action);
        }
                    /**
         * Create a redirect from one URI to another.
         *
         * @param string $uri
         * @param string $destination
         * @param int $status
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function redirect($uri, $destination, $status = 302)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->redirect($uri, $destination, $status);
        }
                    /**
         * Create a permanent redirect from one URI to another.
         *
         * @param string $uri
         * @param string $destination
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function permanentRedirect($uri, $destination)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->permanentRedirect($uri, $destination);
        }
                    /**
         * Register a new route that returns a view.
         *
         * @param string $uri
         * @param string $view
         * @param array $data
         * @param int|array $status
         * @param array $headers
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function view($uri, $view, $data = [], $status = 200, $headers = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->view($uri, $view, $data, $status, $headers);
        }
                    /**
         * Register a new route with the given verbs.
         *
         * @param array|string $methods
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function match($methods, $uri, $action = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->match($methods, $uri, $action);
        }
                    /**
         * Register an array of resource controllers.
         *
         * @param array $resources
         * @param array $options
         * @return void 
         * @static 
         */ 
        public static function resources($resources, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->resources($resources, $options);
        }
                    /**
         * Route a resource to a controller.
         *
         * @param string $name
         * @param string $controller
         * @param array $options
         * @return \Illuminate\Routing\PendingResourceRegistration 
         * @static 
         */ 
        public static function resource($name, $controller, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->resource($name, $controller, $options);
        }
                    /**
         * Register an array of API resource controllers.
         *
         * @param array $resources
         * @param array $options
         * @return void 
         * @static 
         */ 
        public static function apiResources($resources, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->apiResources($resources, $options);
        }
                    /**
         * Route an API resource to a controller.
         *
         * @param string $name
         * @param string $controller
         * @param array $options
         * @return \Illuminate\Routing\PendingResourceRegistration 
         * @static 
         */ 
        public static function apiResource($name, $controller, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->apiResource($name, $controller, $options);
        }
                    /**
         * Register an array of singleton resource controllers.
         *
         * @param array $singletons
         * @param array $options
         * @return void 
         * @static 
         */ 
        public static function singletons($singletons, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->singletons($singletons, $options);
        }
                    /**
         * Route a singleton resource to a controller.
         *
         * @param string $name
         * @param string $controller
         * @param array $options
         * @return \Illuminate\Routing\PendingSingletonResourceRegistration 
         * @static 
         */ 
        public static function singleton($name, $controller, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->singleton($name, $controller, $options);
        }
                    /**
         * Register an array of API singleton resource controllers.
         *
         * @param array $singletons
         * @param array $options
         * @return void 
         * @static 
         */ 
        public static function apiSingletons($singletons, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->apiSingletons($singletons, $options);
        }
                    /**
         * Route an API singleton resource to a controller.
         *
         * @param string $name
         * @param string $controller
         * @param array $options
         * @return \Illuminate\Routing\PendingSingletonResourceRegistration 
         * @static 
         */ 
        public static function apiSingleton($name, $controller, $options = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->apiSingleton($name, $controller, $options);
        }
                    /**
         * Create a route group with shared attributes.
         *
         * @param array $attributes
         * @param \Closure|array|string $routes
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function group($attributes, $routes)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->group($attributes, $routes);
        }
                    /**
         * Merge the given array with the last group stack.
         *
         * @param array $new
         * @param bool $prependExistingPrefix
         * @return array 
         * @static 
         */ 
        public static function mergeWithLastGroup($new, $prependExistingPrefix = true)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->mergeWithLastGroup($new, $prependExistingPrefix);
        }
                    /**
         * Get the prefix from the last group on the stack.
         *
         * @return string 
         * @static 
         */ 
        public static function getLastGroupPrefix()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getLastGroupPrefix();
        }
                    /**
         * Add a route to the underlying route collection.
         *
         * @param array|string $methods
         * @param string $uri
         * @param array|string|callable|null $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function addRoute($methods, $uri, $action)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->addRoute($methods, $uri, $action);
        }
                    /**
         * Create a new Route object.
         *
         * @param array|string $methods
         * @param string $uri
         * @param mixed $action
         * @return \Illuminate\Routing\Route 
         * @static 
         */ 
        public static function newRoute($methods, $uri, $action)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->newRoute($methods, $uri, $action);
        }
                    /**
         * Return the response returned by the given route.
         *
         * @param string $name
         * @return \Symfony\Component\HttpFoundation\Response 
         * @static 
         */ 
        public static function respondWithRoute($name)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->respondWithRoute($name);
        }
                    /**
         * Dispatch the request to the application.
         *
         * @param \Illuminate\Http\Request $request
         * @return \Symfony\Component\HttpFoundation\Response 
         * @static 
         */ 
        public static function dispatch($request)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->dispatch($request);
        }
                    /**
         * Dispatch the request to a route and return the response.
         *
         * @param \Illuminate\Http\Request $request
         * @return \Symfony\Component\HttpFoundation\Response 
         * @static 
         */ 
        public static function dispatchToRoute($request)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->dispatchToRoute($request);
        }
                    /**
         * Gather the middleware for the given route with resolved class names.
         *
         * @param \Illuminate\Routing\Route $route
         * @return array 
         * @static 
         */ 
        public static function gatherRouteMiddleware($route)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->gatherRouteMiddleware($route);
        }
                    /**
         * Resolve a flat array of middleware classes from the provided array.
         *
         * @param array $middleware
         * @param array $excluded
         * @return array 
         * @static 
         */ 
        public static function resolveMiddleware($middleware, $excluded = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->resolveMiddleware($middleware, $excluded);
        }
                    /**
         * Create a response instance from the given value.
         *
         * @param \Symfony\Component\HttpFoundation\Request $request
         * @param mixed $response
         * @return \Symfony\Component\HttpFoundation\Response 
         * @static 
         */ 
        public static function prepareResponse($request, $response)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->prepareResponse($request, $response);
        }
                    /**
         * Static version of prepareResponse.
         *
         * @param \Symfony\Component\HttpFoundation\Request $request
         * @param mixed $response
         * @return \Symfony\Component\HttpFoundation\Response 
         * @static 
         */ 
        public static function toResponse($request, $response)
        {
                        return \Illuminate\Routing\Router::toResponse($request, $response);
        }
                    /**
         * Substitute the route bindings onto the route.
         *
         * @param \Illuminate\Routing\Route $route
         * @return \Illuminate\Routing\Route 
         * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
         * @throws \Illuminate\Routing\Exceptions\BackedEnumCaseNotFoundException
         * @static 
         */ 
        public static function substituteBindings($route)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->substituteBindings($route);
        }
                    /**
         * Substitute the implicit route bindings for the given route.
         *
         * @param \Illuminate\Routing\Route $route
         * @return void 
         * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
         * @throws \Illuminate\Routing\Exceptions\BackedEnumCaseNotFoundException
         * @static 
         */ 
        public static function substituteImplicitBindings($route)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->substituteImplicitBindings($route);
        }
                    /**
         * Register a route matched event listener.
         *
         * @param string|callable $callback
         * @return void 
         * @static 
         */ 
        public static function matched($callback)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->matched($callback);
        }
                    /**
         * Get all of the defined middleware short-hand names.
         *
         * @return array 
         * @static 
         */ 
        public static function getMiddleware()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getMiddleware();
        }
                    /**
         * Register a short-hand name for a middleware.
         *
         * @param string $name
         * @param string $class
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function aliasMiddleware($name, $class)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->aliasMiddleware($name, $class);
        }
                    /**
         * Check if a middlewareGroup with the given name exists.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMiddlewareGroup($name)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->hasMiddlewareGroup($name);
        }
                    /**
         * Get all of the defined middleware groups.
         *
         * @return array 
         * @static 
         */ 
        public static function getMiddlewareGroups()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getMiddlewareGroups();
        }
                    /**
         * Register a group of middleware.
         *
         * @param string $name
         * @param array $middleware
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function middlewareGroup($name, $middleware)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->middlewareGroup($name, $middleware);
        }
                    /**
         * Add a middleware to the beginning of a middleware group.
         * 
         * If the middleware is already in the group, it will not be added again.
         *
         * @param string $group
         * @param string $middleware
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function prependMiddlewareToGroup($group, $middleware)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->prependMiddlewareToGroup($group, $middleware);
        }
                    /**
         * Add a middleware to the end of a middleware group.
         * 
         * If the middleware is already in the group, it will not be added again.
         *
         * @param string $group
         * @param string $middleware
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function pushMiddlewareToGroup($group, $middleware)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->pushMiddlewareToGroup($group, $middleware);
        }
                    /**
         * Remove the given middleware from the specified group.
         *
         * @param string $group
         * @param string $middleware
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function removeMiddlewareFromGroup($group, $middleware)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->removeMiddlewareFromGroup($group, $middleware);
        }
                    /**
         * Flush the router's middleware groups.
         *
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function flushMiddlewareGroups()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->flushMiddlewareGroups();
        }
                    /**
         * Add a new route parameter binder.
         *
         * @param string $key
         * @param string|callable $binder
         * @return void 
         * @static 
         */ 
        public static function bind($key, $binder)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->bind($key, $binder);
        }
                    /**
         * Register a model binder for a wildcard.
         *
         * @param string $key
         * @param string $class
         * @param \Closure|null $callback
         * @return void 
         * @static 
         */ 
        public static function model($key, $class, $callback = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->model($key, $class, $callback);
        }
                    /**
         * Get the binding callback for a given binding.
         *
         * @param string $key
         * @return \Closure|null 
         * @static 
         */ 
        public static function getBindingCallback($key)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getBindingCallback($key);
        }
                    /**
         * Get the global "where" patterns.
         *
         * @return array 
         * @static 
         */ 
        public static function getPatterns()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getPatterns();
        }
                    /**
         * Set a global where pattern on all routes.
         *
         * @param string $key
         * @param string $pattern
         * @return void 
         * @static 
         */ 
        public static function pattern($key, $pattern)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->pattern($key, $pattern);
        }
                    /**
         * Set a group of global where patterns on all routes.
         *
         * @param array $patterns
         * @return void 
         * @static 
         */ 
        public static function patterns($patterns)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->patterns($patterns);
        }
                    /**
         * Determine if the router currently has a group stack.
         *
         * @return bool 
         * @static 
         */ 
        public static function hasGroupStack()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->hasGroupStack();
        }
                    /**
         * Get the current group stack for the router.
         *
         * @return array 
         * @static 
         */ 
        public static function getGroupStack()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getGroupStack();
        }
                    /**
         * Get a route parameter for the current route.
         *
         * @param string $key
         * @param string|null $default
         * @return mixed 
         * @static 
         */ 
        public static function input($key, $default = null)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->input($key, $default);
        }
                    /**
         * Get the request currently being dispatched.
         *
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function getCurrentRequest()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getCurrentRequest();
        }
                    /**
         * Get the currently dispatched route instance.
         *
         * @return \Illuminate\Routing\Route|null 
         * @static 
         */ 
        public static function getCurrentRoute()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getCurrentRoute();
        }
                    /**
         * Get the currently dispatched route instance.
         *
         * @return \Illuminate\Routing\Route|null 
         * @static 
         */ 
        public static function current()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->current();
        }
                    /**
         * Check if a route with the given name exists.
         *
         * @param string|array $name
         * @return bool 
         * @static 
         */ 
        public static function has($name)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->has($name);
        }
                    /**
         * Get the current route name.
         *
         * @return string|null 
         * @static 
         */ 
        public static function currentRouteName()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->currentRouteName();
        }
                    /**
         * Alias for the "currentRouteNamed" method.
         *
         * @param mixed $patterns
         * @return bool 
         * @static 
         */ 
        public static function is(...$patterns)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->is(...$patterns);
        }
                    /**
         * Determine if the current route matches a pattern.
         *
         * @param mixed $patterns
         * @return bool 
         * @static 
         */ 
        public static function currentRouteNamed(...$patterns)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->currentRouteNamed(...$patterns);
        }
                    /**
         * Get the current route action.
         *
         * @return string|null 
         * @static 
         */ 
        public static function currentRouteAction()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->currentRouteAction();
        }
                    /**
         * Alias for the "currentRouteUses" method.
         *
         * @param array $patterns
         * @return bool 
         * @static 
         */ 
        public static function uses(...$patterns)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->uses(...$patterns);
        }
                    /**
         * Determine if the current route action matches a given action.
         *
         * @param string $action
         * @return bool 
         * @static 
         */ 
        public static function currentRouteUses($action)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->currentRouteUses($action);
        }
                    /**
         * Set the unmapped global resource parameters to singular.
         *
         * @param bool $singular
         * @return void 
         * @static 
         */ 
        public static function singularResourceParameters($singular = true)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->singularResourceParameters($singular);
        }
                    /**
         * Set the global resource parameter mapping.
         *
         * @param array $parameters
         * @return void 
         * @static 
         */ 
        public static function resourceParameters($parameters = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->resourceParameters($parameters);
        }
                    /**
         * Get or set the verbs used in the resource URIs.
         *
         * @param array $verbs
         * @return array|null 
         * @static 
         */ 
        public static function resourceVerbs($verbs = [])
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->resourceVerbs($verbs);
        }
                    /**
         * Get the underlying route collection.
         *
         * @return \Illuminate\Routing\RouteCollectionInterface 
         * @static 
         */ 
        public static function getRoutes()
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->getRoutes();
        }
                    /**
         * Set the route collection instance.
         *
         * @param \Illuminate\Routing\RouteCollection $routes
         * @return void 
         * @static 
         */ 
        public static function setRoutes($routes)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->setRoutes($routes);
        }
                    /**
         * Set the compiled route collection instance.
         *
         * @param array $routes
         * @return void 
         * @static 
         */ 
        public static function setCompiledRoutes($routes)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        $instance->setCompiledRoutes($routes);
        }
                    /**
         * Remove any duplicate middleware from the given array.
         *
         * @param array $middleware
         * @return array 
         * @static 
         */ 
        public static function uniqueMiddleware($middleware)
        {
                        return \Illuminate\Routing\Router::uniqueMiddleware($middleware);
        }
                    /**
         * Set the container instance used by the router.
         *
         * @param \Illuminate\Container\Container $container
         * @return \Illuminate\Routing\Router 
         * @static 
         */ 
        public static function setContainer($container)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->setContainer($container);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Routing\Router::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Routing\Router::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Routing\Router::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Routing\Router::flushMacros();
        }
                    /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param array $parameters
         * @return mixed 
         * @throws \BadMethodCallException
         * @static 
         */ 
        public static function macroCall($method, $parameters)
        {
                        /** @var \Illuminate\Routing\Router $instance */
                        return $instance->macroCall($method, $parameters);
        }
                    /**
         * 
         *
         * @see \Inertia\ServiceProvider::registerRouterMacro()
         * @param mixed $uri
         * @param mixed $component
         * @param mixed $props
         * @static 
         */ 
        public static function inertia($uri, $component, $props = [])
        {
                        return \Illuminate\Routing\Router::inertia($uri, $component, $props);
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForBridgeComponent()
         * @static 
         */ 
        public static function spladeWithVueBridge()
        {
                        return \Illuminate\Routing\Router::spladeWithVueBridge();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForPasswordConfirmation()
         * @static 
         */ 
        public static function spladePasswordConfirmation()
        {
                        return \Illuminate\Routing\Router::spladePasswordConfirmation();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForFileUploads()
         * @static 
         */ 
        public static function spladeUploads()
        {
                        return \Illuminate\Routing\Router::spladeUploads();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForTableRoutes()
         * @static 
         */ 
        public static function spladeTable()
        {
                        return \Illuminate\Routing\Router::spladeTable();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Database\Schema\Builder
     */ 
        class Schema {
                    /**
         * Create a database in the schema.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function createDatabase($name)
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->createDatabase($name);
        }
                    /**
         * Drop a database from the schema if the database exists.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function dropDatabaseIfExists($name)
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->dropDatabaseIfExists($name);
        }
                    /**
         * Determine if the given table exists.
         *
         * @param string $table
         * @return bool 
         * @static 
         */ 
        public static function hasTable($table)
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->hasTable($table);
        }
                    /**
         * Get the column listing for a given table.
         *
         * @param string $table
         * @return array 
         * @static 
         */ 
        public static function getColumnListing($table)
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->getColumnListing($table);
        }
                    /**
         * Drop all tables from the database.
         *
         * @return void 
         * @static 
         */ 
        public static function dropAllTables()
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->dropAllTables();
        }
                    /**
         * Drop all views from the database.
         *
         * @return void 
         * @static 
         */ 
        public static function dropAllViews()
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->dropAllViews();
        }
                    /**
         * Get all of the table names for the database.
         *
         * @return array 
         * @static 
         */ 
        public static function getAllTables()
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->getAllTables();
        }
                    /**
         * Get all of the view names for the database.
         *
         * @return array 
         * @static 
         */ 
        public static function getAllViews()
        {
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->getAllViews();
        }
                    /**
         * Set the default string length for migrations.
         *
         * @param int $length
         * @return void 
         * @static 
         */ 
        public static function defaultStringLength($length)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        \Illuminate\Database\Schema\MySqlBuilder::defaultStringLength($length);
        }
                    /**
         * Set the default morph key type for migrations.
         *
         * @param string $type
         * @return void 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function defaultMorphKeyType($type)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        \Illuminate\Database\Schema\MySqlBuilder::defaultMorphKeyType($type);
        }
                    /**
         * Set the default morph key type for migrations to UUIDs.
         *
         * @return void 
         * @static 
         */ 
        public static function morphUsingUuids()
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        \Illuminate\Database\Schema\MySqlBuilder::morphUsingUuids();
        }
                    /**
         * Set the default morph key type for migrations to ULIDs.
         *
         * @return void 
         * @static 
         */ 
        public static function morphUsingUlids()
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        \Illuminate\Database\Schema\MySqlBuilder::morphUsingUlids();
        }
                    /**
         * Attempt to use native schema operations for dropping and renaming columns, even if Doctrine DBAL is installed.
         *
         * @param bool $value
         * @return void 
         * @static 
         */ 
        public static function useNativeSchemaOperationsIfPossible($value = true)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        \Illuminate\Database\Schema\MySqlBuilder::useNativeSchemaOperationsIfPossible($value);
        }
                    /**
         * Determine if the given table has a given column.
         *
         * @param string $table
         * @param string $column
         * @return bool 
         * @static 
         */ 
        public static function hasColumn($table, $column)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->hasColumn($table, $column);
        }
                    /**
         * Determine if the given table has given columns.
         *
         * @param string $table
         * @param array $columns
         * @return bool 
         * @static 
         */ 
        public static function hasColumns($table, $columns)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->hasColumns($table, $columns);
        }
                    /**
         * Execute a table builder callback if the given table has a given column.
         *
         * @param string $table
         * @param string $column
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function whenTableHasColumn($table, $column, $callback)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->whenTableHasColumn($table, $column, $callback);
        }
                    /**
         * Execute a table builder callback if the given table doesn't have a given column.
         *
         * @param string $table
         * @param string $column
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function whenTableDoesntHaveColumn($table, $column, $callback)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->whenTableDoesntHaveColumn($table, $column, $callback);
        }
                    /**
         * Get the data type for the given column name.
         *
         * @param string $table
         * @param string $column
         * @return string 
         * @static 
         */ 
        public static function getColumnType($table, $column)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->getColumnType($table, $column);
        }
                    /**
         * Modify a table on the schema.
         *
         * @param string $table
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function table($table, $callback)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->table($table, $callback);
        }
                    /**
         * Create a new table on the schema.
         *
         * @param string $table
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function create($table, $callback)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->create($table, $callback);
        }
                    /**
         * Drop a table from the schema.
         *
         * @param string $table
         * @return void 
         * @static 
         */ 
        public static function drop($table)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->drop($table);
        }
                    /**
         * Drop a table from the schema if it exists.
         *
         * @param string $table
         * @return void 
         * @static 
         */ 
        public static function dropIfExists($table)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->dropIfExists($table);
        }
                    /**
         * Drop columns from a table schema.
         *
         * @param string $table
         * @param string|array $columns
         * @return void 
         * @static 
         */ 
        public static function dropColumns($table, $columns)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->dropColumns($table, $columns);
        }
                    /**
         * Drop all types from the database.
         *
         * @return void 
         * @throws \LogicException
         * @static 
         */ 
        public static function dropAllTypes()
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->dropAllTypes();
        }
                    /**
         * Rename a table on the schema.
         *
         * @param string $from
         * @param string $to
         * @return void 
         * @static 
         */ 
        public static function rename($from, $to)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->rename($from, $to);
        }
                    /**
         * Enable foreign key constraints.
         *
         * @return bool 
         * @static 
         */ 
        public static function enableForeignKeyConstraints()
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->enableForeignKeyConstraints();
        }
                    /**
         * Disable foreign key constraints.
         *
         * @return bool 
         * @static 
         */ 
        public static function disableForeignKeyConstraints()
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->disableForeignKeyConstraints();
        }
                    /**
         * Disable foreign key constraints during the execution of a callback.
         *
         * @param \Closure $callback
         * @return mixed 
         * @static 
         */ 
        public static function withoutForeignKeyConstraints($callback)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->withoutForeignKeyConstraints($callback);
        }
                    /**
         * Get the database connection instance.
         *
         * @return \Illuminate\Database\Connection 
         * @static 
         */ 
        public static function getConnection()
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->getConnection();
        }
                    /**
         * Set the database connection instance.
         *
         * @param \Illuminate\Database\Connection $connection
         * @return \Illuminate\Database\Schema\MySqlBuilder 
         * @static 
         */ 
        public static function setConnection($connection)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        return $instance->setConnection($connection);
        }
                    /**
         * Set the Schema Blueprint resolver callback.
         *
         * @param \Closure $resolver
         * @return void 
         * @static 
         */ 
        public static function blueprintResolver($resolver)
        {            //Method inherited from \Illuminate\Database\Schema\Builder         
                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                        $instance->blueprintResolver($resolver);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Session\SessionManager
     */ 
        class Session {
                    /**
         * Determine if requests for the same session should wait for each to finish before executing.
         *
         * @return bool 
         * @static 
         */ 
        public static function shouldBlock()
        {
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->shouldBlock();
        }
                    /**
         * Get the name of the cache store / driver that should be used to acquire session locks.
         *
         * @return string|null 
         * @static 
         */ 
        public static function blockDriver()
        {
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->blockDriver();
        }
                    /**
         * Get the session configuration.
         *
         * @return array 
         * @static 
         */ 
        public static function getSessionConfig()
        {
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->getSessionConfig();
        }
                    /**
         * Get the default session driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Set the default session driver name.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setDefaultDriver($name)
        {
                        /** @var \Illuminate\Session\SessionManager $instance */
                        $instance->setDefaultDriver($name);
        }
                    /**
         * Get a driver instance.
         *
         * @param string|null $driver
         * @return mixed 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function driver($driver = null)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->driver($driver);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Session\SessionManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Get all of the created "drivers".
         *
         * @return array 
         * @static 
         */ 
        public static function getDrivers()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->getDrivers();
        }
                    /**
         * Get the container instance used by the manager.
         *
         * @return \Illuminate\Contracts\Container\Container 
         * @static 
         */ 
        public static function getContainer()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->getContainer();
        }
                    /**
         * Set the container instance used by the manager.
         *
         * @param \Illuminate\Contracts\Container\Container $container
         * @return \Illuminate\Session\SessionManager 
         * @static 
         */ 
        public static function setContainer($container)
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->setContainer($container);
        }
                    /**
         * Forget all of the resolved driver instances.
         *
         * @return \Illuminate\Session\SessionManager 
         * @static 
         */ 
        public static function forgetDrivers()
        {            //Method inherited from \Illuminate\Support\Manager         
                        /** @var \Illuminate\Session\SessionManager $instance */
                        return $instance->forgetDrivers();
        }
                    /**
         * Start the session, reading the data from a handler.
         *
         * @return bool 
         * @static 
         */ 
        public static function start()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->start();
        }
                    /**
         * Save the session data to storage.
         *
         * @return void 
         * @static 
         */ 
        public static function save()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->save();
        }
                    /**
         * Age the flash data for the session.
         *
         * @return void 
         * @static 
         */ 
        public static function ageFlashData()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->ageFlashData();
        }
                    /**
         * Get all of the session data.
         *
         * @return array 
         * @static 
         */ 
        public static function all()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->all();
        }
                    /**
         * Get a subset of the session data.
         *
         * @param array $keys
         * @return array 
         * @static 
         */ 
        public static function only($keys)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->only($keys);
        }
                    /**
         * Checks if a key exists.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function exists($key)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->exists($key);
        }
                    /**
         * Determine if the given key is missing from the session data.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function missing($key)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->missing($key);
        }
                    /**
         * Checks if a key is present and not null.
         *
         * @param string|array $key
         * @return bool 
         * @static 
         */ 
        public static function has($key)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->has($key);
        }
                    /**
         * Get an item from the session.
         *
         * @param string $key
         * @param mixed $default
         * @return mixed 
         * @static 
         */ 
        public static function get($key, $default = null)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->get($key, $default);
        }
                    /**
         * Get the value of a given key and then forget it.
         *
         * @param string $key
         * @param mixed $default
         * @return mixed 
         * @static 
         */ 
        public static function pull($key, $default = null)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->pull($key, $default);
        }
                    /**
         * Determine if the session contains old input.
         *
         * @param string|null $key
         * @return bool 
         * @static 
         */ 
        public static function hasOldInput($key = null)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->hasOldInput($key);
        }
                    /**
         * Get the requested item from the flashed input array.
         *
         * @param string|null $key
         * @param mixed $default
         * @return mixed 
         * @static 
         */ 
        public static function getOldInput($key = null, $default = null)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->getOldInput($key, $default);
        }
                    /**
         * Replace the given session attributes entirely.
         *
         * @param array $attributes
         * @return void 
         * @static 
         */ 
        public static function replace($attributes)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->replace($attributes);
        }
                    /**
         * Put a key / value pair or array of key / value pairs in the session.
         *
         * @param string|array $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function put($key, $value = null)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->put($key, $value);
        }
                    /**
         * Get an item from the session, or store the default value.
         *
         * @param string $key
         * @param \Closure $callback
         * @return mixed 
         * @static 
         */ 
        public static function remember($key, $callback)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->remember($key, $callback);
        }
                    /**
         * Push a value onto a session array.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function push($key, $value)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->push($key, $value);
        }
                    /**
         * Increment the value of an item in the session.
         *
         * @param string $key
         * @param int $amount
         * @return mixed 
         * @static 
         */ 
        public static function increment($key, $amount = 1)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->increment($key, $amount);
        }
                    /**
         * Decrement the value of an item in the session.
         *
         * @param string $key
         * @param int $amount
         * @return int 
         * @static 
         */ 
        public static function decrement($key, $amount = 1)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->decrement($key, $amount);
        }
                    /**
         * Flash a key / value pair to the session.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function flash($key, $value = true)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->flash($key, $value);
        }
                    /**
         * Flash a key / value pair to the session for immediate use.
         *
         * @param string $key
         * @param mixed $value
         * @return void 
         * @static 
         */ 
        public static function now($key, $value)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->now($key, $value);
        }
                    /**
         * Reflash all of the session flash data.
         *
         * @return void 
         * @static 
         */ 
        public static function reflash()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->reflash();
        }
                    /**
         * Reflash a subset of the current flash data.
         *
         * @param array|mixed $keys
         * @return void 
         * @static 
         */ 
        public static function keep($keys = null)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->keep($keys);
        }
                    /**
         * Flash an input array to the session.
         *
         * @param array $value
         * @return void 
         * @static 
         */ 
        public static function flashInput($value)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->flashInput($value);
        }
                    /**
         * Remove an item from the session, returning its value.
         *
         * @param string $key
         * @return mixed 
         * @static 
         */ 
        public static function remove($key)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->remove($key);
        }
                    /**
         * Remove one or many items from the session.
         *
         * @param string|array $keys
         * @return void 
         * @static 
         */ 
        public static function forget($keys)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->forget($keys);
        }
                    /**
         * Remove all of the items from the session.
         *
         * @return void 
         * @static 
         */ 
        public static function flush()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->flush();
        }
                    /**
         * Flush the session data and regenerate the ID.
         *
         * @return bool 
         * @static 
         */ 
        public static function invalidate()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->invalidate();
        }
                    /**
         * Generate a new session identifier.
         *
         * @param bool $destroy
         * @return bool 
         * @static 
         */ 
        public static function regenerate($destroy = false)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->regenerate($destroy);
        }
                    /**
         * Generate a new session ID for the session.
         *
         * @param bool $destroy
         * @return bool 
         * @static 
         */ 
        public static function migrate($destroy = false)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->migrate($destroy);
        }
                    /**
         * Determine if the session has been started.
         *
         * @return bool 
         * @static 
         */ 
        public static function isStarted()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->isStarted();
        }
                    /**
         * Get the name of the session.
         *
         * @return string 
         * @static 
         */ 
        public static function getName()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->getName();
        }
                    /**
         * Set the name of the session.
         *
         * @param string $name
         * @return void 
         * @static 
         */ 
        public static function setName($name)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->setName($name);
        }
                    /**
         * Get the current session ID.
         *
         * @return string 
         * @static 
         */ 
        public static function getId()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->getId();
        }
                    /**
         * Set the session ID.
         *
         * @param string|null $id
         * @return void 
         * @static 
         */ 
        public static function setId($id)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->setId($id);
        }
                    /**
         * Determine if this is a valid session ID.
         *
         * @param string|null $id
         * @return bool 
         * @static 
         */ 
        public static function isValidId($id)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->isValidId($id);
        }
                    /**
         * Set the existence of the session on the handler if applicable.
         *
         * @param bool $value
         * @return void 
         * @static 
         */ 
        public static function setExists($value)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->setExists($value);
        }
                    /**
         * Get the CSRF token value.
         *
         * @return string 
         * @static 
         */ 
        public static function token()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->token();
        }
                    /**
         * Regenerate the CSRF token value.
         *
         * @return void 
         * @static 
         */ 
        public static function regenerateToken()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->regenerateToken();
        }
                    /**
         * Get the previous URL from the session.
         *
         * @return string|null 
         * @static 
         */ 
        public static function previousUrl()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->previousUrl();
        }
                    /**
         * Set the "previous" URL in the session.
         *
         * @param string $url
         * @return void 
         * @static 
         */ 
        public static function setPreviousUrl($url)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->setPreviousUrl($url);
        }
                    /**
         * Specify that the user has confirmed their password.
         *
         * @return void 
         * @static 
         */ 
        public static function passwordConfirmed()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->passwordConfirmed();
        }
                    /**
         * Get the underlying session handler implementation.
         *
         * @return \SessionHandlerInterface 
         * @static 
         */ 
        public static function getHandler()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->getHandler();
        }
                    /**
         * Set the underlying session handler implementation.
         *
         * @param \SessionHandlerInterface $handler
         * @return \SessionHandlerInterface 
         * @static 
         */ 
        public static function setHandler($handler)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->setHandler($handler);
        }
                    /**
         * Determine if the session handler needs a request.
         *
         * @return bool 
         * @static 
         */ 
        public static function handlerNeedsRequest()
        {
                        /** @var \Illuminate\Session\Store $instance */
                        return $instance->handlerNeedsRequest();
        }
                    /**
         * Set the request on the handler instance.
         *
         * @param \Illuminate\Http\Request $request
         * @return void 
         * @static 
         */ 
        public static function setRequestOnHandler($request)
        {
                        /** @var \Illuminate\Session\Store $instance */
                        $instance->setRequestOnHandler($request);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Session\Store::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Session\Store::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Session\Store::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Session\Store::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @method static bool has(string $location)
     * @method static string read(string $location)
     * @method static \League\Flysystem\DirectoryListing listContents(string $location, bool $deep = false)
     * @method static int fileSize(string $path)
     * @method static string visibility(string $path)
     * @method static void write(string $location, string $contents, array $config = [])
     * @method static void createDirectory(string $location, array $config = [])
     * @see \Illuminate\Filesystem\FilesystemManager
     */ 
        class Storage {
                    /**
         * Get a filesystem instance.
         *
         * @param string|null $name
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function drive($name = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->drive($name);
        }
                    /**
         * Get a filesystem instance.
         *
         * @param string|null $name
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function disk($name = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->disk($name);
        }
                    /**
         * Get a default cloud filesystem instance.
         *
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function cloud()
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->cloud();
        }
                    /**
         * Build an on-demand disk.
         *
         * @param string|array $config
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function build($config)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->build($config);
        }
                    /**
         * Create an instance of the local driver.
         *
         * @param array $config
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function createLocalDriver($config)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->createLocalDriver($config);
        }
                    /**
         * Create an instance of the ftp driver.
         *
         * @param array $config
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function createFtpDriver($config)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->createFtpDriver($config);
        }
                    /**
         * Create an instance of the sftp driver.
         *
         * @param array $config
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function createSftpDriver($config)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->createSftpDriver($config);
        }
                    /**
         * Create an instance of the Amazon S3 driver.
         *
         * @param array $config
         * @return \Illuminate\Contracts\Filesystem\Cloud 
         * @static 
         */ 
        public static function createS3Driver($config)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->createS3Driver($config);
        }
                    /**
         * Create a scoped driver.
         *
         * @param array $config
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function createScopedDriver($config)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->createScopedDriver($config);
        }
                    /**
         * Set the given disk instance.
         *
         * @param string $name
         * @param mixed $disk
         * @return \Illuminate\Filesystem\FilesystemManager 
         * @static 
         */ 
        public static function set($name, $disk)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->set($name, $disk);
        }
                    /**
         * Get the default driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultDriver()
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->getDefaultDriver();
        }
                    /**
         * Get the default cloud driver name.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultCloudDriver()
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->getDefaultCloudDriver();
        }
                    /**
         * Unset the given disk instances.
         *
         * @param array|string $disk
         * @return \Illuminate\Filesystem\FilesystemManager 
         * @static 
         */ 
        public static function forgetDisk($disk)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->forgetDisk($disk);
        }
                    /**
         * Disconnect the given disk and remove from local cache.
         *
         * @param string|null $name
         * @return void 
         * @static 
         */ 
        public static function purge($name = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        $instance->purge($name);
        }
                    /**
         * Register a custom driver creator Closure.
         *
         * @param string $driver
         * @param \Closure $callback
         * @return \Illuminate\Filesystem\FilesystemManager 
         * @static 
         */ 
        public static function extend($driver, $callback)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->extend($driver, $callback);
        }
                    /**
         * Set the application instance used by the manager.
         *
         * @param \Illuminate\Contracts\Foundation\Application $app
         * @return \Illuminate\Filesystem\FilesystemManager 
         * @static 
         */ 
        public static function setApplication($app)
        {
                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
                        return $instance->setApplication($app);
        }
                    /**
         * Assert that the given file or directory exists.
         *
         * @param string|array $path
         * @param string|null $content
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function assertExists($path, $content = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->assertExists($path, $content);
        }
                    /**
         * Assert that the given file or directory does not exist.
         *
         * @param string|array $path
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function assertMissing($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->assertMissing($path);
        }
                    /**
         * Assert that the given directory is empty.
         *
         * @param string $path
         * @return \Illuminate\Filesystem\FilesystemAdapter 
         * @static 
         */ 
        public static function assertDirectoryEmpty($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->assertDirectoryEmpty($path);
        }
                    /**
         * Determine if a file or directory exists.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function exists($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->exists($path);
        }
                    /**
         * Determine if a file or directory is missing.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function missing($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->missing($path);
        }
                    /**
         * Determine if a file exists.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function fileExists($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->fileExists($path);
        }
                    /**
         * Determine if a file is missing.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function fileMissing($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->fileMissing($path);
        }
                    /**
         * Determine if a directory exists.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function directoryExists($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->directoryExists($path);
        }
                    /**
         * Determine if a directory is missing.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function directoryMissing($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->directoryMissing($path);
        }
                    /**
         * Get the full path for the file at the given "short" path.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function path($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->path($path);
        }
                    /**
         * Get the contents of a file.
         *
         * @param string $path
         * @return string|null 
         * @static 
         */ 
        public static function get($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->get($path);
        }
                    /**
         * Create a streamed response for a given file.
         *
         * @param string $path
         * @param string|null $name
         * @param array $headers
         * @param string|null $disposition
         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
         * @static 
         */ 
        public static function response($path, $name = null, $headers = [], $disposition = 'inline')
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->response($path, $name, $headers, $disposition);
        }
                    /**
         * Create a streamed download response for a given file.
         *
         * @param string $path
         * @param string|null $name
         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
         * @static 
         */ 
        public static function download($path, $name = null, $headers = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->download($path, $name, $headers);
        }
                    /**
         * Write the contents of a file.
         *
         * @param string $path
         * @param \Psr\Http\Message\StreamInterface|\Illuminate\Http\File|\Illuminate\Http\UploadedFile|string|resource $contents
         * @param mixed $options
         * @return string|bool 
         * @static 
         */ 
        public static function put($path, $contents, $options = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->put($path, $contents, $options);
        }
                    /**
         * Store the uploaded file on the disk.
         *
         * @param string $path
         * @param \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string $file
         * @param mixed $options
         * @return string|false 
         * @static 
         */ 
        public static function putFile($path, $file, $options = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->putFile($path, $file, $options);
        }
                    /**
         * Store the uploaded file on the disk with a given name.
         *
         * @param string $path
         * @param \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string $file
         * @param string $name
         * @param mixed $options
         * @return string|false 
         * @static 
         */ 
        public static function putFileAs($path, $file, $name, $options = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->putFileAs($path, $file, $name, $options);
        }
                    /**
         * Get the visibility for the given path.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function getVisibility($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->getVisibility($path);
        }
                    /**
         * Set the visibility for the given path.
         *
         * @param string $path
         * @param string $visibility
         * @return bool 
         * @static 
         */ 
        public static function setVisibility($path, $visibility)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->setVisibility($path, $visibility);
        }
                    /**
         * Prepend to a file.
         *
         * @param string $path
         * @param string $data
         * @param string $separator
         * @return bool 
         * @static 
         */ 
        public static function prepend($path, $data, $separator = '
')
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->prepend($path, $data, $separator);
        }
                    /**
         * Append to a file.
         *
         * @param string $path
         * @param string $data
         * @param string $separator
         * @return bool 
         * @static 
         */ 
        public static function append($path, $data, $separator = '
')
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->append($path, $data, $separator);
        }
                    /**
         * Delete the file at a given path.
         *
         * @param string|array $paths
         * @return bool 
         * @static 
         */ 
        public static function delete($paths)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->delete($paths);
        }
                    /**
         * Copy a file to a new location.
         *
         * @param string $from
         * @param string $to
         * @return bool 
         * @static 
         */ 
        public static function copy($from, $to)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->copy($from, $to);
        }
                    /**
         * Move a file to a new location.
         *
         * @param string $from
         * @param string $to
         * @return bool 
         * @static 
         */ 
        public static function move($from, $to)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->move($from, $to);
        }
                    /**
         * Get the file size of a given file.
         *
         * @param string $path
         * @return int 
         * @static 
         */ 
        public static function size($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->size($path);
        }
                    /**
         * Get the checksum for a file.
         *
         * @return string|false 
         * @throws UnableToProvideChecksum
         * @static 
         */ 
        public static function checksum($path, $options = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->checksum($path, $options);
        }
                    /**
         * Get the mime-type of a given file.
         *
         * @param string $path
         * @return string|false 
         * @static 
         */ 
        public static function mimeType($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->mimeType($path);
        }
                    /**
         * Get the file's last modification time.
         *
         * @param string $path
         * @return int 
         * @static 
         */ 
        public static function lastModified($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->lastModified($path);
        }
                    /**
         * Get a resource to read the file.
         *
         * @param string $path
         * @return resource|null The path resource or null on failure.
         * @static 
         */ 
        public static function readStream($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->readStream($path);
        }
                    /**
         * Write a new file using a stream.
         *
         * @param string $path
         * @param resource $resource
         * @param array $options
         * @return bool 
         * @static 
         */ 
        public static function writeStream($path, $resource, $options = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->writeStream($path, $resource, $options);
        }
                    /**
         * Get the URL for the file at the given path.
         *
         * @param string $path
         * @return string 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function url($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->url($path);
        }
                    /**
         * Determine if temporary URLs can be generated.
         *
         * @return bool 
         * @static 
         */ 
        public static function providesTemporaryUrls()
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->providesTemporaryUrls();
        }
                    /**
         * Get a temporary URL for the file at the given path.
         *
         * @param string $path
         * @param \DateTimeInterface $expiration
         * @param array $options
         * @return string 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function temporaryUrl($path, $expiration, $options = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->temporaryUrl($path, $expiration, $options);
        }
                    /**
         * Get a temporary upload URL for the file at the given path.
         *
         * @param string $path
         * @param \DateTimeInterface $expiration
         * @param array $options
         * @return array 
         * @throws \RuntimeException
         * @static 
         */ 
        public static function temporaryUploadUrl($path, $expiration, $options = [])
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->temporaryUploadUrl($path, $expiration, $options);
        }
                    /**
         * Get an array of all files in a directory.
         *
         * @param string|null $directory
         * @param bool $recursive
         * @return array 
         * @static 
         */ 
        public static function files($directory = null, $recursive = false)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->files($directory, $recursive);
        }
                    /**
         * Get all of the files from the given directory (recursive).
         *
         * @param string|null $directory
         * @return array 
         * @static 
         */ 
        public static function allFiles($directory = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->allFiles($directory);
        }
                    /**
         * Get all of the directories within a given directory.
         *
         * @param string|null $directory
         * @param bool $recursive
         * @return array 
         * @static 
         */ 
        public static function directories($directory = null, $recursive = false)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->directories($directory, $recursive);
        }
                    /**
         * Get all the directories within a given directory (recursive).
         *
         * @param string|null $directory
         * @return array 
         * @static 
         */ 
        public static function allDirectories($directory = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->allDirectories($directory);
        }
                    /**
         * Create a directory.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function makeDirectory($path)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->makeDirectory($path);
        }
                    /**
         * Recursively delete a directory.
         *
         * @param string $directory
         * @return bool 
         * @static 
         */ 
        public static function deleteDirectory($directory)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->deleteDirectory($directory);
        }
                    /**
         * Get the Flysystem driver.
         *
         * @return \League\Flysystem\FilesystemOperator 
         * @static 
         */ 
        public static function getDriver()
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->getDriver();
        }
                    /**
         * Get the Flysystem adapter.
         *
         * @return \League\Flysystem\FilesystemAdapter 
         * @static 
         */ 
        public static function getAdapter()
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->getAdapter();
        }
                    /**
         * Get the configuration values.
         *
         * @return array 
         * @static 
         */ 
        public static function getConfig()
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->getConfig();
        }
                    /**
         * Define a custom temporary URL builder callback.
         *
         * @param \Closure $callback
         * @return void 
         * @static 
         */ 
        public static function buildTemporaryUrlsUsing($callback)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        $instance->buildTemporaryUrlsUsing($callback);
        }
                    /**
         * Apply the callback if the given "value" is (or resolves to) truthy.
         *
         * @template TWhenParameter
         * @template TWhenReturnType
         * @param \Illuminate\Filesystem\(\Closure($this):  TWhenParameter)|TWhenParameter|null  $value
         * @param \Illuminate\Filesystem\(callable($this,  TWhenParameter): TWhenReturnType)|null  $callback
         * @param \Illuminate\Filesystem\(callable($this,  TWhenParameter): TWhenReturnType)|null  $default
         * @return $this|\Illuminate\Filesystem\TWhenReturnType 
         * @static 
         */ 
        public static function when($value = null, $callback = null, $default = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->when($value, $callback, $default);
        }
                    /**
         * Apply the callback if the given "value" is (or resolves to) falsy.
         *
         * @template TUnlessParameter
         * @template TUnlessReturnType
         * @param \Illuminate\Filesystem\(\Closure($this):  TUnlessParameter)|TUnlessParameter|null  $value
         * @param \Illuminate\Filesystem\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $callback
         * @param \Illuminate\Filesystem\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $default
         * @return $this|\Illuminate\Filesystem\TUnlessReturnType 
         * @static 
         */ 
        public static function unless($value = null, $callback = null, $default = null)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->unless($value, $callback, $default);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Filesystem\FilesystemAdapter::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Filesystem\FilesystemAdapter::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Filesystem\FilesystemAdapter::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Filesystem\FilesystemAdapter::flushMacros();
        }
                    /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param array $parameters
         * @return mixed 
         * @throws \BadMethodCallException
         * @static 
         */ 
        public static function macroCall($method, $parameters)
        {
                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                        return $instance->macroCall($method, $parameters);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Routing\UrlGenerator
     */ 
        class URL {
                    /**
         * Get the full URL for the current request.
         *
         * @return string 
         * @static 
         */ 
        public static function full()
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->full();
        }
                    /**
         * Get the current URL for the request.
         *
         * @return string 
         * @static 
         */ 
        public static function current()
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->current();
        }
                    /**
         * Get the URL for the previous request.
         *
         * @param mixed $fallback
         * @return string 
         * @static 
         */ 
        public static function previous($fallback = false)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->previous($fallback);
        }
                    /**
         * Get the previous path info for the request.
         *
         * @param mixed $fallback
         * @return string 
         * @static 
         */ 
        public static function previousPath($fallback = false)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->previousPath($fallback);
        }
                    /**
         * Generate an absolute URL to the given path.
         *
         * @param string $path
         * @param mixed $extra
         * @param bool|null $secure
         * @return string 
         * @static 
         */ 
        public static function to($path, $extra = [], $secure = null)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->to($path, $extra, $secure);
        }
                    /**
         * Generate a secure, absolute URL to the given path.
         *
         * @param string $path
         * @param array $parameters
         * @return string 
         * @static 
         */ 
        public static function secure($path, $parameters = [])
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->secure($path, $parameters);
        }
                    /**
         * Generate the URL to an application asset.
         *
         * @param string $path
         * @param bool|null $secure
         * @return string 
         * @static 
         */ 
        public static function asset($path, $secure = null)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->asset($path, $secure);
        }
                    /**
         * Generate the URL to a secure asset.
         *
         * @param string $path
         * @return string 
         * @static 
         */ 
        public static function secureAsset($path)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->secureAsset($path);
        }
                    /**
         * Generate the URL to an asset from a custom root domain such as CDN, etc.
         *
         * @param string $root
         * @param string $path
         * @param bool|null $secure
         * @return string 
         * @static 
         */ 
        public static function assetFrom($root, $path, $secure = null)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->assetFrom($root, $path, $secure);
        }
                    /**
         * Get the default scheme for a raw URL.
         *
         * @param bool|null $secure
         * @return string 
         * @static 
         */ 
        public static function formatScheme($secure = null)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->formatScheme($secure);
        }
                    /**
         * Create a signed route URL for a named route.
         *
         * @param string $name
         * @param mixed $parameters
         * @param \DateTimeInterface|\DateInterval|int|null $expiration
         * @param bool $absolute
         * @return string 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function signedRoute($name, $parameters = [], $expiration = null, $absolute = true)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->signedRoute($name, $parameters, $expiration, $absolute);
        }
                    /**
         * Create a temporary signed route URL for a named route.
         *
         * @param string $name
         * @param \DateTimeInterface|\DateInterval|int $expiration
         * @param array $parameters
         * @param bool $absolute
         * @return string 
         * @static 
         */ 
        public static function temporarySignedRoute($name, $expiration, $parameters = [], $absolute = true)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->temporarySignedRoute($name, $expiration, $parameters, $absolute);
        }
                    /**
         * Determine if the given request has a valid signature.
         *
         * @param \Illuminate\Http\Request $request
         * @param bool $absolute
         * @param array $ignoreQuery
         * @return bool 
         * @static 
         */ 
        public static function hasValidSignature($request, $absolute = true, $ignoreQuery = [])
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->hasValidSignature($request, $absolute, $ignoreQuery);
        }
                    /**
         * Determine if the given request has a valid signature for a relative URL.
         *
         * @param \Illuminate\Http\Request $request
         * @param array $ignoreQuery
         * @return bool 
         * @static 
         */ 
        public static function hasValidRelativeSignature($request, $ignoreQuery = [])
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->hasValidRelativeSignature($request, $ignoreQuery);
        }
                    /**
         * Determine if the signature from the given request matches the URL.
         *
         * @param \Illuminate\Http\Request $request
         * @param bool $absolute
         * @param array $ignoreQuery
         * @return bool 
         * @static 
         */ 
        public static function hasCorrectSignature($request, $absolute = true, $ignoreQuery = [])
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->hasCorrectSignature($request, $absolute, $ignoreQuery);
        }
                    /**
         * Determine if the expires timestamp from the given request is not from the past.
         *
         * @param \Illuminate\Http\Request $request
         * @return bool 
         * @static 
         */ 
        public static function signatureHasNotExpired($request)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->signatureHasNotExpired($request);
        }
                    /**
         * Get the URL to a named route.
         *
         * @param string $name
         * @param mixed $parameters
         * @param bool $absolute
         * @return string 
         * @throws \Symfony\Component\Routing\Exception\RouteNotFoundException
         * @static 
         */ 
        public static function route($name, $parameters = [], $absolute = true)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->route($name, $parameters, $absolute);
        }
                    /**
         * Get the URL for a given route instance.
         *
         * @param \Illuminate\Routing\Route $route
         * @param mixed $parameters
         * @param bool $absolute
         * @return string 
         * @throws \Illuminate\Routing\Exceptions\UrlGenerationException
         * @static 
         */ 
        public static function toRoute($route, $parameters, $absolute)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->toRoute($route, $parameters, $absolute);
        }
                    /**
         * Get the URL to a controller action.
         *
         * @param string|array $action
         * @param mixed $parameters
         * @param bool $absolute
         * @return string 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function action($action, $parameters = [], $absolute = true)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->action($action, $parameters, $absolute);
        }
                    /**
         * Format the array of URL parameters.
         *
         * @param mixed|array $parameters
         * @return array 
         * @static 
         */ 
        public static function formatParameters($parameters)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->formatParameters($parameters);
        }
                    /**
         * Get the base URL for the request.
         *
         * @param string $scheme
         * @param string|null $root
         * @return string 
         * @static 
         */ 
        public static function formatRoot($scheme, $root = null)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->formatRoot($scheme, $root);
        }
                    /**
         * Format the given URL segments into a single URL.
         *
         * @param string $root
         * @param string $path
         * @param \Illuminate\Routing\Route|null $route
         * @return string 
         * @static 
         */ 
        public static function format($root, $path, $route = null)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->format($root, $path, $route);
        }
                    /**
         * Determine if the given path is a valid URL.
         *
         * @param string $path
         * @return bool 
         * @static 
         */ 
        public static function isValidUrl($path)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->isValidUrl($path);
        }
                    /**
         * Set the default named parameters used by the URL generator.
         *
         * @param array $defaults
         * @return void 
         * @static 
         */ 
        public static function defaults($defaults)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        $instance->defaults($defaults);
        }
                    /**
         * Get the default named parameters used by the URL generator.
         *
         * @return array 
         * @static 
         */ 
        public static function getDefaultParameters()
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->getDefaultParameters();
        }
                    /**
         * Force the scheme for URLs.
         *
         * @param string|null $scheme
         * @return void 
         * @static 
         */ 
        public static function forceScheme($scheme)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        $instance->forceScheme($scheme);
        }
                    /**
         * Set the forced root URL.
         *
         * @param string|null $root
         * @return void 
         * @static 
         */ 
        public static function forceRootUrl($root)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        $instance->forceRootUrl($root);
        }
                    /**
         * Set a callback to be used to format the host of generated URLs.
         *
         * @param \Closure $callback
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function formatHostUsing($callback)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->formatHostUsing($callback);
        }
                    /**
         * Set a callback to be used to format the path of generated URLs.
         *
         * @param \Closure $callback
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function formatPathUsing($callback)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->formatPathUsing($callback);
        }
                    /**
         * Get the path formatter being used by the URL generator.
         *
         * @return \Closure 
         * @static 
         */ 
        public static function pathFormatter()
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->pathFormatter();
        }
                    /**
         * Get the request instance.
         *
         * @return \Illuminate\Http\Request 
         * @static 
         */ 
        public static function getRequest()
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->getRequest();
        }
                    /**
         * Set the current request instance.
         *
         * @param \Illuminate\Http\Request $request
         * @return void 
         * @static 
         */ 
        public static function setRequest($request)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        $instance->setRequest($request);
        }
                    /**
         * Set the route collection.
         *
         * @param \Illuminate\Routing\RouteCollectionInterface $routes
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function setRoutes($routes)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->setRoutes($routes);
        }
                    /**
         * Set the session resolver for the generator.
         *
         * @param callable $sessionResolver
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function setSessionResolver($sessionResolver)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->setSessionResolver($sessionResolver);
        }
                    /**
         * Set the encryption key resolver.
         *
         * @param callable $keyResolver
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function setKeyResolver($keyResolver)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->setKeyResolver($keyResolver);
        }
                    /**
         * Clone a new instance of the URL generator with a different encryption key resolver.
         *
         * @param callable $keyResolver
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function withKeyResolver($keyResolver)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->withKeyResolver($keyResolver);
        }
                    /**
         * Get the root controller namespace.
         *
         * @return string 
         * @static 
         */ 
        public static function getRootControllerNamespace()
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->getRootControllerNamespace();
        }
                    /**
         * Set the root controller namespace.
         *
         * @param string $rootNamespace
         * @return \Illuminate\Routing\UrlGenerator 
         * @static 
         */ 
        public static function setRootControllerNamespace($rootNamespace)
        {
                        /** @var \Illuminate\Routing\UrlGenerator $instance */
                        return $instance->setRootControllerNamespace($rootNamespace);
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\Routing\UrlGenerator::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\Routing\UrlGenerator::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\Routing\UrlGenerator::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\Routing\UrlGenerator::flushMacros();
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\Validation\Factory
     */ 
        class Validator {
                    /**
         * Create a new Validator instance.
         *
         * @param array $data
         * @param array $rules
         * @param array $messages
         * @param array $customAttributes
         * @return \Illuminate\Validation\Validator 
         * @static 
         */ 
        public static function make($data, $rules, $messages = [], $customAttributes = [])
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        return $instance->make($data, $rules, $messages, $customAttributes);
        }
                    /**
         * Validate the given data against the provided rules.
         *
         * @param array $data
         * @param array $rules
         * @param array $messages
         * @param array $customAttributes
         * @return array 
         * @throws \Illuminate\Validation\ValidationException
         * @static 
         */ 
        public static function validate($data, $rules, $messages = [], $customAttributes = [])
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        return $instance->validate($data, $rules, $messages, $customAttributes);
        }
                    /**
         * Register a custom validator extension.
         *
         * @param string $rule
         * @param \Closure|string $extension
         * @param string|null $message
         * @return void 
         * @static 
         */ 
        public static function extend($rule, $extension, $message = null)
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->extend($rule, $extension, $message);
        }
                    /**
         * Register a custom implicit validator extension.
         *
         * @param string $rule
         * @param \Closure|string $extension
         * @param string|null $message
         * @return void 
         * @static 
         */ 
        public static function extendImplicit($rule, $extension, $message = null)
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->extendImplicit($rule, $extension, $message);
        }
                    /**
         * Register a custom dependent validator extension.
         *
         * @param string $rule
         * @param \Closure|string $extension
         * @param string|null $message
         * @return void 
         * @static 
         */ 
        public static function extendDependent($rule, $extension, $message = null)
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->extendDependent($rule, $extension, $message);
        }
                    /**
         * Register a custom validator message replacer.
         *
         * @param string $rule
         * @param \Closure|string $replacer
         * @return void 
         * @static 
         */ 
        public static function replacer($rule, $replacer)
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->replacer($rule, $replacer);
        }
                    /**
         * Indicate that unvalidated array keys should be included in validated data when the parent array is validated.
         *
         * @return void 
         * @static 
         */ 
        public static function includeUnvalidatedArrayKeys()
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->includeUnvalidatedArrayKeys();
        }
                    /**
         * Indicate that unvalidated array keys should be excluded from the validated data, even if the parent array was validated.
         *
         * @return void 
         * @static 
         */ 
        public static function excludeUnvalidatedArrayKeys()
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->excludeUnvalidatedArrayKeys();
        }
                    /**
         * Set the Validator instance resolver.
         *
         * @param \Closure $resolver
         * @return void 
         * @static 
         */ 
        public static function resolver($resolver)
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->resolver($resolver);
        }
                    /**
         * Get the Translator implementation.
         *
         * @return \Illuminate\Contracts\Translation\Translator 
         * @static 
         */ 
        public static function getTranslator()
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        return $instance->getTranslator();
        }
                    /**
         * Get the Presence Verifier implementation.
         *
         * @return \Illuminate\Validation\PresenceVerifierInterface 
         * @static 
         */ 
        public static function getPresenceVerifier()
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        return $instance->getPresenceVerifier();
        }
                    /**
         * Set the Presence Verifier implementation.
         *
         * @param \Illuminate\Validation\PresenceVerifierInterface $presenceVerifier
         * @return void 
         * @static 
         */ 
        public static function setPresenceVerifier($presenceVerifier)
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        $instance->setPresenceVerifier($presenceVerifier);
        }
                    /**
         * Get the container instance used by the validation factory.
         *
         * @return \Illuminate\Contracts\Container\Container|null 
         * @static 
         */ 
        public static function getContainer()
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        return $instance->getContainer();
        }
                    /**
         * Set the container instance used by the validation factory.
         *
         * @param \Illuminate\Contracts\Container\Container $container
         * @return \Illuminate\Validation\Factory 
         * @static 
         */ 
        public static function setContainer($container)
        {
                        /** @var \Illuminate\Validation\Factory $instance */
                        return $instance->setContainer($container);
        }
         
    }
            /**
     * 
     *
     * @see \Illuminate\View\Factory
     */ 
        class View {
                    /**
         * Get the evaluated view contents for the given view.
         *
         * @param string $path
         * @param \Illuminate\Contracts\Support\Arrayable|array $data
         * @param array $mergeData
         * @return \Illuminate\Contracts\View\View 
         * @static 
         */ 
        public static function file($path, $data = [], $mergeData = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->file($path, $data, $mergeData);
        }
                    /**
         * Get the evaluated view contents for the given view.
         *
         * @param string $view
         * @param \Illuminate\Contracts\Support\Arrayable|array $data
         * @param array $mergeData
         * @return \Illuminate\Contracts\View\View 
         * @static 
         */ 
        public static function make($view, $data = [], $mergeData = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->make($view, $data, $mergeData);
        }
                    /**
         * Get the first view that actually exists from the given list.
         *
         * @param array $views
         * @param \Illuminate\Contracts\Support\Arrayable|array $data
         * @param array $mergeData
         * @return \Illuminate\Contracts\View\View 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function first($views, $data = [], $mergeData = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->first($views, $data, $mergeData);
        }
                    /**
         * Get the rendered content of the view based on a given condition.
         *
         * @param bool $condition
         * @param string $view
         * @param \Illuminate\Contracts\Support\Arrayable|array $data
         * @param array $mergeData
         * @return string 
         * @static 
         */ 
        public static function renderWhen($condition, $view, $data = [], $mergeData = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->renderWhen($condition, $view, $data, $mergeData);
        }
                    /**
         * Get the rendered content of the view based on the negation of a given condition.
         *
         * @param bool $condition
         * @param string $view
         * @param \Illuminate\Contracts\Support\Arrayable|array $data
         * @param array $mergeData
         * @return string 
         * @static 
         */ 
        public static function renderUnless($condition, $view, $data = [], $mergeData = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->renderUnless($condition, $view, $data, $mergeData);
        }
                    /**
         * Get the rendered contents of a partial from a loop.
         *
         * @param string $view
         * @param array $data
         * @param string $iterator
         * @param string $empty
         * @return string 
         * @static 
         */ 
        public static function renderEach($view, $data, $iterator, $empty = 'raw|')
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->renderEach($view, $data, $iterator, $empty);
        }
                    /**
         * Determine if a given view exists.
         *
         * @param string $view
         * @return bool 
         * @static 
         */ 
        public static function exists($view)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->exists($view);
        }
                    /**
         * Get the appropriate view engine for the given path.
         *
         * @param string $path
         * @return \Illuminate\Contracts\View\Engine 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function getEngineFromPath($path)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getEngineFromPath($path);
        }
                    /**
         * Add a piece of shared data to the environment.
         *
         * @param array|string $key
         * @param mixed|null $value
         * @return mixed 
         * @static 
         */ 
        public static function share($key, $value = null)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->share($key, $value);
        }
                    /**
         * Increment the rendering counter.
         *
         * @return void 
         * @static 
         */ 
        public static function incrementRender()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->incrementRender();
        }
                    /**
         * Decrement the rendering counter.
         *
         * @return void 
         * @static 
         */ 
        public static function decrementRender()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->decrementRender();
        }
                    /**
         * Check if there are no active render operations.
         *
         * @return bool 
         * @static 
         */ 
        public static function doneRendering()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->doneRendering();
        }
                    /**
         * Determine if the given once token has been rendered.
         *
         * @param string $id
         * @return bool 
         * @static 
         */ 
        public static function hasRenderedOnce($id)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->hasRenderedOnce($id);
        }
                    /**
         * Mark the given once token as having been rendered.
         *
         * @param string $id
         * @return void 
         * @static 
         */ 
        public static function markAsRenderedOnce($id)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->markAsRenderedOnce($id);
        }
                    /**
         * Add a location to the array of view locations.
         *
         * @param string $location
         * @return void 
         * @static 
         */ 
        public static function addLocation($location)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->addLocation($location);
        }
                    /**
         * Add a new namespace to the loader.
         *
         * @param string $namespace
         * @param string|array $hints
         * @return \Illuminate\View\Factory 
         * @static 
         */ 
        public static function addNamespace($namespace, $hints)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->addNamespace($namespace, $hints);
        }
                    /**
         * Prepend a new namespace to the loader.
         *
         * @param string $namespace
         * @param string|array $hints
         * @return \Illuminate\View\Factory 
         * @static 
         */ 
        public static function prependNamespace($namespace, $hints)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->prependNamespace($namespace, $hints);
        }
                    /**
         * Replace the namespace hints for the given namespace.
         *
         * @param string $namespace
         * @param string|array $hints
         * @return \Illuminate\View\Factory 
         * @static 
         */ 
        public static function replaceNamespace($namespace, $hints)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->replaceNamespace($namespace, $hints);
        }
                    /**
         * Register a valid view extension and its engine.
         *
         * @param string $extension
         * @param string $engine
         * @param \Closure|null $resolver
         * @return void 
         * @static 
         */ 
        public static function addExtension($extension, $engine, $resolver = null)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->addExtension($extension, $engine, $resolver);
        }
                    /**
         * Flush all of the factory state like sections and stacks.
         *
         * @return void 
         * @static 
         */ 
        public static function flushState()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->flushState();
        }
                    /**
         * Flush all of the section contents if done rendering.
         *
         * @return void 
         * @static 
         */ 
        public static function flushStateIfDoneRendering()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->flushStateIfDoneRendering();
        }
                    /**
         * Get the extension to engine bindings.
         *
         * @return array 
         * @static 
         */ 
        public static function getExtensions()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getExtensions();
        }
                    /**
         * Get the engine resolver instance.
         *
         * @return \Illuminate\View\Engines\EngineResolver 
         * @static 
         */ 
        public static function getEngineResolver()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getEngineResolver();
        }
                    /**
         * Get the view finder instance.
         *
         * @return \Illuminate\View\ViewFinderInterface 
         * @static 
         */ 
        public static function getFinder()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getFinder();
        }
                    /**
         * Set the view finder instance.
         *
         * @param \Illuminate\View\ViewFinderInterface $finder
         * @return void 
         * @static 
         */ 
        public static function setFinder($finder)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->setFinder($finder);
        }
                    /**
         * Flush the cache of views located by the finder.
         *
         * @return void 
         * @static 
         */ 
        public static function flushFinderCache()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->flushFinderCache();
        }
                    /**
         * Get the event dispatcher instance.
         *
         * @return \Illuminate\Contracts\Events\Dispatcher 
         * @static 
         */ 
        public static function getDispatcher()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getDispatcher();
        }
                    /**
         * Set the event dispatcher instance.
         *
         * @param \Illuminate\Contracts\Events\Dispatcher $events
         * @return void 
         * @static 
         */ 
        public static function setDispatcher($events)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->setDispatcher($events);
        }
                    /**
         * Get the IoC container instance.
         *
         * @return \Illuminate\Contracts\Container\Container 
         * @static 
         */ 
        public static function getContainer()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getContainer();
        }
                    /**
         * Set the IoC container instance.
         *
         * @param \Illuminate\Contracts\Container\Container $container
         * @return void 
         * @static 
         */ 
        public static function setContainer($container)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->setContainer($container);
        }
                    /**
         * Get an item from the shared data.
         *
         * @param string $key
         * @param mixed $default
         * @return mixed 
         * @static 
         */ 
        public static function shared($key, $default = null)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->shared($key, $default);
        }
                    /**
         * Get all of the shared data for the environment.
         *
         * @return array 
         * @static 
         */ 
        public static function getShared()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getShared();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Illuminate\View\Factory::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Illuminate\View\Factory::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Illuminate\View\Factory::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Illuminate\View\Factory::flushMacros();
        }
                    /**
         * Start a component rendering process.
         *
         * @param \Illuminate\Contracts\View\View|\Illuminate\Contracts\Support\Htmlable|\Closure|string $view
         * @param array $data
         * @return void 
         * @static 
         */ 
        public static function startComponent($view, $data = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->startComponent($view, $data);
        }
                    /**
         * Get the first view that actually exists from the given list, and start a component.
         *
         * @param array $names
         * @param array $data
         * @return void 
         * @static 
         */ 
        public static function startComponentFirst($names, $data = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->startComponentFirst($names, $data);
        }
                    /**
         * Render the current component.
         *
         * @return string 
         * @static 
         */ 
        public static function renderComponent()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->renderComponent();
        }
                    /**
         * Get an item from the component data that exists above the current component.
         *
         * @param string $key
         * @param mixed $default
         * @return mixed|null 
         * @static 
         */ 
        public static function getConsumableComponentData($key, $default = null)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getConsumableComponentData($key, $default);
        }
                    /**
         * Start the slot rendering process.
         *
         * @param string $name
         * @param string|null $content
         * @param array $attributes
         * @return void 
         * @static 
         */ 
        public static function slot($name, $content = null, $attributes = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->slot($name, $content, $attributes);
        }
                    /**
         * Save the slot content for rendering.
         *
         * @return void 
         * @static 
         */ 
        public static function endSlot()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->endSlot();
        }
                    /**
         * Register a view creator event.
         *
         * @param array|string $views
         * @param \Closure|string $callback
         * @return array 
         * @static 
         */ 
        public static function creator($views, $callback)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->creator($views, $callback);
        }
                    /**
         * Register multiple view composers via an array.
         *
         * @param array $composers
         * @return array 
         * @static 
         */ 
        public static function composers($composers)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->composers($composers);
        }
                    /**
         * Register a view composer event.
         *
         * @param array|string $views
         * @param \Closure|string $callback
         * @return array 
         * @static 
         */ 
        public static function composer($views, $callback)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->composer($views, $callback);
        }
                    /**
         * Call the composer for a given view.
         *
         * @param \Illuminate\Contracts\View\View $view
         * @return void 
         * @static 
         */ 
        public static function callComposer($view)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->callComposer($view);
        }
                    /**
         * Call the creator for a given view.
         *
         * @param \Illuminate\Contracts\View\View $view
         * @return void 
         * @static 
         */ 
        public static function callCreator($view)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->callCreator($view);
        }
                    /**
         * Start injecting content into a fragment.
         *
         * @param string $fragment
         * @return void 
         * @static 
         */ 
        public static function startFragment($fragment)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->startFragment($fragment);
        }
                    /**
         * Stop injecting content into a fragment.
         *
         * @return string 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function stopFragment()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->stopFragment();
        }
                    /**
         * Get the contents of a fragment.
         *
         * @param string $name
         * @param string|null $default
         * @return mixed 
         * @static 
         */ 
        public static function getFragment($name, $default = null)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getFragment($name, $default);
        }
                    /**
         * Get the entire array of rendered fragments.
         *
         * @return array 
         * @static 
         */ 
        public static function getFragments()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getFragments();
        }
                    /**
         * Flush all of the fragments.
         *
         * @return void 
         * @static 
         */ 
        public static function flushFragments()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->flushFragments();
        }
                    /**
         * Start injecting content into a section.
         *
         * @param string $section
         * @param string|null $content
         * @return void 
         * @static 
         */ 
        public static function startSection($section, $content = null)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->startSection($section, $content);
        }
                    /**
         * Inject inline content into a section.
         *
         * @param string $section
         * @param string $content
         * @return void 
         * @static 
         */ 
        public static function inject($section, $content)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->inject($section, $content);
        }
                    /**
         * Stop injecting content into a section and return its contents.
         *
         * @return string 
         * @static 
         */ 
        public static function yieldSection()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->yieldSection();
        }
                    /**
         * Stop injecting content into a section.
         *
         * @param bool $overwrite
         * @return string 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function stopSection($overwrite = false)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->stopSection($overwrite);
        }
                    /**
         * Stop injecting content into a section and append it.
         *
         * @return string 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function appendSection()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->appendSection();
        }
                    /**
         * Get the string contents of a section.
         *
         * @param string $section
         * @param string $default
         * @return string 
         * @static 
         */ 
        public static function yieldContent($section, $default = '')
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->yieldContent($section, $default);
        }
                    /**
         * Get the parent placeholder for the current request.
         *
         * @param string $section
         * @return string 
         * @static 
         */ 
        public static function parentPlaceholder($section = '')
        {
                        return \Illuminate\View\Factory::parentPlaceholder($section);
        }
                    /**
         * Check if section exists.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasSection($name)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->hasSection($name);
        }
                    /**
         * Check if section does not exist.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function sectionMissing($name)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->sectionMissing($name);
        }
                    /**
         * Get the contents of a section.
         *
         * @param string $name
         * @param string|null $default
         * @return mixed 
         * @static 
         */ 
        public static function getSection($name, $default = null)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getSection($name, $default);
        }
                    /**
         * Get the entire array of sections.
         *
         * @return array 
         * @static 
         */ 
        public static function getSections()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getSections();
        }
                    /**
         * Flush all of the sections.
         *
         * @return void 
         * @static 
         */ 
        public static function flushSections()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->flushSections();
        }
                    /**
         * Add new loop to the stack.
         *
         * @param \Countable|array $data
         * @return void 
         * @static 
         */ 
        public static function addLoop($data)
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->addLoop($data);
        }
                    /**
         * Increment the top loop's indices.
         *
         * @return void 
         * @static 
         */ 
        public static function incrementLoopIndices()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->incrementLoopIndices();
        }
                    /**
         * Pop a loop from the top of the loop stack.
         *
         * @return void 
         * @static 
         */ 
        public static function popLoop()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->popLoop();
        }
                    /**
         * Get an instance of the last loop in the stack.
         *
         * @return \stdClass|null 
         * @static 
         */ 
        public static function getLastLoop()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getLastLoop();
        }
                    /**
         * Get the entire loop stack.
         *
         * @return array 
         * @static 
         */ 
        public static function getLoopStack()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->getLoopStack();
        }
                    /**
         * Start injecting content into a push section.
         *
         * @param string $section
         * @param string $content
         * @return void 
         * @static 
         */ 
        public static function startPush($section, $content = '')
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->startPush($section, $content);
        }
                    /**
         * Stop injecting content into a push section.
         *
         * @return string 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function stopPush()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->stopPush();
        }
                    /**
         * Start prepending content into a push section.
         *
         * @param string $section
         * @param string $content
         * @return void 
         * @static 
         */ 
        public static function startPrepend($section, $content = '')
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->startPrepend($section, $content);
        }
                    /**
         * Stop prepending content into a push section.
         *
         * @return string 
         * @throws \InvalidArgumentException
         * @static 
         */ 
        public static function stopPrepend()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->stopPrepend();
        }
                    /**
         * Get the string contents of a push section.
         *
         * @param string $section
         * @param string $default
         * @return string 
         * @static 
         */ 
        public static function yieldPushContent($section, $default = '')
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->yieldPushContent($section, $default);
        }
                    /**
         * Flush all of the stacks.
         *
         * @return void 
         * @static 
         */ 
        public static function flushStacks()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->flushStacks();
        }
                    /**
         * Start a translation block.
         *
         * @param array $replacements
         * @return void 
         * @static 
         */ 
        public static function startTranslation($replacements = [])
        {
                        /** @var \Illuminate\View\Factory $instance */
                        $instance->startTranslation($replacements);
        }
                    /**
         * Render the current translation.
         *
         * @return string 
         * @static 
         */ 
        public static function renderTranslation()
        {
                        /** @var \Illuminate\View\Factory $instance */
                        return $instance->renderTranslation();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerViewMacros()
         * @static 
         */ 
        public static function getFirstSlot()
        {
                        return \Illuminate\View\Factory::getFirstSlot();
        }
         
    }
     
}

    namespace Illuminate\Support { 
            /**
     * 
     *
     */ 
        class Arr {
         
    }
            /**
     * 
     *
     */ 
        class Js {
         
    }
            /**
     * 
     *
     */ 
        class Str {
         
    }
            /**
     * 
     *
     * @template TKey of array-key
     * @template TValue
     * @implements \ArrayAccess<TKey, TValue>
     * @implements \Illuminate\Support\Enumerable<TKey, TValue>
     */ 
        class Collection {
                    /**
         * 
         *
         * @see \Barryvdh\Debugbar\ServiceProvider::register()
         * @static 
         */ 
        public static function debug()
        {
                        return \Illuminate\Support\Collection::debug();
        }
                    /**
         * 
         *
         * @see \Maatwebsite\Excel\Mixins\DownloadCollection::downloadExcel()
         * @param string $fileName
         * @param string|null $writerType
         * @param mixed $withHeadings
         * @param array $responseHeaders
         * @static 
         */ 
        public static function downloadExcel($fileName, $writerType = null, $withHeadings = false, $responseHeaders = [])
        {
                        return \Illuminate\Support\Collection::downloadExcel($fileName, $writerType, $withHeadings, $responseHeaders);
        }
                    /**
         * 
         *
         * @see \Maatwebsite\Excel\Mixins\StoreCollection::storeExcel()
         * @param string $filePath
         * @param string|null $disk
         * @param string|null $writerType
         * @param mixed $withHeadings
         * @static 
         */ 
        public static function storeExcel($filePath, $disk = null, $writerType = null, $withHeadings = false)
        {
                        return \Illuminate\Support\Collection::storeExcel($filePath, $disk, $writerType, $withHeadings);
        }
         
    }
     
}

        namespace Barryvdh\Debugbar\Facades { 
            /**
     * 
     *
     * @method static void alert(mixed $message)
     * @method static void critical(mixed $message)
     * @method static void debug(mixed $message)
     * @method static void emergency(mixed $message)
     * @method static void error(mixed $message)
     * @method static void info(mixed $message)
     * @method static void log(mixed $message)
     * @method static void notice(mixed $message)
     * @method static void warning(mixed $message)
     * @see \Barryvdh\Debugbar\LaravelDebugbar
     */ 
        class Debugbar {
                    /**
         * Enable the Debugbar and boot, if not already booted.
         *
         * @static 
         */ 
        public static function enable()
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->enable();
        }
                    /**
         * Boot the debugbar (add collectors, renderer and listener)
         *
         * @static 
         */ 
        public static function boot()
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->boot();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function shouldCollect($name, $default = false)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->shouldCollect($name, $default);
        }
                    /**
         * Adds a data collector
         *
         * @param \DebugBar\DataCollector\DataCollectorInterface $collector
         * @throws DebugBarException
         * @return \Barryvdh\Debugbar\LaravelDebugbar 
         * @static 
         */ 
        public static function addCollector($collector)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->addCollector($collector);
        }
                    /**
         * Handle silenced errors
         *
         * @param $level
         * @param $message
         * @param string $file
         * @param int $line
         * @param array $context
         * @throws \ErrorException
         * @static 
         */ 
        public static function handleError($level, $message, $file = '', $line = 0, $context = [])
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->handleError($level, $message, $file, $line, $context);
        }
                    /**
         * Starts a measure
         *
         * @param string $name Internal name, used to stop the measure
         * @param string $label Public name
         * @static 
         */ 
        public static function startMeasure($name, $label = null)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->startMeasure($name, $label);
        }
                    /**
         * Stops a measure
         *
         * @param string $name
         * @static 
         */ 
        public static function stopMeasure($name)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->stopMeasure($name);
        }
                    /**
         * Adds an exception to be profiled in the debug bar
         *
         * @param \Exception $e
         * @deprecated in favor of addThrowable
         * @static 
         */ 
        public static function addException($e)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->addException($e);
        }
                    /**
         * Adds an exception to be profiled in the debug bar
         *
         * @param \Throwable $e
         * @static 
         */ 
        public static function addThrowable($e)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->addThrowable($e);
        }
                    /**
         * Returns a JavascriptRenderer for this instance
         *
         * @param string $baseUrl
         * @param string $basePathng
         * @return \Barryvdh\Debugbar\JavascriptRenderer 
         * @static 
         */ 
        public static function getJavascriptRenderer($baseUrl = null, $basePath = null)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getJavascriptRenderer($baseUrl, $basePath);
        }
                    /**
         * Modify the response and inject the debugbar (or data in headers)
         *
         * @param \Symfony\Component\HttpFoundation\Request $request
         * @param \Symfony\Component\HttpFoundation\Response $response
         * @return \Symfony\Component\HttpFoundation\Response 
         * @static 
         */ 
        public static function modifyResponse($request, $response)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->modifyResponse($request, $response);
        }
                    /**
         * Check if the Debugbar is enabled
         *
         * @return boolean 
         * @static 
         */ 
        public static function isEnabled()
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->isEnabled();
        }
                    /**
         * Collects the data from the collectors
         *
         * @return array 
         * @static 
         */ 
        public static function collect()
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->collect();
        }
                    /**
         * Injects the web debug toolbar into the given Response.
         *
         * @param \Symfony\Component\HttpFoundation\Response $response A Response instance
         * Based on https://github.com/symfony/WebProfilerBundle/blob/master/EventListener/WebDebugToolbarListener.php
         * @static 
         */ 
        public static function injectDebugbar($response)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->injectDebugbar($response);
        }
                    /**
         * Disable the Debugbar
         *
         * @static 
         */ 
        public static function disable()
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->disable();
        }
                    /**
         * Adds a measure
         *
         * @param string $label
         * @param float $start
         * @param float $end
         * @static 
         */ 
        public static function addMeasure($label, $start, $end)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->addMeasure($label, $start, $end);
        }
                    /**
         * Utility function to measure the execution of a Closure
         *
         * @param string $label
         * @param \Closure $closure
         * @return mixed 
         * @static 
         */ 
        public static function measure($label, $closure)
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->measure($label, $closure);
        }
                    /**
         * Collect data in a CLI request
         *
         * @return array 
         * @static 
         */ 
        public static function collectConsole()
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->collectConsole();
        }
                    /**
         * Adds a message to the MessagesCollector
         * 
         * A message can be anything from an object to a string
         *
         * @param mixed $message
         * @param string $label
         * @static 
         */ 
        public static function addMessage($message, $label = 'info')
        {
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->addMessage($message, $label);
        }
                    /**
         * Checks if a data collector has been added
         *
         * @param string $name
         * @return boolean 
         * @static 
         */ 
        public static function hasCollector($name)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->hasCollector($name);
        }
                    /**
         * Returns a data collector
         *
         * @param string $name
         * @return \DebugBar\DataCollector\DataCollectorInterface 
         * @throws DebugBarException
         * @static 
         */ 
        public static function getCollector($name)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getCollector($name);
        }
                    /**
         * Returns an array of all data collectors
         *
         * @return \DebugBar\array[DataCollectorInterface] 
         * @static 
         */ 
        public static function getCollectors()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getCollectors();
        }
                    /**
         * Sets the request id generator
         *
         * @param \DebugBar\RequestIdGeneratorInterface $generator
         * @return \Barryvdh\Debugbar\LaravelDebugbar 
         * @static 
         */ 
        public static function setRequestIdGenerator($generator)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->setRequestIdGenerator($generator);
        }
                    /**
         * 
         *
         * @return \DebugBar\RequestIdGeneratorInterface 
         * @static 
         */ 
        public static function getRequestIdGenerator()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getRequestIdGenerator();
        }
                    /**
         * Returns the id of the current request
         *
         * @return string 
         * @static 
         */ 
        public static function getCurrentRequestId()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getCurrentRequestId();
        }
                    /**
         * Sets the storage backend to use to store the collected data
         *
         * @param \DebugBar\StorageInterface $storage
         * @return \Barryvdh\Debugbar\LaravelDebugbar 
         * @static 
         */ 
        public static function setStorage($storage = null)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->setStorage($storage);
        }
                    /**
         * 
         *
         * @return \DebugBar\StorageInterface 
         * @static 
         */ 
        public static function getStorage()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getStorage();
        }
                    /**
         * Checks if the data will be persisted
         *
         * @return boolean 
         * @static 
         */ 
        public static function isDataPersisted()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->isDataPersisted();
        }
                    /**
         * Sets the HTTP driver
         *
         * @param \DebugBar\HttpDriverInterface $driver
         * @return \Barryvdh\Debugbar\LaravelDebugbar 
         * @static 
         */ 
        public static function setHttpDriver($driver)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->setHttpDriver($driver);
        }
                    /**
         * Returns the HTTP driver
         * 
         * If no http driver where defined, a PhpHttpDriver is automatically created
         *
         * @return \DebugBar\HttpDriverInterface 
         * @static 
         */ 
        public static function getHttpDriver()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getHttpDriver();
        }
                    /**
         * Returns collected data
         * 
         * Will collect the data if none have been collected yet
         *
         * @return array 
         * @static 
         */ 
        public static function getData()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getData();
        }
                    /**
         * Returns an array of HTTP headers containing the data
         *
         * @param string $headerName
         * @param integer $maxHeaderLength
         * @return array 
         * @static 
         */ 
        public static function getDataAsHeaders($headerName = 'phpdebugbar', $maxHeaderLength = 4096, $maxTotalHeaderLength = 250000)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getDataAsHeaders($headerName, $maxHeaderLength, $maxTotalHeaderLength);
        }
                    /**
         * Sends the data through the HTTP headers
         *
         * @param bool $useOpenHandler
         * @param string $headerName
         * @param integer $maxHeaderLength
         * @return \Barryvdh\Debugbar\LaravelDebugbar 
         * @static 
         */ 
        public static function sendDataInHeaders($useOpenHandler = null, $headerName = 'phpdebugbar', $maxHeaderLength = 4096)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->sendDataInHeaders($useOpenHandler, $headerName, $maxHeaderLength);
        }
                    /**
         * Stacks the data in the session for later rendering
         *
         * @static 
         */ 
        public static function stackData()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->stackData();
        }
                    /**
         * Checks if there is stacked data in the session
         *
         * @return boolean 
         * @static 
         */ 
        public static function hasStackedData()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->hasStackedData();
        }
                    /**
         * Returns the data stacked in the session
         *
         * @param boolean $delete Whether to delete the data in the session
         * @return array 
         * @static 
         */ 
        public static function getStackedData($delete = true)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getStackedData($delete);
        }
                    /**
         * Sets the key to use in the $_SESSION array
         *
         * @param string $ns
         * @return \Barryvdh\Debugbar\LaravelDebugbar 
         * @static 
         */ 
        public static function setStackDataSessionNamespace($ns)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->setStackDataSessionNamespace($ns);
        }
                    /**
         * Returns the key used in the $_SESSION array
         *
         * @return string 
         * @static 
         */ 
        public static function getStackDataSessionNamespace()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->getStackDataSessionNamespace();
        }
                    /**
         * Sets whether to only use the session to store stacked data even
         * if a storage is enabled
         *
         * @param boolean $enabled
         * @return \Barryvdh\Debugbar\LaravelDebugbar 
         * @static 
         */ 
        public static function setStackAlwaysUseSessionStorage($enabled = true)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->setStackAlwaysUseSessionStorage($enabled);
        }
                    /**
         * Checks if the session is always used to store stacked data
         * even if a storage is enabled
         *
         * @return boolean 
         * @static 
         */ 
        public static function isStackAlwaysUseSessionStorage()
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->isStackAlwaysUseSessionStorage();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function offsetSet($key, $value)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->offsetSet($key, $value);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function offsetGet($key)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->offsetGet($key);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function offsetExists($key)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->offsetExists($key);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function offsetUnset($key)
        {            //Method inherited from \DebugBar\DebugBar         
                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
                        return $instance->offsetUnset($key);
        }
         
    }
     
}

    namespace Maatwebsite\Excel\Facades { 
            /**
     * 
     *
     */ 
        class Excel {
                    /**
         * 
         *
         * @param object $export
         * @param string|null $fileName
         * @param string $writerType
         * @param array $headers
         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse 
         * @throws \PhpOffice\PhpSpreadsheet\Exception
         * @throws \PhpOffice\PhpSpreadsheet\Writer\Exception
         * @static 
         */ 
        public static function download($export, $fileName, $writerType = null, $headers = [])
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->download($export, $fileName, $writerType, $headers);
        }
                    /**
         * 
         *
         * @param object $export
         * @param string $filePath
         * @param string|null $disk
         * @param string $writerType
         * @param mixed $diskOptions
         * @return bool 
         * @throws \PhpOffice\PhpSpreadsheet\Exception
         * @throws \PhpOffice\PhpSpreadsheet\Writer\Exception
         * @static 
         */ 
        public static function store($export, $filePath, $diskName = null, $writerType = null, $diskOptions = [])
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->store($export, $filePath, $diskName, $writerType, $diskOptions);
        }
                    /**
         * 
         *
         * @param object $export
         * @param string $filePath
         * @param string|null $disk
         * @param string $writerType
         * @param mixed $diskOptions
         * @return \Illuminate\Foundation\Bus\PendingDispatch 
         * @static 
         */ 
        public static function queue($export, $filePath, $disk = null, $writerType = null, $diskOptions = [])
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->queue($export, $filePath, $disk, $writerType, $diskOptions);
        }
                    /**
         * 
         *
         * @param object $export
         * @param string $writerType
         * @return string 
         * @static 
         */ 
        public static function raw($export, $writerType)
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->raw($export, $writerType);
        }
                    /**
         * 
         *
         * @param object $import
         * @param string|\Symfony\Component\HttpFoundation\File\UploadedFile $filePath
         * @param string|null $disk
         * @param string|null $readerType
         * @return \Maatwebsite\Excel\Reader|\Illuminate\Foundation\Bus\PendingDispatch 
         * @static 
         */ 
        public static function import($import, $filePath, $disk = null, $readerType = null)
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->import($import, $filePath, $disk, $readerType);
        }
                    /**
         * 
         *
         * @param object $import
         * @param string|\Symfony\Component\HttpFoundation\File\UploadedFile $filePath
         * @param string|null $disk
         * @param string|null $readerType
         * @return array 
         * @static 
         */ 
        public static function toArray($import, $filePath, $disk = null, $readerType = null)
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->toArray($import, $filePath, $disk, $readerType);
        }
                    /**
         * 
         *
         * @param object $import
         * @param string|\Symfony\Component\HttpFoundation\File\UploadedFile $filePath
         * @param string|null $disk
         * @param string|null $readerType
         * @return \Illuminate\Support\Collection 
         * @static 
         */ 
        public static function toCollection($import, $filePath, $disk = null, $readerType = null)
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->toCollection($import, $filePath, $disk, $readerType);
        }
                    /**
         * 
         *
         * @param \Illuminate\Contracts\Queue\ShouldQueue $import
         * @param string|\Symfony\Component\HttpFoundation\File\UploadedFile $filePath
         * @param string|null $disk
         * @param string $readerType
         * @return \Illuminate\Foundation\Bus\PendingDispatch 
         * @static 
         */ 
        public static function queueImport($import, $filePath, $disk = null, $readerType = null)
        {
                        /** @var \Maatwebsite\Excel\Excel $instance */
                        return $instance->queueImport($import, $filePath, $disk, $readerType);
        }
                    /**
         * 
         *
         * @param string $concern
         * @param callable $handler
         * @param string $event
         * @static 
         */ 
        public static function extend($concern, $handler, $event = 'Maatwebsite\\Excel\\Events\\BeforeWriting')
        {
                        return \Maatwebsite\Excel\Excel::extend($concern, $handler, $event);
        }
                    /**
         * When asserting downloaded, stored, queued or imported, use regular expression
         * to look for a matching file path.
         *
         * @return void 
         * @static 
         */ 
        public static function matchByRegex()
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        $instance->matchByRegex();
        }
                    /**
         * When asserting downloaded, stored, queued or imported, use regular string
         * comparison for matching file path.
         *
         * @return void 
         * @static 
         */ 
        public static function doNotMatchByRegex()
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        $instance->doNotMatchByRegex();
        }
                    /**
         * 
         *
         * @param string $fileName
         * @param callable|null $callback
         * @static 
         */ 
        public static function assertDownloaded($fileName, $callback = null)
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        return $instance->assertDownloaded($fileName, $callback);
        }
                    /**
         * 
         *
         * @param string $filePath
         * @param string|callable|null $disk
         * @param callable|null $callback
         * @static 
         */ 
        public static function assertStored($filePath, $disk = null, $callback = null)
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        return $instance->assertStored($filePath, $disk, $callback);
        }
                    /**
         * 
         *
         * @param string $filePath
         * @param string|callable|null $disk
         * @param callable|null $callback
         * @static 
         */ 
        public static function assertQueued($filePath, $disk = null, $callback = null)
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        return $instance->assertQueued($filePath, $disk, $callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function assertQueuedWithChain($chain)
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        return $instance->assertQueuedWithChain($chain);
        }
                    /**
         * 
         *
         * @param string $classname
         * @param callable|null $callback
         * @static 
         */ 
        public static function assertExportedInRaw($classname, $callback = null)
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        return $instance->assertExportedInRaw($classname, $callback);
        }
                    /**
         * 
         *
         * @param string $filePath
         * @param string|callable|null $disk
         * @param callable|null $callback
         * @static 
         */ 
        public static function assertImported($filePath, $disk = null, $callback = null)
        {
                        /** @var \Maatwebsite\Excel\Fakes\ExcelFake $instance */
                        return $instance->assertImported($filePath, $disk, $callback);
        }
         
    }
     
}

    namespace ProtoneMedia\LaravelFFMpeg\Support { 
            /**
     * 
     *
     * @method static \ProtoneMedia\LaravelFFMpeg\MediaOpener fromDisk($disk)
     * @method static \ProtoneMedia\LaravelFFMpeg\MediaOpener fromFilesystem(\Illuminate\Contracts\Filesystem\Filesystem $filesystem)
     * @method static \ProtoneMedia\LaravelFFMpeg\MediaOpener open($path)
     * @method static \ProtoneMedia\LaravelFFMpeg\MediaOpener openUrl($path, array $headers = [])
     * @method static \ProtoneMedia\LaravelFFMpeg\MediaOpener cleanupTemporaryFiles()
     * @see \ProtoneMedia\LaravelFFMpeg\MediaOpener
     */ 
        class FFMpeg {
                    /**
         * 
         *
         * @static 
         */ 
        public static function new()
        {
                        /** @var \ProtoneMedia\LaravelFFMpeg\Support\MediaOpenerFactory $instance */
                        return $instance->new();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function dynamicHLSPlaylist()
        {
                        /** @var \ProtoneMedia\LaravelFFMpeg\Support\MediaOpenerFactory $instance */
                        return $instance->dynamicHLSPlaylist();
        }
         
    }
     
}

    namespace Intervention\Image\Facades { 
            /**
     * 
     *
     */ 
        class Image {
                    /**
         * Overrides configuration settings
         *
         * @param array $config
         * @return self 
         * @static 
         */ 
        public static function configure($config = [])
        {
                        /** @var \Intervention\Image\ImageManager $instance */
                        return $instance->configure($config);
        }
                    /**
         * Initiates an Image instance from different input types
         *
         * @param mixed $data
         * @return \Intervention\Image\Image 
         * @static 
         */ 
        public static function make($data)
        {
                        /** @var \Intervention\Image\ImageManager $instance */
                        return $instance->make($data);
        }
                    /**
         * Creates an empty image canvas
         *
         * @param int $width
         * @param int $height
         * @param mixed $background
         * @return \Intervention\Image\Image 
         * @static 
         */ 
        public static function canvas($width, $height, $background = null)
        {
                        /** @var \Intervention\Image\ImageManager $instance */
                        return $instance->canvas($width, $height, $background);
        }
                    /**
         * Create new cached image and run callback
         * (requires additional package intervention/imagecache)
         *
         * @param \Closure $callback
         * @param int $lifetime
         * @param boolean $returnObj
         * @return \Image 
         * @static 
         */ 
        public static function cache($callback, $lifetime = null, $returnObj = false)
        {
                        /** @var \Intervention\Image\ImageManager $instance */
                        return $instance->cache($callback, $lifetime, $returnObj);
        }
         
    }
     
}

    namespace Larswiegers\LaravelTranslationsChecker { 
            /**
     * 
     *
     * @see \Larswiegers\LaravelTranslationsChecker\Skeleton\SkeletonClass
     */ 
        class LaravelTranslationsCheckerFacade {
         
    }
     
}

    namespace Livewire { 
            /**
     * 
     *
     * @see \Livewire\LivewireManager
     */ 
        class Livewire {
                    /**
         * 
         *
         * @static 
         */ 
        public static function setProvider($provider)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->setProvider($provider);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function provide($callback)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->provide($callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function component($name, $class = null)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->component($name, $class);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function componentHook($hook)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->componentHook($hook);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function propertySynthesizer($synth)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->propertySynthesizer($synth);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function directive($name, $callback)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->directive($name, $callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function precompiler($pattern, $callback)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->precompiler($pattern, $callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function new($name, $id = null)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->new($name, $id);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function isDiscoverable($componentNameOrClass)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->isDiscoverable($componentNameOrClass);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function resolveMissingComponent($resolver)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->resolveMissingComponent($resolver);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function mount($name, $params = [], $key = null)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->mount($name, $params, $key);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function snapshot($component)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->snapshot($component);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function fromSnapshot($snapshot)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->fromSnapshot($snapshot);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function listen($eventName, $callback)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->listen($eventName, $callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function current()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->current();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function update($snapshot, $diff, $calls)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->update($snapshot, $diff, $calls);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function updateProperty($component, $path, $value)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->updateProperty($component, $path, $value);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function isLivewireRequest()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->isLivewireRequest();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function componentHasBeenRendered()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->componentHasBeenRendered();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function forceAssetInjection()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->forceAssetInjection();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setUpdateRoute($callback)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->setUpdateRoute($callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function getUpdateUri()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->getUpdateUri();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setScriptRoute($callback)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->setScriptRoute($callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function useScriptTagAttributes($attributes)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->useScriptTagAttributes($attributes);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function withQueryParams($params)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->withQueryParams($params);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function test($name, $params = [])
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->test($name, $params);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function visit($name)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->visit($name);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function actingAs($user, $driver = null)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->actingAs($user, $driver);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function isRunningServerless()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->isRunningServerless();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function addPersistentMiddleware($middleware)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->addPersistentMiddleware($middleware);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setPersistentMiddleware($middleware)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->setPersistentMiddleware($middleware);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function getPersistentMiddleware()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->getPersistentMiddleware();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function flushState()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->flushState();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function enableJsFeature($name)
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->enableJsFeature($name);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function getJsFeatures()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->getJsFeatures();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function originalUrl()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->originalUrl();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function originalPath()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->originalPath();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function originalMethod()
        {
                        /** @var \Livewire\LivewireManager $instance */
                        return $instance->originalMethod();
        }
         
    }
     
}

    namespace Mcamara\LaravelLocalization\Facades { 
            /**
     * 
     *
     * @method static string localizeUrl(string $url = null, string|bool $locale = null)
     * @method static string|false getLocalizedUrl(string|bool $locale = null, string|false $url = null, array $attributes = [], bool $forceDefaultLocation = false)
     * @method static string|null getLocalesFromMapping(string|null $locale)
     * @see \Mcamara\LaravelLocalization\LaravelLocalization
     */ 
        class LaravelLocalization {
                    /**
         * Set and return current locale.
         *
         * @param string $locale Locale to set the App to (optional)
         * @return string Returns locale (if route has any) or null (if route does not have a locale)
         * @static 
         */ 
        public static function setLocale($locale = null)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->setLocale($locale);
        }
                    /**
         * Check if $locale is default locale and supposed to be hidden in url
         *
         * @param string $locale Locale to be checked
         * @return boolean Returns true if above requirement are met, otherwise false
         * @static 
         */ 
        public static function isHiddenDefault($locale)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->isHiddenDefault($locale);
        }
                    /**
         * Set and return supported locales.
         *
         * @param array $locales Locales that the App supports
         * @static 
         */ 
        public static function setSupportedLocales($locales)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->setSupportedLocales($locales);
        }
                    /**
         * Returns an URL adapted to $locale or current locale.
         *
         * @param string $url URL to adapt. If not passed, the current url would be taken.
         * @param string|bool $locale Locale to adapt, false to remove locale
         * @throws UnsupportedLocaleException
         * @return string URL translated
         * @static 
         */ 
        public static function localizeURL($url = null, $locale = null)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->localizeURL($url, $locale);
        }
                    /**
         * Returns an URL adapted to $locale.
         *
         * @param string|bool $locale Locale to adapt, false to remove locale
         * @param string|false $url URL to adapt in the current language. If not passed, the current url would be taken.
         * @param array $attributes Attributes to add to the route, if empty, the system would try to extract them from the url.
         * @param bool $forceDefaultLocation Force to show default location even hideDefaultLocaleInURL set as TRUE
         * @throws SupportedLocalesNotDefined
         * @throws UnsupportedLocaleException
         * @return string|false URL translated, False if url does not exist
         * @static 
         */ 
        public static function getLocalizedURL($locale = null, $url = null, $attributes = [], $forceDefaultLocation = false)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getLocalizedURL($locale, $url, $attributes, $forceDefaultLocation);
        }
                    /**
         * Returns an URL adapted to the route name and the locale given.
         *
         * @param string|bool $locale Locale to adapt
         * @param string $transKeyName Translation key name of the url to adapt
         * @param array $attributes Attributes for the route (only needed if transKeyName needs them)
         * @param bool $forceDefaultLocation Force to show default location even hideDefaultLocaleInURL set as TRUE
         * @throws SupportedLocalesNotDefined
         * @throws UnsupportedLocaleException
         * @return string|false URL translated
         * @static 
         */ 
        public static function getURLFromRouteNameTranslated($locale, $transKeyName, $attributes = [], $forceDefaultLocation = false)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getURLFromRouteNameTranslated($locale, $transKeyName, $attributes, $forceDefaultLocation);
        }
                    /**
         * It returns an URL without locale (if it has it)
         * Convenience function wrapping getLocalizedURL(false).
         *
         * @param string|false $url URL to clean, if false, current url would be taken
         * @return string URL with no locale in path
         * @static 
         */ 
        public static function getNonLocalizedURL($url = null)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getNonLocalizedURL($url);
        }
                    /**
         * Returns default locale.
         *
         * @return string 
         * @static 
         */ 
        public static function getDefaultLocale()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getDefaultLocale();
        }
                    /**
         * Return locales mapping.
         *
         * @return array 
         * @static 
         */ 
        public static function getLocalesMapping()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getLocalesMapping();
        }
                    /**
         * Returns a locale from the mapping.
         *
         * @param string|null $locale
         * @return string|null 
         * @static 
         */ 
        public static function getLocaleFromMapping($locale)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getLocaleFromMapping($locale);
        }
                    /**
         * Returns inversed locale from the mapping.
         *
         * @param string|null $locale
         * @return string|null 
         * @static 
         */ 
        public static function getInversedLocaleFromMapping($locale)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getInversedLocaleFromMapping($locale);
        }
                    /**
         * Return an array of all supported Locales.
         *
         * @throws SupportedLocalesNotDefined
         * @return array 
         * @static 
         */ 
        public static function getSupportedLocales()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getSupportedLocales();
        }
                    /**
         * Return an array of all supported Locales but in the order the user
         * has specified in the config file. Useful for the language selector.
         *
         * @return array 
         * @static 
         */ 
        public static function getLocalesOrder()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getLocalesOrder();
        }
                    /**
         * Returns current locale name.
         *
         * @return string current locale name
         * @static 
         */ 
        public static function getCurrentLocaleName()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getCurrentLocaleName();
        }
                    /**
         * Returns current locale native name.
         *
         * @return string current locale native name
         * @static 
         */ 
        public static function getCurrentLocaleNative()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getCurrentLocaleNative();
        }
                    /**
         * Returns current locale direction.
         *
         * @return string current locale direction
         * @static 
         */ 
        public static function getCurrentLocaleDirection()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getCurrentLocaleDirection();
        }
                    /**
         * Returns current locale script.
         *
         * @return string current locale script
         * @static 
         */ 
        public static function getCurrentLocaleScript()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getCurrentLocaleScript();
        }
                    /**
         * Returns current language's native reading.
         *
         * @return string current language's native reading
         * @static 
         */ 
        public static function getCurrentLocaleNativeReading()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getCurrentLocaleNativeReading();
        }
                    /**
         * Returns current language.
         *
         * @return string current language
         * @static 
         */ 
        public static function getCurrentLocale()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getCurrentLocale();
        }
                    /**
         * Returns current regional.
         *
         * @return string current regional
         * @static 
         */ 
        public static function getCurrentLocaleRegional()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getCurrentLocaleRegional();
        }
                    /**
         * Returns supported languages language key.
         *
         * @return array keys of supported languages
         * @static 
         */ 
        public static function getSupportedLanguagesKeys()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getSupportedLanguagesKeys();
        }
                    /**
         * Check if Locale exists on the supported locales array.
         *
         * @param string|bool $locale string|bool Locale to be checked
         * @throws SupportedLocalesNotDefined
         * @return bool is the locale supported?
         * @static 
         */ 
        public static function checkLocaleInSupportedLocales($locale)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->checkLocaleInSupportedLocales($locale);
        }
                    /**
         * Set current route name.
         *
         * @param string $routeName current route name
         * @static 
         */ 
        public static function setRouteName($routeName)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->setRouteName($routeName);
        }
                    /**
         * Translate routes and save them to the translated routes array (used in the localize route filter).
         *
         * @param string $routeName Key of the translated string
         * @return string Translated string
         * @static 
         */ 
        public static function transRoute($routeName)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->transRoute($routeName);
        }
                    /**
         * Returns the translation key for a given path.
         *
         * @param string $path Path to get the key translated
         * @return string|false Key for translation, false if not exist
         * @static 
         */ 
        public static function getRouteNameFromAPath($path)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getRouteNameFromAPath($path);
        }
                    /**
         * Returns the config repository for this instance.
         *
         * @return \Illuminate\Config\Repository Configuration repository
         * @static 
         */ 
        public static function getConfigRepository()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getConfigRepository();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function hideUrlAndAcceptHeader()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->hideUrlAndAcceptHeader();
        }
                    /**
         * Returns the translation key for a given path.
         *
         * @return bool Returns value of hideDefaultLocaleInURL in config.
         * @static 
         */ 
        public static function hideDefaultLocaleInURL()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->hideDefaultLocaleInURL();
        }
                    /**
         * Create an url from the uri.
         *
         * @param string $uri Uri
         * @return string Url for the given uri
         * @static 
         */ 
        public static function createUrlFromUri($uri)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->createUrlFromUri($uri);
        }
                    /**
         * Sets the base url for the site.
         *
         * @param string $url Base url for the site
         * @static 
         */ 
        public static function setBaseUrl($url)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->setBaseUrl($url);
        }
                    /**
         * Returns serialized translated routes for caching purposes.
         *
         * @return string 
         * @static 
         */ 
        public static function getSerializedTranslatedRoutes()
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->getSerializedTranslatedRoutes();
        }
                    /**
         * Sets the translated routes list.
         * 
         * Only useful from a cached routes context.
         *
         * @param string $serializedRoutes
         * @static 
         */ 
        public static function setSerializedTranslatedRoutes($serializedRoutes)
        {
                        /** @var \Mcamara\LaravelLocalization\LaravelLocalization $instance */
                        return $instance->setSerializedTranslatedRoutes($serializedRoutes);
        }
         
    }
     
}

    namespace ProtoneMedia\Splade\Facades { 
            /**
     * 
     *
     * @see \ProtoneMedia\Splade\TransitionRepository
     */ 
        class Animation {
                    /**
         * Adds an animation to this repository.
         *
         * @param \ProtoneMedia\Splade\TransitionAnimation $transitionAnimation
         * @return \ProtoneMedia\Splade\TransitionRepository 
         * @static 
         */ 
        public static function add($transitionAnimation)
        {
                        /** @var \ProtoneMedia\Splade\TransitionRepository $instance */
                        return $instance->add($transitionAnimation);
        }
                    /**
         * Instantiates a new animations and adds it.
         *
         * @return \ProtoneMedia\Splade\TransitionRepository 
         * @static 
         */ 
        public static function new($name, $enter, $enterFrom, $enterTo, $leave, $leaveFrom, $leaveTo)
        {
                        /** @var \ProtoneMedia\Splade\TransitionRepository $instance */
                        return $instance->new($name, $enter, $enterFrom, $enterTo, $leave, $leaveFrom, $leaveTo);
        }
                    /**
         * Returns the animation with the given name.
         *
         * @return \ProtoneMedia\Splade\TransitionAnimation 
         * @static 
         */ 
        public static function get($name)
        {
                        /** @var \ProtoneMedia\Splade\TransitionRepository $instance */
                        return $instance->get($name);
        }
                    /**
         * Gathers all used classes in all animations and returns them as an array.
         *
         * @static 
         */ 
        public static function classes()
        {
                        /** @var \ProtoneMedia\Splade\TransitionRepository $instance */
                        return $instance->classes();
        }
         
    }
            /**
     * 
     *
     */ 
        class SEO {
                    /**
         * Setter for the title.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function title($title, $withPrefixAndSuffix = true)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->title($title, $withPrefixAndSuffix);
        }
                    /**
         * Setter for the canonical URL.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function canonical($url)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->canonical($url);
        }
                    /**
         * Setter for the description.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function description($description)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->description($description);
        }
                    /**
         * Setter for the keywords.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function keywords($keywords)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->keywords($keywords);
        }
                    /**
         * Sets a meta tag by its name attribute.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function metaByName($name, $content, $replace = true)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->metaByName($name, $content, $replace);
        }
                    /**
         * Sets a meta tag by its property attribute.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function metaByProperty($property, $content, $replace = true)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->metaByProperty($property, $content, $replace);
        }
                    /**
         * Adds a meta tag by the given attributes.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function meta($attributes)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->meta($attributes);
        }
                    /**
         * Remove a meta tag that matches the given attributes
         *
         * @return void 
         * @static 
         */ 
        public static function removeMeta($attributes)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        $instance->removeMeta($attributes);
        }
                    /**
         * Get a Meta instance by name.
         *
         * @static 
         */ 
        public static function getMetaByName($name)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->getMetaByName($name);
        }
                    /**
         * Get a Meta instance by property.
         *
         * @static 
         */ 
        public static function getMetaByProperty($property)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->getMetaByProperty($property);
        }
                    /**
         * Getter for the title.
         *
         * @static 
         */ 
        public static function getTitle()
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->getTitle();
        }
                    /**
         * Returns a HtmlString with the title and the meta tags.
         *
         * @static 
         */ 
        public static function renderHead()
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->renderHead();
        }
                    /**
         * Returns an array with the title and meta tags.
         *
         * @static 
         */ 
        public static function toArray()
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->toArray();
        }
                    /**
         * Returns the array from the 'toArray' method.
         *
         * @static 
         */ 
        public static function jsonSerialize()
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->jsonSerialize();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \ProtoneMedia\Splade\Head::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \ProtoneMedia\Splade\Head::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \ProtoneMedia\Splade\Head::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \ProtoneMedia\Splade\Head::flushMacros();
        }
                    /**
         * Setter for the 'og:type' Meta Property.
         *
         * @static 
         */ 
        public static function openGraphType($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->openGraphType($value);
        }
                    /**
         * Setter for the 'og:site_name' Meta Property.
         *
         * @static 
         */ 
        public static function openGraphSiteName($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->openGraphSiteName($value);
        }
                    /**
         * Setter for the 'og:title' Meta Property.
         *
         * @static 
         */ 
        public static function openGraphTitle($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->openGraphTitle($value);
        }
                    /**
         * Setter for the 'og:url' Meta Property.
         *
         * @static 
         */ 
        public static function openGraphUrl($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->openGraphUrl($value);
        }
                    /**
         * Setter for the 'og:image' Meta Property.
         *
         * @static 
         */ 
        public static function openGraphImage($value, $replace = true)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->openGraphImage($value, $replace);
        }
                    /**
         * Setter for the 'twitter:card' Meta Name.
         *
         * @static 
         */ 
        public static function twitterCard($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->twitterCard($value);
        }
                    /**
         * Setter for the 'twitter:site' Meta Name.
         *
         * @static 
         */ 
        public static function twitterSite($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->twitterSite($value);
        }
                    /**
         * Setter for the 'twitter:title' Meta Name.
         *
         * @static 
         */ 
        public static function twitterTitle($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->twitterTitle($value);
        }
                    /**
         * Setter for the 'twitter:description' Meta Name.
         *
         * @static 
         */ 
        public static function twitterDescription($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->twitterDescription($value);
        }
                    /**
         * Setter for the 'twitter:image' Meta Name.
         *
         * @static 
         */ 
        public static function twitterImage($value)
        {
                        /** @var \ProtoneMedia\Splade\Head $instance */
                        return $instance->twitterImage($value);
        }
         
    }
            /**
     * 
     *
     * @method static ?callable getCustomToastFactory(callable $toastFactory):
     * @method static string modalType()
     * @see \ProtoneMedia\Splade\SpladeCore
     */ 
        class Splade {
                    /**
         * Returns the root view that's used on the initial request to wrap the content.
         *
         * @static 
         */ 
        public static function getRootView()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getRootView();
        }
                    /**
         * Setter for the root view.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function setRootView($view)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->setRootView($view);
        }
                    /**
         * Resets the Modal Key, shared data and toasts.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function reset()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->reset();
        }
                    /**
         * Getter for the Head instance.
         *
         * @return \ProtoneMedia\Splade\Head 
         * @static 
         */ 
        public static function head()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->head();
        }
                    /**
         * Returns the Modal Key.
         *
         * @static 
         */ 
        public static function getModalKey()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getModalKey();
        }
                    /**
         * Setter for the Modal Key.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function setModalKey($key)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->setModalKey($key);
        }
                    /**
         * Returns the Persistent Layout Key.
         *
         * @static 
         */ 
        public static function getPersistentLayoutKey()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getPersistentLayoutKey();
        }
                    /**
         * Setter for the Persistent Layout Key.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function setPersistentLayoutKey($key)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->setPersistentLayoutKey($key);
        }
                    /**
         * Increases the amount of Lazy Components and returns the latest key.
         *
         * @static 
         */ 
        public static function newLazyComponentKey()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->newLazyComponentKey();
        }
                    /**
         * Resets the Lazy Components counter.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function resetLazyComponentCounter()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->resetLazyComponentCounter();
        }
                    /**
         * Increases the amount of Rehydrate Components and returns the latest key.
         *
         * @static 
         */ 
        public static function newRehydrateComponentKey()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->newRehydrateComponentKey();
        }
                    /**
         * Resets the Rehydrate Components counter.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function resetRehydrateComponentCounter()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->resetRehydrateComponentCounter();
        }
                    /**
         * Resets the Persistent Layout key.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function resetPersistentLayoutKey()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->resetPersistentLayoutKey();
        }
                    /**
         * Sets a callable that defines how a default Toast.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function defaultToast($toastFactory)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->defaultToast($toastFactory);
        }
                    /**
         * Returns the custom toast factory.
         *
         * @static 
         */ 
        public static function getCustomToastFactory()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getCustomToastFactory();
        }
                    /**
         * Resolves the given value if this is the initial request.
         *
         * @param mixed $value
         * @return mixed 
         * @static 
         */ 
        public static function onInit($value)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->onInit($value);
        }
                    /**
         * Resolves the given value if this a Splade request.
         *
         * @param mixed $value
         * @return mixed 
         * @static 
         */ 
        public static function onLazy($value)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->onLazy($value);
        }
                    /**
         * Returns a new EventRefresh instance.
         *
         * @return \ProtoneMedia\Splade\EventRefresh 
         * @static 
         */ 
        public static function refreshOnEvent()
        {
                        return \ProtoneMedia\Splade\SpladeCore::refreshOnEvent();
        }
                    /**
         * Returns a new EventRedirectFactory instance.
         *
         * @return \ProtoneMedia\Splade\EventRedirectFactory 
         * @static 
         */ 
        public static function redirectOnEvent()
        {
                        return \ProtoneMedia\Splade\SpladeCore::redirectOnEvent();
        }
                    /**
         * Returns a new instance of the ToastBuilder.
         *
         * @return \ProtoneMedia\Splade\SpladeToastBuilder 
         * @static 
         */ 
        public static function toastBuilder()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->toastBuilder();
        }
                    /**
         * Returns a new SpladeToast instance
         *
         * @return \ProtoneMedia\Splade\SpladeToast 
         * @static 
         */ 
        public static function toastOnEvent($message = '')
        {
                        return \ProtoneMedia\Splade\SpladeCore::toastOnEvent($message);
        }
                    /**
         * Returns a Closure that prevents generating a response from
         * a ValidationException when this is a Splade request.
         *
         * @param callable $renderUsing
         * @static 
         */ 
        public static function exceptionHandler($exceptionHandler, $renderUsing = null)
        {
                        return \ProtoneMedia\Splade\SpladeCore::exceptionHandler($exceptionHandler, $renderUsing);
        }
                    /**
         * Returns a new SpladeToast instance, optionally with the given message
         * if it isn't empty, and it uses the custom toast factory if set.
         *
         * @return \ProtoneMedia\Splade\SpladeToast 
         * @static 
         */ 
        public static function toast($message = '')
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->toast($message);
        }
                    /**
         * Getter for the Shared Data.
         *
         * @static 
         */ 
        public static function getShared()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getShared();
        }
                    /**
         * Returns all registered Data Stores.
         *
         * @static 
         */ 
        public static function getDataStores()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getDataStores();
        }
                    /**
         * Adds a new Data Store.
         *
         * @param \ProtoneMedia\Splade\DataStore $store
         * @static 
         */ 
        public static function addDataStore($store)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->addDataStore($store);
        }
                    /**
         * Resets the Data Stores.
         *
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function resetDataStores()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->resetDataStores();
        }
                    /**
         * Sets data on the shared data array.
         *
         * @param mixed $value
         * @return \ProtoneMedia\Splade\SpladeCore 
         * @static 
         */ 
        public static function share($key, $value)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->share($key, $value);
        }
                    /**
         * Getter for the toasts.
         *
         * @static 
         */ 
        public static function getToasts()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getToasts();
        }
                    /**
         * Returns a boolean whether this is a Splade request.
         *
         * @static 
         */ 
        public static function isSpladeRequest()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->isSpladeRequest();
        }
                    /**
         * Returns a boolean whether this is a Modal request.
         *
         * @static 
         */ 
        public static function isModalRequest()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->isModalRequest();
        }
                    /**
         * Returns a boolean whether the response should prevent a
         * page request on the front end.
         *
         * @static 
         */ 
        public static function dontRefreshPage()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->dontRefreshPage();
        }
                    /**
         * Returns a boolean whether the next page should preserve the scroll position.
         *
         * @static 
         */ 
        public static function preserveScroll()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->preserveScroll();
        }
                    /**
         * Returns a boolean whether the next page should not be animated.
         *
         * @static 
         */ 
        public static function preventViewTransition()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->preventViewTransition();
        }
                    /**
         * Returns a boolean whether this is a Lazy request.
         *
         * @static 
         */ 
        public static function isLazyRequest()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->isLazyRequest();
        }
                    /**
         * Returns a boolean whether this is a Rehydrate request.
         *
         * @static 
         */ 
        public static function isRefreshRequest()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->isRefreshRequest();
        }
                    /**
         * Returns a boolean whether this is a Rehydrate request.
         *
         * @static 
         */ 
        public static function isRehydrateRequest()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->isRehydrateRequest();
        }
                    /**
         * Retrieves the Lazy Component key from the request header.
         *
         * @static 
         */ 
        public static function getLazyComponentKey()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getLazyComponentKey();
        }
                    /**
         * Retrieves the Rehydrate Component key from the request header.
         *
         * @static 
         */ 
        public static function getRehydrateComponentKey()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getRehydrateComponentKey();
        }
                    /**
         * Returns the Modal type from the request header.
         *
         * @static 
         */ 
        public static function getModalType()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getModalType();
        }
                    /**
         * Returns the Modal target from the request header.
         *
         * @return string 
         * @static 
         */ 
        public static function getModalTarget()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getModalTarget();
        }
                    /**
         * Returns a JSON response that indicates that the Splade frontend
         * should redirect to an external URL.
         *
         * @static 
         */ 
        public static function redirectAway($targetUrl)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->redirectAway($targetUrl);
        }
                    /**
         * Indicates whether every resource needs a valid transformer.
         *
         * @static 
         */ 
        public static function requireTransformer($value = true)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->requireTransformer($value);
        }
                    /**
         * Adds a transformer for the given class.
         *
         * @static 
         */ 
        public static function transformUsing($class, $transformer = null)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->transformUsing($class, $transformer);
        }
                    /**
         * Finds the transformer for the given class.
         *
         * @static 
         */ 
        public static function findTransformerFor($instance)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->findTransformerFor($instance);
        }
                    /**
         * Setter for the 'defaultModalCloseExplicitly' property.
         *
         * @static 
         */ 
        public static function defaultModalCloseExplicitly($value = true)
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->defaultModalCloseExplicitly($value);
        }
                    /**
         * Getter for the 'defaultModalCloseExplicitly' property.
         *
         * @static 
         */ 
        public static function getDefaultModalCloseExplicitly()
        {
                        /** @var \ProtoneMedia\Splade\SpladeCore $instance */
                        return $instance->getDefaultModalCloseExplicitly();
        }
         
    }
            /**
     * 
     *
     * @method static self title(string $title)
     * @method static self message(string $message)
     * @method static self backdrop(bool $value = true)
     * @method static self autoDismiss(int $afterSeconds = 15)
     * @method static self position(string $x, string $y)
     * @method static self leftTop(string $message = '')
     * @method static self centerTop(string $message = '')
     * @method static self rightTop(string $message = '')
     * @method static self leftCenter(string $message = '')
     * @method static self center(string $message = '')
     * @method static self rightCenter(string $message = '')
     * @method static self leftBottom(string $message = '')
     * @method static self centerBottom(string $message = '')
     * @method static self rightBottom(string $message = '')
     * @method static self info(string $message = '')
     * @method static self success(string $message = '')
     * @method static self warning(string $message = '')
     * @method static self danger(string $message = '')
     * @method static self style(string $style)
     * @see \ProtoneMedia\Splade\SpladeToast
     */ 
        class Toast {
         
    }
     
}

    namespace Spatie\LaravelIgnition\Facades { 
            /**
     * 
     *
     * @see \Spatie\FlareClient\Flare
     */ 
        class Flare {
                    /**
         * 
         *
         * @static 
         */ 
        public static function make($apiKey = null, $contextDetector = null)
        {
                        return \Spatie\FlareClient\Flare::make($apiKey, $contextDetector);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setApiToken($apiToken)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->setApiToken($apiToken);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function apiTokenSet()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->apiTokenSet();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setBaseUrl($baseUrl)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->setBaseUrl($baseUrl);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setStage($stage)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->setStage($stage);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function sendReportsImmediately()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->sendReportsImmediately();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function determineVersionUsing($determineVersionCallable)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->determineVersionUsing($determineVersionCallable);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function reportErrorLevels($reportErrorLevels)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->reportErrorLevels($reportErrorLevels);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function filterExceptionsUsing($filterExceptionsCallable)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->filterExceptionsUsing($filterExceptionsCallable);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function filterReportsUsing($filterReportsCallable)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->filterReportsUsing($filterReportsCallable);
        }
                    /**
         * 
         *
         * @param array<class-string<ArgumentReducer>|ArgumentReducer>|\Spatie\Backtrace\Arguments\ArgumentReducers|null $argumentReducers
         * @static 
         */ 
        public static function argumentReducers($argumentReducers)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->argumentReducers($argumentReducers);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function withStackFrameArguments($withStackFrameArguments = true)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->withStackFrameArguments($withStackFrameArguments);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function version()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->version();
        }
                    /**
         * 
         *
         * @return array<int, FlareMiddleware|class-string<FlareMiddleware>> 
         * @static 
         */ 
        public static function getMiddleware()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->getMiddleware();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setContextProviderDetector($contextDetector)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->setContextProviderDetector($contextDetector);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function setContainer($container)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->setContainer($container);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function registerFlareHandlers()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->registerFlareHandlers();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function registerExceptionHandler()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->registerExceptionHandler();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function registerErrorHandler()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->registerErrorHandler();
        }
                    /**
         * 
         *
         * @param \Spatie\FlareClient\FlareMiddleware\FlareMiddleware|array<FlareMiddleware>|\Spatie\FlareClient\class-string<FlareMiddleware>|callable $middleware
         * @return \Spatie\FlareClient\Flare 
         * @static 
         */ 
        public static function registerMiddleware($middleware)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->registerMiddleware($middleware);
        }
                    /**
         * 
         *
         * @return array<int,FlareMiddleware|class-string<FlareMiddleware>> 
         * @static 
         */ 
        public static function getMiddlewares()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->getMiddlewares();
        }
                    /**
         * 
         *
         * @param string $name
         * @param string $messageLevel
         * @param array<int, mixed> $metaData
         * @return \Spatie\FlareClient\Flare 
         * @static 
         */ 
        public static function glow($name, $messageLevel = 'info', $metaData = [])
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->glow($name, $messageLevel, $metaData);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function handleException($throwable)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->handleException($throwable);
        }
                    /**
         * 
         *
         * @return mixed 
         * @static 
         */ 
        public static function handleError($code, $message, $file = '', $line = 0)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->handleError($code, $message, $file, $line);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function applicationPath($applicationPath)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->applicationPath($applicationPath);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function report($throwable, $callback = null, $report = null)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->report($throwable, $callback, $report);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function reportMessage($message, $logLevel, $callback = null)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->reportMessage($message, $logLevel, $callback);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function sendTestReport($throwable)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->sendTestReport($throwable);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function reset()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->reset();
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function anonymizeIp()
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->anonymizeIp();
        }
                    /**
         * 
         *
         * @param array<int, string> $fieldNames
         * @return \Spatie\FlareClient\Flare 
         * @static 
         */ 
        public static function censorRequestBodyFields($fieldNames)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->censorRequestBodyFields($fieldNames);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function createReport($throwable)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->createReport($throwable);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function createReportFromMessage($message, $logLevel)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->createReportFromMessage($message, $logLevel);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function stage($stage)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->stage($stage);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function messageLevel($messageLevel)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->messageLevel($messageLevel);
        }
                    /**
         * 
         *
         * @param string $groupName
         * @param mixed $default
         * @return array<int, mixed> 
         * @static 
         */ 
        public static function getGroup($groupName = 'context', $default = [])
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->getGroup($groupName, $default);
        }
                    /**
         * 
         *
         * @static 
         */ 
        public static function context($key, $value)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->context($key, $value);
        }
                    /**
         * 
         *
         * @param string $groupName
         * @param array<string, mixed> $properties
         * @return \Spatie\FlareClient\Flare 
         * @static 
         */ 
        public static function group($groupName, $properties)
        {
                        /** @var \Spatie\FlareClient\Flare $instance */
                        return $instance->group($groupName, $properties);
        }
         
    }
     
}

    namespace Yajra\DataTables\Facades { 
            /**
     * 
     *
     * @mixin \Yajra\DataTables\DataTables
     * @see \Yajra\DataTables\DataTables
     */ 
        class DataTables {
                    /**
         * Make a DataTable instance from source.
         * 
         * Alias of make for backward compatibility.
         *
         * @param mixed $source
         * @return mixed 
         * @throws \Exception
         * @static 
         */ 
        public static function of($source)
        {
                        return \Yajra\DataTables\DataTables::of($source);
        }
                    /**
         * Make a DataTable instance from source.
         *
         * @param mixed $source
         * @return mixed 
         * @throws \Exception
         * @static 
         */ 
        public static function make($source)
        {
                        return \Yajra\DataTables\DataTables::make($source);
        }
                    /**
         * Get request object.
         *
         * @return \Yajra\DataTables\Utilities\Request 
         * @static 
         */ 
        public static function getRequest()
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->getRequest();
        }
                    /**
         * Get config instance.
         *
         * @return \Yajra\DataTables\Utilities\Config 
         * @static 
         */ 
        public static function getConfig()
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->getConfig();
        }
                    /**
         * 
         *
         * @deprecated Please use query() instead, this method will be removed in a next version.
         * @param $builder
         * @return \Yajra\DataTables\QueryDataTable 
         * @static 
         */ 
        public static function queryBuilder($builder)
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->queryBuilder($builder);
        }
                    /**
         * DataTables using Query.
         *
         * @param \Illuminate\Database\Query\Builder|mixed $builder
         * @return \Yajra\DataTables\QueryDataTable|\Yajra\DataTables\DataTableAbstract 
         * @static 
         */ 
        public static function query($builder)
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->query($builder);
        }
                    /**
         * DataTables using Eloquent Builder.
         *
         * @param \Illuminate\Database\Eloquent\Builder|mixed $builder
         * @return \Yajra\DataTables\EloquentDataTable|\Yajra\DataTables\DataTableAbstract 
         * @static 
         */ 
        public static function eloquent($builder)
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->eloquent($builder);
        }
                    /**
         * DataTables using Collection.
         *
         * @param \Illuminate\Support\Collection|array $collection
         * @return \Yajra\DataTables\CollectionDataTable|\Yajra\DataTables\DataTableAbstract 
         * @static 
         */ 
        public static function collection($collection)
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->collection($collection);
        }
                    /**
         * DataTables using Collection.
         *
         * @param \Illuminate\Http\Resources\Json\AnonymousResourceCollection|array $collection
         * @return \Yajra\DataTables\ApiResourceDataTable|\Yajra\DataTables\DataTableAbstract 
         * @static 
         */ 
        public static function resource($resource)
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->resource($resource);
        }
                    /**
         * Get html builder instance.
         *
         * @return \Yajra\DataTables\Html\Builder 
         * @throws \Exception
         * @static 
         */ 
        public static function getHtmlBuilder()
        {
                        /** @var \Yajra\DataTables\DataTables $instance */
                        return $instance->getHtmlBuilder();
        }
                    /**
         * Register a custom macro.
         *
         * @param string $name
         * @param object|callable $macro
         * @return void 
         * @static 
         */ 
        public static function macro($name, $macro)
        {
                        \Yajra\DataTables\DataTables::macro($name, $macro);
        }
                    /**
         * Mix another object into the class.
         *
         * @param object $mixin
         * @param bool $replace
         * @return void 
         * @throws \ReflectionException
         * @static 
         */ 
        public static function mixin($mixin, $replace = true)
        {
                        \Yajra\DataTables\DataTables::mixin($mixin, $replace);
        }
                    /**
         * Checks if macro is registered.
         *
         * @param string $name
         * @return bool 
         * @static 
         */ 
        public static function hasMacro($name)
        {
                        return \Yajra\DataTables\DataTables::hasMacro($name);
        }
                    /**
         * Flush the existing macros.
         *
         * @return void 
         * @static 
         */ 
        public static function flushMacros()
        {
                        \Yajra\DataTables\DataTables::flushMacros();
        }
         
    }
     
}

    namespace Illuminate\Http { 
            /**
     * 
     *
     */ 
        class Request {
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
         * @param array $rules
         * @param mixed $params
         * @static 
         */ 
        public static function validate($rules, ...$params)
        {
                        return \Illuminate\Http\Request::validate($rules, ...$params);
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
         * @param string $errorBag
         * @param array $rules
         * @param mixed $params
         * @static 
         */ 
        public static function validateWithBag($errorBag, $rules, ...$params)
        {
                        return \Illuminate\Http\Request::validateWithBag($errorBag, $rules, ...$params);
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
         * @param mixed $absolute
         * @static 
         */ 
        public static function hasValidSignature($absolute = true)
        {
                        return \Illuminate\Http\Request::hasValidSignature($absolute);
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
         * @static 
         */ 
        public static function hasValidRelativeSignature()
        {
                        return \Illuminate\Http\Request::hasValidRelativeSignature();
        }
                    /**
         * 
         *
         * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
         * @param mixed $ignoreQuery
         * @param mixed $absolute
         * @static 
         */ 
        public static function hasValidSignatureWhileIgnoring($ignoreQuery = [], $absolute = true)
        {
                        return \Illuminate\Http\Request::hasValidSignatureWhileIgnoring($ignoreQuery, $absolute);
        }
                    /**
         * 
         *
         * @see \Inertia\ServiceProvider::registerRequestMacro()
         * @static 
         */ 
        public static function inertia()
        {
                        return \Illuminate\Http\Request::inertia();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerRequestMacros()
         * @static 
         */ 
        public static function clearConvertedFiles()
        {
                        return \Illuminate\Http\Request::clearConvertedFiles();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerRequestMacros()
         * @param mixed $key
         * @static 
         */ 
        public static function orderedSpladeFileUploads($key)
        {
                        return \Illuminate\Http\Request::orderedSpladeFileUploads($key);
        }
         
    }
            /**
     * 
     *
     */ 
        class Response {
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerResponseMacro()
         * @static 
         */ 
        public static function skipSpladeMiddleware()
        {
                        return \Illuminate\Http\Response::skipSpladeMiddleware();
        }
         
    }
     
}

    namespace Illuminate\Routing { 
            /**
     * 
     *
     * @mixin \Illuminate\Routing\RouteRegistrar
     */ 
        class Router {
                    /**
         * 
         *
         * @see \Inertia\ServiceProvider::registerRouterMacro()
         * @param mixed $uri
         * @param mixed $component
         * @param mixed $props
         * @static 
         */ 
        public static function inertia($uri, $component, $props = [])
        {
                        return \Illuminate\Routing\Router::inertia($uri, $component, $props);
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForBridgeComponent()
         * @static 
         */ 
        public static function spladeWithVueBridge()
        {
                        return \Illuminate\Routing\Router::spladeWithVueBridge();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForPasswordConfirmation()
         * @static 
         */ 
        public static function spladePasswordConfirmation()
        {
                        return \Illuminate\Routing\Router::spladePasswordConfirmation();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForFileUploads()
         * @static 
         */ 
        public static function spladeUploads()
        {
                        return \Illuminate\Routing\Router::spladeUploads();
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerMacroForTableRoutes()
         * @static 
         */ 
        public static function spladeTable()
        {
                        return \Illuminate\Routing\Router::spladeTable();
        }
         
    }
            /**
     * 
     *
     */ 
        class Route {
                    /**
         * 
         *
         * @see \Spatie\Permission\PermissionServiceProvider::registerMacroHelpers()
         * @param mixed $roles
         * @static 
         */ 
        public static function role($roles = [])
        {
                        return \Illuminate\Routing\Route::role($roles);
        }
                    /**
         * 
         *
         * @see \Spatie\Permission\PermissionServiceProvider::registerMacroHelpers()
         * @param mixed $permissions
         * @static 
         */ 
        public static function permission($permissions = [])
        {
                        return \Illuminate\Routing\Route::permission($permissions);
        }
         
    }
     
}

    namespace Illuminate\Testing { 
            /**
     * 
     *
     * @mixin \Illuminate\Http\Response
     */ 
        class TestResponse {
                    /**
         * 
         *
         * @see \Inertia\Testing\TestResponseMacros::assertInertia()
         * @param \Closure|null $callback
         * @static 
         */ 
        public static function assertInertia($callback = null)
        {
                        return \Illuminate\Testing\TestResponse::assertInertia($callback);
        }
                    /**
         * 
         *
         * @see \Inertia\Testing\TestResponseMacros::inertiaPage()
         * @static 
         */ 
        public static function inertiaPage()
        {
                        return \Illuminate\Testing\TestResponse::inertiaPage();
        }
         
    }
     
}

    namespace Illuminate\View { 
            /**
     * 
     *
     */ 
        class Factory {
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerViewMacros()
         * @static 
         */ 
        public static function getFirstSlot()
        {
                        return \Illuminate\View\Factory::getFirstSlot();
        }
         
    }
            /**
     * 
     *
     */ 
        class ComponentAttributeBag {
                    /**
         * 
         *
         * @see \Livewire\Features\SupportBladeAttributes\SupportBladeAttributes::provide()
         * @param mixed $name
         * @static 
         */ 
        public static function wire($name)
        {
                        return \Illuminate\View\ComponentAttributeBag::wire($name);
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerViewMacros()
         * @param mixed $attributes
         * @static 
         */ 
        public static function rejectWhenBlank($attributes)
        {
                        return \Illuminate\View\ComponentAttributeBag::rejectWhenBlank($attributes);
        }
                    /**
         * 
         *
         * @see \ProtoneMedia\Splade\ServiceProvider::registerViewMacros()
         * @param mixed $attribute
         * @param mixed $value
         * @param bool $omitBlankValue
         * @param bool $escape
         * @static 
         */ 
        public static function mergeVueBinding($attribute, $value, $omitBlankValue = true, $escape = true)
        {
                        return \Illuminate\View\ComponentAttributeBag::mergeVueBinding($attribute, $value, $omitBlankValue, $escape);
        }
         
    }
            /**
     * 
     *
     */ 
        class View {
                    /**
         * 
         *
         * @see \Livewire\Features\SupportPageComponents\SupportPageComponents::registerLayoutViewMacros()
         * @param mixed $data
         * @static 
         */ 
        public static function layoutData($data = [])
        {
                        return \Illuminate\View\View::layoutData($data);
        }
                    /**
         * 
         *
         * @see \Livewire\Features\SupportPageComponents\SupportPageComponents::registerLayoutViewMacros()
         * @param mixed $section
         * @static 
         */ 
        public static function section($section)
        {
                        return \Illuminate\View\View::section($section);
        }
                    /**
         * 
         *
         * @see \Livewire\Features\SupportPageComponents\SupportPageComponents::registerLayoutViewMacros()
         * @param mixed $title
         * @static 
         */ 
        public static function title($title)
        {
                        return \Illuminate\View\View::title($title);
        }
                    /**
         * 
         *
         * @see \Livewire\Features\SupportPageComponents\SupportPageComponents::registerLayoutViewMacros()
         * @param mixed $slot
         * @static 
         */ 
        public static function slot($slot)
        {
                        return \Illuminate\View\View::slot($slot);
        }
                    /**
         * 
         *
         * @see \Livewire\Features\SupportPageComponents\SupportPageComponents::registerLayoutViewMacros()
         * @param mixed $view
         * @param mixed $params
         * @static 
         */ 
        public static function extends($view, $params = [])
        {
                        return \Illuminate\View\View::extends($view, $params);
        }
                    /**
         * 
         *
         * @see \Livewire\Features\SupportPageComponents\SupportPageComponents::registerLayoutViewMacros()
         * @param mixed $view
         * @param mixed $params
         * @static 
         */ 
        public static function layout($view, $params = [])
        {
                        return \Illuminate\View\View::layout($view, $params);
        }
         
    }
     
}

    namespace Illuminate\Foundation\Http { 
            /**
     * 
     *
     */ 
        class FormRequest {
         
    }
     
}


namespace  { 
            class App extends \Illuminate\Support\Facades\App {}
            class Arr extends \Illuminate\Support\Arr {}
            class Artisan extends \Illuminate\Support\Facades\Artisan {}
            class Auth extends \Illuminate\Support\Facades\Auth {}
            class Blade extends \Illuminate\Support\Facades\Blade {}
            class Broadcast extends \Illuminate\Support\Facades\Broadcast {}
            class Bus extends \Illuminate\Support\Facades\Bus {}
            class Cache extends \Illuminate\Support\Facades\Cache {}
            class Config extends \Illuminate\Support\Facades\Config {}
            class Cookie extends \Illuminate\Support\Facades\Cookie {}
            class Crypt extends \Illuminate\Support\Facades\Crypt {}
            class Date extends \Illuminate\Support\Facades\Date {}
            class DB extends \Illuminate\Support\Facades\DB {}
            class Eloquent extends \Illuminate\Database\Eloquent\Model {             
                /**
             * Create and return an un-saved model instance.
             *
             * @param array $attributes
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @static 
             */ 
            public static function make($attributes = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->make($attributes);
            }
             
                /**
             * Register a new global scope.
             *
             * @param string $identifier
             * @param \Illuminate\Database\Eloquent\Scope|\Closure $scope
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withGlobalScope($identifier, $scope)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withGlobalScope($identifier, $scope);
            }
             
                /**
             * Remove a registered global scope.
             *
             * @param \Illuminate\Database\Eloquent\Scope|string $scope
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withoutGlobalScope($scope)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withoutGlobalScope($scope);
            }
             
                /**
             * Remove all or passed registered global scopes.
             *
             * @param array|null $scopes
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withoutGlobalScopes($scopes = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withoutGlobalScopes($scopes);
            }
             
                /**
             * Get an array of global scopes that were removed from the query.
             *
             * @return array 
             * @static 
             */ 
            public static function removedScopes()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->removedScopes();
            }
             
                /**
             * Add a where clause on the primary key to the query.
             *
             * @param mixed $id
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereKey($id)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereKey($id);
            }
             
                /**
             * Add a where clause on the primary key to the query.
             *
             * @param mixed $id
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereKeyNot($id)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereKeyNot($id);
            }
             
                /**
             * Add a basic where clause to the query.
             *
             * @param \Closure|string|array|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @param string $boolean
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function where($column, $operator = null, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->where($column, $operator, $value, $boolean);
            }
             
                /**
             * Add a basic where clause to the query, and return the first result.
             *
             * @param \Closure|string|array|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @param string $boolean
             * @return \Illuminate\Database\Eloquent\Model|static|null 
             * @static 
             */ 
            public static function firstWhere($column, $operator = null, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->firstWhere($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where" clause to the query.
             *
             * @param \Closure|array|string|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhere($column, $operator = null, $value = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhere($column, $operator, $value);
            }
             
                /**
             * Add a basic "where not" clause to the query.
             *
             * @param \Closure|string|array|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @param string $boolean
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereNot($column, $operator = null, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereNot($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where not" clause to the query.
             *
             * @param \Closure|array|string|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereNot($column, $operator = null, $value = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereNot($column, $operator, $value);
            }
             
                /**
             * Add an "order by" clause for a timestamp to the query.
             *
             * @param string|\Illuminate\Database\Query\Expression $column
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function latest($column = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->latest($column);
            }
             
                /**
             * Add an "order by" clause for a timestamp to the query.
             *
             * @param string|\Illuminate\Database\Query\Expression $column
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function oldest($column = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->oldest($column);
            }
             
                /**
             * Create a collection of models from plain arrays.
             *
             * @param array $items
             * @return \Illuminate\Database\Eloquent\Collection 
             * @static 
             */ 
            public static function hydrate($items)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->hydrate($items);
            }
             
                /**
             * Create a collection of models from a raw query.
             *
             * @param string $query
             * @param array $bindings
             * @return \Illuminate\Database\Eloquent\Collection 
             * @static 
             */ 
            public static function fromQuery($query, $bindings = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->fromQuery($query, $bindings);
            }
             
                /**
             * Find a model by its primary key.
             *
             * @param mixed $id
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null 
             * @static 
             */ 
            public static function find($id, $columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->find($id, $columns);
            }
             
                /**
             * Find multiple models by their primary keys.
             *
             * @param \Illuminate\Contracts\Support\Arrayable|array $ids
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Collection 
             * @static 
             */ 
            public static function findMany($ids, $columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->findMany($ids, $columns);
            }
             
                /**
             * Find a model by its primary key or throw an exception.
             *
             * @param mixed $id
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static|static[] 
             * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
             * @static 
             */ 
            public static function findOrFail($id, $columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->findOrFail($id, $columns);
            }
             
                /**
             * Find a model by its primary key or return fresh model instance.
             *
             * @param mixed $id
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @static 
             */ 
            public static function findOrNew($id, $columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->findOrNew($id, $columns);
            }
             
                /**
             * Find a model by its primary key or call a callback.
             *
             * @param mixed $id
             * @param \Closure|array|string $columns
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|mixed 
             * @static 
             */ 
            public static function findOr($id, $columns = [], $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->findOr($id, $columns, $callback);
            }
             
                /**
             * Get the first record matching the attributes or instantiate it.
             *
             * @param array $attributes
             * @param array $values
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @static 
             */ 
            public static function firstOrNew($attributes = [], $values = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->firstOrNew($attributes, $values);
            }
             
                /**
             * Get the first record matching the attributes or create it.
             *
             * @param array $attributes
             * @param array $values
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @static 
             */ 
            public static function firstOrCreate($attributes = [], $values = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->firstOrCreate($attributes, $values);
            }
             
                /**
             * Create or update a record matching the attributes, and fill it with values.
             *
             * @param array $attributes
             * @param array $values
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @static 
             */ 
            public static function updateOrCreate($attributes, $values = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->updateOrCreate($attributes, $values);
            }
             
                /**
             * Execute the query and get the first result or throw an exception.
             *
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
             * @static 
             */ 
            public static function firstOrFail($columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->firstOrFail($columns);
            }
             
                /**
             * Execute the query and get the first result or call a callback.
             *
             * @param \Closure|array|string $columns
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Model|static|mixed 
             * @static 
             */ 
            public static function firstOr($columns = [], $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->firstOr($columns, $callback);
            }
             
                /**
             * Execute the query and get the first result if it's the sole matching record.
             *
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model 
             * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
             * @throws \Illuminate\Database\MultipleRecordsFoundException
             * @static 
             */ 
            public static function sole($columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->sole($columns);
            }
             
                /**
             * Get a single column's value from the first result of a query.
             *
             * @param string|\Illuminate\Database\Query\Expression $column
             * @return mixed 
             * @static 
             */ 
            public static function value($column)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->value($column);
            }
             
                /**
             * Get a single column's value from the first result of a query if it's the sole matching record.
             *
             * @param string|\Illuminate\Database\Query\Expression $column
             * @return mixed 
             * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
             * @throws \Illuminate\Database\MultipleRecordsFoundException
             * @static 
             */ 
            public static function soleValue($column)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->soleValue($column);
            }
             
                /**
             * Get a single column's value from the first result of the query or throw an exception.
             *
             * @param string|\Illuminate\Database\Query\Expression $column
             * @return mixed 
             * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
             * @static 
             */ 
            public static function valueOrFail($column)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->valueOrFail($column);
            }
             
                /**
             * Execute the query as a "select" statement.
             *
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Collection|static[] 
             * @static 
             */ 
            public static function get($columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->get($columns);
            }
             
                /**
             * Get the hydrated models without eager loading.
             *
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model[]|static[] 
             * @static 
             */ 
            public static function getModels($columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->getModels($columns);
            }
             
                /**
             * Eager load the relationships for the models.
             *
             * @param array $models
             * @return array 
             * @static 
             */ 
            public static function eagerLoadRelations($models)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->eagerLoadRelations($models);
            }
             
                /**
             * Get a lazy collection for the given query.
             *
             * @return \Illuminate\Support\LazyCollection 
             * @static 
             */ 
            public static function cursor()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->cursor();
            }
             
                /**
             * Get a collection with the values of a given column.
             *
             * @param string|\Illuminate\Database\Query\Expression $column
             * @param string|null $key
             * @return \Illuminate\Support\Collection 
             * @static 
             */ 
            public static function pluck($column, $key = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->pluck($column, $key);
            }
             
                /**
             * Paginate the given query.
             *
             * @param int|null|\Closure $perPage
             * @param array|string $columns
             * @param string $pageName
             * @param int|null $page
             * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function paginate($perPage = null, $columns = [], $pageName = 'page', $page = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->paginate($perPage, $columns, $pageName, $page);
            }
             
                /**
             * Paginate the given query into a simple paginator.
             *
             * @param int|null $perPage
             * @param array|string $columns
             * @param string $pageName
             * @param int|null $page
             * @return \Illuminate\Contracts\Pagination\Paginator 
             * @static 
             */ 
            public static function simplePaginate($perPage = null, $columns = [], $pageName = 'page', $page = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->simplePaginate($perPage, $columns, $pageName, $page);
            }
             
                /**
             * Paginate the given query into a cursor paginator.
             *
             * @param int|null $perPage
             * @param array|string $columns
             * @param string $cursorName
             * @param \Illuminate\Pagination\Cursor|string|null $cursor
             * @return \Illuminate\Contracts\Pagination\CursorPaginator 
             * @static 
             */ 
            public static function cursorPaginate($perPage = null, $columns = [], $cursorName = 'cursor', $cursor = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->cursorPaginate($perPage, $columns, $cursorName, $cursor);
            }
             
                /**
             * Save a new model and return the instance.
             *
             * @param array $attributes
             * @return \Illuminate\Database\Eloquent\Model|$this 
             * @static 
             */ 
            public static function create($attributes = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->create($attributes);
            }
             
                /**
             * Save a new model and return the instance. Allow mass-assignment.
             *
             * @param array $attributes
             * @return \Illuminate\Database\Eloquent\Model|$this 
             * @static 
             */ 
            public static function forceCreate($attributes)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->forceCreate($attributes);
            }
             
                /**
             * Insert new records or update the existing ones.
             *
             * @param array $values
             * @param array|string $uniqueBy
             * @param array|null $update
             * @return int 
             * @static 
             */ 
            public static function upsert($values, $uniqueBy, $update = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->upsert($values, $uniqueBy, $update);
            }
             
                /**
             * Register a replacement for the default delete function.
             *
             * @param \Closure $callback
             * @return void 
             * @static 
             */ 
            public static function onDelete($callback)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                $instance->onDelete($callback);
            }
             
                /**
             * Call the given local model scopes.
             *
             * @param array|string $scopes
             * @return static|mixed 
             * @static 
             */ 
            public static function scopes($scopes)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->scopes($scopes);
            }
             
                /**
             * Apply the scopes to the Eloquent builder instance and return it.
             *
             * @return static 
             * @static 
             */ 
            public static function applyScopes()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->applyScopes();
            }
             
                /**
             * Prevent the specified relations from being eager loaded.
             *
             * @param mixed $relations
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function without($relations)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->without($relations);
            }
             
                /**
             * Set the relationships that should be eager loaded while removing any previously added eager loading specifications.
             *
             * @param mixed $relations
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withOnly($relations)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withOnly($relations);
            }
             
                /**
             * Create a new instance of the model being queried.
             *
             * @param array $attributes
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @static 
             */ 
            public static function newModelInstance($attributes = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->newModelInstance($attributes);
            }
             
                /**
             * Apply query-time casts to the model instance.
             *
             * @param array $casts
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withCasts($casts)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withCasts($casts);
            }
             
                /**
             * Get the underlying query builder instance.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function getQuery()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->getQuery();
            }
             
                /**
             * Set the underlying query builder instance.
             *
             * @param \Illuminate\Database\Query\Builder $query
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function setQuery($query)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->setQuery($query);
            }
             
                /**
             * Get a base query builder instance.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function toBase()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->toBase();
            }
             
                /**
             * Get the relationships being eagerly loaded.
             *
             * @return array 
             * @static 
             */ 
            public static function getEagerLoads()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->getEagerLoads();
            }
             
                /**
             * Set the relationships being eagerly loaded.
             *
             * @param array $eagerLoad
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function setEagerLoads($eagerLoad)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->setEagerLoads($eagerLoad);
            }
             
                /**
             * Indicate that the given relationships should not be eagerly loaded.
             *
             * @param array $relations
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withoutEagerLoad($relations)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withoutEagerLoad($relations);
            }
             
                /**
             * Flush the relationships being eagerly loaded.
             *
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withoutEagerLoads()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withoutEagerLoads();
            }
             
                /**
             * Get the model instance being queried.
             *
             * @return \Illuminate\Database\Eloquent\Model|static 
             * @static 
             */ 
            public static function getModel()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->getModel();
            }
             
                /**
             * Set a model instance for the model being queried.
             *
             * @param \Illuminate\Database\Eloquent\Model $model
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function setModel($model)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->setModel($model);
            }
             
                /**
             * Get the given macro by name.
             *
             * @param string $name
             * @return \Closure 
             * @static 
             */ 
            public static function getMacro($name)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->getMacro($name);
            }
             
                /**
             * Checks if a macro is registered.
             *
             * @param string $name
             * @return bool 
             * @static 
             */ 
            public static function hasMacro($name)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->hasMacro($name);
            }
             
                /**
             * Get the given global macro by name.
             *
             * @param string $name
             * @return \Closure 
             * @static 
             */ 
            public static function getGlobalMacro($name)
            {
                                return \Illuminate\Database\Eloquent\Builder::getGlobalMacro($name);
            }
             
                /**
             * Checks if a global macro is registered.
             *
             * @param string $name
             * @return bool 
             * @static 
             */ 
            public static function hasGlobalMacro($name)
            {
                                return \Illuminate\Database\Eloquent\Builder::hasGlobalMacro($name);
            }
             
                /**
             * Clone the Eloquent query builder.
             *
             * @return static 
             * @static 
             */ 
            public static function clone()
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->clone();
            }
             
                /**
             * Chunk the results of the query.
             *
             * @param int $count
             * @param callable $callback
             * @return bool 
             * @static 
             */ 
            public static function chunk($count, $callback)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->chunk($count, $callback);
            }
             
                /**
             * Run a map over each item while chunking.
             *
             * @param callable $callback
             * @param int $count
             * @return \Illuminate\Support\Collection 
             * @static 
             */ 
            public static function chunkMap($callback, $count = 1000)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->chunkMap($callback, $count);
            }
             
                /**
             * Execute a callback over each item while chunking.
             *
             * @param callable $callback
             * @param int $count
             * @return bool 
             * @throws \RuntimeException
             * @static 
             */ 
            public static function each($callback, $count = 1000)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->each($callback, $count);
            }
             
                /**
             * Chunk the results of a query by comparing IDs.
             *
             * @param int $count
             * @param callable $callback
             * @param string|null $column
             * @param string|null $alias
             * @return bool 
             * @static 
             */ 
            public static function chunkById($count, $callback, $column = null, $alias = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->chunkById($count, $callback, $column, $alias);
            }
             
                /**
             * Execute a callback over each item while chunking by ID.
             *
             * @param callable $callback
             * @param int $count
             * @param string|null $column
             * @param string|null $alias
             * @return bool 
             * @static 
             */ 
            public static function eachById($callback, $count = 1000, $column = null, $alias = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->eachById($callback, $count, $column, $alias);
            }
             
                /**
             * Query lazily, by chunks of the given size.
             *
             * @param int $chunkSize
             * @return \Illuminate\Support\LazyCollection 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function lazy($chunkSize = 1000)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->lazy($chunkSize);
            }
             
                /**
             * Query lazily, by chunking the results of a query by comparing IDs.
             *
             * @param int $chunkSize
             * @param string|null $column
             * @param string|null $alias
             * @return \Illuminate\Support\LazyCollection 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function lazyById($chunkSize = 1000, $column = null, $alias = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->lazyById($chunkSize, $column, $alias);
            }
             
                /**
             * Query lazily, by chunking the results of a query by comparing IDs in descending order.
             *
             * @param int $chunkSize
             * @param string|null $column
             * @param string|null $alias
             * @return \Illuminate\Support\LazyCollection 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function lazyByIdDesc($chunkSize = 1000, $column = null, $alias = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->lazyByIdDesc($chunkSize, $column, $alias);
            }
             
                /**
             * Execute the query and get the first result.
             *
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model|object|static|null 
             * @static 
             */ 
            public static function first($columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->first($columns);
            }
             
                /**
             * Execute the query and get the first result if it's the sole matching record.
             *
             * @param array|string $columns
             * @return \Illuminate\Database\Eloquent\Model|object|static|null 
             * @throws \Illuminate\Database\RecordsNotFoundException
             * @throws \Illuminate\Database\MultipleRecordsFoundException
             * @static 
             */ 
            public static function baseSole($columns = [])
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->baseSole($columns);
            }
             
                /**
             * Pass the query to a given callback.
             *
             * @param callable $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function tap($callback)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->tap($callback);
            }
             
                /**
             * Apply the callback if the given "value" is (or resolves to) truthy.
             *
             * @template TWhenParameter
             * @template TWhenReturnType
             * @param \Illuminate\Database\Eloquent\(\Closure($this):  TWhenParameter)|TWhenParameter|null  $value
             * @param \Illuminate\Database\Eloquent\(callable($this,  TWhenParameter): TWhenReturnType)|null  $callback
             * @param \Illuminate\Database\Eloquent\(callable($this,  TWhenParameter): TWhenReturnType)|null  $default
             * @return $this|\Illuminate\Database\Eloquent\TWhenReturnType 
             * @static 
             */ 
            public static function when($value = null, $callback = null, $default = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->when($value, $callback, $default);
            }
             
                /**
             * Apply the callback if the given "value" is (or resolves to) falsy.
             *
             * @template TUnlessParameter
             * @template TUnlessReturnType
             * @param \Illuminate\Database\Eloquent\(\Closure($this):  TUnlessParameter)|TUnlessParameter|null  $value
             * @param \Illuminate\Database\Eloquent\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $callback
             * @param \Illuminate\Database\Eloquent\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $default
             * @return $this|\Illuminate\Database\Eloquent\TUnlessReturnType 
             * @static 
             */ 
            public static function unless($value = null, $callback = null, $default = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->unless($value, $callback, $default);
            }
             
                /**
             * Add a relationship count / exists condition to the query.
             *
             * @param \Illuminate\Database\Eloquent\Relations\Relation|string $relation
             * @param string $operator
             * @param int $count
             * @param string $boolean
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @throws \RuntimeException
             * @static 
             */ 
            public static function has($relation, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->has($relation, $operator, $count, $boolean, $callback);
            }
             
                /**
             * Add a relationship count / exists condition to the query with an "or".
             *
             * @param string $relation
             * @param string $operator
             * @param int $count
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orHas($relation, $operator = '>=', $count = 1)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orHas($relation, $operator, $count);
            }
             
                /**
             * Add a relationship count / exists condition to the query.
             *
             * @param string $relation
             * @param string $boolean
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function doesntHave($relation, $boolean = 'and', $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->doesntHave($relation, $boolean, $callback);
            }
             
                /**
             * Add a relationship count / exists condition to the query with an "or".
             *
             * @param string $relation
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orDoesntHave($relation)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orDoesntHave($relation);
            }
             
                /**
             * Add a relationship count / exists condition to the query with where clauses.
             *
             * @param string $relation
             * @param \Closure|null $callback
             * @param string $operator
             * @param int $count
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereHas($relation, $callback = null, $operator = '>=', $count = 1)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereHas($relation, $callback, $operator, $count);
            }
             
                /**
             * Add a relationship count / exists condition to the query with where clauses.
             * 
             * Also load the relationship with same condition.
             *
             * @param string $relation
             * @param \Closure|null $callback
             * @param string $operator
             * @param int $count
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withWhereHas($relation, $callback = null, $operator = '>=', $count = 1)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withWhereHas($relation, $callback, $operator, $count);
            }
             
                /**
             * Add a relationship count / exists condition to the query with where clauses and an "or".
             *
             * @param string $relation
             * @param \Closure|null $callback
             * @param string $operator
             * @param int $count
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereHas($relation, $callback = null, $operator = '>=', $count = 1)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereHas($relation, $callback, $operator, $count);
            }
             
                /**
             * Add a relationship count / exists condition to the query with where clauses.
             *
             * @param string $relation
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereDoesntHave($relation, $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereDoesntHave($relation, $callback);
            }
             
                /**
             * Add a relationship count / exists condition to the query with where clauses and an "or".
             *
             * @param string $relation
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereDoesntHave($relation, $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereDoesntHave($relation, $callback);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param string $operator
             * @param int $count
             * @param string $boolean
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function hasMorph($relation, $types, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->hasMorph($relation, $types, $operator, $count, $boolean, $callback);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query with an "or".
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param string $operator
             * @param int $count
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orHasMorph($relation, $types, $operator = '>=', $count = 1)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orHasMorph($relation, $types, $operator, $count);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param string $boolean
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function doesntHaveMorph($relation, $types, $boolean = 'and', $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->doesntHaveMorph($relation, $types, $boolean, $callback);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query with an "or".
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orDoesntHaveMorph($relation, $types)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orDoesntHaveMorph($relation, $types);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query with where clauses.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param \Closure|null $callback
             * @param string $operator
             * @param int $count
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereHasMorph($relation, $types, $callback, $operator, $count);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query with where clauses and an "or".
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param \Closure|null $callback
             * @param string $operator
             * @param int $count
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereHasMorph($relation, $types, $callback, $operator, $count);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query with where clauses.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereDoesntHaveMorph($relation, $types, $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereDoesntHaveMorph($relation, $types, $callback);
            }
             
                /**
             * Add a polymorphic relationship count / exists condition to the query with where clauses and an "or".
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param \Closure|null $callback
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereDoesntHaveMorph($relation, $types, $callback = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereDoesntHaveMorph($relation, $types, $callback);
            }
             
                /**
             * Add a basic where clause to a relationship query.
             *
             * @param string $relation
             * @param \Closure|string|array|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereRelation($relation, $column, $operator = null, $value = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereRelation($relation, $column, $operator, $value);
            }
             
                /**
             * Add an "or where" clause to a relationship query.
             *
             * @param string $relation
             * @param \Closure|string|array|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereRelation($relation, $column, $operator = null, $value = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereRelation($relation, $column, $operator, $value);
            }
             
                /**
             * Add a polymorphic relationship condition to the query with a where clause.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param \Closure|string|array|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereMorphRelation($relation, $types, $column, $operator = null, $value = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereMorphRelation($relation, $types, $column, $operator, $value);
            }
             
                /**
             * Add a polymorphic relationship condition to the query with an "or where" clause.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param string|array $types
             * @param \Closure|string|array|\Illuminate\Database\Query\Expression $column
             * @param mixed $operator
             * @param mixed $value
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereMorphRelation($relation, $types, $column, $operator = null, $value = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereMorphRelation($relation, $types, $column, $operator, $value);
            }
             
                /**
             * Add a morph-to relationship condition to the query.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param \Illuminate\Database\Eloquent\Model|string $model
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereMorphedTo($relation, $model, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereMorphedTo($relation, $model, $boolean);
            }
             
                /**
             * Add a not morph-to relationship condition to the query.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param \Illuminate\Database\Eloquent\Model|string $model
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function whereNotMorphedTo($relation, $model, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereNotMorphedTo($relation, $model, $boolean);
            }
             
                /**
             * Add a morph-to relationship condition to the query with an "or where" clause.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param \Illuminate\Database\Eloquent\Model|string $model
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereMorphedTo($relation, $model)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereMorphedTo($relation, $model);
            }
             
                /**
             * Add a not morph-to relationship condition to the query with an "or where" clause.
             *
             * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
             * @param \Illuminate\Database\Eloquent\Model|string $model
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function orWhereNotMorphedTo($relation, $model)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereNotMorphedTo($relation, $model);
            }
             
                /**
             * Add a "belongs to" relationship where clause to the query.
             *
             * @param \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection<\Illuminate\Database\Eloquent\Model> $related
             * @param string|null $relationshipName
             * @param string $boolean
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @throws \Illuminate\Database\Eloquent\RelationNotFoundException
             * @static 
             */ 
            public static function whereBelongsTo($related, $relationshipName = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->whereBelongsTo($related, $relationshipName, $boolean);
            }
             
                /**
             * Add an "BelongsTo" relationship with an "or where" clause to the query.
             *
             * @param \Illuminate\Database\Eloquent\Model $related
             * @param string|null $relationshipName
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @throws \RuntimeException
             * @static 
             */ 
            public static function orWhereBelongsTo($related, $relationshipName = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->orWhereBelongsTo($related, $relationshipName);
            }
             
                /**
             * Add subselect queries to include an aggregate value for a relationship.
             *
             * @param mixed $relations
             * @param string $column
             * @param string $function
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withAggregate($relations, $column, $function = null)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withAggregate($relations, $column, $function);
            }
             
                /**
             * Add subselect queries to count the relations.
             *
             * @param mixed $relations
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withCount($relations)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withCount($relations);
            }
             
                /**
             * Add subselect queries to include the max of the relation's column.
             *
             * @param string|array $relation
             * @param string $column
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withMax($relation, $column)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withMax($relation, $column);
            }
             
                /**
             * Add subselect queries to include the min of the relation's column.
             *
             * @param string|array $relation
             * @param string $column
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withMin($relation, $column)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withMin($relation, $column);
            }
             
                /**
             * Add subselect queries to include the sum of the relation's column.
             *
             * @param string|array $relation
             * @param string $column
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withSum($relation, $column)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withSum($relation, $column);
            }
             
                /**
             * Add subselect queries to include the average of the relation's column.
             *
             * @param string|array $relation
             * @param string $column
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withAvg($relation, $column)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withAvg($relation, $column);
            }
             
                /**
             * Add subselect queries to include the existence of related models.
             *
             * @param string|array $relation
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function withExists($relation)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->withExists($relation);
            }
             
                /**
             * Merge the where constraints from another query to the current query.
             *
             * @param \Illuminate\Database\Eloquent\Builder $from
             * @return \Illuminate\Database\Eloquent\Builder|static 
             * @static 
             */ 
            public static function mergeConstraintsFrom($from)
            {
                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                return $instance->mergeConstraintsFrom($from);
            }
             
                /**
             * Set the columns to be selected.
             *
             * @param array|mixed $columns
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function select($columns = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->select($columns);
            }
             
                /**
             * Add a subselect expression to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query
             * @param string $as
             * @return \Illuminate\Database\Query\Builder 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function selectSub($query, $as)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->selectSub($query, $as);
            }
             
                /**
             * Add a new "raw" select expression to the query.
             *
             * @param string $expression
             * @param array $bindings
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function selectRaw($expression, $bindings = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->selectRaw($expression, $bindings);
            }
             
                /**
             * Makes "from" fetch from a subquery.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query
             * @param string $as
             * @return \Illuminate\Database\Query\Builder 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function fromSub($query, $as)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->fromSub($query, $as);
            }
             
                /**
             * Add a raw from clause to the query.
             *
             * @param string $expression
             * @param mixed $bindings
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function fromRaw($expression, $bindings = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->fromRaw($expression, $bindings);
            }
             
                /**
             * Add a new select column to the query.
             *
             * @param array|mixed $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function addSelect($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->addSelect($column);
            }
             
                /**
             * Force the query to only return distinct results.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function distinct()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->distinct();
            }
             
                /**
             * Set the table which the query is targeting.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table
             * @param string|null $as
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function from($table, $as = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->from($table, $as);
            }
             
                /**
             * Add an index hint to suggest a query index.
             *
             * @param string $index
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function useIndex($index)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->useIndex($index);
            }
             
                /**
             * Add an index hint to force a query index.
             *
             * @param string $index
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function forceIndex($index)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->forceIndex($index);
            }
             
                /**
             * Add an index hint to ignore a query index.
             *
             * @param string $index
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function ignoreIndex($index)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->ignoreIndex($index);
            }
             
                /**
             * Add a join clause to the query.
             *
             * @param string $table
             * @param \Closure|string $first
             * @param string|null $operator
             * @param string|null $second
             * @param string $type
             * @param bool $where
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function join($table, $first, $operator = null, $second = null, $type = 'inner', $where = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->join($table, $first, $operator, $second, $type, $where);
            }
             
                /**
             * Add a "join where" clause to the query.
             *
             * @param string $table
             * @param \Closure|string $first
             * @param string $operator
             * @param string $second
             * @param string $type
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function joinWhere($table, $first, $operator, $second, $type = 'inner')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->joinWhere($table, $first, $operator, $second, $type);
            }
             
                /**
             * Add a subquery join clause to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query
             * @param string $as
             * @param \Closure|string $first
             * @param string|null $operator
             * @param string|null $second
             * @param string $type
             * @param bool $where
             * @return \Illuminate\Database\Query\Builder 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->joinSub($query, $as, $first, $operator, $second, $type, $where);
            }
             
                /**
             * Add a left join to the query.
             *
             * @param string $table
             * @param \Closure|string $first
             * @param string|null $operator
             * @param string|null $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function leftJoin($table, $first, $operator = null, $second = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->leftJoin($table, $first, $operator, $second);
            }
             
                /**
             * Add a "join where" clause to the query.
             *
             * @param string $table
             * @param \Closure|string $first
             * @param string $operator
             * @param string $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function leftJoinWhere($table, $first, $operator, $second)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->leftJoinWhere($table, $first, $operator, $second);
            }
             
                /**
             * Add a subquery left join to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query
             * @param string $as
             * @param \Closure|string $first
             * @param string|null $operator
             * @param string|null $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function leftJoinSub($query, $as, $first, $operator = null, $second = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->leftJoinSub($query, $as, $first, $operator, $second);
            }
             
                /**
             * Add a right join to the query.
             *
             * @param string $table
             * @param \Closure|string $first
             * @param string|null $operator
             * @param string|null $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function rightJoin($table, $first, $operator = null, $second = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->rightJoin($table, $first, $operator, $second);
            }
             
                /**
             * Add a "right join where" clause to the query.
             *
             * @param string $table
             * @param \Closure|string $first
             * @param string $operator
             * @param string $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function rightJoinWhere($table, $first, $operator, $second)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->rightJoinWhere($table, $first, $operator, $second);
            }
             
                /**
             * Add a subquery right join to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query
             * @param string $as
             * @param \Closure|string $first
             * @param string|null $operator
             * @param string|null $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function rightJoinSub($query, $as, $first, $operator = null, $second = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->rightJoinSub($query, $as, $first, $operator, $second);
            }
             
                /**
             * Add a "cross join" clause to the query.
             *
             * @param string $table
             * @param \Closure|string|null $first
             * @param string|null $operator
             * @param string|null $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function crossJoin($table, $first = null, $operator = null, $second = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->crossJoin($table, $first, $operator, $second);
            }
             
                /**
             * Add a subquery cross join to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query
             * @param string $as
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function crossJoinSub($query, $as)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->crossJoinSub($query, $as);
            }
             
                /**
             * Merge an array of where clauses and bindings.
             *
             * @param array $wheres
             * @param array $bindings
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function mergeWheres($wheres, $bindings)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->mergeWheres($wheres, $bindings);
            }
             
                /**
             * Prepare the value and operator for a where clause.
             *
             * @param string $value
             * @param string $operator
             * @param bool $useDefault
             * @return array 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function prepareValueAndOperator($value, $operator, $useDefault = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->prepareValueAndOperator($value, $operator, $useDefault);
            }
             
                /**
             * Add a "where" clause comparing two columns to the query.
             *
             * @param string|array $first
             * @param string|null $operator
             * @param string|null $second
             * @param string|null $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereColumn($first, $operator = null, $second = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereColumn($first, $operator, $second, $boolean);
            }
             
                /**
             * Add an "or where" clause comparing two columns to the query.
             *
             * @param string|array $first
             * @param string|null $operator
             * @param string|null $second
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereColumn($first, $operator = null, $second = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereColumn($first, $operator, $second);
            }
             
                /**
             * Add a raw where clause to the query.
             *
             * @param string $sql
             * @param mixed $bindings
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereRaw($sql, $bindings = [], $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereRaw($sql, $bindings, $boolean);
            }
             
                /**
             * Add a raw or where clause to the query.
             *
             * @param string $sql
             * @param mixed $bindings
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereRaw($sql, $bindings = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereRaw($sql, $bindings);
            }
             
                /**
             * Add a "where in" clause to the query.
             *
             * @param string $column
             * @param mixed $values
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereIn($column, $values, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereIn($column, $values, $boolean, $not);
            }
             
                /**
             * Add an "or where in" clause to the query.
             *
             * @param string $column
             * @param mixed $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereIn($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereIn($column, $values);
            }
             
                /**
             * Add a "where not in" clause to the query.
             *
             * @param string $column
             * @param mixed $values
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereNotIn($column, $values, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereNotIn($column, $values, $boolean);
            }
             
                /**
             * Add an "or where not in" clause to the query.
             *
             * @param string $column
             * @param mixed $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereNotIn($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereNotIn($column, $values);
            }
             
                /**
             * Add a "where in raw" clause for integer values to the query.
             *
             * @param string $column
             * @param \Illuminate\Contracts\Support\Arrayable|array $values
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereIntegerInRaw($column, $values, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereIntegerInRaw($column, $values, $boolean, $not);
            }
             
                /**
             * Add an "or where in raw" clause for integer values to the query.
             *
             * @param string $column
             * @param \Illuminate\Contracts\Support\Arrayable|array $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereIntegerInRaw($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereIntegerInRaw($column, $values);
            }
             
                /**
             * Add a "where not in raw" clause for integer values to the query.
             *
             * @param string $column
             * @param \Illuminate\Contracts\Support\Arrayable|array $values
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereIntegerNotInRaw($column, $values, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereIntegerNotInRaw($column, $values, $boolean);
            }
             
                /**
             * Add an "or where not in raw" clause for integer values to the query.
             *
             * @param string $column
             * @param \Illuminate\Contracts\Support\Arrayable|array $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereIntegerNotInRaw($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereIntegerNotInRaw($column, $values);
            }
             
                /**
             * Add a "where null" clause to the query.
             *
             * @param string|array $columns
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereNull($columns, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereNull($columns, $boolean, $not);
            }
             
                /**
             * Add an "or where null" clause to the query.
             *
             * @param string|array $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereNull($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereNull($column);
            }
             
                /**
             * Add a "where not null" clause to the query.
             *
             * @param string|array $columns
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereNotNull($columns, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereNotNull($columns, $boolean);
            }
             
                /**
             * Add a where between statement to the query.
             *
             * @param string|\Illuminate\Database\Query\Expression $column
             * @param \Illuminate\Database\Query\iterable $values
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereBetween($column, $values, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereBetween($column, $values, $boolean, $not);
            }
             
                /**
             * Add a where between statement using columns to the query.
             *
             * @param string $column
             * @param array $values
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereBetweenColumns($column, $values, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereBetweenColumns($column, $values, $boolean, $not);
            }
             
                /**
             * Add an or where between statement to the query.
             *
             * @param string $column
             * @param \Illuminate\Database\Query\iterable $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereBetween($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereBetween($column, $values);
            }
             
                /**
             * Add an or where between statement using columns to the query.
             *
             * @param string $column
             * @param array $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereBetweenColumns($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereBetweenColumns($column, $values);
            }
             
                /**
             * Add a where not between statement to the query.
             *
             * @param string $column
             * @param \Illuminate\Database\Query\iterable $values
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereNotBetween($column, $values, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereNotBetween($column, $values, $boolean);
            }
             
                /**
             * Add a where not between statement using columns to the query.
             *
             * @param string $column
             * @param array $values
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereNotBetweenColumns($column, $values, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereNotBetweenColumns($column, $values, $boolean);
            }
             
                /**
             * Add an or where not between statement to the query.
             *
             * @param string $column
             * @param \Illuminate\Database\Query\iterable $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereNotBetween($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereNotBetween($column, $values);
            }
             
                /**
             * Add an or where not between statement using columns to the query.
             *
             * @param string $column
             * @param array $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereNotBetweenColumns($column, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereNotBetweenColumns($column, $values);
            }
             
                /**
             * Add an "or where not null" clause to the query.
             *
             * @param string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereNotNull($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereNotNull($column);
            }
             
                /**
             * Add a "where date" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|null $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereDate($column, $operator, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereDate($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where date" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|null $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereDate($column, $operator, $value = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereDate($column, $operator, $value);
            }
             
                /**
             * Add a "where time" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|null $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereTime($column, $operator, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereTime($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where time" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|null $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereTime($column, $operator, $value = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereTime($column, $operator, $value);
            }
             
                /**
             * Add a "where day" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|int|null $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereDay($column, $operator, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereDay($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where day" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|int|null $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereDay($column, $operator, $value = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereDay($column, $operator, $value);
            }
             
                /**
             * Add a "where month" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|int|null $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereMonth($column, $operator, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereMonth($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where month" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|int|null $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereMonth($column, $operator, $value = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereMonth($column, $operator, $value);
            }
             
                /**
             * Add a "where year" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|int|null $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereYear($column, $operator, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereYear($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where year" statement to the query.
             *
             * @param string $column
             * @param string $operator
             * @param \DateTimeInterface|string|int|null $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereYear($column, $operator, $value = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereYear($column, $operator, $value);
            }
             
                /**
             * Add a nested where statement to the query.
             *
             * @param \Closure $callback
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereNested($callback, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereNested($callback, $boolean);
            }
             
                /**
             * Create a new query instance for nested where condition.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function forNestedWhere()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->forNestedWhere();
            }
             
                /**
             * Add another query builder as a nested where to the query builder.
             *
             * @param \Illuminate\Database\Query\Builder $query
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function addNestedWhereQuery($query, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->addNestedWhereQuery($query, $boolean);
            }
             
                /**
             * Add an exists clause to the query.
             *
             * @param \Closure $callback
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereExists($callback, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereExists($callback, $boolean, $not);
            }
             
                /**
             * Add an or exists clause to the query.
             *
             * @param \Closure $callback
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereExists($callback, $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereExists($callback, $not);
            }
             
                /**
             * Add a where not exists clause to the query.
             *
             * @param \Closure $callback
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereNotExists($callback, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereNotExists($callback, $boolean);
            }
             
                /**
             * Add a where not exists clause to the query.
             *
             * @param \Closure $callback
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereNotExists($callback)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereNotExists($callback);
            }
             
                /**
             * Add an exists clause to the query.
             *
             * @param \Illuminate\Database\Query\Builder $query
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function addWhereExistsQuery($query, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->addWhereExistsQuery($query, $boolean, $not);
            }
             
                /**
             * Adds a where condition using row values.
             *
             * @param array $columns
             * @param string $operator
             * @param array $values
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function whereRowValues($columns, $operator, $values, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereRowValues($columns, $operator, $values, $boolean);
            }
             
                /**
             * Adds an or where condition using row values.
             *
             * @param array $columns
             * @param string $operator
             * @param array $values
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereRowValues($columns, $operator, $values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereRowValues($columns, $operator, $values);
            }
             
                /**
             * Add a "where JSON contains" clause to the query.
             *
             * @param string $column
             * @param mixed $value
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereJsonContains($column, $value, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereJsonContains($column, $value, $boolean, $not);
            }
             
                /**
             * Add an "or where JSON contains" clause to the query.
             *
             * @param string $column
             * @param mixed $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereJsonContains($column, $value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereJsonContains($column, $value);
            }
             
                /**
             * Add a "where JSON not contains" clause to the query.
             *
             * @param string $column
             * @param mixed $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereJsonDoesntContain($column, $value, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereJsonDoesntContain($column, $value, $boolean);
            }
             
                /**
             * Add an "or where JSON not contains" clause to the query.
             *
             * @param string $column
             * @param mixed $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereJsonDoesntContain($column, $value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereJsonDoesntContain($column, $value);
            }
             
                /**
             * Add a clause that determines if a JSON path exists to the query.
             *
             * @param string $column
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereJsonContainsKey($column, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereJsonContainsKey($column, $boolean, $not);
            }
             
                /**
             * Add an "or" clause that determines if a JSON path exists to the query.
             *
             * @param string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereJsonContainsKey($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereJsonContainsKey($column);
            }
             
                /**
             * Add a clause that determines if a JSON path does not exist to the query.
             *
             * @param string $column
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereJsonDoesntContainKey($column, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereJsonDoesntContainKey($column, $boolean);
            }
             
                /**
             * Add an "or" clause that determines if a JSON path does not exist to the query.
             *
             * @param string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereJsonDoesntContainKey($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereJsonDoesntContainKey($column);
            }
             
                /**
             * Add a "where JSON length" clause to the query.
             *
             * @param string $column
             * @param mixed $operator
             * @param mixed $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereJsonLength($column, $operator, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereJsonLength($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or where JSON length" clause to the query.
             *
             * @param string $column
             * @param mixed $operator
             * @param mixed $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereJsonLength($column, $operator, $value = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereJsonLength($column, $operator, $value);
            }
             
                /**
             * Handles dynamic "where" clauses to the query.
             *
             * @param string $method
             * @param array $parameters
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function dynamicWhere($method, $parameters)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->dynamicWhere($method, $parameters);
            }
             
                /**
             * Add a "where fulltext" clause to the query.
             *
             * @param string|string[] $columns
             * @param string $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function whereFullText($columns, $value, $options = [], $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->whereFullText($columns, $value, $options, $boolean);
            }
             
                /**
             * Add a "or where fulltext" clause to the query.
             *
             * @param string|string[] $columns
             * @param string $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orWhereFullText($columns, $value, $options = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orWhereFullText($columns, $value, $options);
            }
             
                /**
             * Add a "group by" clause to the query.
             *
             * @param array|string $groups
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function groupBy(...$groups)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->groupBy(...$groups);
            }
             
                /**
             * Add a raw groupBy clause to the query.
             *
             * @param string $sql
             * @param array $bindings
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function groupByRaw($sql, $bindings = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->groupByRaw($sql, $bindings);
            }
             
                /**
             * Add a "having" clause to the query.
             *
             * @param \Closure|string $column
             * @param string|int|float|null $operator
             * @param string|int|float|null $value
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function having($column, $operator = null, $value = null, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->having($column, $operator, $value, $boolean);
            }
             
                /**
             * Add an "or having" clause to the query.
             *
             * @param \Closure|string $column
             * @param string|int|float|null $operator
             * @param string|int|float|null $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orHaving($column, $operator = null, $value = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orHaving($column, $operator, $value);
            }
             
                /**
             * Add a nested having statement to the query.
             *
             * @param \Closure $callback
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function havingNested($callback, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->havingNested($callback, $boolean);
            }
             
                /**
             * Add another query builder as a nested having to the query builder.
             *
             * @param \Illuminate\Database\Query\Builder $query
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function addNestedHavingQuery($query, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->addNestedHavingQuery($query, $boolean);
            }
             
                /**
             * Add a "having null" clause to the query.
             *
             * @param string|array $columns
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function havingNull($columns, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->havingNull($columns, $boolean, $not);
            }
             
                /**
             * Add an "or having null" clause to the query.
             *
             * @param string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orHavingNull($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orHavingNull($column);
            }
             
                /**
             * Add a "having not null" clause to the query.
             *
             * @param string|array $columns
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function havingNotNull($columns, $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->havingNotNull($columns, $boolean);
            }
             
                /**
             * Add an "or having not null" clause to the query.
             *
             * @param string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orHavingNotNull($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orHavingNotNull($column);
            }
             
                /**
             * Add a "having between " clause to the query.
             *
             * @param string $column
             * @param array $values
             * @param string $boolean
             * @param bool $not
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function havingBetween($column, $values, $boolean = 'and', $not = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->havingBetween($column, $values, $boolean, $not);
            }
             
                /**
             * Add a raw having clause to the query.
             *
             * @param string $sql
             * @param array $bindings
             * @param string $boolean
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function havingRaw($sql, $bindings = [], $boolean = 'and')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->havingRaw($sql, $bindings, $boolean);
            }
             
                /**
             * Add a raw or having clause to the query.
             *
             * @param string $sql
             * @param array $bindings
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orHavingRaw($sql, $bindings = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orHavingRaw($sql, $bindings);
            }
             
                /**
             * Add an "order by" clause to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column
             * @param string $direction
             * @return \Illuminate\Database\Query\Builder 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function orderBy($column, $direction = 'asc')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orderBy($column, $direction);
            }
             
                /**
             * Add a descending "order by" clause to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orderByDesc($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orderByDesc($column);
            }
             
                /**
             * Put the query's results in random order.
             *
             * @param string|int $seed
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function inRandomOrder($seed = '')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->inRandomOrder($seed);
            }
             
                /**
             * Add a raw "order by" clause to the query.
             *
             * @param string $sql
             * @param array $bindings
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function orderByRaw($sql, $bindings = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->orderByRaw($sql, $bindings);
            }
             
                /**
             * Alias to set the "offset" value of the query.
             *
             * @param int $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function skip($value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->skip($value);
            }
             
                /**
             * Set the "offset" value of the query.
             *
             * @param int $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function offset($value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->offset($value);
            }
             
                /**
             * Alias to set the "limit" value of the query.
             *
             * @param int $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function take($value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->take($value);
            }
             
                /**
             * Set the "limit" value of the query.
             *
             * @param int $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function limit($value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->limit($value);
            }
             
                /**
             * Set the limit and offset for a given page.
             *
             * @param int $page
             * @param int $perPage
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function forPage($page, $perPage = 15)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->forPage($page, $perPage);
            }
             
                /**
             * Constrain the query to the previous "page" of results before a given ID.
             *
             * @param int $perPage
             * @param int|null $lastId
             * @param string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function forPageBeforeId($perPage = 15, $lastId = 0, $column = 'id')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->forPageBeforeId($perPage, $lastId, $column);
            }
             
                /**
             * Constrain the query to the next "page" of results after a given ID.
             *
             * @param int $perPage
             * @param int|null $lastId
             * @param string $column
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->forPageAfterId($perPage, $lastId, $column);
            }
             
                /**
             * Remove all existing orders and optionally add a new order.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column
             * @param string $direction
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function reorder($column = null, $direction = 'asc')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->reorder($column, $direction);
            }
             
                /**
             * Add a union statement to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query
             * @param bool $all
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function union($query, $all = false)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->union($query, $all);
            }
             
                /**
             * Add a union all statement to the query.
             *
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function unionAll($query)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->unionAll($query);
            }
             
                /**
             * Lock the selected rows in the table.
             *
             * @param string|bool $value
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function lock($value = true)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->lock($value);
            }
             
                /**
             * Lock the selected rows in the table for updating.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function lockForUpdate()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->lockForUpdate();
            }
             
                /**
             * Share lock the selected rows in the table.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function sharedLock()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->sharedLock();
            }
             
                /**
             * Register a closure to be invoked before the query is executed.
             *
             * @param callable $callback
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function beforeQuery($callback)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->beforeQuery($callback);
            }
             
                /**
             * Invoke the "before query" modification callbacks.
             *
             * @return void 
             * @static 
             */ 
            public static function applyBeforeQueryCallbacks()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                $instance->applyBeforeQueryCallbacks();
            }
             
                /**
             * Get the SQL representation of the query.
             *
             * @return string 
             * @static 
             */ 
            public static function toSql()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->toSql();
            }
             
                /**
             * Get a single expression value from the first result of a query.
             *
             * @param string $expression
             * @param array $bindings
             * @return mixed 
             * @static 
             */ 
            public static function rawValue($expression, $bindings = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->rawValue($expression, $bindings);
            }
             
                /**
             * Get the count of the total records for the paginator.
             *
             * @param array $columns
             * @return int 
             * @static 
             */ 
            public static function getCountForPagination($columns = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->getCountForPagination($columns);
            }
             
                /**
             * Concatenate values of a given column as a string.
             *
             * @param string $column
             * @param string $glue
             * @return string 
             * @static 
             */ 
            public static function implode($column, $glue = '')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->implode($column, $glue);
            }
             
                /**
             * Determine if any rows exist for the current query.
             *
             * @return bool 
             * @static 
             */ 
            public static function exists()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->exists();
            }
             
                /**
             * Determine if no rows exist for the current query.
             *
             * @return bool 
             * @static 
             */ 
            public static function doesntExist()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->doesntExist();
            }
             
                /**
             * Execute the given callback if no rows exist for the current query.
             *
             * @param \Closure $callback
             * @return mixed 
             * @static 
             */ 
            public static function existsOr($callback)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->existsOr($callback);
            }
             
                /**
             * Execute the given callback if rows exist for the current query.
             *
             * @param \Closure $callback
             * @return mixed 
             * @static 
             */ 
            public static function doesntExistOr($callback)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->doesntExistOr($callback);
            }
             
                /**
             * Retrieve the "count" result of the query.
             *
             * @param string $columns
             * @return int 
             * @static 
             */ 
            public static function count($columns = '*')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->count($columns);
            }
             
                /**
             * Retrieve the minimum value of a given column.
             *
             * @param string $column
             * @return mixed 
             * @static 
             */ 
            public static function min($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->min($column);
            }
             
                /**
             * Retrieve the maximum value of a given column.
             *
             * @param string $column
             * @return mixed 
             * @static 
             */ 
            public static function max($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->max($column);
            }
             
                /**
             * Retrieve the sum of the values of a given column.
             *
             * @param string $column
             * @return mixed 
             * @static 
             */ 
            public static function sum($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->sum($column);
            }
             
                /**
             * Retrieve the average of the values of a given column.
             *
             * @param string $column
             * @return mixed 
             * @static 
             */ 
            public static function avg($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->avg($column);
            }
             
                /**
             * Alias for the "avg" method.
             *
             * @param string $column
             * @return mixed 
             * @static 
             */ 
            public static function average($column)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->average($column);
            }
             
                /**
             * Execute an aggregate function on the database.
             *
             * @param string $function
             * @param array $columns
             * @return mixed 
             * @static 
             */ 
            public static function aggregate($function, $columns = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->aggregate($function, $columns);
            }
             
                /**
             * Execute a numeric aggregate function on the database.
             *
             * @param string $function
             * @param array $columns
             * @return float|int 
             * @static 
             */ 
            public static function numericAggregate($function, $columns = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->numericAggregate($function, $columns);
            }
             
                /**
             * Insert new records into the database.
             *
             * @param array $values
             * @return bool 
             * @static 
             */ 
            public static function insert($values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->insert($values);
            }
             
                /**
             * Insert new records into the database while ignoring errors.
             *
             * @param array $values
             * @return int 
             * @static 
             */ 
            public static function insertOrIgnore($values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->insertOrIgnore($values);
            }
             
                /**
             * Insert a new record and get the value of the primary key.
             *
             * @param array $values
             * @param string|null $sequence
             * @return int 
             * @static 
             */ 
            public static function insertGetId($values, $sequence = null)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->insertGetId($values, $sequence);
            }
             
                /**
             * Insert new records into the table using a subquery.
             *
             * @param array $columns
             * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query
             * @return int 
             * @static 
             */ 
            public static function insertUsing($columns, $query)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->insertUsing($columns, $query);
            }
             
                /**
             * Update records in a PostgreSQL database using the update from syntax.
             *
             * @param array $values
             * @return int 
             * @static 
             */ 
            public static function updateFrom($values)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->updateFrom($values);
            }
             
                /**
             * Insert or update a record matching the attributes, and fill it with values.
             *
             * @param array $attributes
             * @param array $values
             * @return bool 
             * @static 
             */ 
            public static function updateOrInsert($attributes, $values = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->updateOrInsert($attributes, $values);
            }
             
                /**
             * Increment the given column's values by the given amounts.
             *
             * @param array<string, float|int|numeric-string> $columns
             * @param array<string, mixed> $extra
             * @return int 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function incrementEach($columns, $extra = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->incrementEach($columns, $extra);
            }
             
                /**
             * Decrement the given column's values by the given amounts.
             *
             * @param array<string, float|int|numeric-string> $columns
             * @param array<string, mixed> $extra
             * @return int 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function decrementEach($columns, $extra = [])
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->decrementEach($columns, $extra);
            }
             
                /**
             * Run a truncate statement on the table.
             *
             * @return void 
             * @static 
             */ 
            public static function truncate()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                $instance->truncate();
            }
             
                /**
             * Create a raw database expression.
             *
             * @param mixed $value
             * @return \Illuminate\Database\Query\Expression 
             * @static 
             */ 
            public static function raw($value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->raw($value);
            }
             
                /**
             * Get the current query value bindings in a flattened array.
             *
             * @return array 
             * @static 
             */ 
            public static function getBindings()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->getBindings();
            }
             
                /**
             * Get the raw array of bindings.
             *
             * @return array 
             * @static 
             */ 
            public static function getRawBindings()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->getRawBindings();
            }
             
                /**
             * Set the bindings on the query builder.
             *
             * @param array $bindings
             * @param string $type
             * @return \Illuminate\Database\Query\Builder 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function setBindings($bindings, $type = 'where')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->setBindings($bindings, $type);
            }
             
                /**
             * Add a binding to the query.
             *
             * @param mixed $value
             * @param string $type
             * @return \Illuminate\Database\Query\Builder 
             * @throws \InvalidArgumentException
             * @static 
             */ 
            public static function addBinding($value, $type = 'where')
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->addBinding($value, $type);
            }
             
                /**
             * Cast the given binding value.
             *
             * @param mixed $value
             * @return mixed 
             * @static 
             */ 
            public static function castBinding($value)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->castBinding($value);
            }
             
                /**
             * Merge an array of bindings into our bindings.
             *
             * @param \Illuminate\Database\Query\Builder $query
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function mergeBindings($query)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->mergeBindings($query);
            }
             
                /**
             * Remove all of the expressions from a list of bindings.
             *
             * @param array $bindings
             * @return array 
             * @static 
             */ 
            public static function cleanBindings($bindings)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->cleanBindings($bindings);
            }
             
                /**
             * Get the database query processor instance.
             *
             * @return \Illuminate\Database\Query\Processors\Processor 
             * @static 
             */ 
            public static function getProcessor()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->getProcessor();
            }
             
                /**
             * Get the query grammar instance.
             *
             * @return \Illuminate\Database\Query\Grammars\Grammar 
             * @static 
             */ 
            public static function getGrammar()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->getGrammar();
            }
             
                /**
             * Use the "write" PDO connection when executing the query.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function useWritePdo()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->useWritePdo();
            }
             
                /**
             * Clone the query without the given properties.
             *
             * @param array $properties
             * @return static 
             * @static 
             */ 
            public static function cloneWithout($properties)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->cloneWithout($properties);
            }
             
                /**
             * Clone the query without the given bindings.
             *
             * @param array $except
             * @return static 
             * @static 
             */ 
            public static function cloneWithoutBindings($except)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->cloneWithoutBindings($except);
            }
             
                /**
             * Dump the current SQL and bindings.
             *
             * @return \Illuminate\Database\Query\Builder 
             * @static 
             */ 
            public static function dump()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->dump();
            }
             
                /**
             * Die and dump the current SQL and bindings.
             *
             * @return \Illuminate\Database\Query\never 
             * @static 
             */ 
            public static function dd()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->dd();
            }
             
                /**
             * Explains the query.
             *
             * @return \Illuminate\Support\Collection 
             * @static 
             */ 
            public static function explain()
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->explain();
            }
             
                /**
             * Register a custom macro.
             *
             * @param string $name
             * @param object|callable $macro
             * @return void 
             * @static 
             */ 
            public static function macro($name, $macro)
            {
                                \Illuminate\Database\Query\Builder::macro($name, $macro);
            }
             
                /**
             * Mix another object into the class.
             *
             * @param object $mixin
             * @param bool $replace
             * @return void 
             * @throws \ReflectionException
             * @static 
             */ 
            public static function mixin($mixin, $replace = true)
            {
                                \Illuminate\Database\Query\Builder::mixin($mixin, $replace);
            }
             
                /**
             * Flush the existing macros.
             *
             * @return void 
             * @static 
             */ 
            public static function flushMacros()
            {
                                \Illuminate\Database\Query\Builder::flushMacros();
            }
             
                /**
             * Dynamically handle calls to the class.
             *
             * @param string $method
             * @param array $parameters
             * @return mixed 
             * @throws \BadMethodCallException
             * @static 
             */ 
            public static function macroCall($method, $parameters)
            {
                                /** @var \Illuminate\Database\Query\Builder $instance */
                                return $instance->macroCall($method, $parameters);
            }
                    }
            class Event extends \Illuminate\Support\Facades\Event {}
            class File extends \Illuminate\Support\Facades\File {}
            class Gate extends \Illuminate\Support\Facades\Gate {}
            class Hash extends \Illuminate\Support\Facades\Hash {}
            class Http extends \Illuminate\Support\Facades\Http {}
            class Js extends \Illuminate\Support\Js {}
            class Lang extends \Illuminate\Support\Facades\Lang {}
            class Log extends \Illuminate\Support\Facades\Log {}
            class Mail extends \Illuminate\Support\Facades\Mail {}
            class Notification extends \Illuminate\Support\Facades\Notification {}
            class Password extends \Illuminate\Support\Facades\Password {}
            class Queue extends \Illuminate\Support\Facades\Queue {}
            class RateLimiter extends \Illuminate\Support\Facades\RateLimiter {}
            class Redirect extends \Illuminate\Support\Facades\Redirect {}
            class Request extends \Illuminate\Support\Facades\Request {}
            class Response extends \Illuminate\Support\Facades\Response {}
            class Route extends \Illuminate\Support\Facades\Route {}
            class Schema extends \Illuminate\Support\Facades\Schema {}
            class Session extends \Illuminate\Support\Facades\Session {}
            class Storage extends \Illuminate\Support\Facades\Storage {}
            class Str extends \Illuminate\Support\Str {}
            class URL extends \Illuminate\Support\Facades\URL {}
            class Validator extends \Illuminate\Support\Facades\Validator {}
            class View extends \Illuminate\Support\Facades\View {}
            class Debugbar extends \Barryvdh\Debugbar\Facades\Debugbar {}
            class Excel extends \Maatwebsite\Excel\Facades\Excel {}
            class FFMpeg extends \ProtoneMedia\LaravelFFMpeg\Support\FFMpeg {}
            class Image extends \Intervention\Image\Facades\Image {}
            class LaravelTranslationsChecker extends \Larswiegers\LaravelTranslationsChecker\LaravelTranslationsCheckerFacade {}
            class Livewire extends \Livewire\Livewire {}
            class LaravelLocalization extends \Mcamara\LaravelLocalization\Facades\LaravelLocalization {}
            class Animation extends \ProtoneMedia\Splade\Facades\Animation {}
            class SEO extends \ProtoneMedia\Splade\Facades\SEO {}
            class Splade extends \ProtoneMedia\Splade\Facades\Splade {}
            class Toast extends \ProtoneMedia\Splade\Facades\Toast {}
            class Flare extends \Spatie\LaravelIgnition\Facades\Flare {}
            class DataTables extends \Yajra\DataTables\Facades\DataTables {}
     
}





      
      

-----------------------------------------------


      File name :../UniSoftLaravel/tests/TestCase.php

      
-----------------------------------------------


      <?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/tests/CreatesApplication.php

      
-----------------------------------------------


      <?php

namespace Tests;

use Illuminate\Contracts\Console\Kernel;

trait CreatesApplication
{
    /**
     * Creates the application.
     *
     * @return \Illuminate\Foundation\Application
     */
    public function createApplication()
    {
        $app = require __DIR__.'/../bootstrap/app.php';

        $app->make(Kernel::class)->bootstrap();

        return $app;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/web.php

      
-----------------------------------------------


      <?php

use App\Helpers\helpers;
use App\Models\Payment;
use Illuminate\Support\Str;
use App\Helpers\PrintHelper;
use App\Http\Controllers\Dashboard\Admin\HomeController;
/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

use App\Models\PaymentOrder;
use App\Models\Registration;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Dashboard\Admin\PaymentController;
use Illuminate\Http\Request;
use Inertia\Inertia;

Route::group([],function() {
    Route::get('/vue',function() {
        return Inertia::render('Home');
    });
});
// Route::domain('app.project.dev')->group([],function( ) {
    Route::get('/a', function() {
        dd(44);
    })->domain('app.project.dev');
// });
Route::get('/', function () {

    return redirect()->route('dashboard.admin.login.index');

});//end of fun


Route::get('redirect_to_module', [HomeController::class,'redirectToModule'])->name('redirect-to-module');


Route::any('payments/print_invoice/{payment}',[PaymentController::class,'printInvoice'])->name('payments.printInvoice');
Route::get('privacy', function(){
    return view('home.privacy');
});


// Route::get('/welcome', function () {

//     return view('welcome');

// });

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/vue-elearning.php

      
-----------------------------------------------


      
<?php

use App\Helpers\helpers;
use App\Models\Payment;
use Illuminate\Support\Str;
use App\Helpers\PrintHelper;
use App\Http\Controllers\Api\StudentAuthController;
/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

use App\Models\PaymentOrder;
use App\Models\Registration;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Dashboard\Admin\PaymentController;
use App\Http\Controllers\Elearning\StudentAuthController as ElearningStudentAuthController;
use App\Http\Controllers\Elearning\StudentController;
use App\Http\Controllers\Elearning\TeacherLectureController;
use App\Http\Controllers\VueElearning\AuthController;
use App\Http\Controllers\VueElearning\ElearningHomeController;
use App\Http\Controllers\VueElearning\Teacher\ElearningTeacherController;
use App\Http\Livewire\Elearning\Teacher\Courses\CoursesIndex;
use Illuminate\Http\Request;
use Inertia\Inertia;

Route::group(['prefix' => 'vue-elearning',  'as' => 'vue-elearning.'], function () {
    // Student
    Route::group(['as' => 'student.' , 'prefix' => 'student'], function() {

    Route::group(['middleware' => 'auth:student'], function() {

        Route::get('/',[ElearningHomeController::class,'index'])->name('home');
    }) ;

        Route::get('/login',function() {
            return Inertia::render('Student/Login');
        })->name('login');

        Route::post('login',[AuthController::class,'login']);

        });

    // Teacher
    Route::group(['as' => 'teacher.' , 'prefix' => 'teacher' , 'middleware' => 'auth:admin'], function() {

    Route::get('/',[ElearningTeacherController::class,'index'])->name('home');
    Route::post('lectures',[ElearningTeacherController::class,'createLecture'])->name('create_lecture');
    Route::put('lectures/{lecture}',[ElearningTeacherController::class,'updateLecture'])->name('update_lecture');
    Route::delete('lectures/{lecture}',[ElearningTeacherController::class,'deleteLecture'])->name('delete_lecture');
    Route::post('lectures/{lecture}/upload_video',[ElearningTeacherController::class,'uploadVideo'])->name('upload_video');
    Route::post('lectures/{lecture}/upload_attachment',[ElearningTeacherController::class,'uploadAttachment'])->name('upload_attachment');

    Route::get('lectures/{lecture}/attachments/{attachment}/download',[ElearningTeacherController::class,'downloadAttachment'])->name('download_attachment');
    Route::delete('lectures/{lecture}/attachments/{attachment}',[ElearningTeacherController::class,'deleteAttachment'])->name('delete_attachment');

    Route::post('lectures/{lecture}/assignment',[ElearningTeacherController::class,'saveAssignment'])->name('save_assignment');

    Route::get('lectures/{lecture}/attendance',[ElearningTeacherController::class,'getAttendance'])->name('get_attendance');
    Route::post('lectures/{lecture}/attendance',[ElearningTeacherController::class,'setAttendance'])->name('set_attendance');

        });


});





      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/elearning.php

      
-----------------------------------------------


      <?php

use App\Helpers\helpers;
use App\Models\Payment;
use Illuminate\Support\Str;
use App\Helpers\PrintHelper;
use App\Http\Controllers\Api\StudentAuthController;
/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

use App\Models\PaymentOrder;
use App\Models\Registration;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Dashboard\Admin\PaymentController;
use App\Http\Controllers\Elearning\StudentAuthController as ElearningStudentAuthController;
use App\Http\Controllers\Elearning\StudentController;
use App\Http\Controllers\Elearning\TeacherLectureController;
use App\Http\Livewire\Elearning\Teacher\Courses\CoursesIndex;
use Illuminate\Http\Request;


Route::group(['prefix' => 'elearning',  'as' => 'elearning.'], function () {
    Route::get('/teacher',[TeacherLectureController::class, 'index'])->name('teacher.index');
    Route::get('/teacher/charts',[TeacherLectureController::class, 'charts'])->name('teacher.index.charts');
    Route::get('/teacher/courses_dashboard',[TeacherLectureController::class, 'coursesDashboard'])->name('teacher.courses-dashboard');
    Route::get('/teacher/reports',[TeacherLectureController::class, 'reports'])->name('teacher.reports');
    Route::get('teacher/courses', [TeacherLectureController::class, 'courses'])->name('teacher.courses.index');
    Route::get('teacher/courses/{course}', [TeacherLectureController::class, 'course'])->name('teacher.courses.show');
});

Route::get('elearning/student/login', [ElearningStudentAuthController::class, 'index'])->name('elearning.student.login.get');
Route::post('elearning/student/login', [ElearningStudentAuthController::class, 'login'])->name('elearning.student.login.post');

Route::group(['prefix' => 'elearning/student', 'middleware' => 'auth:student' , 'as' => 'elearning.'], function () {
    Route::get('index', [StudentController::class, 'index'])->name('student.courses.index');
});

Route::domain('a.project.dev')->group(function() {

    Route::get('/',function() {
        dd(343);
    });
});

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/console.php

      
-----------------------------------------------


      <?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

/*
|--------------------------------------------------------------------------
| Console Routes
|--------------------------------------------------------------------------
|
| This file is where you may define all of your Closure based console
| commands. Each Closure is bound to a command instance allowing a
| simple approach to interacting with each command's IO methods.
|
*/

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/channels.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Facades\Broadcast;

/*
|--------------------------------------------------------------------------
| Broadcast Channels
|--------------------------------------------------------------------------
|
| Here you may register all of the event broadcasting channels that your
| application supports. The given channel authorization callbacks are
| used to check if an authenticated user can listen to the channel.
|
*/

Broadcast::channel('App.Models.User.{id}', function ($user, $id) {
    return (int) $user->id === (int) $id;
});

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/api.php

      
-----------------------------------------------


      <?php

use App\Http\Controllers\Api\ParentAuthController;
use App\Http\Controllers\Api\StudentAuthController;
use App\Http\Controllers\Api\StudentController;
use App\Http\Controllers\VueElearning\Teacher\ElearningTeacherController;
use App\Models\Student;
use Illuminate\Support\Facades\Route;

Route::post('login', [StudentAuthController::class, 'login'])->name('login');
Route::post('register', [StudentAuthController::class, 'register']);
//Route::post('verifiy/code', [StudentAuthController::class, 'verification']);
Route::post('send/code', [StudentAuthController::class, 'reSendVer']);
Route::post('parent/send/code', [ParentAuthController::class, 'reSendVer']);

Route::post('img', [StudentController::class, 'img']);


Route::group(['middleware' => 'auth:api'], function () {
    Route::get('profile', [StudentController::class, 'profile']);
    Route::post('update/profile', [StudentController::class, 'setProfile']);
    Route::get('payment', [StudentController::class, 'payment']);
    Route::get('courses', [StudentController::class, 'courses']);
    Route::get('result', [StudentController::class, 'result']);
    Route::get('parent/students', [ParentAuthController::class, 'students']);
});
//--------------------------- Parent -------------------
Route::post('parent/register', [ParentAuthController::class, 'register']);



Route::group(['prefix' => 'vue-elearning',  'as' => 'vue-elearning.' , 'middleware' => 'auth:admin'], function () {
  Route::group(['as' => 'teacher.' , 'prefix' => 'teacher' , ], function() {
    // Route::post('lectures',[ElearningTeacherController::class,'createLecture'])->name('create_lecture');
    // Route::put('lectures/{lecture}',[ElearningTeacherController::class,'updateLecture'])->name('update_lecture');
  });
});

Route::group(['prefix' => 'telegram',   ], function () {
    Route::get('students' , function() {
        $students = Student::has('registration')
            ->limit(20)
            ->get()
        ->pluck('full_name');
        return ['students' => $students];
    });
});


      
      

-----------------------------------------------


      File name :../UniSoftLaravel/public/index.php

      
-----------------------------------------------


      <?php

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Check If The Application Is Under Maintenance
|--------------------------------------------------------------------------
|
| If the application is in maintenance / demo mode via the "down" command
| we will load this file so that any pre-rendered content can be shown
| instead of starting the framework, which could cause an exception.
|
*/

if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader for
| this application. We just need to utilize it! We'll simply require it
| into the script here so we don't need to manually load our classes.
|
*/

require __DIR__.'/../vendor/autoload.php';

/*
|--------------------------------------------------------------------------
| Run The Application
|--------------------------------------------------------------------------
|
| Once we have the application, we can handle the incoming request using
| the application's HTTP kernel. Then, we will send the response back
| to this client's browser, allowing them to enjoy our application.
|
*/

$app = require_once __DIR__.'/../bootstrap/app.php';

$kernel = $app->make(Kernel::class);

$response = $kernel->handle(
    $request = Request::capture()
)->send();

$kernel->terminate($request, $response);

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/view.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | View Storage Paths
    |--------------------------------------------------------------------------
    |
    | Most templating systems load templates from disk. Here you may specify
    | an array of paths that should be checked for your views. Of course
    | the usual Laravel view path has already been registered for you.
    |
    */

    'paths' => [
        resource_path('views'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Compiled View Path
    |--------------------------------------------------------------------------
    |
    | This option determines where all the compiled Blade templates will be
    | stored for your application. Typically, this is within the storage
    | directory. However, as usual, you are free to change this value.
    |
    */

    'compiled' => env(
        'VIEW_COMPILED_PATH',
        realpath(storage_path('framework/views'))
    ),

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/tinker.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Console Commands
    |--------------------------------------------------------------------------
    |
    | This option allows you to add additional Artisan commands that should
    | be available within the Tinker environment. Once the command is in
    | this array you may execute the command in Tinker using its name.
    |
    */

    'commands' => [
        // App\Console\Commands\ExampleCommand::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | Auto Aliased Classes
    |--------------------------------------------------------------------------
    |
    | Tinker will not automatically alias classes in your vendor namespaces
    | but you may explicitly allow a subset of classes to get aliased by
    | adding the names of each of those classes to the following list.
    |
    */

    'alias' => [
        //
    ],

    /*
    |--------------------------------------------------------------------------
    | Classes That Should Not Be Aliased
    |--------------------------------------------------------------------------
    |
    | Typically, Tinker automatically aliases classes as you require them in
    | Tinker. However, you may wish to never alias certain classes, which
    | you may accomplish by listing the classes in the following array.
    |
    */

    'dont_alias' => [
        'App\Nova',
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/telescope.php

      
-----------------------------------------------


      <?php

use Laravel\Telescope\Http\Middleware\Authorize;
use Laravel\Telescope\Watchers;

return [

    /*
    |--------------------------------------------------------------------------
    | Telescope Domain
    |--------------------------------------------------------------------------
    |
    | This is the subdomain where Telescope will be accessible from. If the
    | setting is null, Telescope will reside under the same domain as the
    | application. Otherwise, this value will be used as the subdomain.
    |
    */

    'domain' => env('TELESCOPE_DOMAIN', null),

    /*
    |--------------------------------------------------------------------------
    | Telescope Path
    |--------------------------------------------------------------------------
    |
    | This is the URI path where Telescope will be accessible from. Feel free
    | to change this path to anything you like. Note that the URI will not
    | affect the paths of its internal API that aren't exposed to users.
    |
    */

    'path' => env('TELESCOPE_PATH', 'telescope'),

    /*
    |--------------------------------------------------------------------------
    | Telescope Storage Driver
    |--------------------------------------------------------------------------
    |
    | This configuration options determines the storage driver that will
    | be used to store Telescope's data. In addition, you may set any
    | custom options as needed by the particular driver you choose.
    |
    */

    'driver' => env('TELESCOPE_DRIVER', 'database'),

    'storage' => [
        'database' => [
            'connection' => env('DB_CONNECTION', 'mysql'),
            'chunk' => 1000,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Telescope Master Switch
    |--------------------------------------------------------------------------
    |
    | This option may be used to disable all Telescope watchers regardless
    | of their individual configuration, which simply provides a single
    | and convenient way to enable or disable Telescope data storage.
    |
    */

    'enabled' => env('TELESCOPE_ENABLED', true),

    /*
    |--------------------------------------------------------------------------
    | Telescope Route Middleware
    |--------------------------------------------------------------------------
    |
    | These middleware will be assigned to every Telescope route, giving you
    | the chance to add your own middleware to this list or change any of
    | the existing middleware. Or, you can simply stick with this list.
    |
    */

    'middleware' => [
        'web',
        Authorize::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | Allowed / Ignored Paths & Commands
    |--------------------------------------------------------------------------
    |
    | The following array lists the URI paths and Artisan commands that will
    | not be watched by Telescope. In addition to this list, some Laravel
    | commands, like migrations and queue commands, are always ignored.
    |
    */

    'only_paths' => [
        // 'api/*'
    ],

    'ignore_paths' => [
        'nova-api*',
    ],

    'ignore_commands' => [
        //
    ],

    /*
    |--------------------------------------------------------------------------
    | Telescope Watchers
    |--------------------------------------------------------------------------
    |
    | The following array lists the "watchers" that will be registered with
    | Telescope. The watchers gather the application's profile data when
    | a request or task is executed. Feel free to customize this list.
    |
    */

    'watchers' => [
        Watchers\BatchWatcher::class => env('TELESCOPE_BATCH_WATCHER', true),

        Watchers\CacheWatcher::class => [
            'enabled' => env('TELESCOPE_CACHE_WATCHER', true),
            'hidden' => [],
        ],

        Watchers\ClientRequestWatcher::class => env('TELESCOPE_CLIENT_REQUEST_WATCHER', true),

        Watchers\CommandWatcher::class => [
            'enabled' => env('TELESCOPE_COMMAND_WATCHER', true),
            'ignore' => [],
        ],

        Watchers\DumpWatcher::class => [
            'enabled' => env('TELESCOPE_DUMP_WATCHER', true),
            'always' => env('TELESCOPE_DUMP_WATCHER_ALWAYS', false),
        ],

        Watchers\EventWatcher::class => [
            'enabled' => env('TELESCOPE_EVENT_WATCHER', true),
            'ignore' => [],
        ],

        Watchers\ExceptionWatcher::class => env('TELESCOPE_EXCEPTION_WATCHER', true),

        Watchers\GateWatcher::class => [
            'enabled' => env('TELESCOPE_GATE_WATCHER', true),
            'ignore_abilities' => [],
            'ignore_packages' => true,
            'ignore_paths' => [],
        ],

        Watchers\JobWatcher::class => env('TELESCOPE_JOB_WATCHER', true),

        Watchers\LogWatcher::class => [
            'enabled' => env('TELESCOPE_LOG_WATCHER', true),
            'level' => 'error',
        ],

        Watchers\MailWatcher::class => env('TELESCOPE_MAIL_WATCHER', true),

        Watchers\ModelWatcher::class => [
            'enabled' => env('TELESCOPE_MODEL_WATCHER', true),
            'events' => ['eloquent.*'],
            'hydrations' => true,
        ],

        Watchers\NotificationWatcher::class => env('TELESCOPE_NOTIFICATION_WATCHER', true),

        Watchers\QueryWatcher::class => [
            'enabled' => env('TELESCOPE_QUERY_WATCHER', true),
            'ignore_packages' => true,
            'ignore_paths' => [],
            'slow' => 100,
        ],

        Watchers\RedisWatcher::class => env('TELESCOPE_REDIS_WATCHER', true),

        Watchers\RequestWatcher::class => [
            'enabled' => env('TELESCOPE_REQUEST_WATCHER', true),
            'size_limit' => env('TELESCOPE_RESPONSE_SIZE_LIMIT', 64),
            'ignore_http_methods' => [],
            'ignore_status_codes' => [],
        ],

        Watchers\ScheduleWatcher::class => env('TELESCOPE_SCHEDULE_WATCHER', true),
        Watchers\ViewWatcher::class => env('TELESCOPE_VIEW_WATCHER', true),
    ],
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/session.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default session "driver" that will be used on
    | requests. By default, we will use the lightweight native driver but
    | you may specify any of the other wonderful drivers provided here.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to immediately expire on the browser closing, set that option.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it is stored. All encryption will be run
    | automatically by Laravel and you can use the Session like normal.
    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When using the native session driver, we need a location where session
    | files may be stored. A default has been set for you but a different
    | location may be specified. This is only needed for file sessions.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION', null),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table we
    | should use to manage the sessions. Of course, a sensible default is
    | provided for you; however, you are free to change this as needed.
    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | While using one of the framework's cache driven session backends you may
    | list a cache store that should be used for these sessions. This value
    | must match with one of the application's configured cache "stores".
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE', null),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the cookie used to identify a session
    | instance by ID. The name specified here will get used every time a
    | new session cookie is created by the framework for every driver.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application but you are free to change this when necessary.
    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | Here you may change the domain of the cookie used to identify a session
    | in your application. This will determine which domains the cookie is
    | available to in your application. A sensible default has been set.
    |
    */

    'domain' => env('SESSION_DOMAIN', null),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. You are free to modify this option if needed.
    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" since this is a secure default value.
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => 'lax',

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/services.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'mailgun' => [
        'domain' => env('MAILGUN_DOMAIN'),
        'secret' => env('MAILGUN_SECRET'),
        'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),
    ],

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/sanctum.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        env('APP_URL') ? ','.parse_url(env('APP_URL'), PHP_URL_HOST) : ''
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. If this value is null, personal access tokens do
    | not expire. This won't tweak the lifetime of first-party sessions.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'verify_csrf_token' => App\Http\Middleware\VerifyCsrfToken::class,
        'encrypt_cookies' => App\Http\Middleware\EncryptCookies::class,
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/queue.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue API supports an assortment of back-ends via a single
    | API, giving you convenient access to each back-end using the same
    | syntax for every one. Here you may define a default connection.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'sync'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection information for each server that
    | is used by your application. A default configuration has been added
    | for each back-end shipped with Laravel. You are free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'jobs',
            'queue' => 'default',
            'retry_after' => 90,
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => 'localhost',
            'queue' => 'default',
            'retry_after' => 90,
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => 90,
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control which database and table are used to store the jobs that
    | have failed. You may change them to any database / table you wish.
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'failed_jobs',
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/querydetector.php

      
-----------------------------------------------


      <?php

return [
    /*
     * Enable or disable the query detection.
     * If this is set to "null", the app.debug config value will be used.
     */
    'enabled' => env('QUERY_DETECTOR_ENABLED', null),

    /*
     * Threshold level for the N+1 query detection. If a relation query will be
     * executed more then this amount, the detector will notify you about it.
     */
    'threshold' => (int) env('QUERY_DETECTOR_THRESHOLD', 1),

    /*
     * Here you can whitelist model relations.
     *
     * Right now, you need to define the model relation both as the class name and the attribute name on the model.
     * So if an "Author" model would have a "posts" relation that points to a "Post" class, you need to add both
     * the "posts" attribute and the "Post::class", since the relation can get resolved in multiple ways.
     */
    'except' => [
        //Author::class => [
        //    Post::class,
        //    'posts',
        //]
    ],

    /*
     * Here you can set a specific log channel to write to
     * in case you are trying to isolate queries or have a lot
     * going on in the laravel.log. Defaults to laravel.log though.
     */
    'log_channel' => env('QUERY_DETECTOR_LOG_CHANNEL', 'daily'),

    /*
     * Define the output format that you want to use. Multiple classes are supported.
     * Available options are:
     *
     * Alert:
     * Displays an alert on the website
     * \BeyondCode\QueryDetector\Outputs\Alert::class
     *
     * Console:
     * Writes the N+1 queries into your browsers console log
     * \BeyondCode\QueryDetector\Outputs\Console::class
     *
     * Clockwork: (make sure you have the itsgoingd/clockwork package installed)
     * Writes the N+1 queries warnings to Clockwork log
     * \BeyondCode\QueryDetector\Outputs\Clockwork::class
     *
     * Debugbar: (make sure you have the barryvdh/laravel-debugbar package installed)
     * Writes the N+1 queries into a custom messages collector of Debugbar
     * \BeyondCode\QueryDetector\Outputs\Debugbar::class
     *
     * JSON:
     * Writes the N+1 queries into the response body of your JSON responses
     * \BeyondCode\QueryDetector\Outputs\Json::class
     *
     * Log:
     * Writes the N+1 queries into the Laravel.log file
     * \BeyondCode\QueryDetector\Outputs\Log::class
     */
    'output' => [
        \BeyondCode\QueryDetector\Outputs\Alert::class,
        \BeyondCode\QueryDetector\Outputs\Log::class,
    ]
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/permission.php

      
-----------------------------------------------


      <?php

return [

    'models' => [

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your permissions. Of course, it
         * is often just the "Permission" model but you may use whatever you like.
         *
         * The model you want to use as a Permission model needs to implement the
         * `Spatie\Permission\Contracts\Permission` contract.
         */

        'permission' => Spatie\Permission\Models\Permission::class,

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your roles. Of course, it
         * is often just the "Role" model but you may use whatever you like.
         *
         * The model you want to use as a Role model needs to implement the
         * `Spatie\Permission\Contracts\Role` contract.
         */

        'role' => Spatie\Permission\Models\Role::class,

    ],

    'table_names' => [

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'roles' => 'roles',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your permissions. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'permissions' => 'permissions',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your models permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_permissions' => 'model_has_permissions',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your models roles. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_roles' => 'model_has_roles',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'role_has_permissions' => 'role_has_permissions',
    ],

    'column_names' => [
        /*
         * Change this if you want to name the related pivots other than defaults
         */
        'role_pivot_key' => null, //default 'role_id',
        'permission_pivot_key' => null, //default 'permission_id',

        /*
         * Change this if you want to name the related model primary key other than
         * `model_id`.
         *
         * For example, this would be nice if your primary keys are all UUIDs. In
         * that case, name this `model_uuid`.
         */

        'model_morph_key' => 'model_id',

        /*
         * Change this if you want to use the teams feature and your related model's
         * foreign key is other than `team_id`.
         */

        'team_foreign_key' => 'team_id',
    ],

    /*
     * When set to true, the method for checking permissions will be registered on the gate.
     * Set this to false, if you want to implement custom logic for checking permissions.
     */

    'register_permission_check_method' => true,

    /*
     * When set to true the package implements teams using the 'team_foreign_key'. If you want
     * the migrations to register the 'team_foreign_key', you must set this to true
     * before doing the migration. If you already did the migration then you must make a new
     * migration to also add 'team_foreign_key' to 'roles', 'model_has_roles', and
     * 'model_has_permissions'(view the latest version of package's migration file)
     */

    'teams' => false,

    /*
     * When set to true, the required permission names are added to the exception
     * message. This could be considered an information leak in some contexts, so
     * the default setting is false here for optimum safety.
     */

    'display_permission_in_exception' => false,

    /*
     * When set to true, the required role names are added to the exception
     * message. This could be considered an information leak in some contexts, so
     * the default setting is false here for optimum safety.
     */

    'display_role_in_exception' => false,

    /*
     * By default wildcard permission lookups are disabled.
     */

    'enable_wildcard_permission' => false,

    'cache' => [

        /*
         * By default all permissions are cached for 24 hours to speed up performance.
         * When permissions or roles are updated the cache is flushed automatically.
         */

        'expiration_time' => \DateInterval::createFromDateString('24 hours'),

        /*
         * The cache key used to store all permissions.
         */

        'key' => 'spatie.permission.cache',

        /*
         * You may optionally indicate a specific cache driver to use for permission and
         * role caching using any of the `store` drivers listed in the cache.php config
         * file. Using 'default' here means to use the `default` set in cache.php.
         */

        'store' => 'default',
    ],
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/pdf.php

      
-----------------------------------------------


      <?php

return [
	'mode'                  => 'utf-8',
	'format'                => 'A4',
	'author'                => '',
	'subject'               => '',
	'keywords'              => '',
	'creator'               => 'Laravel Pdf',
	'display_mode'          => 'fullpage',
	'tempDir'               => base_path('../temp/'),
	'pdf_a'                 => false,
	'pdf_a_auto'            => false,
	'icc_profile_path'      => '',
    'useOTL' => 0xFF,
'useKashida' => 75,


 'arabic-font' => [
     'R'  => 'arabic-font.ttf',    // regular font
     'B'  => 'arabic-font.ttf',          // optional: bold font
     'I'  => 'arabic-font-Light.ttf',    // optional: italic font
     'BI' => 'arabic-font.ttf',           // optional: bold-italic font
     'useOTL' => 0xFF,
     'useKashida' => 75,
]


];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/media-library.php

      
-----------------------------------------------


      <?php

return [

    /*
     * The disk on which to store added files and derived images by default. Choose
     * one or more of the disks you've configured in config/filesystems.php.
     */
    'disk_name' => env('MEDIA_DISK', 'public'),

    /*
     * The maximum file size of an item in bytes.
     * Adding a larger file will result in an exception.
     */
    'max_file_size' => 1024 * 1024 * 10, // 10MB

    /*
     * This queue will be used to generate derived and responsive images.
     * Leave empty to use the default queue.
     */
    'queue_name' => '',

    /*
     * By default all conversions will be performed on a queue.
     */
    'queue_conversions_by_default' => env('QUEUE_CONVERSIONS_BY_DEFAULT', true),

    /*
     * The fully qualified class name of the media model.
     */
    'media_model' => Spatie\MediaLibrary\MediaCollections\Models\Media::class,

    /*
     * The fully qualified class name of the model used for temporary uploads.
     *
     * This model is only used in Media Library Pro (https://medialibrary.pro)
     */
    'temporary_upload_model' => Spatie\MediaLibraryPro\Models\TemporaryUpload::class,

    /*
     * When enabled, Media Library Pro will only process temporary uploads there were uploaded
     * in the same session. You can opt to disable this for stateless usage of
     * the pro components.
     */
    'enable_temporary_uploads_session_affinity' => true,

    /*
     * When enabled, Media Library pro will generate thumbnails for uploaded file.
     */
    'generate_thumbnails_for_temporary_uploads' => true,

    /*
     * This is the class that is responsible for naming generated files.
     */
    'file_namer' => Spatie\MediaLibrary\Support\FileNamer\DefaultFileNamer::class,

    /*
     * The class that contains the strategy for determining a media file's path.
     */
    'path_generator' => Spatie\MediaLibrary\Support\PathGenerator\DefaultPathGenerator::class,

    /*
     * When urls to files get generated, this class will be called. Use the default
     * if your files are stored locally above the site root or on s3.
     */
    'url_generator' => Spatie\MediaLibrary\Support\UrlGenerator\DefaultUrlGenerator::class,

    /*
     * Moves media on updating to keep path consistent. Enable it only with a custom
     * PathGenerator that uses, for example, the media UUID.
     */
    'moves_media_on_update' => false,

    /*
     * Whether to activate versioning when urls to files get generated.
     * When activated, this attaches a ?v=xx query string to the URL.
     */
    'version_urls' => false,

    /*
     * The media library will try to optimize all converted images by removing
     * metadata and applying a little bit of compression. These are
     * the optimizers that will be used by default.
     */
    'image_optimizers' => [
        Spatie\ImageOptimizer\Optimizers\Jpegoptim::class => [
            '-m85', // set maximum quality to 85%
            '--force', // ensure that progressive generation is always done also if a little bigger
            '--strip-all', // this strips out all text information such as comments and EXIF data
            '--all-progressive', // this will make sure the resulting image is a progressive one
        ],
        Spatie\ImageOptimizer\Optimizers\Pngquant::class => [
            '--force', // required parameter for this package
        ],
        Spatie\ImageOptimizer\Optimizers\Optipng::class => [
            '-i0', // this will result in a non-interlaced, progressive scanned image
            '-o2', // this set the optimization level to two (multiple IDAT compression trials)
            '-quiet', // required parameter for this package
        ],
        Spatie\ImageOptimizer\Optimizers\Svgo::class => [
            '--disable=cleanupIDs', // disabling because it is known to cause troubles
        ],
        Spatie\ImageOptimizer\Optimizers\Gifsicle::class => [
            '-b', // required parameter for this package
            '-O3', // this produces the slowest but best results
        ],
        Spatie\ImageOptimizer\Optimizers\Cwebp::class => [
            '-m 6', // for the slowest compression method in order to get the best compression.
            '-pass 10', // for maximizing the amount of analysis pass.
            '-mt', // multithreading for some speed improvements.
            '-q 90', //quality factor that brings the least noticeable changes.
        ],
    ],

    /*
     * These generators will be used to create an image of media files.
     */
    'image_generators' => [
        Spatie\MediaLibrary\Conversions\ImageGenerators\Image::class,
        Spatie\MediaLibrary\Conversions\ImageGenerators\Webp::class,
        Spatie\MediaLibrary\Conversions\ImageGenerators\Pdf::class,
        Spatie\MediaLibrary\Conversions\ImageGenerators\Svg::class,
        Spatie\MediaLibrary\Conversions\ImageGenerators\Video::class,
    ],

    /*
     * The path where to store temporary files while performing image conversions.
     * If set to null, storage_path('media-library/temp') will be used.
     */
    'temporary_directory_path' => null,

    /*
     * The engine that should perform the image conversions.
     * Should be either `gd` or `imagick`.
     */
    'image_driver' => env('IMAGE_DRIVER', 'gd'),

    /*
     * FFMPEG & FFProbe binaries paths, only used if you try to generate video
     * thumbnails and have installed the php-ffmpeg/php-ffmpeg composer
     * dependency.
     */
    'ffmpeg_path' => env('FFMPEG_PATH', '/usr/bin/ffmpeg'),
    'ffprobe_path' => env('FFPROBE_PATH', '/usr/bin/ffprobe'),

    /*
     * Here you can override the class names of the jobs used by this package. Make sure
     * your custom jobs extend the ones provided by the package.
     */
    'jobs' => [
        'perform_conversions' => Spatie\MediaLibrary\Conversions\Jobs\PerformConversionsJob::class,
        'generate_responsive_images' => Spatie\MediaLibrary\ResponsiveImages\Jobs\GenerateResponsiveImagesJob::class,
    ],

    /*
     * When using the addMediaFromUrl method you may want to replace the default downloader.
     * This is particularly useful when the url of the image is behind a firewall and
     * need to add additional flags, possibly using curl.
     */
    'media_downloader' => Spatie\MediaLibrary\Downloaders\DefaultDownloader::class,

    'remote' => [
        /*
         * Any extra headers that should be included when uploading media to
         * a remote disk. Even though supported headers may vary between
         * different drivers, a sensible default has been provided.
         *
         * Supported by S3: CacheControl, Expires, StorageClass,
         * ServerSideEncryption, Metadata, ACL, ContentEncoding
         */
        'extra_headers' => [
            'CacheControl' => 'max-age=604800',
        ],
    ],

    'responsive_images' => [
        /*
         * This class is responsible for calculating the target widths of the responsive
         * images. By default we optimize for filesize and create variations that each are 20%
         * smaller than the previous one. More info in the documentation.
         *
         * https://docs.spatie.be/laravel-medialibrary/v9/advanced-usage/generating-responsive-images
         */
        'width_calculator' => Spatie\MediaLibrary\ResponsiveImages\WidthCalculator\FileSizeOptimizedWidthCalculator::class,

        /*
         * By default rendering media to a responsive image will add some javascript and a tiny placeholder.
         * This ensures that the browser can already determine the correct layout.
         */
        'use_tiny_placeholders' => true,

        /*
         * This class will generate the tiny placeholder used for progressive image loading. By default
         * the media library will use a tiny blurred jpg image.
         */
        'tiny_placeholder_generator' => Spatie\MediaLibrary\ResponsiveImages\TinyPlaceholderGenerator\Blurred::class,
    ],

    /*
     * When enabling this option, a route will be registered that will enable
     * the Media Library Pro Vue and React components to move uploaded files
     * in a S3 bucket to their right place.
     */
    'enable_vapor_uploads' => env('ENABLE_MEDIA_LIBRARY_VAPOR_UPLOADS', false),

    /*
     * When converting Media instances to response the media library will add
     * a `loading` attribute to the `img` tag. Here you can set the default
     * value of that attribute.
     *
     * Possible values: 'lazy', 'eager', 'auto' or null if you don't want to set any loading instruction.
     *
     * More info: https://css-tricks.com/native-lazy-loading/
     */
    'default_loading_attribute_value' => null,

    /*
     * You can specify a prefix for that is used for storing all media.
     * If you set this to `/my-subdir`, all your media will be stored in a `/my-subdir` directory.
     */
    'prefix' => env('MEDIA_PREFIX', ''),
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/mail.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send any email
    | messages sent by your application. Alternative mailers may be setup
    | and used as needed; however, this mailer will be used by default.
    |
    */

    'default' => env('MAIL_MAILER', 'smtp'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers to be used while
    | sending an e-mail. You will specify which one you are using for your
    | mailers below. You are free to add additional mailers as required.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses",
    |            "postmark", "log", "array", "failover"
    |
    */

    'mailers' => [
        'smtp' => [
            'transport' => 'smtp',
            'host' => env('MAIL_HOST', 'smtp.mailgun.org'),
            'port' => env('MAIL_PORT', 587),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'auth_mode' => null,
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'mailgun' => [
            'transport' => 'mailgun',
        ],

        'postmark' => [
            'transport' => 'postmark',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -t -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all e-mails sent by your application to be sent from
    | the same address. Here, you may specify a name and address that is
    | used globally for all e-mails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Markdown Mail Settings
    |--------------------------------------------------------------------------
    |
    | If you are using Markdown based email rendering, you may configure your
    | theme and component paths here, allowing you to customize the design
    | of the emails. Or, you may simply stick with the Laravel defaults!
    |
    */

    'markdown' => [
        'theme' => 'default',

        'paths' => [
            resource_path('views/vendor/mail'),
        ],
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/logging.php

      
-----------------------------------------------


      <?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that gets used when writing
    | messages to the logs. The name specified in this option should match
    | one of the channels defined in the "channels" configuration array.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Out of
    | the box, Laravel uses the Monolog PHP logging library. This gives
    | you a variety of powerful log handlers / formatters to utilize.
    |
    | Available Drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog",
    |                    "custom", "stack"
    |
    */

    'channels' => [
        'stack' => [
            'driver' => 'stack',
            'channels' => ['single'],
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => 14,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => 'Laravel Log',
            'emoji' => ':boom:',
            'level' => env('LOG_LEVEL', 'critical'),
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => SyslogUdpHandler::class,
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
            ],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/livewire.php

      
-----------------------------------------------


      <?php

return [

    /*
    |---------------------------------------------------------------------------
    | Class Namespace
    |---------------------------------------------------------------------------
    |
    | This value sets the root class namespace for Livewire component classes in
    | your application. This value will change where component auto-discovery
    | finds components. It's also referenced by the file creation commands.
    |
    */

    'class_namespace' => 'App\\Livewire',

    /*
    |---------------------------------------------------------------------------
    | View Path
    |---------------------------------------------------------------------------
    |
    | This value is used to specify where Livewire component Blade templates are
    | stored when running file creation commands like `artisan make:livewire`.
    | It is also used if you choose to omit a component's render() method.
    |
    */

    'view_path' => resource_path('views/livewire'),

    /*
    |---------------------------------------------------------------------------
    | Layout
    |---------------------------------------------------------------------------
    | The view that will be used as the layout when rendering a single component
    | as an entire page via `Route::get('/post/create', CreatePost::class);`.
    | In this case, the view returned by CreatePost will render into $slot.
    |
    */

    'layout' => 'layoutss.main',

    /*
    |---------------------------------------------------------------------------
    | Temporary File Uploads
    |---------------------------------------------------------------------------
    |
    | Livewire handles file uploads by storing uploads in a temporary directory
    | before the file is stored permanently. All file uploads are directed to
    | a global endpoint for temporary storage. You may configure this below:
    |
    */

    'temporary_file_upload' => [
        'disk' => null,        // Example: 'local', 's3'              | Default: 'default'
        'rules' => null,       // Example: ['file', 'mimes:png,jpg']  | Default: ['required', 'file', 'max:12288'] (12MB)
        'directory' => null,   // Example: 'tmp'                      | Default: 'livewire-tmp'
        'middleware' => null,  // Example: 'throttle:5,1'             | Default: 'throttle:60,1'
        'preview_mimes' => [   // Supported file types for temporary pre-signed file URLs...
            'png', 'gif', 'bmp', 'svg', 'wav', 'mp4',
            'mov', 'avi', 'wmv', 'mp3', 'm4a',
            'jpg', 'jpeg', 'mpga', 'webp', 'wma',
        ],
        'max_upload_time' => 5, // Max duration (in minutes) before an upload is invalidated...
    ],

    /*
    |---------------------------------------------------------------------------
    | Render On Redirect
    |---------------------------------------------------------------------------
    |
    | This value determines if Livewire will run a component's `render()` method
    | after a redirect has been triggered using something like `redirect(...)`
    | Setting this to true will render the view once more before redirecting
    |
    */

    'render_on_redirect' => false,

    /*
    |---------------------------------------------------------------------------
    | Eloquent Model Binding
    |---------------------------------------------------------------------------
    |
    | Previous versions of Livewire supported binding directly to eloquent model
    | properties using wire:model by default. However, this behavior has been
    | deemed too "magical" and has therefore been put under a feature flag.
    |
    */

    'legacy_model_binding' => true,

    /*
    |---------------------------------------------------------------------------
    | Auto-inject Frontend Assets
    |---------------------------------------------------------------------------
    |
    | By default, Livewire automatically injects its JavaScript and CSS into the
    | <head> and <body> of pages containing Livewire components. By disabling
    | this behavior, you need to use @livewireStyles and @livewireScripts.
    |
    */

    'inject_assets' => true,

    /*
    |---------------------------------------------------------------------------
    | Navigate (SPA mode)
    |---------------------------------------------------------------------------
    |
    | By adding `wire:navigate` to links in your Livewire application, Livewire
    | will prevent the default link handling and instead request those pages
    | via AJAX, creating an SPA-like effect. Configure this behavior here.
    |
    */

    'navigate' => [
        'show_progress_bar' => true,
    ],

    /*
    |---------------------------------------------------------------------------
    | HTML Morph Markers
    |---------------------------------------------------------------------------
    |
    | Livewire intelligently "morphs" existing HTML into the newly rendered HTML
    | after each update. To make this process more reliable, Livewire injects
    | "markers" into the rendered Blade surrounding @if, @class & @foreach.
    |
    */

    'inject_morph_markers' => true,

    /*
    |---------------------------------------------------------------------------
    | Pagination Theme
    |---------------------------------------------------------------------------
    |
    | When enabling Livewire's pagination feature by using the `WithPagination`
    | trait, Livewire will use Tailwind templates to render pagination views
    | on the page. If you want Bootstrap CSS, you can specify: "bootstrap"
    |
    */

    'pagination_theme' => 'bootstrap',
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/livewire-alert.php

      
-----------------------------------------------


      <?php

/*
 * For more details about the configuration, see:
 * https://sweetalert2.github.io/#configuration
 */
return [
    'alert' => [
        'position' => 'center',
        'timer' => false,
        'toast' => false,
        'text' => null,
        'timerProgressBar' => true,
        'showCancelButton' => false,
        'showConfirmButton' => true,
        'width' => '100%',
        'backdrop' => 'rgba(0 , 0 , 0 , .4)',
    ],
    'confirm' => [
        'icon' => 'warning',
        'position' => 'center',
        'toast' => false,
        'timer' => null,
        'showConfirmButton' => true,
        'showCancelButton' => true,
        'cancelButtonText' => 'No',
        'confirmButtonColor' => '#3085d6',
        'cancelButtonColor' => '#d33'
    ]
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/laravellocalization.php

      
-----------------------------------------------


      <?php

return [

    // Uncomment the languages that your site supports - or add new ones.
    // These are sorted by the native name, which is the order you might show them in a language selector.
    // Regional languages are sorted by their base language, so "British English" sorts as "English, British"
    'supportedLocales' => [
        //'ace'         => ['name' => 'Achinese',               'script' => 'Latn', 'native' => 'Aceh', 'regional' => ''],
        //'af'          => ['name' => 'Afrikaans',              'script' => 'Latn', 'native' => 'Afrikaans', 'regional' => 'af_ZA'],
        //'agq'         => ['name' => 'Aghem',                  'script' => 'Latn', 'native' => 'Aghem', 'regional' => ''],
        //'ak'          => ['name' => 'Akan',                   'script' => 'Latn', 'native' => 'Akan', 'regional' => 'ak_GH'],
        //'an'          => ['name' => 'Aragonese',              'script' => 'Latn', 'native' => 'aragonés', 'regional' => 'an_ES'],
        //'cch'         => ['name' => 'Atsam',                  'script' => 'Latn', 'native' => 'Atsam', 'regional' => ''],
        //'gn'          => ['name' => 'Guaraní',                'script' => 'Latn', 'native' => 'Avañe’ẽ', 'regional' => ''],
        //'ae'          => ['name' => 'Avestan',                'script' => 'Latn', 'native' => 'avesta', 'regional' => ''],
        //'ay'          => ['name' => 'Aymara',                 'script' => 'Latn', 'native' => 'aymar aru', 'regional' => 'ay_PE'],
        //'az'          => ['name' => 'Azerbaijani (Latin)',    'script' => 'Latn', 'native' => 'azərbaycanca', 'regional' => 'az_AZ'],
        //'id'          => ['name' => 'Indonesian',             'script' => 'Latn', 'native' => 'Bahasa Indonesia', 'regional' => 'id_ID'],
        //'ms'          => ['name' => 'Malay',                  'script' => 'Latn', 'native' => 'Bahasa Melayu', 'regional' => 'ms_MY'],
        //'bm'          => ['name' => 'Bambara',                'script' => 'Latn', 'native' => 'bamanakan', 'regional' => ''],
        //'jv'          => ['name' => 'Javanese (Latin)',       'script' => 'Latn', 'native' => 'Basa Jawa', 'regional' => ''],
        //'su'          => ['name' => 'Sundanese',              'script' => 'Latn', 'native' => 'Basa Sunda', 'regional' => ''],
        //'bh'          => ['name' => 'Bihari',                 'script' => 'Latn', 'native' => 'Bihari', 'regional' => ''],
        //'bi'          => ['name' => 'Bislama',                'script' => 'Latn', 'native' => 'Bislama', 'regional' => ''],
        //'nb'          => ['name' => 'Norwegian Bokmål',       'script' => 'Latn', 'native' => 'Bokmål', 'regional' => 'nb_NO'],
        //'bs'          => ['name' => 'Bosnian',                'script' => 'Latn', 'native' => 'bosanski', 'regional' => 'bs_BA'],
        //'br'          => ['name' => 'Breton',                 'script' => 'Latn', 'native' => 'brezhoneg', 'regional' => 'br_FR'],
        //'ca'          => ['name' => 'Catalan',                'script' => 'Latn', 'native' => 'català', 'regional' => 'ca_ES'],
        //'ch'          => ['name' => 'Chamorro',               'script' => 'Latn', 'native' => 'Chamoru', 'regional' => ''],
        //'ny'          => ['name' => 'Chewa',                  'script' => 'Latn', 'native' => 'chiCheŵa', 'regional' => ''],
        //'kde'         => ['name' => 'Makonde',                'script' => 'Latn', 'native' => 'Chimakonde', 'regional' => ''],
        //'sn'          => ['name' => 'Shona',                  'script' => 'Latn', 'native' => 'chiShona', 'regional' => ''],
        //'co'          => ['name' => 'Corsican',               'script' => 'Latn', 'native' => 'corsu', 'regional' => ''],
        //'cy'          => ['name' => 'Welsh',                  'script' => 'Latn', 'native' => 'Cymraeg', 'regional' => 'cy_GB'],
        //'da'          => ['name' => 'Danish',                 'script' => 'Latn', 'native' => 'dansk', 'regional' => 'da_DK'],
        //'se'          => ['name' => 'Northern Sami',          'script' => 'Latn', 'native' => 'davvisámegiella', 'regional' => 'se_NO'],
        //'de'          => ['name' => 'German',                 'script' => 'Latn', 'native' => 'Deutsch', 'regional' => 'de_DE'],
        //'luo'         => ['name' => 'Luo',                    'script' => 'Latn', 'native' => 'Dholuo', 'regional' => ''],
        //'nv'          => ['name' => 'Navajo',                 'script' => 'Latn', 'native' => 'Diné bizaad', 'regional' => ''],
        //'dua'         => ['name' => 'Duala',                  'script' => 'Latn', 'native' => 'duálá', 'regional' => ''],
        //'et'          => ['name' => 'Estonian',               'script' => 'Latn', 'native' => 'eesti', 'regional' => 'et_EE'],
        //'na'          => ['name' => 'Nauru',                  'script' => 'Latn', 'native' => 'Ekakairũ Naoero', 'regional' => ''],
        //'guz'         => ['name' => 'Ekegusii',               'script' => 'Latn', 'native' => 'Ekegusii', 'regional' => ''],
        'en'          => ['name' => 'English',                'script' => 'Latn', 'native' => 'English', 'regional' => 'en_GB'],
        //'en-AU'       => ['name' => 'Australian English',     'script' => 'Latn', 'native' => 'Australian English', 'regional' => 'en_AU'],
        //'en-GB'       => ['name' => 'British English',        'script' => 'Latn', 'native' => 'British English', 'regional' => 'en_GB'],
        //'en-CA'       => ['name' => 'Canadian English',       'script' => 'Latn', 'native' => 'Canadian English', 'regional' => 'en_CA'],
        //'en-US'       => ['name' => 'U.S. English',           'script' => 'Latn', 'native' => 'U.S. English', 'regional' => 'en_US'],
        // 'es'          => ['name' => 'Spanish',                'script' => 'Latn', 'native' => 'español', 'regional' => 'es_ES'],
        //'eo'          => ['name' => 'Esperanto',              'script' => 'Latn', 'native' => 'esperanto', 'regional' => ''],
        //'eu'          => ['name' => 'Basque',                 'script' => 'Latn', 'native' => 'euskara', 'regional' => 'eu_ES'],
        //'ewo'         => ['name' => 'Ewondo',                 'script' => 'Latn', 'native' => 'ewondo', 'regional' => ''],
        //'ee'          => ['name' => 'Ewe',                    'script' => 'Latn', 'native' => 'eʋegbe', 'regional' => ''],
        //'fil'         => ['name' => 'Filipino',               'script' => 'Latn', 'native' => 'Filipino', 'regional' => 'fil_PH'],
        //'fr'          => ['name' => 'French',                 'script' => 'Latn', 'native' => 'français', 'regional' => 'fr_FR'],
        //'fr-CA'       => ['name' => 'Canadian French',        'script' => 'Latn', 'native' => 'français canadien', 'regional' => 'fr_CA'],
        //'fy'          => ['name' => 'Western Frisian',        'script' => 'Latn', 'native' => 'frysk', 'regional' => 'fy_DE'],
        //'fur'         => ['name' => 'Friulian',               'script' => 'Latn', 'native' => 'furlan', 'regional' => 'fur_IT'],
        //'fo'          => ['name' => 'Faroese',                'script' => 'Latn', 'native' => 'føroyskt', 'regional' => 'fo_FO'],
        //'gaa'         => ['name' => 'Ga',                     'script' => 'Latn', 'native' => 'Ga', 'regional' => ''],
        //'ga'          => ['name' => 'Irish',                  'script' => 'Latn', 'native' => 'Gaeilge', 'regional' => 'ga_IE'],
        //'gv'          => ['name' => 'Manx',                   'script' => 'Latn', 'native' => 'Gaelg', 'regional' => 'gv_GB'],
        //'sm'          => ['name' => 'Samoan',                 'script' => 'Latn', 'native' => 'Gagana fa’a Sāmoa', 'regional' => ''],
        //'gl'          => ['name' => 'Galician',               'script' => 'Latn', 'native' => 'galego', 'regional' => 'gl_ES'],
        //'ki'          => ['name' => 'Kikuyu',                 'script' => 'Latn', 'native' => 'Gikuyu', 'regional' => ''],
        //'gd'          => ['name' => 'Scottish Gaelic',        'script' => 'Latn', 'native' => 'Gàidhlig', 'regional' => 'gd_GB'],
        //'ha'          => ['name' => 'Hausa',                  'script' => 'Latn', 'native' => 'Hausa', 'regional' => 'ha_NG'],
        //'bez'         => ['name' => 'Bena',                   'script' => 'Latn', 'native' => 'Hibena', 'regional' => ''],
        //'ho'          => ['name' => 'Hiri Motu',              'script' => 'Latn', 'native' => 'Hiri Motu', 'regional' => ''],
        //'hr'          => ['name' => 'Croatian',               'script' => 'Latn', 'native' => 'hrvatski', 'regional' => 'hr_HR'],
        //'bem'         => ['name' => 'Bemba',                  'script' => 'Latn', 'native' => 'Ichibemba', 'regional' => 'bem_ZM'],
        //'io'          => ['name' => 'Ido',                    'script' => 'Latn', 'native' => 'Ido', 'regional' => ''],
        //'ig'          => ['name' => 'Igbo',                   'script' => 'Latn', 'native' => 'Igbo', 'regional' => 'ig_NG'],
        //'rn'          => ['name' => 'Rundi',                  'script' => 'Latn', 'native' => 'Ikirundi', 'regional' => ''],
        //'ia'          => ['name' => 'Interlingua',            'script' => 'Latn', 'native' => 'interlingua', 'regional' => 'ia_FR'],
        //'iu-Latn'     => ['name' => 'Inuktitut (Latin)',      'script' => 'Latn', 'native' => 'Inuktitut', 'regional' => 'iu_CA'],
        //'sbp'         => ['name' => 'Sileibi',                'script' => 'Latn', 'native' => 'Ishisangu', 'regional' => ''],
        //'nd'          => ['name' => 'North Ndebele',          'script' => 'Latn', 'native' => 'isiNdebele', 'regional' => ''],
        //'nr'          => ['name' => 'South Ndebele',          'script' => 'Latn', 'native' => 'isiNdebele', 'regional' => 'nr_ZA'],
        //'xh'          => ['name' => 'Xhosa',                  'script' => 'Latn', 'native' => 'isiXhosa', 'regional' => 'xh_ZA'],
        //'zu'          => ['name' => 'Zulu',                   'script' => 'Latn', 'native' => 'isiZulu', 'regional' => 'zu_ZA'],
        //'it'          => ['name' => 'Italian',                'script' => 'Latn', 'native' => 'italiano', 'regional' => 'it_IT'],
        //'ik'          => ['name' => 'Inupiaq',                'script' => 'Latn', 'native' => 'Iñupiaq', 'regional' => 'ik_CA'],
        //'dyo'         => ['name' => 'Jola-Fonyi',             'script' => 'Latn', 'native' => 'joola', 'regional' => ''],
        //'kea'         => ['name' => 'Kabuverdianu',           'script' => 'Latn', 'native' => 'kabuverdianu', 'regional' => ''],
        //'kaj'         => ['name' => 'Jju',                    'script' => 'Latn', 'native' => 'Kaje', 'regional' => ''],
        //'mh'          => ['name' => 'Marshallese',            'script' => 'Latn', 'native' => 'Kajin M̧ajeļ', 'regional' => 'mh_MH'],
        //'kl'          => ['name' => 'Kalaallisut',            'script' => 'Latn', 'native' => 'kalaallisut', 'regional' => 'kl_GL'],
        //'kln'         => ['name' => 'Kalenjin',               'script' => 'Latn', 'native' => 'Kalenjin', 'regional' => ''],
        //'kr'          => ['name' => 'Kanuri',                 'script' => 'Latn', 'native' => 'Kanuri', 'regional' => ''],
        //'kcg'         => ['name' => 'Tyap',                   'script' => 'Latn', 'native' => 'Katab', 'regional' => ''],
        //'kw'          => ['name' => 'Cornish',                'script' => 'Latn', 'native' => 'kernewek', 'regional' => 'kw_GB'],
        //'naq'         => ['name' => 'Nama',                   'script' => 'Latn', 'native' => 'Khoekhoegowab', 'regional' => ''],
        //'rof'         => ['name' => 'Rombo',                  'script' => 'Latn', 'native' => 'Kihorombo', 'regional' => ''],
        //'kam'         => ['name' => 'Kamba',                  'script' => 'Latn', 'native' => 'Kikamba', 'regional' => ''],
        //'kg'          => ['name' => 'Kongo',                  'script' => 'Latn', 'native' => 'Kikongo', 'regional' => ''],
        //'jmc'         => ['name' => 'Machame',                'script' => 'Latn', 'native' => 'Kimachame', 'regional' => ''],
        //'rw'          => ['name' => 'Kinyarwanda',            'script' => 'Latn', 'native' => 'Kinyarwanda', 'regional' => 'rw_RW'],
        //'asa'         => ['name' => 'Kipare',                 'script' => 'Latn', 'native' => 'Kipare', 'regional' => ''],
        //'rwk'         => ['name' => 'Rwa',                    'script' => 'Latn', 'native' => 'Kiruwa', 'regional' => ''],
        //'saq'         => ['name' => 'Samburu',                'script' => 'Latn', 'native' => 'Kisampur', 'regional' => ''],
        //'ksb'         => ['name' => 'Shambala',               'script' => 'Latn', 'native' => 'Kishambaa', 'regional' => ''],
        //'swc'         => ['name' => 'Congo Swahili',          'script' => 'Latn', 'native' => 'Kiswahili ya Kongo', 'regional' => ''],
        //'sw'          => ['name' => 'Swahili',                'script' => 'Latn', 'native' => 'Kiswahili', 'regional' => 'sw_KE'],
        //'dav'         => ['name' => 'Dawida',                 'script' => 'Latn', 'native' => 'Kitaita', 'regional' => ''],
        //'teo'         => ['name' => 'Teso',                   'script' => 'Latn', 'native' => 'Kiteso', 'regional' => ''],
        //'khq'         => ['name' => 'Koyra Chiini',           'script' => 'Latn', 'native' => 'Koyra ciini', 'regional' => ''],
        //'ses'         => ['name' => 'Songhay',                'script' => 'Latn', 'native' => 'Koyraboro senni', 'regional' => ''],
        //'mfe'         => ['name' => 'Morisyen',               'script' => 'Latn', 'native' => 'kreol morisien', 'regional' => ''],
        //'ht'          => ['name' => 'Haitian',                'script' => 'Latn', 'native' => 'Kreyòl ayisyen', 'regional' => 'ht_HT'],
        //'kj'          => ['name' => 'Kuanyama',               'script' => 'Latn', 'native' => 'Kwanyama', 'regional' => ''],
        //'ksh'         => ['name' => 'Kölsch',                 'script' => 'Latn', 'native' => 'Kölsch', 'regional' => ''],
        //'ebu'         => ['name' => 'Kiembu',                 'script' => 'Latn', 'native' => 'Kĩembu', 'regional' => ''],
        //'mer'         => ['name' => 'Kimîîru',                'script' => 'Latn', 'native' => 'Kĩmĩrũ', 'regional' => ''],
        //'lag'         => ['name' => 'Langi',                  'script' => 'Latn', 'native' => 'Kɨlaangi', 'regional' => ''],
        //'lah'         => ['name' => 'Lahnda',                 'script' => 'Latn', 'native' => 'Lahnda', 'regional' => ''],
        //'la'          => ['name' => 'Latin',                  'script' => 'Latn', 'native' => 'latine', 'regional' => ''],
        //'lv'          => ['name' => 'Latvian',                'script' => 'Latn', 'native' => 'latviešu', 'regional' => 'lv_LV'],
        //'to'          => ['name' => 'Tongan',                 'script' => 'Latn', 'native' => 'lea fakatonga', 'regional' => ''],
        //'lt'          => ['name' => 'Lithuanian',             'script' => 'Latn', 'native' => 'lietuvių', 'regional' => 'lt_LT'],
        //'li'          => ['name' => 'Limburgish',             'script' => 'Latn', 'native' => 'Limburgs', 'regional' => 'li_BE'],
        //'ln'          => ['name' => 'Lingala',                'script' => 'Latn', 'native' => 'lingála', 'regional' => ''],
        //'lg'          => ['name' => 'Ganda',                  'script' => 'Latn', 'native' => 'Luganda', 'regional' => 'lg_UG'],
        //'luy'         => ['name' => 'Oluluyia',               'script' => 'Latn', 'native' => 'Luluhia', 'regional' => ''],
        //'lb'          => ['name' => 'Luxembourgish',          'script' => 'Latn', 'native' => 'Lëtzebuergesch', 'regional' => 'lb_LU'],
        //'hu'          => ['name' => 'Hungarian',              'script' => 'Latn', 'native' => 'magyar', 'regional' => 'hu_HU'],
        //'mgh'         => ['name' => 'Makhuwa-Meetto',         'script' => 'Latn', 'native' => 'Makua', 'regional' => ''],
        //'mg'          => ['name' => 'Malagasy',               'script' => 'Latn', 'native' => 'Malagasy', 'regional' => 'mg_MG'],
        //'mt'          => ['name' => 'Maltese',                'script' => 'Latn', 'native' => 'Malti', 'regional' => 'mt_MT'],
        //'mtr'         => ['name' => 'Mewari',                 'script' => 'Latn', 'native' => 'Mewari', 'regional' => ''],
        //'mua'         => ['name' => 'Mundang',                'script' => 'Latn', 'native' => 'Mundang', 'regional' => ''],
        //'mi'          => ['name' => 'Māori',                  'script' => 'Latn', 'native' => 'Māori', 'regional' => 'mi_NZ'],
        //'nl'          => ['name' => 'Dutch',                  'script' => 'Latn', 'native' => 'Nederlands', 'regional' => 'nl_NL'],
        //'nmg'         => ['name' => 'Kwasio',                 'script' => 'Latn', 'native' => 'ngumba', 'regional' => ''],
        //'yav'         => ['name' => 'Yangben',                'script' => 'Latn', 'native' => 'nuasue', 'regional' => ''],
        //'nn'          => ['name' => 'Norwegian Nynorsk',      'script' => 'Latn', 'native' => 'nynorsk', 'regional' => 'nn_NO'],
        //'oc'          => ['name' => 'Occitan',                'script' => 'Latn', 'native' => 'occitan', 'regional' => 'oc_FR'],
        //'ang'         => ['name' => 'Old English',            'script' => 'Runr', 'native' => 'Old English', 'regional' => ''],
        //'xog'         => ['name' => 'Soga',                   'script' => 'Latn', 'native' => 'Olusoga', 'regional' => ''],
        //'om'          => ['name' => 'Oromo',                  'script' => 'Latn', 'native' => 'Oromoo', 'regional' => 'om_ET'],
        //'ng'          => ['name' => 'Ndonga',                 'script' => 'Latn', 'native' => 'OshiNdonga', 'regional' => ''],
        //'hz'          => ['name' => 'Herero',                 'script' => 'Latn', 'native' => 'Otjiherero', 'regional' => ''],
        //'uz-Latn'     => ['name' => 'Uzbek (Latin)',          'script' => 'Latn', 'native' => 'oʼzbekcha', 'regional' => 'uz_UZ'],
        //'nds'         => ['name' => 'Low German',             'script' => 'Latn', 'native' => 'Plattdüütsch', 'regional' => 'nds_DE'],
        //'pl'          => ['name' => 'Polish',                 'script' => 'Latn', 'native' => 'polski', 'regional' => 'pl_PL'],
        //'pt'          => ['name' => 'Portuguese',             'script' => 'Latn', 'native' => 'português', 'regional' => 'pt_PT'],
        //'pt-BR'       => ['name' => 'Brazilian Portuguese',   'script' => 'Latn', 'native' => 'português do Brasil', 'regional' => 'pt_BR'],
        //'ff'          => ['name' => 'Fulah',                  'script' => 'Latn', 'native' => 'Pulaar', 'regional' => 'ff_SN'],
        //'pi'          => ['name' => 'Pahari-Potwari',         'script' => 'Latn', 'native' => 'Pāli', 'regional' => ''],
        //'aa'          => ['name' => 'Afar',                   'script' => 'Latn', 'native' => 'Qafar', 'regional' => 'aa_ER'],
        //'ty'          => ['name' => 'Tahitian',               'script' => 'Latn', 'native' => 'Reo Māohi', 'regional' => ''],
        //'ksf'         => ['name' => 'Bafia',                  'script' => 'Latn', 'native' => 'rikpa', 'regional' => ''],
        //'ro'          => ['name' => 'Romanian',               'script' => 'Latn', 'native' => 'română', 'regional' => 'ro_RO'],
        //'cgg'         => ['name' => 'Chiga',                  'script' => 'Latn', 'native' => 'Rukiga', 'regional' => ''],
        //'rm'          => ['name' => 'Romansh',                'script' => 'Latn', 'native' => 'rumantsch', 'regional' => ''],
        //'qu'          => ['name' => 'Quechua',                'script' => 'Latn', 'native' => 'Runa Simi', 'regional' => ''],
        //'nyn'         => ['name' => 'Nyankole',               'script' => 'Latn', 'native' => 'Runyankore', 'regional' => ''],
        //'ssy'         => ['name' => 'Saho',                   'script' => 'Latn', 'native' => 'Saho', 'regional' => ''],
        //'sc'          => ['name' => 'Sardinian',              'script' => 'Latn', 'native' => 'sardu', 'regional' => 'sc_IT'],
        //'de-CH'       => ['name' => 'Swiss High German',      'script' => 'Latn', 'native' => 'Schweizer Hochdeutsch', 'regional' => 'de_CH'],
        //'gsw'         => ['name' => 'Swiss German',           'script' => 'Latn', 'native' => 'Schwiizertüütsch', 'regional' => ''],
        //'trv'         => ['name' => 'Taroko',                 'script' => 'Latn', 'native' => 'Seediq', 'regional' => ''],
        //'seh'         => ['name' => 'Sena',                   'script' => 'Latn', 'native' => 'sena', 'regional' => ''],
        //'nso'         => ['name' => 'Northern Sotho',         'script' => 'Latn', 'native' => 'Sesotho sa Leboa', 'regional' => 'nso_ZA'],
        //'st'          => ['name' => 'Southern Sotho',         'script' => 'Latn', 'native' => 'Sesotho', 'regional' => 'st_ZA'],
        //'tn'          => ['name' => 'Tswana',                 'script' => 'Latn', 'native' => 'Setswana', 'regional' => 'tn_ZA'],
        //'sq'          => ['name' => 'Albanian',               'script' => 'Latn', 'native' => 'shqip', 'regional' => 'sq_AL'],
        //'sid'         => ['name' => 'Sidamo',                 'script' => 'Latn', 'native' => 'Sidaamu Afo', 'regional' => 'sid_ET'],
        //'ss'          => ['name' => 'Swati',                  'script' => 'Latn', 'native' => 'Siswati', 'regional' => 'ss_ZA'],
        //'sk'          => ['name' => 'Slovak',                 'script' => 'Latn', 'native' => 'slovenčina', 'regional' => 'sk_SK'],
        //'sl'          => ['name' => 'Slovene',                'script' => 'Latn', 'native' => 'slovenščina', 'regional' => 'sl_SI'],
        //'so'          => ['name' => 'Somali',                 'script' => 'Latn', 'native' => 'Soomaali', 'regional' => 'so_SO'],
        //'sr-Latn'     => ['name' => 'Serbian (Latin)',        'script' => 'Latn', 'native' => 'Srpski', 'regional' => 'sr_RS'],
        //'sh'          => ['name' => 'Serbo-Croatian',         'script' => 'Latn', 'native' => 'srpskohrvatski', 'regional' => ''],
        //'fi'          => ['name' => 'Finnish',                'script' => 'Latn', 'native' => 'suomi', 'regional' => 'fi_FI'],
        //'sv'          => ['name' => 'Swedish',                'script' => 'Latn', 'native' => 'svenska', 'regional' => 'sv_SE'],
        //'sg'          => ['name' => 'Sango',                  'script' => 'Latn', 'native' => 'Sängö', 'regional' => ''],
        //'tl'          => ['name' => 'Tagalog',                'script' => 'Latn', 'native' => 'Tagalog', 'regional' => 'tl_PH'],
        //'tzm-Latn'    => ['name' => 'Central Atlas Tamazight (Latin)', 'script' => 'Latn', 'native' => 'Tamazight', 'regional' => ''],
        //'kab'         => ['name' => 'Kabyle',                 'script' => 'Latn', 'native' => 'Taqbaylit', 'regional' => 'kab_DZ'],
        //'twq'         => ['name' => 'Tasawaq',                'script' => 'Latn', 'native' => 'Tasawaq senni', 'regional' => ''],
        //'shi'         => ['name' => 'Tachelhit (Latin)',      'script' => 'Latn', 'native' => 'Tashelhit', 'regional' => ''],
        //'nus'         => ['name' => 'Nuer',                   'script' => 'Latn', 'native' => 'Thok Nath', 'regional' => ''],
        //'vi'          => ['name' => 'Vietnamese',             'script' => 'Latn', 'native' => 'Tiếng Việt', 'regional' => 'vi_VN'],
        //'tg-Latn'     => ['name' => 'Tajik (Latin)',          'script' => 'Latn', 'native' => 'tojikī', 'regional' => 'tg_TJ'],
        //'lu'          => ['name' => 'Luba-Katanga',           'script' => 'Latn', 'native' => 'Tshiluba', 'regional' => 've_ZA'],
        //'ve'          => ['name' => 'Venda',                  'script' => 'Latn', 'native' => 'Tshivenḓa', 'regional' => ''],
        //'tw'          => ['name' => 'Twi',                    'script' => 'Latn', 'native' => 'Twi', 'regional' => ''],
        //'tr'          => ['name' => 'Turkish',                'script' => 'Latn', 'native' => 'Türkçe', 'regional' => 'tr_TR'],
        //'ale'         => ['name' => 'Aleut',                  'script' => 'Latn', 'native' => 'Unangax tunuu', 'regional' => ''],
        //'ca-valencia' => ['name' => 'Valencian',              'script' => 'Latn', 'native' => 'valencià', 'regional' => ''],
        //'vai-Latn'    => ['name' => 'Vai (Latin)',            'script' => 'Latn', 'native' => 'Viyamíĩ', 'regional' => ''],
        //'vo'          => ['name' => 'Volapük',                'script' => 'Latn', 'native' => 'Volapük', 'regional' => ''],
        //'fj'          => ['name' => 'Fijian',                 'script' => 'Latn', 'native' => 'vosa Vakaviti', 'regional' => ''],
        //'wa'          => ['name' => 'Walloon',                'script' => 'Latn', 'native' => 'Walon', 'regional' => 'wa_BE'],
        //'wae'         => ['name' => 'Walser',                 'script' => 'Latn', 'native' => 'Walser', 'regional' => 'wae_CH'],
        //'wen'         => ['name' => 'Sorbian',                'script' => 'Latn', 'native' => 'Wendic', 'regional' => ''],
        //'wo'          => ['name' => 'Wolof',                  'script' => 'Latn', 'native' => 'Wolof', 'regional' => 'wo_SN'],
        //'ts'          => ['name' => 'Tsonga',                 'script' => 'Latn', 'native' => 'Xitsonga', 'regional' => 'ts_ZA'],
        //'dje'         => ['name' => 'Zarma',                  'script' => 'Latn', 'native' => 'Zarmaciine', 'regional' => ''],
        //'yo'          => ['name' => 'Yoruba',                 'script' => 'Latn', 'native' => 'Èdè Yorùbá', 'regional' => 'yo_NG'],
        // 'de-AT'       => ['name' => 'Austrian German',        'script' => 'Latn', 'native' => 'Österreichisches Deutsch', 'regional' => 'de_AT'],
        //'is'          => ['name' => 'Icelandic',              'script' => 'Latn', 'native' => 'íslenska', 'regional' => 'is_IS'],
        //'cs'          => ['name' => 'Czech',                  'script' => 'Latn', 'native' => 'čeština', 'regional' => 'cs_CZ'],
        //'bas'         => ['name' => 'Basa',                   'script' => 'Latn', 'native' => 'Ɓàsàa', 'regional' => ''],
        //'mas'         => ['name' => 'Masai',                  'script' => 'Latn', 'native' => 'ɔl-Maa', 'regional' => ''],
        //'haw'         => ['name' => 'Hawaiian',               'script' => 'Latn', 'native' => 'ʻŌlelo Hawaiʻi', 'regional' => ''],
        //'el'          => ['name' => 'Greek',                  'script' => 'Grek', 'native' => 'Ελληνικά', 'regional' => 'el_GR'],
        //'uz'          => ['name' => 'Uzbek (Cyrillic)',       'script' => 'Cyrl', 'native' => 'Ўзбек', 'regional' => 'uz_UZ'],
        //'az-Cyrl'     => ['name' => 'Azerbaijani (Cyrillic)', 'script' => 'Cyrl', 'native' => 'Азәрбајҹан', 'regional' => 'uz_UZ'],
        //'ab'          => ['name' => 'Abkhazian',              'script' => 'Cyrl', 'native' => 'Аҧсуа', 'regional' => ''],
        //'os'          => ['name' => 'Ossetic',                'script' => 'Cyrl', 'native' => 'Ирон', 'regional' => 'os_RU'],
        //'ky'          => ['name' => 'Kyrgyz',                 'script' => 'Cyrl', 'native' => 'Кыргыз', 'regional' => 'ky_KG'],
        //'sr'          => ['name' => 'Serbian (Cyrillic)',     'script' => 'Cyrl', 'native' => 'Српски', 'regional' => 'sr_RS'],
        //'av'          => ['name' => 'Avaric',                 'script' => 'Cyrl', 'native' => 'авар мацӀ', 'regional' => ''],
        //'ady'         => ['name' => 'Adyghe',                 'script' => 'Cyrl', 'native' => 'адыгэбзэ', 'regional' => ''],
        //'ba'          => ['name' => 'Bashkir',                'script' => 'Cyrl', 'native' => 'башҡорт теле', 'regional' => ''],
        //'be'          => ['name' => 'Belarusian',             'script' => 'Cyrl', 'native' => 'беларуская', 'regional' => 'be_BY'],
        //'bg'          => ['name' => 'Bulgarian',              'script' => 'Cyrl', 'native' => 'български', 'regional' => 'bg_BG'],
        //'kv'          => ['name' => 'Komi',                   'script' => 'Cyrl', 'native' => 'коми кыв', 'regional' => ''],
        //'mk'          => ['name' => 'Macedonian',             'script' => 'Cyrl', 'native' => 'македонски', 'regional' => 'mk_MK'],
        //'mn'          => ['name' => 'Mongolian (Cyrillic)',   'script' => 'Cyrl', 'native' => 'монгол', 'regional' => 'mn_MN'],
        //'ce'          => ['name' => 'Chechen',                'script' => 'Cyrl', 'native' => 'нохчийн мотт', 'regional' => 'ce_RU'],
        //'ru'          => ['name' => 'Russian',                'script' => 'Cyrl', 'native' => 'русский', 'regional' => 'ru_RU'],
        //'sah'         => ['name' => 'Yakut',                  'script' => 'Cyrl', 'native' => 'саха тыла', 'regional' => ''],
        //'tt'          => ['name' => 'Tatar',                  'script' => 'Cyrl', 'native' => 'татар теле', 'regional' => 'tt_RU'],
        //'tg'          => ['name' => 'Tajik (Cyrillic)',       'script' => 'Cyrl', 'native' => 'тоҷикӣ', 'regional' => 'tg_TJ'],
        //'tk'          => ['name' => 'Turkmen',                'script' => 'Cyrl', 'native' => 'түркменче', 'regional' => 'tk_TM'],
        //'uk'          => ['name' => 'Ukrainian',              'script' => 'Cyrl', 'native' => 'українська', 'regional' => 'uk_UA'],
        //'cv'          => ['name' => 'Chuvash',                'script' => 'Cyrl', 'native' => 'чӑваш чӗлхи', 'regional' => 'cv_RU'],
        //'cu'          => ['name' => 'Church Slavic',          'script' => 'Cyrl', 'native' => 'ѩзыкъ словѣньскъ', 'regional' => ''],
        //'kk'          => ['name' => 'Kazakh',                 'script' => 'Cyrl', 'native' => 'қазақ тілі', 'regional' => 'kk_KZ'],
        //'hy'          => ['name' => 'Armenian',               'script' => 'Armn', 'native' => 'Հայերեն', 'regional' => 'hy_AM'],
        //'yi'          => ['name' => 'Yiddish',                'script' => 'Hebr', 'native' => 'ייִדיש', 'regional' => 'yi_US'],
        //'he'          => ['name' => 'Hebrew',                 'script' => 'Hebr', 'native' => 'עברית', 'regional' => 'he_IL'],
        //'ug'          => ['name' => 'Uyghur',                 'script' => 'Arab', 'native' => 'ئۇيغۇرچە', 'regional' => 'ug_CN'],
        //'ur'          => ['name' => 'Urdu',                   'script' => 'Arab', 'native' => 'اردو', 'regional' => 'ur_PK'],
        'ar'          => ['name' => 'Arabic',                 'script' => 'Arab', 'native' => 'العربية', 'regional' => 'ar_AE'],
        //'uz-Arab'     => ['name' => 'Uzbek (Arabic)',         'script' => 'Arab', 'native' => 'اۉزبېک', 'regional' => ''],
        //'tg-Arab'     => ['name' => 'Tajik (Arabic)',         'script' => 'Arab', 'native' => 'تاجیکی', 'regional' => 'tg_TJ'],
        //'sd'          => ['name' => 'Sindhi',                 'script' => 'Arab', 'native' => 'سنڌي', 'regional' => 'sd_IN'],
        //'fa'          => ['name' => 'Persian',                'script' => 'Arab', 'native' => 'فارسی', 'regional' => 'fa_IR'],
        //'pa-Arab'     => ['name' => 'Punjabi (Arabic)',       'script' => 'Arab', 'native' => 'پنجاب', 'regional' => 'pa_IN'],
        //'ps'          => ['name' => 'Pashto',                 'script' => 'Arab', 'native' => 'پښتو', 'regional' => 'ps_AF'],
        //'ks'          => ['name' => 'Kashmiri (Arabic)',      'script' => 'Arab', 'native' => 'کأشُر', 'regional' => 'ks_IN'],
        //'ku'          => ['name' => 'Kurdish',                'script' => 'Arab', 'native' => 'کوردی', 'regional' => 'ku_TR'],
        //'dv'          => ['name' => 'Divehi',                 'script' => 'Thaa', 'native' => 'ދިވެހިބަސް', 'regional' => 'dv_MV'],
        //'ks-Deva'     => ['name' => 'Kashmiri (Devaganari)',  'script' => 'Deva', 'native' => 'कॉशुर', 'regional' => 'ks_IN'],
        //'kok'         => ['name' => 'Konkani',                'script' => 'Deva', 'native' => 'कोंकणी', 'regional' => 'kok_IN'],
        //'doi'         => ['name' => 'Dogri',                  'script' => 'Deva', 'native' => 'डोगरी', 'regional' => 'doi_IN'],
        //'ne'          => ['name' => 'Nepali',                 'script' => 'Deva', 'native' => 'नेपाली', 'regional' => ''],
        //'pra'         => ['name' => 'Prakrit',                'script' => 'Deva', 'native' => 'प्राकृत', 'regional' => ''],
        //'brx'         => ['name' => 'Bodo',                   'script' => 'Deva', 'native' => 'बड़ो', 'regional' => 'brx_IN'],
        //'bra'         => ['name' => 'Braj',                   'script' => 'Deva', 'native' => 'ब्रज भाषा', 'regional' => ''],
        //'mr'          => ['name' => 'Marathi',                'script' => 'Deva', 'native' => 'मराठी', 'regional' => 'mr_IN'],
        //'mai'         => ['name' => 'Maithili',               'script' => 'Tirh', 'native' => 'मैथिली', 'regional' => 'mai_IN'],
        //'raj'         => ['name' => 'Rajasthani',             'script' => 'Deva', 'native' => 'राजस्थानी', 'regional' => ''],
        //'sa'          => ['name' => 'Sanskrit',               'script' => 'Deva', 'native' => 'संस्कृतम्', 'regional' => 'sa_IN'],
        //'hi'          => ['name' => 'Hindi',                  'script' => 'Deva', 'native' => 'हिन्दी', 'regional' => 'hi_IN'],
        //'as'          => ['name' => 'Assamese',               'script' => 'Beng', 'native' => 'অসমীয়া', 'regional' => 'as_IN'],
        //'bn'          => ['name' => 'Bengali',                'script' => 'Beng', 'native' => 'বাংলা', 'regional' => 'bn_BD'],
        //'mni'         => ['name' => 'Manipuri',               'script' => 'Beng', 'native' => 'মৈতৈ', 'regional' => 'mni_IN'],
        //'pa'          => ['name' => 'Punjabi (Gurmukhi)',     'script' => 'Guru', 'native' => 'ਪੰਜਾਬੀ', 'regional' => 'pa_IN'],
        //'gu'          => ['name' => 'Gujarati',               'script' => 'Gujr', 'native' => 'ગુજરાતી', 'regional' => 'gu_IN'],
        //'or'          => ['name' => 'Oriya',                  'script' => 'Orya', 'native' => 'ଓଡ଼ିଆ', 'regional' => 'or_IN'],
        //'ta'          => ['name' => 'Tamil',                  'script' => 'Taml', 'native' => 'தமிழ்', 'regional' => 'ta_IN'],
        //'te'          => ['name' => 'Telugu',                 'script' => 'Telu', 'native' => 'తెలుగు', 'regional' => 'te_IN'],
        //'kn'          => ['name' => 'Kannada',                'script' => 'Knda', 'native' => 'ಕನ್ನಡ', 'regional' => 'kn_IN'],
        //'ml'          => ['name' => 'Malayalam',              'script' => 'Mlym', 'native' => 'മലയാളം', 'regional' => 'ml_IN'],
        //'si'          => ['name' => 'Sinhala',                'script' => 'Sinh', 'native' => 'සිංහල', 'regional' => 'si_LK'],
        //'th'          => ['name' => 'Thai',                   'script' => 'Thai', 'native' => 'ไทย', 'regional' => 'th_TH'],
        //'lo'          => ['name' => 'Lao',                    'script' => 'Laoo', 'native' => 'ລາວ', 'regional' => 'lo_LA'],
        //'bo'          => ['name' => 'Tibetan',                'script' => 'Tibt', 'native' => 'པོད་སྐད་', 'regional' => 'bo_IN'],
        //'dz'          => ['name' => 'Dzongkha',               'script' => 'Tibt', 'native' => 'རྫོང་ཁ', 'regional' => 'dz_BT'],
        //'my'          => ['name' => 'Burmese',                'script' => 'Mymr', 'native' => 'မြန်မာဘာသာ', 'regional' => 'my_MM'],
        //'ka'          => ['name' => 'Georgian',               'script' => 'Geor', 'native' => 'ქართული', 'regional' => 'ka_GE'],
        //'byn'         => ['name' => 'Blin',                   'script' => 'Ethi', 'native' => 'ብሊን', 'regional' => 'byn_ER'],
        //'tig'         => ['name' => 'Tigre',                  'script' => 'Ethi', 'native' => 'ትግረ', 'regional' => 'tig_ER'],
        //'ti'          => ['name' => 'Tigrinya',               'script' => 'Ethi', 'native' => 'ትግርኛ', 'regional' => 'ti_ET'],
        //'am'          => ['name' => 'Amharic',                'script' => 'Ethi', 'native' => 'አማርኛ', 'regional' => 'am_ET'],
        //'wal'         => ['name' => 'Wolaytta',               'script' => 'Ethi', 'native' => 'ወላይታቱ', 'regional' => 'wal_ET'],
        //'chr'         => ['name' => 'Cherokee',               'script' => 'Cher', 'native' => 'ᏣᎳᎩ', 'regional' => ''],
        //'iu'          => ['name' => 'Inuktitut (Canadian Aboriginal Syllabics)', 'script' => 'Cans', 'native' => 'ᐃᓄᒃᑎᑐᑦ', 'regional' => 'iu_CA'],
        //'oj'          => ['name' => 'Ojibwa',                 'script' => 'Cans', 'native' => 'ᐊᓂᔑᓈᐯᒧᐎᓐ', 'regional' => ''],
        //'cr'          => ['name' => 'Cree',                   'script' => 'Cans', 'native' => 'ᓀᐦᐃᔭᐍᐏᐣ', 'regional' => ''],
        //'km'          => ['name' => 'Khmer',                  'script' => 'Khmr', 'native' => 'ភាសាខ្មែរ', 'regional' => 'km_KH'],
        //'mn-Mong'     => ['name' => 'Mongolian (Mongolian)',  'script' => 'Mong', 'native' => 'ᠮᠣᠨᠭᠭᠣᠯ ᠬᠡᠯᠡ', 'regional' => 'mn_MN'],
        //'shi-Tfng'    => ['name' => 'Tachelhit (Tifinagh)',   'script' => 'Tfng', 'native' => 'ⵜⴰⵎⴰⵣⵉⵖⵜ', 'regional' => ''],
        //'tzm'         => ['name' => 'Central Atlas Tamazight (Tifinagh)','script' => 'Tfng', 'native' => 'ⵜⴰⵎⴰⵣⵉⵖⵜ', 'regional' => ''],
        //'yue'         => ['name' => 'Yue',                    'script' => 'Hant', 'native' => '廣州話', 'regional' => 'yue_HK'],
        //'ja'          => ['name' => 'Japanese',               'script' => 'Jpan', 'native' => '日本語', 'regional' => 'ja_JP'],
        //'zh'          => ['name' => 'Chinese (Simplified)',   'script' => 'Hans', 'native' => '简体中文', 'regional' => 'zh_CN'],
        //'zh-Hant'     => ['name' => 'Chinese (Traditional)',  'script' => 'Hant', 'native' => '繁體中文', 'regional' => 'zh_CN'],
        //'ii'          => ['name' => 'Sichuan Yi',             'script' => 'Yiii', 'native' => 'ꆈꌠꉙ', 'regional' => ''],
        //'vai'         => ['name' => 'Vai (Vai)',              'script' => 'Vaii', 'native' => 'ꕙꔤ', 'regional' => ''],
        //'jv-Java'     => ['name' => 'Javanese (Javanese)',    'script' => 'Java', 'native' => 'ꦧꦱꦗꦮ', 'regional' => ''],
        //'ko'          => ['name' => 'Korean',                 'script' => 'Hang', 'native' => '한국어', 'regional' => 'ko_KR'],
    ],

    // Requires middleware `LaravelSessionRedirect.php`.
    //
    // Automatically determine locale from browser (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language)
    // on first call if it's not defined in the URL. Redirect user to computed localized url.
    // For example, if users browser language is `de`, and `de` is active in the array `supportedLocales`,
    // the `/about` would be redirected to `/de/about`.
    //
    // The locale will be stored in session and only be computed from browser
    // again if the session expires.
    //
    // If false, system will take app.php locale attribute
    'useAcceptLanguageHeader' => false,

    // If `hideDefaultLocaleInURL` is true, then a url without locale
    // is identical with the same url with default locale.
    // For example, if `en` is default locale, then `/en/about` and `/about`
    // would be identical.
    //
    // If in addition the middleware `LaravelLocalizationRedirectFilter` is active, then
    // every url with default locale is redirected to url without locale.
    // For example, `/en/about` would be redirected to `/about`.
    // It is recommended to use `hideDefaultLocaleInURL` only in
    // combination with the middleware `LaravelLocalizationRedirectFilter`
    // to avoid duplicate content (SEO).
    //
    // If `useAcceptLanguageHeader` is true, then the first time
    // the locale will be determined from browser and redirect to that language.
    // After that, `hideDefaultLocaleInURL` behaves as usual.
    'hideDefaultLocaleInURL' => true,

    // If you want to display the locales in particular order in the language selector you should write the order here.
    //CAUTION: Please consider using the appropriate locale code otherwise it will not work
    //Example: 'localesOrder' => ['es','en'],
    'localesOrder' => [],

    //  If you want to use custom lang url segments like 'at' instead of 'de-AT', you can use the mapping to tallow the LanguageNegotiator to assign the descired locales based on HTTP Accept Language Header. For example you want ot use 'at', so map HTTP Acc*ept Language Header 'de-AT' to 'at' (['de-AT' => 'at']).
    'localesMapping' => [],

    // Locale suffix for LC_TIME and LC_MONETARY
    // Defaults to most common ".UTF-8". Set to blank on Windows systems, change to ".utf8" on CentOS and similar.
    'utf8suffix' => env('LARAVELLOCALIZATION_UTF8SUFFIX', '.UTF-8'),

    // URLs which should not be processed, e.g. '/nova', '/nova/*', '/nova-api/*' or specific application URLs
    // Defaults to []
    'urlsIgnored' => ['/skipped'],

    'httpMethodsIgnored' => ['POST', 'PUT', 'PATCH', 'DELETE'],
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/laravel-ffmpeg.php

      
-----------------------------------------------


      <?php

return [
    'ffmpeg' => [
        'binaries' => env('FFMPEG_BINARIES', 'ffmpeg'),

        'threads' => 12,   // set to false to disable the default 'threads' filter
    ],

    'ffprobe' => [
        'binaries' => env('FFPROBE_BINARIES', 'ffprobe'),
    ],

    'timeout' => 3600,

    'enable_logging' => true,

    'set_command_and_error_output_on_exception' => false,

    'temporary_files_root' => env('FFMPEG_TEMPORARY_FILES_ROOT', sys_get_temp_dir()),
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/ignition.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Editor
    |--------------------------------------------------------------------------
    |
    | Choose your preferred editor to use when clicking any edit button.
    |
    | Supported: "phpstorm", "vscode", "vscode-insiders", "vscodium", "textmate", "emacs",
    |            "sublime", "atom", "nova", "macvim", "idea", "netbeans",
    |            "xdebug"
    |
    */

    'editor' => env('IGNITION_EDITOR', 'phpstorm'),

    /*
    |--------------------------------------------------------------------------
    | Theme
    |--------------------------------------------------------------------------
    |
    | Here you may specify which theme Ignition should use.
    |
    | Supported: "light", "dark", "auto"
    |
    */

    'theme' => env('IGNITION_THEME', 'light'),

    /*
    |--------------------------------------------------------------------------
    | Sharing
    |--------------------------------------------------------------------------
    |
    | You can share local errors with colleagues or others around the world.
    | Sharing is completely free and doesn't require an account on Flare.
    |
    | If necessary, you can completely disable sharing below.
    |
    */

    'enable_share_button' => env('IGNITION_SHARING_ENABLED', true),

    /*
    |--------------------------------------------------------------------------
    | Register Ignition commands
    |--------------------------------------------------------------------------
    |
    | Ignition comes with an additional make command that lets you create
    | new solution classes more easily. To keep your default Laravel
    | installation clean, this command is not registered by default.
    |
    | You can enable the command registration below.
    |
    */
    'register_commands' => env('REGISTER_IGNITION_COMMANDS', false),

    /*
    |--------------------------------------------------------------------------
    | Ignored Solution Providers
    |--------------------------------------------------------------------------
    |
    | You may specify a list of solution providers (as fully qualified class
    | names) that shouldn't be loaded. Ignition will ignore these classes
    | and possible solutions provided by them will never be displayed.
    |
    */

    'ignored_solution_providers' => [
        \Facade\Ignition\SolutionProviders\MissingPackageSolutionProvider::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | Runnable Solutions
    |--------------------------------------------------------------------------
    |
    | Some solutions that Ignition displays are runnable and can perform
    | various tasks. Runnable solutions are enabled when your app has
    | debug mode enabled. You may also fully disable this feature.
    |
    */

    'enable_runnable_solutions' => env('IGNITION_ENABLE_RUNNABLE_SOLUTIONS', null),

    /*
    |--------------------------------------------------------------------------
    | Remote Path Mapping
    |--------------------------------------------------------------------------
    |
    | If you are using a remote dev server, like Laravel Homestead, Docker, or
    | even a remote VPS, it will be necessary to specify your path mapping.
    |
    | Leaving one, or both of these, empty or null will not trigger the remote
    | URL changes and Ignition will treat your editor links as local files.
    |
    | "remote_sites_path" is an absolute base path for your sites or projects
    | in Homestead, Vagrant, Docker, or another remote development server.
    |
    | Example value: "/home/vagrant/Code"
    |
    | "local_sites_path" is an absolute base path for your sites or projects
    | on your local computer where your IDE or code editor is running on.
    |
    | Example values: "/Users/<name>/Code", "C:\Users\<name>\Documents\Code"
    |
    */

    'remote_sites_path' => env('IGNITION_REMOTE_SITES_PATH', ''),
    'local_sites_path' => env('IGNITION_LOCAL_SITES_PATH', ''),

    /*
    |--------------------------------------------------------------------------
    | Housekeeping Endpoint Prefix
    |--------------------------------------------------------------------------
    |
    | Ignition registers a couple of routes when it is enabled. Below you may
    | specify a route prefix that will be used to host all internal links.
    |
    */
    'housekeeping_endpoint_prefix' => '_ignition',

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/hashing.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Hash Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default hash driver that will be used to hash
    | passwords for your application. By default, the bcrypt algorithm is
    | used; however, you remain free to modify this option if you wish.
    |
    | Supported: "bcrypt", "argon", "argon2id"
    |
    */

    'driver' => 'bcrypt',

    /*
    |--------------------------------------------------------------------------
    | Bcrypt Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Bcrypt algorithm. This will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'bcrypt' => [
        'rounds' => env('BCRYPT_ROUNDS', 10),
    ],

    /*
    |--------------------------------------------------------------------------
    | Argon Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Argon algorithm. These will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'argon' => [
        'memory' => 65536,
        'threads' => 1,
        'time' => 4,
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/flare.php

      
-----------------------------------------------


      <?php

return [
    /*
    |
    |--------------------------------------------------------------------------
    | Flare API key
    |--------------------------------------------------------------------------
    |
    | Specify Flare's API key below to enable error reporting to the service.
    |
    | More info: https://flareapp.io/docs/general/projects
    |
    */

    'key' => env('FLARE_KEY'),

    /*
    |--------------------------------------------------------------------------
    | Reporting Options
    |--------------------------------------------------------------------------
    |
    | These options determine which information will be transmitted to Flare.
    |
    */

    'reporting' => [
        'anonymize_ips' => true,
        'collect_git_information' => false,
        'report_queries' => true,
        'maximum_number_of_collected_queries' => 200,
        'report_query_bindings' => true,
        'report_view_data' => true,
        'grouping_type' => null,
        'report_logs' => true,
        'maximum_number_of_collected_logs' => 200,
        'censor_request_body_fields' => ['password'],
    ],

    /*
    |--------------------------------------------------------------------------
    | Reporting Log statements
    |--------------------------------------------------------------------------
    |
    | If this setting is `false` log statements won't be sent as events to Flare,
    | no matter which error level you specified in the Flare log channel.
    |
    */

    'send_logs_as_events' => true,

    /*
    |--------------------------------------------------------------------------
    | Censor request body fields
    |--------------------------------------------------------------------------
    |
    | These fields will be censored from your request when sent to Flare.
    |
    */

    'censor_request_body_fields' => ['password'],
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/filesystems.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application. Just store away!
    |
    */

    'default' => 'public',
    // 'default' => env('FILESYSTEM_DRIVER', 'public'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Here you may configure as many filesystem "disks" as you wish, and you
    | may even configure multiple disks of the same driver. Defaults have
    | been setup for each driver as an example of the required options.
    |
    | Supported Drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app'),
            'visibility' => 'public',
        ],

        'thumbnails' => [
            'driver' => 'local',
            'root' => storage_path('app/thumbnails'),
            'visibility' => 'public',
        ],

        'vue-elearning' => [
            'driver' => 'local',
            'root' => storage_path('app/public/vue-elearning'),
            'visibility' => 'public',
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/dompdf.php

      
-----------------------------------------------


      <?php

return array(

    /*
    |--------------------------------------------------------------------------
    | Settings
    |--------------------------------------------------------------------------
    |
    | Set some default values. It is possible to add all defines that can be set
    | in dompdf_config.inc.php. You can also override the entire config file.
    |
    */
    'show_warnings' => false,   // Throw an Exception on warnings from dompdf

    'public_path' => null,  // Override the public path if needed

    /*
     * Dejavu Sans font is missing glyphs for converted entities, turn it off if you need to show € and £.
     */
    'convert_entities' => true,

    'options' => array(
        /**
         * The location of the DOMPDF font directory
         *
         * The location of the directory where DOMPDF will store fonts and font metrics
         * Note: This directory must exist and be writable by the webserver process.
         * *Please note the trailing slash.*
         *
         * Notes regarding fonts:
         * Additional .afm font metrics can be added by executing load_font.php from command line.
         *
         * Only the original "Base 14 fonts" are present on all pdf viewers. Additional fonts must
         * be embedded in the pdf file or the PDF may not display correctly. This can significantly
         * increase file size unless font subsetting is enabled. Before embedding a font please
         * review your rights under the font license.
         *
         * Any font specification in the source HTML is translated to the closest font available
         * in the font directory.
         *
         * The pdf standard "Base 14 fonts" are:
         * Courier, Courier-Bold, Courier-BoldOblique, Courier-Oblique,
         * Helvetica, Helvetica-Bold, Helvetica-BoldOblique, Helvetica-Oblique,
         * Times-Roman, Times-Bold, Times-BoldItalic, Times-Italic,
         * Symbol, ZapfDingbats.
         */
        "font_dir" => storage_path('fonts'), // advised by dompdf (https://github.com/dompdf/dompdf/pull/782)

        /**
         * The location of the DOMPDF font cache directory
         *
         * This directory contains the cached font metrics for the fonts used by DOMPDF.
         * This directory can be the same as DOMPDF_FONT_DIR
         *
         * Note: This directory must exist and be writable by the webserver process.
         */
        "font_cache" => storage_path('fonts'),

        [
            "enable_font_subsetting" => true,
        ],
        /**
         * The location of a temporary directory.
         *
         * The directory specified must be writeable by the webserver process.
         * The temporary directory is required to download remote images and when
         * using the PFDLib back end.
         */
        "temp_dir" => sys_get_temp_dir(),

        /**
         * ==== IMPORTANT ====
         *
         * dompdf's "chroot": Prevents dompdf from accessing system files or other
         * files on the webserver.  All local files opened by dompdf must be in a
         * subdirectory of this directory.  DO NOT set it to '/' since this could
         * allow an attacker to use dompdf to read any files on the server.  This
         * should be an absolute path.
         * This is only checked on command line call by dompdf.php, but not by
         * direct class use like:
         * $dompdf = new DOMPDF();  $dompdf->load_html($htmldata); $dompdf->render(); $pdfdata = $dompdf->output();
         */
        "chroot" => realpath(base_path()),

        /**
         * Protocol whitelist
         *
         * Protocols and PHP wrappers allowed in URIs, and the validation rules
         * that determine if a resouce may be loaded. Full support is not guaranteed
         * for the protocols/wrappers specified
         * by this array.
         *
         * @var array
         */
        'allowed_protocols' => [
            "file://" => ["rules" => []],
            "http://" => ["rules" => []],
            "https://" => ["rules" => []]
        ],

         /**
          * @var string
          */
        'log_output_file' => null,

        /**
         * Whether to enable font subsetting or not.
         */
        "enable_font_subsetting" => false,

        /**
         * The PDF rendering backend to use
         *
         * Valid settings are 'PDFLib', 'CPDF' (the bundled R&OS PDF class), 'GD' and
         * 'auto'. 'auto' will look for PDFLib and use it if found, or if not it will
         * fall back on CPDF. 'GD' renders PDFs to graphic files. {@link
         * Canvas_Factory} ultimately determines which rendering class to instantiate
         * based on this setting.
         *
         * Both PDFLib & CPDF rendering backends provide sufficient rendering
         * capabilities for dompdf, however additional features (e.g. object,
         * image and font support, etc.) differ between backends.  Please see
         * {@link PDFLib_Adapter} for more information on the PDFLib backend
         * and {@link CPDF_Adapter} and lib/class.pdf.php for more information
         * on CPDF. Also see the documentation for each backend at the links
         * below.
         *
         * The GD rendering backend is a little different than PDFLib and
         * CPDF. Several features of CPDF and PDFLib are not supported or do
         * not make any sense when creating image files.  For example,
         * multiple pages are not supported, nor are PDF 'objects'.  Have a
         * look at {@link GD_Adapter} for more information.  GD support is
         * experimental, so use it at your own risk.
         *
         * @link http://www.pdflib.com
         * @link http://www.ros.co.nz/pdf
         * @link http://www.php.net/image
         */
        "pdf_backend" => "CPDF",

        /**
         * PDFlib license key
         *
         * If you are using a licensed, commercial version of PDFlib, specify
         * your license key here.  If you are using PDFlib-Lite or are evaluating
         * the commercial version of PDFlib, comment out this setting.
         *
         * @link http://www.pdflib.com
         *
         * If pdflib present in web server and auto or selected explicitely above,
         * a real license code must exist!
         */
        //"DOMPDF_PDFLIB_LICENSE" => "your license key here",

        /**
         * html target media view which should be rendered into pdf.
         * List of types and parsing rules for future extensions:
         * http://www.w3.org/TR/REC-html40/types.html
         *   screen, tty, tv, projection, handheld, print, braille, aural, all
         * Note: aural is deprecated in CSS 2.1 because it is replaced by speech in CSS 3.
         * Note, even though the generated pdf file is intended for print output,
         * the desired content might be different (e.g. screen or projection view of html file).
         * Therefore allow specification of content here.
         */
        "default_media_type" => "screen",

        /**
         * The default paper size.
         *
         * North America standard is "letter"; other countries generally "a4"
         *
         * @see CPDF_Adapter::PAPER_SIZES for valid sizes ('letter', 'legal', 'A4', etc.)
         */
        "default_paper_size" => "a4",

         /**
          * The default paper orientation.
          *
          * The orientation of the page (portrait or landscape).
          *
          * @var string
          */
        'default_paper_orientation' => "portrait",

        /**
         * The default font family
         *
         * Used if no suitable fonts can be found. This must exist in the font folder.
         * @var string
         */
        "default_font" => "serif",

        /**
         * Image DPI setting
         *
         * This setting determines the default DPI setting for images and fonts.  The
         * DPI may be overridden for inline images by explictly setting the
         * image's width & height style attributes (i.e. if the image's native
         * width is 600 pixels and you specify the image's width as 72 points,
         * the image will have a DPI of 600 in the rendered PDF.  The DPI of
         * background images can not be overridden and is controlled entirely
         * via this parameter.
         *
         * For the purposes of DOMPDF, pixels per inch (PPI) = dots per inch (DPI).
         * If a size in html is given as px (or without unit as image size),
         * this tells the corresponding size in pt.
         * This adjusts the relative sizes to be similar to the rendering of the
         * html page in a reference browser.
         *
         * In pdf, always 1 pt = 1/72 inch
         *
         * Rendering resolution of various browsers in px per inch:
         * Windows Firefox and Internet Explorer:
         *   SystemControl->Display properties->FontResolution: Default:96, largefonts:120, custom:?
         * Linux Firefox:
         *   about:config *resolution: Default:96
         *   (xorg screen dimension in mm and Desktop font dpi settings are ignored)
         *
         * Take care about extra font/image zoom factor of browser.
         *
         * In images, <img> size in pixel attribute, img css style, are overriding
         * the real image dimension in px for rendering.
         *
         * @var int
         */
        "dpi" => 96,

        /**
         * Enable inline PHP
         *
         * If this setting is set to true then DOMPDF will automatically evaluate
         * inline PHP contained within <script type="text/php"> ... </script> tags.
         *
         * Enabling this for documents you do not trust (e.g. arbitrary remote html
         * pages) is a security risk.  Set this option to false if you wish to process
         * untrusted documents.
         *
         * @var bool
         */
        "enable_php" => false,

        /**
         * Enable inline Javascript
         *
         * If this setting is set to true then DOMPDF will automatically insert
         * JavaScript code contained within <script type="text/javascript"> ... </script> tags.
         *
         * @var bool
         */
        "enable_javascript" => true,

        /**
         * Enable remote file access
         *
         * If this setting is set to true, DOMPDF will access remote sites for
         * images and CSS files as required.
         * This is required for part of test case www/test/image_variants.html through www/examples.php
         *
         * Attention!
         * This can be a security risk, in particular in combination with DOMPDF_ENABLE_PHP and
         * allowing remote access to dompdf.php or on allowing remote html code to be passed to
         * $dompdf = new DOMPDF(, $dompdf->load_html(...,
         * This allows anonymous users to download legally doubtful internet content which on
         * tracing back appears to being downloaded by your server, or allows malicious php code
         * in remote html pages to be executed by your server with your account privileges.
         *
         * @var bool
         */
        "enable_remote" => true,

        /**
         * A ratio applied to the fonts height to be more like browsers' line height
         */
        "font_height_ratio" => 1.1,

        /**
         * Use the HTML5 Lib parser
         *
         * @deprecated This feature is now always on in dompdf 2.x
         * @var bool
         */
        "enable_html5_parser" => true,
    ),


);

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/debugbar.php

      
-----------------------------------------------


      <?php

return [

    /*
     |--------------------------------------------------------------------------
     | Debugbar Settings
     |--------------------------------------------------------------------------
     |
     | Debugbar is enabled by default, when debug is set to true in app.php.
     | You can override the value by setting enable to true or false instead of null.
     |
     | You can provide an array of URI's that must be ignored (eg. 'api/*')
     |
     */

    'enabled' => env('DEBUGBAR_ENABLED', null),
    'except' => [
        'telescope*',
        'horizon*',
    ],

    /*
     |--------------------------------------------------------------------------
     | Storage settings
     |--------------------------------------------------------------------------
     |
     | DebugBar stores data for session/ajax requests.
     | You can disable this, so the debugbar stores data in headers/session,
     | but this can cause problems with large data collectors.
     | By default, file storage (in the storage folder) is used. Redis and PDO
     | can also be used. For PDO, run the package migrations first.
     |
     */
    'storage' => [
        'enabled'    => true,
        'driver'     => 'file', // redis, file, pdo, socket, custom
        'path'       => storage_path('debugbar'), // For file driver
        'connection' => null,   // Leave null for default connection (Redis/PDO)
        'provider'   => '', // Instance of StorageInterface for custom driver
        'hostname'   => '127.0.0.1', // Hostname to use with the "socket" driver
        'port'       => 2304, // Port to use with the "socket" driver
    ],

    /*
    |--------------------------------------------------------------------------
    | Editor
    |--------------------------------------------------------------------------
    |
    | Choose your preferred editor to use when clicking file name.
    |
    | Supported: "phpstorm", "vscode", "vscode-insiders", "vscode-remote",
    |            "vscode-insiders-remote", "vscodium", "textmate", "emacs",
    |            "sublime", "atom", "nova", "macvim", "idea", "netbeans",
    |            "xdebug", "espresso"
    |
    */

    'editor' => env('DEBUGBAR_EDITOR', 'phpstorm'),

    /*
    |--------------------------------------------------------------------------
    | Remote Path Mapping
    |--------------------------------------------------------------------------
    |
    | If you are using a remote dev server, like Laravel Homestead, Docker, or
    | even a remote VPS, it will be necessary to specify your path mapping.
    |
    | Leaving one, or both of these, empty or null will not trigger the remote
    | URL changes and Debugbar will treat your editor links as local files.
    |
    | "remote_sites_path" is an absolute base path for your sites or projects
    | in Homestead, Vagrant, Docker, or another remote development server.
    |
    | Example value: "/home/vagrant/Code"
    |
    | "local_sites_path" is an absolute base path for your sites or projects
    | on your local computer where your IDE or code editor is running on.
    |
    | Example values: "/Users/<name>/Code", "C:\Users\<name>\Documents\Code"
    |
    */

    'remote_sites_path' => env('DEBUGBAR_REMOTE_SITES_PATH', ''),
    'local_sites_path' => env('DEBUGBAR_LOCAL_SITES_PATH', ''),

    /*
     |--------------------------------------------------------------------------
     | Vendors
     |--------------------------------------------------------------------------
     |
     | Vendor files are included by default, but can be set to false.
     | This can also be set to 'js' or 'css', to only include javascript or css vendor files.
     | Vendor files are for css: font-awesome (including fonts) and highlight.js (css files)
     | and for js: jquery and and highlight.js
     | So if you want syntax highlighting, set it to true.
     | jQuery is set to not conflict with existing jQuery scripts.
     |
     */

    'include_vendors' => true,

    /*
     |--------------------------------------------------------------------------
     | Capture Ajax Requests
     |--------------------------------------------------------------------------
     |
     | The Debugbar can capture Ajax requests and display them. If you don't want this (ie. because of errors),
     | you can use this option to disable sending the data through the headers.
     |
     | Optionally, you can also send ServerTiming headers on ajax requests for the Chrome DevTools.
     |
     | Note for your request to be identified as ajax requests they must either send the header
     | X-Requested-With with the value XMLHttpRequest (most JS libraries send this), or have application/json as a Accept header.
     */

    'capture_ajax' => true,
    'add_ajax_timing' => false,

    /*
     |--------------------------------------------------------------------------
     | Custom Error Handler for Deprecated warnings
     |--------------------------------------------------------------------------
     |
     | When enabled, the Debugbar shows deprecated warnings for Symfony components
     | in the Messages tab.
     |
     */
    'error_handler' => false,

    /*
     |--------------------------------------------------------------------------
     | Clockwork integration
     |--------------------------------------------------------------------------
     |
     | The Debugbar can emulate the Clockwork headers, so you can use the Chrome
     | Extension, without the server-side code. It uses Debugbar collectors instead.
     |
     */
    'clockwork' => false,

    /*
     |--------------------------------------------------------------------------
     | DataCollectors
     |--------------------------------------------------------------------------
     |
     | Enable/disable DataCollectors
     |
     */

    'collectors' => [
        'phpinfo'         => true,  // Php version
        'messages'        => true,  // Messages
        'time'            => true,  // Time Datalogger
        'memory'          => true,  // Memory usage
        'exceptions'      => true,  // Exception displayer
        'log'             => true,  // Logs from Monolog (merged in messages if enabled)
        'db'              => true,  // Show database (PDO) queries and bindings
        'views'           => true,  // Views with their data
        'route'           => true,  // Current route information
        'auth'            => false, // Display Laravel authentication status
        'gate'            => true,  // Display Laravel Gate checks
        'session'         => true,  // Display session data
        'symfony_request' => true,  // Only one can be enabled..
        'mail'            => true,  // Catch mail messages
        'laravel'         => false, // Laravel version and environment
        'events'          => false, // All events fired
        'default_request' => false, // Regular or special Symfony request logger
        'logs'            => false, // Add the latest log messages
        'files'           => false, // Show the included files
        'config'          => false, // Display config settings
        'cache'           => false, // Display cache events
        'models'          => true,  // Display models
        'livewire'        => true,  // Display Livewire (when available)
    ],

    /*
     |--------------------------------------------------------------------------
     | Extra options
     |--------------------------------------------------------------------------
     |
     | Configure some DataCollectors
     |
     */

    'options' => [
        'auth' => [
            'show_name' => true,   // Also show the users name/email in the debugbar
        ],
        'db' => [
            'with_params'       => true,   // Render SQL with the parameters substituted
            'backtrace'         => true,   // Use a backtrace to find the origin of the query in your files.
            'backtrace_exclude_paths' => [],   // Paths to exclude from backtrace. (in addition to defaults)
            'timeline'          => false,  // Add the queries to the timeline
            'duration_background'  => true,   // Show shaded background on each query relative to how long it took to execute.
            'explain' => [                 // Show EXPLAIN output on queries
                'enabled' => false,
                'types' => ['SELECT'],     // Deprecated setting, is always only SELECT
            ],
            'hints'             => false,    // Show hints for common mistakes
            'show_copy'         => false,    // Show copy button next to the query
        ],
        'mail' => [
            'full_log' => false,
        ],
        'views' => [
            'timeline' => false,  // Add the views to the timeline (Experimental)
            'data' => false,    //Note: Can slow down the application, because the data can be quite large..
        ],
        'route' => [
            'label' => true,  // show complete route on bar
        ],
        'logs' => [
            'file' => null,
        ],
        'cache' => [
            'values' => true, // collect cache values
        ],
    ],

    /*
     |--------------------------------------------------------------------------
     | Inject Debugbar in Response
     |--------------------------------------------------------------------------
     |
     | Usually, the debugbar is added just before </body>, by listening to the
     | Response after the App is done. If you disable this, you have to add them
     | in your template yourself. See http://phpdebugbar.com/docs/rendering.html
     |
     */

    'inject' => true,

    /*
     |--------------------------------------------------------------------------
     | DebugBar route prefix
     |--------------------------------------------------------------------------
     |
     | Sometimes you want to set route prefix to be used by DebugBar to load
     | its resources from. Usually the need comes from misconfigured web server or
     | from trying to overcome bugs like this: http://trac.nginx.org/nginx/ticket/97
     |
     */
    'route_prefix' => '_debugbar',

    /*
     |--------------------------------------------------------------------------
     | DebugBar route domain
     |--------------------------------------------------------------------------
     |
     | By default DebugBar route served from the same domain that request served.
     | To override default domain, specify it as a non-empty value.
     */
    'route_domain' => null,

    /*
     |--------------------------------------------------------------------------
     | DebugBar theme
     |--------------------------------------------------------------------------
     |
     | Switches between light and dark theme. If set to auto it will respect system preferences
     | Possible values: auto, light, dark
     */
    'theme' => env('DEBUGBAR_THEME', 'auto'),

    /*
     |--------------------------------------------------------------------------
     | Backtrace stack limit
     |--------------------------------------------------------------------------
     |
     | By default, the DebugBar limits the number of frames returned by the 'debug_backtrace()' function.
     | If you need larger stacktraces, you can increase this number. Setting it to 0 will result in no limit.
     */
    'debug_backtrace_limit' => 50,
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/datatables.php

      
-----------------------------------------------


      <?php

return [
    /*
     * DataTables search options.
     */
    'search'         => [
        /*
         * Smart search will enclose search keyword with wildcard string "%keyword%".
         * SQL: column LIKE "%keyword%"
         */
        'smart'            => true,

        /*
         * Multi-term search will explode search keyword using spaces resulting into multiple term search.
         */
        'multi_term'       => true,

        /*
         * Case insensitive will search the keyword in lower case format.
         * SQL: LOWER(column) LIKE LOWER(keyword)
         */
        'case_insensitive' => true,

        /*
         * Wild card will add "%" in between every characters of the keyword.
         * SQL: column LIKE "%k%e%y%w%o%r%d%"
         */
        'use_wildcards'    => false,

        /*
         * Perform a search which starts with the given keyword.
         * SQL: column LIKE "keyword%"
         */
        'starts_with'      => false,
    ],

    /*
     * DataTables internal index id response column name.
     */
    'index_column'   => 'DT_RowIndex',

    /*
     * List of available builders for DataTables.
     * This is where you can register your custom dataTables builder.
     */
    'engines'        => [
        'eloquent'   => Yajra\DataTables\EloquentDataTable::class,
        'query'      => Yajra\DataTables\QueryDataTable::class,
        'collection' => Yajra\DataTables\CollectionDataTable::class,
        'resource'   => Yajra\DataTables\ApiResourceDataTable::class,
    ],

    /*
     * DataTables accepted builder to engine mapping.
     * This is where you can override which engine a builder should use
     * Note, only change this if you know what you are doing!
     */
    'builders'       => [
        //Illuminate\Database\Eloquent\Relations\Relation::class => 'eloquent',
        //Illuminate\Database\Eloquent\Builder::class            => 'eloquent',
        //Illuminate\Database\Query\Builder::class               => 'query',
        //Illuminate\Support\Collection::class                   => 'collection',
    ],

    /*
     * Nulls last sql pattern for PostgreSQL & Oracle.
     * For MySQL, use 'CASE WHEN :column IS NULL THEN 1 ELSE 0 END, :column :direction'
     */
    'nulls_last_sql' => ':column :direction NULLS LAST',

    /*
     * User friendly message to be displayed on user if error occurs.
     * Possible values:
     * null             - The exception message will be used on error response.
     * 'throw'          - Throws a \Yajra\DataTables\Exceptions\Exception. Use your custom error handler if needed.
     * 'custom message' - Any friendly message to be displayed to the user. You can also use translation key.
     */
    'error'          => env('DATATABLES_ERROR', null),

    /*
     * Default columns definition of dataTable utility functions.
     */
    'columns'        => [
        /*
         * List of columns hidden/removed on json response.
         */
        'excess'    => ['rn', 'row_num'],

        /*
         * List of columns to be escaped. If set to *, all columns are escape.
         * Note: You can set the value to empty array to disable XSS protection.
         */
        'escape'    => '*',

        /*
         * List of columns that are allowed to display html content.
         * Note: Adding columns to list will make us available to XSS attacks.
         */
        'raw'       => ['action'],

        /*
         * List of columns are forbidden from being searched/sorted.
         */
        'blacklist' => ['password', 'remember_token'],

        /*
         * List of columns that are only allowed fo search/sort.
         * If set to *, all columns are allowed.
         */
        'whitelist' => '*',
    ],

    /*
     * JsonResponse header and options config.
     */
    'json'           => [
        'header'  => [],
        'options' => 0,
    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/database.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => false,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'schema' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'password' => env('REDIS_PASSWORD', null),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'password' => env('REDIS_PASSWORD', null),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/cors.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your settings for cross-origin resource sharing
    | or "CORS". This determines what cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => ['api/*', 'sanctum/csrf-cookie'],

    'allowed_methods' => ['*'],

    'allowed_origins' => ['*'],

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => false,

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/cache.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache connection that gets used while
    | using this caching library. This connection is used when another is
    | not explicitly specified when executing a given caching function.
    |
    */

    'default' => env('CACHE_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "apc", "array", "database", "file",
    |         "memcached", "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'apc' => [
            'driver' => 'apc',
        ],

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'cache',
            'connection' => null,
            'lock_connection' => null,
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'cache',
            'lock_connection' => 'default',
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing a RAM based store such as APC or Memcached, there might
    | be other applications utilizing the same cache. So, we'll specify a
    | value to get prefixed to all our keys so we can avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache'),

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/broadcasting.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Broadcaster
    |--------------------------------------------------------------------------
    |
    | This option controls the default broadcaster that will be used by the
    | framework when an event needs to be broadcast. You may set this to
    | any of the connections defined in the "connections" array below.
    |
    | Supported: "pusher", "ably", "redis", "log", "null"
    |
    */

    'default' => env('BROADCAST_DRIVER', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Broadcast Connections
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the broadcast connections that will be used
    | to broadcast events to other systems or over websockets. Samples of
    | each available type of connection are provided inside this array.
    |
    */

    'connections' => [

        // 'pusher' => [
        //     'driver' => 'pusher',
        //     'key' => env('PUSHER_APP_KEY'),
        //     'secret' => env('PUSHER_APP_SECRET'),
        //     'app_id' => env('PUSHER_APP_ID'),
        //     'options' => [
        //         // 'cluster' => env('PUSHER_APP_CLUSTER'),
        //         'cluster' => 'ap2',
        //         'useTLS' => true,
        //     ],
        // ],
        'pusher' => [
            'driver' => 'pusher',
            'key' => env('PUSHER_APP_KEY'),
            'secret' => env('PUSHER_APP_SECRET'),
            'app_id' => env('PUSHER_APP_ID'),
            'options' => [
                'cluster' => env('PUSHER_APP_CLUSTER'),
                'encrypted' => true,
                'host' => '127.0.0.1',
                'port' => 6001,
                'scheme' => 'http'
            ],
        ],

        'ably' => [
            'driver' => 'ably',
            'key' => env('ABLY_KEY'),
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
        ],

        'log' => [
            'driver' => 'log',
        ],

        'null' => [
            'driver' => 'null',
        ],

    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/auth.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option controls the default authentication "guard" and password
    | reset options for your application. You may change these defaults
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => 'admin',
        'passwords' => 'admins',
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | here which uses session storage and the Eloquent user provider.
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver'   => 'session',
            'provider' => 'users',
        ],
        'admin' => [
            'driver'   => 'session',
            'provider' => 'admins',
        ],
        'api' => [
            'driver' => 'passport',
            'provider' => 'users',
            'hash' => false,
        ],
        // Elearning : students.
        'student' => [
            'driver'   => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | If you have multiple user tables or models you may configure multiple
    | sources which represent each model / table. These sources may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],

        'admins' => [
            'driver'=> 'eloquent',
            'model' => \App\Models\Admin::class,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | You may specify multiple password reset configurations if you have more
    | than one user table or model in the application and you want to have
    | separate password reset settings based on the specific user types.
    |
    | The expire time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => 'password_resets',
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | times out and the user is prompted to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => 10800,

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/config/app.php

      
-----------------------------------------------


      <?php


return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application. This value is used when the
    | framework needs to place the application's name in a notification or
    | any other location as required by the application or its packages.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | your application so that it is used when running Artisan tasks.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    'asset_url' => env('ASSET_URL', null),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. We have gone
    | ahead and set this to a sensible default for you out of the box.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by the translation service provider. You are free to set this value
    | to any of the locales which will be supported by the application.
    |
    */

    'locale' => 'ar',

    /*
    |--------------------------------------------------------------------------
    | Application Fallback Locale
    |--------------------------------------------------------------------------
    |
    | The fallback locale determines the locale to use when the current one
    | is not available. You may change the value to correspond to any of
    | the language folders that are provided through your application.
    |
    */

    'fallback_locale' => 'ar',

    /*
    |--------------------------------------------------------------------------
    | Faker Locale
    |--------------------------------------------------------------------------
    |
    | This locale will be used by the Faker PHP library when generating fake
    | data for your database seeds. For example, this will be used to get
    | localized telephone numbers, street address information and more.
    |
    */

    'faker_locale' => 'en_US',

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is used by the Illuminate encrypter service and should be set
    | to a random, 32 character string, otherwise these encrypted strings
    | will not be safe. Please do this before deploying an application!
    |
    */

    'key' => env('APP_KEY'),

    'cipher' => 'AES-256-CBC',


    /*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    |
    | The service providers listed here will be automatically loaded on the
    | request to your application. Feel free to add your own services to
    | this array to grant expanded functionality to your applications.
    |
    */

    'providers' => [

        /*
         * Laravel Framework Service Providers...
         */
        Illuminate\Auth\AuthServiceProvider::class,
        Illuminate\Broadcasting\BroadcastServiceProvider::class,
        Illuminate\Bus\BusServiceProvider::class,
        Illuminate\Cache\CacheServiceProvider::class,
        Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,
        Illuminate\Cookie\CookieServiceProvider::class,
        Illuminate\Database\DatabaseServiceProvider::class,
        Illuminate\Encryption\EncryptionServiceProvider::class,
        Illuminate\Filesystem\FilesystemServiceProvider::class,
        Illuminate\Foundation\Providers\FoundationServiceProvider::class,
        Illuminate\Hashing\HashServiceProvider::class,
        Illuminate\Mail\MailServiceProvider::class,
        Illuminate\Notifications\NotificationServiceProvider::class,
        Illuminate\Pagination\PaginationServiceProvider::class,
        Illuminate\Pipeline\PipelineServiceProvider::class,
        Illuminate\Queue\QueueServiceProvider::class,
        Illuminate\Redis\RedisServiceProvider::class,
        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,
        Illuminate\Session\SessionServiceProvider::class,
        Illuminate\Translation\TranslationServiceProvider::class,
        Illuminate\Validation\ValidationServiceProvider::class,
        Illuminate\View\ViewServiceProvider::class,

        /*
         * Package Service Providers...
         */
            Maatwebsite\Excel\ExcelServiceProvider::class,
            Barryvdh\Debugbar\ServiceProvider::class,
        /*
         * Application Service Providers...
         */
        App\Providers\AppServiceProvider::class,
        App\Providers\AuthServiceProvider::class,
        App\Providers\BroadcastServiceProvider::class,
        App\Providers\EventServiceProvider::class,
        App\Providers\RouteServiceProvider::class,
        // App\Providers\TelescopeServiceProvider::class,

        Spatie\Permission\PermissionServiceProvider::class,
        // niklasravnsborg\LaravelPdf\PdfServiceProvider::class,
        ProtoneMedia\LaravelFFMpeg\Support\ServiceProvider::class,

        App\Providers\SettingsServiceProvider::class,

    ],

    /*
    |--------------------------------------------------------------------------
    | Class Aliases
    |--------------------------------------------------------------------------
    |
    | This array of class aliases will be registered when this application
    | is started. However, feel free to register as many as you wish as
    | the aliases are "lazy" loaded so they don't hinder performance.
    |
    */

    'aliases' => [

        'App' => Illuminate\Support\Facades\App::class,
        'Arr' => Illuminate\Support\Arr::class,
        'Artisan' => Illuminate\Support\Facades\Artisan::class,
        'Auth' => Illuminate\Support\Facades\Auth::class,
        'Blade' => Illuminate\Support\Facades\Blade::class,
        'Broadcast' => Illuminate\Support\Facades\Broadcast::class,
        'Bus' => Illuminate\Support\Facades\Bus::class,
        'Cache' => Illuminate\Support\Facades\Cache::class,
        'Config' => Illuminate\Support\Facades\Config::class,
        'Cookie' => Illuminate\Support\Facades\Cookie::class,
        'Crypt' => Illuminate\Support\Facades\Crypt::class,
        'Date' => Illuminate\Support\Facades\Date::class,
        'DB' => Illuminate\Support\Facades\DB::class,
        'Eloquent' => Illuminate\Database\Eloquent\Model::class,
        'Event' => Illuminate\Support\Facades\Event::class,
        'File' => Illuminate\Support\Facades\File::class,
        'Gate' => Illuminate\Support\Facades\Gate::class,
        'Hash' => Illuminate\Support\Facades\Hash::class,
        'Http' => Illuminate\Support\Facades\Http::class,
        'Js' => Illuminate\Support\Js::class,
        'Lang' => Illuminate\Support\Facades\Lang::class,
        'Log' => Illuminate\Support\Facades\Log::class,
        'Mail' => Illuminate\Support\Facades\Mail::class,
        'Notification' => Illuminate\Support\Facades\Notification::class,
        'Password' => Illuminate\Support\Facades\Password::class,
        'Queue' => Illuminate\Support\Facades\Queue::class,
        'RateLimiter' => Illuminate\Support\Facades\RateLimiter::class,
        'Redirect' => Illuminate\Support\Facades\Redirect::class,
        // 'Redis' => Illuminate\Support\Facades\Redis::class,
        'Request' => Illuminate\Support\Facades\Request::class,
        'Response' => Illuminate\Support\Facades\Response::class,
        'Route' => Illuminate\Support\Facades\Route::class,
        'Schema' => Illuminate\Support\Facades\Schema::class,
        'Session' => Illuminate\Support\Facades\Session::class,
        'Storage' => Illuminate\Support\Facades\Storage::class,
        'Str' => Illuminate\Support\Str::class,
        'URL' => Illuminate\Support\Facades\URL::class,
        'Validator' => Illuminate\Support\Facades\Validator::class,
        'View' => Illuminate\Support\Facades\View::class,
        // 'PDF' => niklasravnsborg\LaravelPdf\Facades\Pdf::class,
        'Debugbar' => Barryvdh\Debugbar\Facades\Debugbar::class,
        'Excel' => Maatwebsite\Excel\Facades\Excel::class,
        'FFMpeg' => ProtoneMedia\LaravelFFMpeg\Support\FFMpeg::class

    ],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/bootstrap/app.php

      
-----------------------------------------------


      <?php

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Laravel application instance
| which serves as the "glue" for all the components of Laravel, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = new Illuminate\Foundation\Application(
    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)
);

/*
|--------------------------------------------------------------------------
| Bind Important Interfaces
|--------------------------------------------------------------------------
|
| Next, we need to bind some important interfaces into the container so
| we will be able to resolve them when needed. The kernels serve the
| incoming requests to this application from both the web and CLI.
|
*/

$app->singleton(
    Illuminate\Contracts\Http\Kernel::class,
    App\Http\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    App\Console\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

/*
|--------------------------------------------------------------------------
| Return The Application
|--------------------------------------------------------------------------
|
| This script returns the application instance. The instance is given to
| the calling script so we can separate the building of the instances
| from the actual running of the application and sending responses.
|
*/

return $app;

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/tests/Unit/ExampleTest.php

      
-----------------------------------------------


      <?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_example()
    {
        $this->assertTrue(true);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/tests/Feature/StudentPaymentOrdersTest.php

      
-----------------------------------------------


      <?php

namespace Tests\Feature;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Livewire\Dashboard\Student\StudentProfile;
use App\Models\Admin;
use App\Models\PaymentOrder;
use App\Models\Registration;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\TypeDiscount;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Livewire\Livewire;
use Tests\TestCase;

class StudentPaymentOrdersTest extends TestCase
{
    use DatabaseTransactions;

    protected $activeStudyDate;

    protected function setup(): void
    {
        parent::setUp();


        $admin = Admin::first();

        $this->actingAs($admin, 'admin');

        $this->activeStudyDate = StudyDate::getActiveStudyDate();
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_first_payment_order()
    {

        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_year_id' => $student->study_year_id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $registration->createRegistrationPaymentOrder();

        $this->assertCount(1, $registration->paymentOrders()->get());

        $paymentOrder = $registration->paymentOrders()->first();

        $fees = $registration->register_fees + $registration->tuition_fees;

        $response = $this->post(route('dashboard.admin.payments.store'), [
            'amount' => $fees / 4,
            'payment_order_id' => $paymentOrder->id,
            'student_id' => $student->id,
            'payment_type_id' => 1
        ]);

        $response->assertOk();


        $this->assertEquals(PaymentOrderStatus::STATUS_REGISTRATION, $paymentOrder->status);

        $paymentOrder->refresh();

        $response->assertOk();
        $this->assertEquals(1, $paymentOrder->archive);



        $newPaymentOrder = $registration
            ->paymentOrders()
            ->WhenArchiveOn()
            ->first();


        $this->assertEquals($fees - ($fees / 4), $newPaymentOrder->amount);

        $this->assertEquals(PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS, $newPaymentOrder->status);
    }


    public function test_third_payment_order_level()
    {

        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $registration->createRegistrationPaymentOrder();

        // start first payment order
        $paymentOrder = $registration->paymentOrders()->WhenArchiveOn()->first();

        $fees = $registration->register_fees + $registration->tuition_fees;

        $paymentAmount = $fees / 4;

        $reminderFees = $fees - $paymentAmount;

        $this->post(route('dashboard.admin.payments.store'), [
            'amount' => $paymentAmount,
            'payment_order_id' => $paymentOrder->id,
            'student_id' => $student->id,
            'payment_type_id' => 1
        ]);

        // start second payment order
        $paymentOrder = $registration->paymentOrders()->WhenArchiveOn()->first();

        $this->assertEquals($reminderFees, $paymentOrder->amount);

        $paymentAmount = $paymentAmount / 2;

        $reminderFees -= $paymentAmount;

        $this->post(route('dashboard.admin.payments.store'), [
            'amount' => $paymentAmount,
            'payment_order_id' => $paymentOrder->id,
            'student_id' => $student->id,
            'payment_type_id' => 1
        ]);

        // start third payment order
        $paymentOrder = $registration->paymentOrders()->WhenArchiveOn()->first();

        $this->assertEquals($reminderFees, $paymentOrder->amount);

        $this->post(route('dashboard.admin.payments.store'), [
            'amount' => $reminderFees,
            'payment_order_id' => $paymentOrder->id,
            'student_id' => $student->id,
            'payment_type_id' => 1
        ]);

        // student payed all fees
        $paymentOrder = $registration->paymentOrders()->WhenArchiveOn()->first();

        $this->assertNull($paymentOrder);
    }

    public function test_can_suspend_student()
    {

        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $freezeData = [
            'amount' => 10.0,
            'currency_id' => $student->currency_id,
            'description' => 'description',

        ];

        Livewire::test(StudentProfile::class, ['student' => $student])
            ->set('freezeData', $freezeData)
            ->assertSee($student->full_name)
            ->call('freezeStudent')
            ->assertHasNoErrors('freezeData');

        $count = $registration->paymentOrders()->where([
            'archive' => 0
        ])->count();

        $this->assertEquals(1, $count);

        $paymentOrder = $registration->paymentOrders()->first();

        $this->assertSame($freezeData['amount'], $paymentOrder->amount);
    }

    public function test_can_cancel_suspension_payment_order_student()
    {

        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $freezeData = [
            'amount' => 10.0,
            'currency_id' => $student->currency_id,
            'description' => 'description',

        ];

        Livewire::test(StudentProfile::class, ['student' => $student])
            ->set('freezeData', $freezeData)
            ->call('freezeStudent')
            ->assertHasNoErrors('freezeData')
            ->call('freezeCanceled');

        $count = $registration->paymentOrders()
            ->where('status', PaymentOrderStatus::STATUS_REGISTRATION)
            ->where('archive', 0)
            ->count();

        $this->assertEquals(1, $count);
    }

    public function test_can_dismiss_student()
    {
        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $dismissData = [
            'amount' => 10.0,
            'currency_id' => $student->currency_id,
            'description' => 'description',
        ];

        Livewire::test(StudentProfile::class, ['student' => $student])
            ->set('dismissData', $dismissData)
            ->assertSee($student->full_name)
            ->call('dismissStudent')
            ->assertHasNoErrors('dismissData');

        $activePaymentOrders = $registration->paymentOrders()->where([
            'archive' => 0
        ])->get();

        $this->assertEquals(1, $activePaymentOrders->count());

        $this->assertSame(PaymentOrderStatus::STATUS_DISMISSION, $activePaymentOrders->first()->status);

        $this->assertSame($dismissData['amount'], $activePaymentOrders->first()->amount);
    }

    public function test_can_cancel_active_dismissal_payment_orders()
    {
        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $dismissData = [
            'amount' => 10.0,
            'currency_id' => $student->currency_id,
            'description' => 'description',
        ];

        Livewire::test(StudentProfile::class, ['student' => $student])
            ->set('dismissData', $dismissData)
            ->assertSee($student->full_name)
            ->call('dismissStudent')
            ->assertHasNoErrors('dismissData')
            ->call('dismissCanceled');

        $activePaymentOrders = $registration->paymentOrders()->where([
            'archive' => 0
        ])->get();

        $this->assertEquals(1, $activePaymentOrders->count());

        $this->assertSame(PaymentOrderStatus::STATUS_REGISTRATION, $activePaymentOrders->first()->status);
    }

    public function test_payment_order_is_refreshed_after_discount_is_created()
    {

        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $discountData = [
            'amount' => 10.0,
            'type_discount_id' => TypeDiscount::first()->id,
            'description' => 'description',
        ];

        $registration->createRegistrationPaymentOrder();

        Livewire::test(StudentProfile::class, ['student' => $student])
            ->set('discountData', $discountData)
            ->assertSee($student->full_name)
            ->call('createDiscount')
            ->assertHasNoErrors('discountData');

        $paymentOrder = $registration->paymentOrders()->where('archive', 0)->get();

        $this->assertEquals(1, $paymentOrder->count());

        $this->assertEquals(($registration->justTotal - 10) / 2, $paymentOrder->first()->amount);
    }

    public function test_payment_order_is_refreshed_after_discount_is_deleted()
    {

        //create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id
        ]);

        $discountData = [
            'amount' => 10.0,
            'type_discount_id' => TypeDiscount::first()->id,
            'description' => 'description',
        ];

        Livewire::test(StudentProfile::class, ['student' => $student])
            ->set('discountData', $discountData)
            ->assertSee($student->full_name)
            ->call('createDiscount')
            ->assertHasNoErrors('discountData')
            ->set(['readyToDeleteDiscount' => $registration->discounts()->first()->id])
            ->call('deleteDiscount');

        $paymentOrder = $registration->paymentOrders()->where('archive', 0)->get();

        $this->assertEquals($registration->justTotal / 2 , $paymentOrder->first()->amount);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/tests/Feature/SecondRoundTest.php

      
-----------------------------------------------


      <?php

namespace Tests\Feature;

use App\Livewire\Dashboard\Admin\Result\ShowStudentsResult;
use App\Models\Course;
use App\Models\CourseStudentDegree;
use App\Models\Registration;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\Admin;
use App\Models\CourseStudent;
use App\Models\LevelDegree;
use App\Models\Semester;
use App\Models\StudyPlanDate;
use App\Services\FirstRoundResultService;
use App\Services\SecondRoundResultService;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Livewire;
use Tests\TestCase;

class SecondRoundTest extends TestCase
{
    use DatabaseTransactions;

    protected $activeStudyDate;

    protected function setup(): void
    {
        parent::setUp();


        $admin = Admin::first();

        $this->actingAs($admin, 'admin');

        $this->activeStudyDate = StudyDate::getActiveStudyDate();
    }

    public function test_can_view_first_round_result_after_second_round_result_is_calculated()
    {
        // create student
        $student = Student::factory()->create([
            'study_date_id' => $this->activeStudyDate->id,
            'study_year_id' => 1,
        ]);

        $registration = Registration::factory()->create([
            'student_id' => $student->id,
            'study_date_id' => $this->activeStudyDate->id,
            'study_year_id' => $student->study_year_id
        ]);

        // // create course
        $course = Course::factory()->create();

        // create active study plan
        $semester = Semester::firstWhere('study_year_id', $student->study_date_id);
        $activeStudyPlan = StudyPlanDate::create([
            'department_id' => $student->department_id,
            'course_id' => $course->id,
            'semester_id' => $semester->id,
        ]);

        //attach the course for the student
        CourseStudent::create([
            'student_id' => $student->id,
            'study_year_id' => $student->study_year_id,
            'semester_id' => $semester->id,
            'course_id' => $course->id,
            'hours' => 3,
        ]);

        $first_round_theory = 20;
        $first_round_practical = 10;

        $second_round_theory = 50;
        $second_round_practical = 40;

        // enter first round grades

        $courseStudentDegree = CourseStudentDegree::create(
            [
                'student_id' => $student->id,
                'course_id' => $course->id,
                'study_date_id' => $this->activeStudyDate->id,
                'is_first_exam' => true,
                'theory_degree' =>   $first_round_theory,
                'practical_degree' => $first_round_practical,
                'attendance_status' => LevelDegree::STATUS_ATTENDED,
                'point' => ($first_round_theory + $first_round_practical) / 25,
                'is_pass' => false,
                'degree_code' => 'F'
            ]
        );

        CourseStudent::where('student_id', $student->id)
            ->where('course_id', $course->id)
            ->where('semester_id', $semester->id)
            ->update(['course_student_degree_id' => $courseStudentDegree->id]);

        // calculate first round result
        (new FirstRoundResultService($this->activeStudyDate->id, $student->study_year_id, $student->department_id))
            ->calculateResult();
        // enter second round grades

        $courseStudentDegree = CourseStudentDegree::create(
            [
                'student_id' => $student->id,
                'course_id' => $course->id,
                'study_date_id' => $this->activeStudyDate->id,
                'is_first_exam' => false,
                'theory_degree' =>   $second_round_theory,
                'practical_degree' => $second_round_practical,
                'attendance_status' => LevelDegree::STATUS_ATTENDED,
                'point' => ($second_round_theory + $second_round_practical) / 25,
                'is_pass' => true,
                'degree_code' => 'A+'
            ]
        );

        CourseStudent::where('student_id', $student->id)
            ->where('course_id', $course->id)
            ->where('semester_id', $semester->id)
            ->update(['second_round_course_student_degree_id' => $courseStudentDegree->id]);

        // calculate second round result
        (new SecondRoundResultService($this->activeStudyDate->id, $student->study_year_id, $student->department_id))
            ->calculateSecondRoundResult();

        // get first round result
        $livewire = Livewire::test(ShowStudentsResult::class)
            ->set('selectedStudyYearId', $student->study_year_id)
            ->set('selectedDepartmentId', $student->department_id)
            ->set('activeStudyDate', $this->activeStudyDate)
            ->set('isFirstRound', true)
            ->call('calculate')
            ->assertSet('selectedStudyYearId', $student->study_year_id)
            ->assertSet('selectedDepartmentId', $student->department_id)
            ->assertSet('activeStudyDate', StudyDate::find($student->study_date_id))
            ->assertSet('isFirstRound', true)
            ->assertDontSee('عذرا, لم يتم ايجاد نتيجة.')
            ->assertDontSee('No results were found.')
            ->assertSee($student->university_id);

        // verify you can see first round result
        $livewire
            ->assertSet('students', function ($students) use ($first_round_theory, $first_round_practical) {
                $student = $students->first()->first();
                return $student->theory_degree == $first_round_theory && $student->practical_degree == $first_round_practical;
            });

        // calculate second round
        $livewire
            ->set('isFirstRound', false)
            ->assertSet('isFirstRound', false)
            ->call('calculate');

        $livewire
            ->assertSet('students', function ($students) use ($second_round_theory, $second_round_practical) {
                $student = $students->first()->first();
                return $student->theory_degree == $second_round_theory && $student->practical_degree == $second_round_practical;
            });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/dashboard/students-module.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Facades\Route;
use Mcamara\LaravelLocalization\Facades\LaravelLocalization;

Route::group(
    [
        'prefix' => LaravelLocalization::setLocale(),
        'middleware' => ['localeSessionRedirect', 'localizationRedirect', 'localeViewPath']
    ],
    function () {
        Route::group([
            'prefix' => 'students_module',
        ] , function() {

            //students setting routes
            Route::controller(StudentSettingStudentController::class)->as('students.')->group(function () {

                Route::post('/freeze/store', 'freezeStore')->name('freeze.store');
                Route::post('/freeze', 'freeze')->name('freeze');

                Route::post('/resignation/store', 'resignationStore')->name('resignation.store');
                Route::post('/resignation', 'resignation')->name('resignation');
            });

            Route::get('/students/price', [StudentController::class, 'price'])->name('students.price');
            Route::get('/students/table', [StudentController::class, 'table'])->name('students.table');
            Route::get('/students/data', [StudentController::class, 'data'])->name('students.data');
            Route::delete('/students/bulk_delete', [StudentController::class, 'bulkDelete'])->name('students.bulk_delete');
            Route::get('/students/import_via_excel', [StudentController::class, 'createViaExcel'])->name('students.create_via_excel');
            Route::post('/students/import_via_excel', [StudentController::class, 'storeViaExcel'])->name('students.store_via_excel');
            Route::get('/students/export_empty_excel_sample', [StudentController::class, 'exportEmptyExcelSample'])->name('students.export_empty_excel_sample');
            Route::resource('students', StudentController::class);
        });
    });

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/dashboard/admin.php

      
-----------------------------------------------


      <?php

use App\Http\Controllers\Dashboard\Admin\ActiveStudyPlanArchiveController;
use App\Http\Controllers\Dashboard\Admin\PaymentTypeController;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Dashboard\Admin\RolController;
use App\Http\Controllers\Dashboard\Admin\AjaxController;
use App\Http\Controllers\Dashboard\Admin\HomeController;
use App\Http\Controllers\Dashboard\Admin\AdminController;
use App\Http\Controllers\Dashboard\Admin\CourseController;
use App\Http\Controllers\Dashboard\Admin\ResultController;
use App\Http\Controllers\Dashboard\Admin\PaymentController;
use App\Http\Controllers\Dashboard\Admin\StudentController;
use App\Http\Controllers\Dashboard\Admin\TeacherController;
use App\Http\Controllers\Dashboard\Admin\DiscountController;
use Mcamara\LaravelLocalization\Facades\LaravelLocalization;
use App\Http\Controllers\Dashboard\Admin\Auth\AuthController;
use App\Http\Controllers\Dashboard\Admin\StudyDateController;
use App\Http\Controllers\Dashboard\Admin\StudyPlanController;
use App\Http\Controllers\Dashboard\Admin\StudyYearController;
use App\Http\Controllers\Dashboard\Admin\DepartmentController;
use App\Http\Controllers\Dashboard\Admin\Auth\ProfileController;
use App\Http\Controllers\Dashboard\Admin\PaymentOrderController;
use App\Http\Controllers\Dashboard\Admin\Setting\MainController;
use App\Http\Controllers\Dashboard\Admin\TypeDiscountController;
use App\Http\Controllers\Dashboard\Admin\AdmissionTypeController;
use App\Http\Controllers\Dashboard\Admin\PaymentStatusController;
use App\Http\Controllers\Dashboard\Admin\ActiveStudyPlanController;
use App\Http\Controllers\Dashboard\Admin\CurrencyController;
use App\Http\Controllers\Dashboard\Admin\MarkController;
use App\Http\Controllers\Dashboard\Admin\NationalityController;
use App\Http\Controllers\Dashboard\Admin\ResultDashboardController;
use App\Http\Controllers\Dashboard\Admin\ResultStatisticsController;
use App\Http\Controllers\Dashboard\Admin\Student\StudentSettingStudentController;
use App\Http\Livewire\Dashboard\Admin\ActiveStudyPlan\Show;
use App\Livewire\Dashboard\Admin\ActiveStudyPlan\ActiveStudyPlansArchive;
use FFMpeg\Filters\Video\RotateFilter;
use Livewire\Livewire;

// use App\Http\Controllers\ActiveStudyPlanController;
// use Illuminate\Support\Facades\Route;

// use App\Http\Controllers\Dashboard\Admin\RolController;

// use App\Http\Controllers\Dashboard\Admin\AjaxController;
// use App\Http\Controllers\Dashboard\Admin\HomeController;

// use App\Http\Controllers\Dashboard\Admin\AdminController;
// use App\Http\Controllers\Dashboard\Admin\CourseController;

// use App\Http\Controllers\Dashboard\Admin\PaymentController;
// use App\Http\Controllers\Dashboard\Admin\SettingController;
// use App\Http\Controllers\Dashboard\Admin\StudentController;
// use App\Http\Controllers\Dashboard\Admin\DiscountController;
// use Mcamara\LaravelLocalization\Facades\LaravelLocalization;
// use App\Http\Controllers\Dashboard\Admin\Auth\AuthController;
// use App\Http\Controllers\Dashboard\Admin\StudyDateController;
// use App\Http\Controllers\Dashboard\Admin\StudyYearController;
// use App\Http\Controllers\Dashboard\Admin\DepartmentController;
// use App\Http\Controllers\Dashboard\Admin\Auth\ProfileController;
// use App\Http\Controllers\Dashboard\Admin\PaymentOrderController;
// use App\Http\Controllers\Dashboard\Admin\Setting\MainController;
// use App\Http\Controllers\Dashboard\Admin\TypeDiscountController;
// use App\Http\Controllers\Dashboard\Admin\AdmissionTypeController;
// use App\Http\Controllers\Dashboard\Admin\PaymentStatusController;
// use App\Http\Controllers\Dashboard\Admin\ResultController;
// use App\Http\Controllers\Dashboard\Admin\Setting\UniversityController;
// use App\Http\Controllers\Dashboard\Admin\Student\StudentSettingStudentController;
// use App\Http\Controllers\Dashboard\Admin\TeacherController;
// use App\Http\Controllers\ResultDashboardController;
// use App\Http\Controllers\ResultStatisticsController;


Route::group(
    [
        'prefix' => LaravelLocalization::setLocale(),
        'middleware' => ['localeSessionRedirect', 'localizationRedirect', 'localeViewPath']
    ],
    function () {
        Livewire::setUpdateRoute(function ($handle) {
            return Route::post('/livewire/update', $handle);
        });

        Route::get('/dashboard/login', [AuthController::class, 'loginPage'])->name('dashboard.admin.login.index');
        Route::post('/dashboard/admin/store', [AuthController::class, 'loginStore'])->name('dashboard.admin.login.store');
        Route::get('/dashboard/logout', [AuthController::class, 'logout'])->name('dashboard.admin.logout');

        Route::prefix('dashboard/admin')->name('dashboard.admin.')->middleware(['auth:admin'])->group(function () {


            // Route::get('/home', [HomeController::class, 'index'])->name('home');
            Route::get('/', function () {

                return view('welcome');
            })->name('home');

            // profile route
            Route::get('profile/edit', [ProfileController::class, 'edit'])->name('profile.edit');
            Route::put('profile/update/{user}', [ProfileController::class, 'update'])->name('profile.update');

            //students setting routes
            Route::controller(AjaxController::class)->as('ajax.')->group(function () {

                Route::get('get_students/{department}', 'getStudents')->name('department.students');

                Route::get('get_department_years/{department}', [StudentController::class, 'getDepartmentYears'])->name('departments.getDepartmentYears');
            });


            //students setting routes
            Route::controller(StudentSettingStudentController::class)->as('students.')->group(function () {

                Route::post('/freeze/store', 'freezeStore')->name('freeze.store');
                Route::post('/freeze', 'freeze')->name('freeze');

                Route::post('/resignation/store', 'resignationStore')->name('resignation.store');
                Route::post('/resignation', 'resignation')->name('resignation');
            });

            Route::get('/students/price', [StudentController::class, 'price'])->name('students.price');
            Route::get('/students/table', [StudentController::class, 'table'])->name('students.table');
            Route::get('/students/data', [StudentController::class, 'data'])->name('students.data');
            Route::delete('/students/bulk_delete', [StudentController::class, 'bulkDelete'])->name('students.bulk_delete');
            Route::get('/students/import_via_excel', [StudentController::class, 'createViaExcel'])->name('students.create_via_excel');
            Route::post('/students/import_via_excel', [StudentController::class, 'storeViaExcel'])->name('students.store_via_excel');
            Route::get('/students/export_empty_excel_sample', [StudentController::class, 'exportEmptyExcelSample'])->name('students.export_empty_excel_sample');

            Route::get('/students/dashboard', [HomeController::class, 'studentsModuleDashboard'])->name('students-module');

            Route::get('/students/archive', [StudentController::class, 'archiveIndex'])->name('students.archive.index');
            Route::get('/students/archive/{student}', [StudentController::class, 'archiveShow'])->name('students.archive.show');
            Route::resource('students', StudentController::class);


            //payment_status routes
            Route::get('/payment_status/data', [PaymentStatusController::class, 'data'])->name('payment_status.data');
            Route::delete('/payment_status/bulk_delete', [PaymentStatusController::class, 'bulkDelete'])->name('payment_status.bulk_delete');
            Route::resource('payment_status', PaymentStatusController::class)->except(['show']);

            //payment_orders
            Route::group(['prefix' => 'financial'], function () {

                Route::get('/dashboard', [HomeController::class, 'paymentsModuleDashboard'])->name('payments-module');

                Route::resource('payment_orders', PaymentOrderController::class);

                //payments routes
                Route::get('/payments/invoice/{payment_order}', [PaymentController::class, 'invoice'])->name('payments.invoice');
                Route::get('/payments/invoice/print/{payment}', [PaymentController::class, 'printInvoice'])->name('payments.print_invoice');
                Route::get('/payment/{payment_order}/show', [PaymentController::class, 'ShowPaymentOrder'])->name('students.payment');
                Route::get('/payments/data', [PaymentController::class, 'data'])->name('payments.data');
                Route::delete('/payments/bulk_delete', [PaymentController::class, 'bulkDelete'])->name('payments.bulk_delete');

                Route::get('/payments/archive/import_via_excel', [PaymentController::class, 'createViaExcel'])->name('payments.archive.create_via_excel');
                Route::get('payments/archive/download_empty_sample', [PaymentController::class, 'exportEmptyExcelSample'])->name('payments.archive.export_empty_excel_sample');

                Route::resource('payments', PaymentController::class)->except(['show']);


                Route::post('store_payment_print', [PaymentController::class, 'store'])->name('storePayment-print');
            });

            Route::group(['prefix' => 'settings'], function () {

                //Payment type
                Route::get('payment_methods/data', [PaymentTypeController::class, 'data'])->name('payment_types.data');
                Route::resource('payment_methods', PaymentTypeController::class)->names('payment_types');

                //Currencies
                Route::get('currencies/data', [CurrencyController::class, 'data'])->name('currencies.data');
                Route::resource('currencies', CurrencyController::class);

                //Nationalites
                Route::get('nationalities/data', [NationalityController::class, 'data'])->name('nationalities.data');
                Route::resource('nationalities', NationalityController::class);

                //study_plan
                Route::get('/study_plans/data', [StudyPlanController::class, 'data'])->name('study_plans.data');
                Route::get('/study_plans/getDepartments', [StudyPlanController::class, 'getDepartments'])->name('study_plans.getDepartments');
                Route::get('/study_plans/getSemesters', [StudyPlanController::class, 'getSemesters'])->name('study_plans.getSemesters');
                Route::get('/study_plans/getDepartmentCourses', [StudyPlanController::class, 'getDepartmentCourses'])->name('study_plans.getDepartmentCourses');
                Route::delete('/study_plans/bulk_delete', [StudyPlanController::class, 'bulkDelete'])->name('study_plans.bulk_delete');
                Route::get('/study_plans/getStudyPlanCourses', [StudyPlanController::class, 'getStudyPlanCourses'])->name('study_plans.getStudyPlanCourses');
                Route::get('/study_plans/{studyPlan}/edit_registrations', [StudyPlanController::class, 'editRegistrations'])->name('study_plans.edit_registrations');
                Route::put('/study_plans/update/{studyPlan}/update_registrations', [StudyPlanController::class, 'updateRegistrations'])->name('study_plans.update_registrations');
                Route::get('/study_plans/getStudyPlanRegistrations', [StudyPlanController::class, 'getStudyPlanRegistrations'])->name('study_plan.getStudyPlanRegistrations');
                Route::get('/study_plans/import_via_excel', [StudyPlanController::class, 'createViaExcel'])->name('study_plans.create_via_excel');
                Route::post('/study_plans/import_via_excel', [StudyPlanController::class, 'storeViaExcel'])->name('study_plans.store_via_excel');
                Route::get('/study_plans/export_empty_excel_sample', [StudyPlanController::class, 'exportEmptyExcelSample'])->name('study_plans.export_empty_excel_sample');

                Route::resource('study_plans', StudyPlanController::class);


                //admission_types routes
                Route::get('/admission_types/data', [AdmissionTypeController::class, 'data'])->name('admission_types.data');
                Route::delete('/admission_types/bulk_delete', [AdmissionTypeController::class, 'bulkDelete'])->name('admission_types.bulk_delete');
                Route::resource('admission_types', AdmissionTypeController::class)->except(['show']);

                //admins routes

                Route::get('/admins/data', [AdminController::class, 'data'])->name('admins.data');
                Route::delete('/admins/bulk_delete', [AdminController::class, 'bulkDelete'])->name('admins.bulk_delete');
                Route::resource('admins', AdminController::class)->except(['show']);

                //roles routes
                Route::get('/roles/data', [RolController::class, 'data'])->name('roles.data');
                Route::delete('/roles/bulk_delete', [RolController::class, 'bulkDelete'])->name('roles.bulk_delete');
                Route::resource('roles', RolController::class)->except(['show']);

                //departments routes
                Route::get('/departments/data', [DepartmentController::class, 'data'])->name('departments.data');
                Route::delete('/departments/bulk_delete', [DepartmentController::class, 'bulkDelete'])->name('departments.bulk_delete');
                Route::resource('departments', DepartmentController::class);

                //study_years routes
                Route::get('/study_years/data', [StudyYearController::class, 'data'])->name('study_years.data');
                Route::delete('/study_years/bulk_delete', [StudyYearController::class, 'bulkDelete'])->name('study_years.bulk_delete');
                Route::resource('study_years', StudyYearController::class)->except(['show']);
                //type_discounts routes
                Route::get('/type_discounts/data', [TypeDiscountController::class, 'data'])->name('type_discounts.data');
                Route::delete('/type_discounts/bulk_delete', [TypeDiscountController::class, 'bulkDelete'])->name('type_discounts.bulk_delete');
                Route::resource('type_discounts', TypeDiscountController::class)->except(['show']);

                //type_discounts routes
                Route::get('/discounts/data', [DiscountController::class, 'data'])->name('discounts.data');
                Route::delete('/discounts/bulk_delete', [DiscountController::class, 'bulkDelete'])->name('discounts.bulk_delete');
                Route::resource('discounts', DiscountController::class)->except(['show']);


                Route::get('/settings/main', [MainController::class, 'index'])->name('settings.main.index');
                Route::put('/settings/main/update/{university}', [MainController::class, 'update'])->name('settings.main.update');

                Route::get('/settings/my_profile', [ProfileController::class, 'index'])->name('settings.profile.index');
                Route::put('/settings/my_profile/update/{admin}', [ProfileController::class, 'update'])->name('settings.profile.update');

                //courses routes
                Route::get('/courses/data', [CourseController::class, 'data'])->name('courses.data');
                Route::delete('/courses/bulk_delete', [CourseController::class, 'bulkDelete'])->name('courses.bulk_delete');
                Route::get('/courses/import_via_excel', [CourseController::class, 'createViaExcel'])->name('courses.create_via_excel');
                Route::post('/courses/import_via_excel', [CourseController::class, 'storeViaExcel'])->name('courses.store_via_excel');
                Route::get('/courses/export_empty_excel_sample', [CourseController::class, 'exportEmptyExcelSample'])->name('courses.export_empty_excel_sample');

                Route::resource('courses', CourseController::class);
            });

            Route::group(['prefix' => 'study'], function () {

                //active study_plan archive
                Route::get('/active_study_plan/archive', [ActiveStudyPlanArchiveController::class, 'index'])->name('active_study_plan.archive.index');
                Route::get('/active_study_plan/import_via_excel', [ActiveStudyPlanArchiveController::class, 'createViaExcel'])->name('active_study_plan.archive.create_via_excel');
                Route::get('active_study_plan/download_empty_sample', [ActiveStudyPlanArchiveController::class, 'exportEmptyExcelSample'])->name('active_study_plan.archive.export_empty_excel_sample');

                //active study_plan
                Route::get('/active_study_plan/data', [ActiveStudyPlanController::class, 'data'])->name('active_study_plan.data');
                Route::get('/active_study_plan', [ActiveStudyPlanController::class, 'index'])->name('active_study_plan.index');
                Route::get('/active_study_plan/create', [ActiveStudyPlanController::class, 'create'])->name('active_study_plan.create');
                // Route::get('/active_study_plan/getStudyPlanRegistrations', [ActiveStudyPlanController::class, 'getStudyPlanRegistrations'])->name('active_study_plan.getStudyPlanRegistrations');
                Route::get('/active_study_plan/getStudyPlanCourses', [ActiveStudyPlanController::class, 'getStudyPlanCourses'])->name('active_study_plan.getStudyPlanCourses');
                Route::get('/active_study_plan/establish_study_plan', [ActiveStudyPlanController::class, 'establishStudyPlan'])->name('active_study_plan.establish_study_plan');
                Route::get('/active_study_plan/{studyPlanDate}', [ActiveStudyPlanController::class, 'show'])->name('active_study_plan.show');
                // Route::get('/active_study_plan/{studyPlanDate}', Show::class)->name('active_study_plan.show');
                Route::post('/active_study_plan', [ActiveStudyPlanController::class, 'store'])->name('active_study_plan.store');
                Route::get('/active_study_plan/{studyPlanDate}/edit', [ActiveStudyPlanController::class, 'edit'])->name('active_study_plan.edit');
                Route::put('/active_study_plan/update/{studyPlanDate}', [ActiveStudyPlanController::class, 'update'])->name('active_study_plan.update');
                // Route::get('/active_study_plan/{studyPlanDate}/edit_registrations', [ActiveStudyPlanController::class, 'editRegistrations'])->name('active_study_plan.edit_registrations');
                // Route::get('/active_study_plan/{studyPlanDate}/edit_registrations', Show::class)->name('active_study_plan.edit_registrations');
                // Route::put('/active_study_plan/update/{studyPlanDate}/update_registrations', [ActiveStudyPlanController::class, 'updateRegistrations'])->name('active_study_plan.update_registrations');

                Route::delete('/active_study_plan/{studyPlanDate}/', [ActiveStudyPlanController::class, 'destroy'])->name('active_study_plan.destroy');
                // Route::get('/active_study_plans/{studyPlanDate}',[ActiveStudyPlanController::class,'show'])->name('active_study_plan.show');
                // Route::resource('active_study_plans', ActiveStudyPlanController::class);

                //study_dates routes
                Route::get('/study_dates/data', [StudyDateController::class, 'data'])->name('study_dates.data');
                Route::delete('/study_dates/bulk_delete', [StudyDateController::class, 'bulkDelete'])->name('study_dates.bulk_delete');
                Route::resource('study_dates', StudyDateController::class)->except(['show']);
            });

            //results

            Route::get('/results/data', [ResultController::class, 'data'])->name('results.data');
            Route::delete('/results/bulk_delete', [ResultController::class, 'bulkDelete'])->name('results.bulk_delete');

            Route::get('/results/create_result_courses', [ResultController::class, 'createResultCourses'])->name('results.create-result-courses');
            Route::post('/results/create_result_courses', [ResultController::class, 'storeResultCourses'])->name('results.store-result-courses');

            Route::get('/results/getCoursesData', [ResultController::class, 'getCoursesData'])->name('results.get-courses-data');
            Route::get('/results/create_students_result', [ResultController::class, 'createStudentsResult'])->name('results.create-students-result');
            Route::post('/results/create_students_result', [ResultController::class, 'storeStudentsResult'])->name('results.store-students-result');

            Route::get('/results/getCourseRegistrations', [ResultController::class, 'getCourseRegistrations'])->name('results.get-course-registrations');
            Route::get('/results/getStudentsResult', [ResultController::class, 'getStudentsResult'])->name('results.calculate-result');
            Route::get('/results/createSecondRoundResult', [ResultController::class, 'createSecondRoundResult'])->name('results.create-second-round-result');
            Route::get('/results/getCourseRegistrationsInSecondRound', [ResultController::class, 'getCourseRegistrationsInSecondRound'])->name('results.get-course-registrations-in-second-round');
            Route::post('/results/storeRoundTwo', [ResultController::class, 'storeRoundTwo'])->name('results.store-round-two');


            Route::get('results/statistics', [ResultStatisticsController::class, 'statistics'])->name('results.statistics');
            Route::get('results/dashboard', [ResultDashboardController::class, 'index'])->name('results.dashboard');
            Route::get('results/dashboard/data', [ResultDashboardController::class, 'data'])->name('results.dashboard.data');

            Route::get('/teachers/data', [TeacherController::class, 'data'])->name('teachers.data');
            Route::resource('teachers', TeacherController::class);

            Route::get('results/statistics', [ResultStatisticsController::class, 'statistics'])->name('results.statistics');
            Route::get('results/dashboard', [ResultDashboardController::class, 'index'])->name('results.dashboard');
            Route::get('results/dashboard/data', [ResultDashboardController::class, 'data'])->name('results.dashboard.data');

            Route::get('results/grades', [MarkController::class, 'index'])->name('marks.index');
            Route::get('results/grades/data', [MarkController::class, 'data'])->name('marks.data');
            Route::get('results/grades/import_via_excel', [MarkController::class, 'createViaExcel'])->name('marks.create_via_excel');
            Route::get('results/grades/download_empty_sample', [MarkController::class, 'exportEmptyExcelSample'])->name('marks.export_empty_excel_sample');

            Route::resource('results', ResultController::class);
        }); //end of dashboard routes

        //results

        // Route::get('/results/data', [ResultController::class, 'data'])->name('results.data');
        // Route::delete('/results/bulk_delete', [ResultController::class, 'bulkDelete'])->name('results.bulk_delete');

        // Route::get('/results/create_result_courses', [ResultController::class, 'createResultCourses'])->name('results.create-result-courses');
        // Route::post('/results/create_result_courses', [ResultController::class, 'storeResultCourses'])->name('results.store-result-courses');

        // Route::get('/results/getCoursesData', [ResultController::class, 'getCoursesData'])->name('results.get-courses-data');
        // Route::get('/results/create_students_result', [ResultController::class, 'createStudentsResult'])->name('results.create-students-result');
        // Route::post('/results/create_students_result', [ResultController::class, 'storeStudentsResult'])->name('results.store-students-result');

        // Route::get('/results/getCourseRegistrations', [ResultController::class, 'getCourseRegistrations'])->name('results.get-course-registrations');
        // Route::get('/results/getStudentsResult', [ResultController::class, 'getStudentsResult'])->name('results.calculate-result');
        // Route::get('/results/createSecondRoundResult', [ResultController::class, 'createSecondRoundResult'])->name('results.create-second-round-result');
        // Route::get('/results/getCourseRegistrationsInSecondRound', [ResultController::class, 'getCourseRegistrationsInSecondRound'])->name('results.get-course-registrations-in-second-round');
        // Route::post('/results/storeRoundTwo', [ResultController::class, 'storeRoundTwo'])->name('results.store-round-two');

    }
);//end of Route group
//             Route::get('results/statistics', [ResultStatisticsController::class, 'statistics'])->name('results.statistics');
//             Route::get('results/dashboard', [ResultDashboardController::class, 'index'])->name('results.dashboard');
//             Route::get('results/dashboard/data', [ResultDashboardController::class, 'data'])->name('results.dashboard.data');

//             Route::resource('results', ResultController::class);
//         }); //end of dashboard routes

//     }
// );//end of Route group

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/TypeDiscountSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class TypeDiscountSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $types = ['وزاري', 'ابناء معلمين', 'من الجامعة'];

        foreach ($types as $type) {
            
            \App\Models\TypeDiscount::create([
                'type' => $type,
            ]);

        }//end of for each departments

    }//end of run
    
}//end of class
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/StudyYearSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Department;
use Illuminate\Database\Seeder;

class StudyYearSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $studyYears = ['الفرقة الاولي','الفرقة الثانية','الفرقة الثالثة', 'الفرقة الرابعة', 'الفرقة الخامسة', 'الفرقة السادسة'];

        $departments = Department::pluck('id')->toArray();
        foreach ($studyYears as $index=>$studyYear) {

            $year = \App\Models\StudyYear::create([
                'name'   => $studyYear,
                'number' => $index + 1,
            ]);

            // foreach ($variable as $key => $value) {
            //     # code...
            // }
            $year->departments()->sync($departments);

        }//end of for each studyYear

    }//end of run

}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/StudyPlanSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class StudyPlanSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/StudyDateSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Currency;
use App\Models\StudyDate;
use Illuminate\Database\Seeder;

class StudyDateSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {

        $register_fees = [];

        foreach(Currency::all() as $currency)
        {
            $register_fees[$currency->id] = 3000;
        }

        StudyDate::create([
            'name'              => '2022 - 2023',
            'start_reg'         => now(),
            'end_reg'           => now(),
            'archived'          => 1,
            'register_fees' => $register_fees,
        ]);

    } //end of run

}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/StudentSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Models\PaymentOrder;
use App\Models\Registration;
use App\Models\Student;
use Illuminate\Database\Seeder;

class StudentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $students = ['محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن','محمد','احمد', 'عبد الحمن', 'ابراهيم', 'ابراهيم' , 'محمد','احمد', 'عبد الحمن',];

        foreach ($students as $student) {

            $currency = ['sdg', 'usd'];
            shuffle($currency);
            $study_year = [1,2,3,4];
            shuffle($study_year);

            $student = Student::create([
                'university_id'     => rand(1000000, 9999999),
                'batch'             => rand(1, 130),
                'name1'             => $student . rand(2,10),
                'name2'             => $student,
                'name3'             => $student,
                'name4'             => $student,
                'phone'             => 249114929635,
                'address'           => 'بحري شمبات',
                'father_name'       => 'ابراهيم احمد',
                'father_phone1'     => 249114929635,
                'father_phone2'     => 249114929635,
                'Workplace'         => 'طبيب اسنان',
                'department_id'     => 1,
                'study_year_id'     => $study_year[0],
                'study_date_id'     => 1,
                'admission_type_id' => 1,
                'currency' => $currency[0]
            ]);



            $r = Registration::create([
                'student_id' => $student->id,
                'study_date_id' => 1,
                'status' => RegistrationStatus::STATUS_UNREGISTERED,
                'currency' => $currency[0],
                'register_fees' => 2000,
                'tuition_fees' => 4000,
                'study_year_id' => $study_year[0],
            ]);

            PaymentOrder::create([
                'student_id' => $student->id,
                'study_date_id' => 1,
                'status' => PaymentOrderStatus::STATUS_REGISTRATION,
                'registration_id' => $r->id ,
                'amount' => 3000,
                'total_amount' => 3000,
                'archive' => 0,
                'currency' => $currency[0],
            ]);

        }//end of for each student

    }//end of run

}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/StatusSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class StatusSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $status = ['لم يسجل','سجل','تسجيل كورس','جمد','استقال','فصل','متبقي اقساط', 'تخفيض'];

        foreach ($status as $data) {

            \App\Models\Status::create([
                'name' => $data,
            ]);

        }//end of for each studyYear

    }//end of run

}//end of class
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/SettingsSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Settings;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class SettingsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $settings = [
            ['key' => 'name' , 'value' => 'Royal College'],
            ['key' => 'allow_enter_grades' , 'value' => true],
        ];

        Settings::insert($settings);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/SemesterSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Semester;
use Illuminate\Database\Seeder;

class SemesterSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $semesters = ['الأول', 'الثاني', 'الثالث', 'الرابع', 'الخامس', 'السادس', 'السابع', 'الثامن', 'التاسع', 'العاشر'];

        foreach ($semesters as $key => $semester) {
            Semester::create([
                'id' => $key + 1,
                'name' => "السمستر {$semester}",
                'study_year_id' => (int)round(($key + 1) / 2),
            ]);
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/RolPermissionSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;

class RolPermissionSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        //recorder
        $roleRecorder = Role::create([
            'name'       => 'recorder',
            'guard_name' => 'admin',
        ]);
        $roleRecorder->givePermissionTo();

    }//end of run

}//end of class
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/PermissionsDemoSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;
use Spatie\Permission\PermissionRegistrar;

class PermissionsDemoSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Reset cached roles and permissions
        app()[PermissionRegistrar::class]->forgetCachedPermissions();

        $role = Role::updateOrCreate([
            'name'       => 'admin',
            'guard_name' => 'admin',
        ]);

        $permissions = [
            'home', 'admins', 'roles', 'settings', 'departments',
            'study_dates', 'study_years','students', 'admission_types',
             'payment_status', 'payments', 'payment_orders', 'receipts',
            'discounts', 'type_discounts', 'reports_accountant',
            'reports_recorder','study_plans','active_study_plan','results' , 'teachers',
            'currencies' , 'nationalities'
        ];

        foreach ($permissions as $data) {

            $cruds = ['create', 'read', 'update', 'delete'];

            foreach ($cruds as $crud) {

                Permission::updateOrCreate(['guard_name' => 'admin', 'name' => $crud . '-' . $data]);
            } //end of each

        } //end of each

        $roleSuperAdmin = Role::updateOrCreate([
            'name'       => 'super_admin',
            'guard_name' => 'admin',
        ]);

        $roleSuperAdmin->givePermissionTo(Permission::all());

        /// the teacher

        $roleTeacher = Role::updateOrCreate([
            'name'       => 'teacher',
            'guard_name' => 'admin',
        ]);

        $permissions = [
            'home', 'admins', 'roles', 'settings', 'departments',
            'study_dates', 'study_years','students', 'admission_types',
             'payment_status', 'payments', 'payment_orders', 'receipts',
            'discounts', 'type_discounts', 'reports_accountant',
            'reports_recorder','study_plans','active_study_plan','results',
            'teachers'
        ];


        foreach ($permissions as $data) {

            $cruds = ['create', 'read', 'update', 'delete'];

            foreach ($cruds as $crud) {

                $permission = $crud . '-' . $data;

                $roleTeacher->givePermissionTo($permission);
            } //end of each
            // $role->revokePermissionTo('update-payment_orders');

        } //end of each


        /// the accountant
        $roleAccountant = Role::updateOrCreate([
            'name'       => 'المحاسب- accountant',
            'guard_name' => 'admin',
        ]);

        $permissions = ['payments', 'payment_orders', 'receipts', 'reports_accountant'];

        foreach ($permissions as $data) {

            $cruds = ['create', 'read', 'update', 'delete'];

            foreach ($cruds as $crud) {

                $permission = $crud . '-' . $data;

                $roleAccountant->givePermissionTo($permission);
            } //end of each
            // $role->revokePermissionTo('update-payment_orders');

        } //end of each

        //recorder
        // $permissions = ['departments','study_dates','study_years', 'students', 'admission_types','reports_recorder'];
        $permissions = ['students', 'discounts', 'reports_recorder'];

        $roleRecorder = Role::updateOrCreate([
            'name'       => 'المسجل - register',
            'guard_name' => 'admin',
        ]);

        foreach ($permissions as $data) {

            $cruds = ['create', 'read', 'update', 'delete'];

            foreach ($cruds as $crud) {

                $permission = $crud . '-' . $data;

                $roleRecorder->givePermissionTo($permission);
            } //end of each

        } //end of each

    } //end of run

}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/PaymentTypeSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class PaymentTypeSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $paymentTypes = ['بنك','كاش','شيك'];

        foreach ($paymentTypes as $paymentType) {

            \App\Models\PaymentType::create([
                'type'    => $paymentType,
                'name'    => 'اسم الحساب',
                'number'  => 1234355456,
            ]);

        }//end of for each

    }//end of run

}//end of class
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/PaymentStatusSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class PaymentStatusSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $paymentStatuss = ['تسجيل', 'سداد'];

        foreach ($paymentStatuss as $paymentStatus) {

            \App\Models\PaymentStatus::create([
                'name' => $paymentStatus,
            ]);

        }//end of for each studyYear

    }//end of run

}//end of class
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/PaymentSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class PaymentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/NationalitySeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Nationality;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class NationalitySeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $nationalities = [
            ['name' => 'Sudanese'],
            ['name' => 'Foreign'],
        ];

        Nationality::insert($nationalities);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/ModulesSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Rol;
use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class ModulesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        //How to seed specific seeder?
        //php artisan db:seed --class=ModulesSeeder



        $permissions = [
            // 'home', 'admins', 'roles', 'settings', 'departments',
            // 'study_dates', 'study_years', 'students', 'admission_types',
            // 'payment_status', 'payments', 'payment_orders', 'receipts',
            // 'discounts', 'type_discounts', 'reports_accountant',
            // 'reports_recorder', 'study_plans', 'active_study_plan', 'results',
            // 'teachers'
            'students_module', 'elearning_module', 
            'study_plan_module', 'results_module', 
            'payments_module', 'settings_module',
            'elearning','teachers',
        ];

        //q: How to seed specific seeder?
        //
        $cruds = ['create', 'read', 'update', 'delete'];

        foreach ($permissions as $data) {
            foreach ($cruds as $crud) {
                Permission::updateOrCreate(['guard_name' => 'admin', 'name' => $crud . '-' . $data]);
            }
        }

        $roleSuperAdmin = Role::findByName('super_admin', 'admin');

        $roleSuperAdmin->givePermissionTo(Permission::all());
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/LevelsDegreeSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\LevelDegree;
use Illuminate\Database\Seeder;

class LevelsDegreeSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        LevelDegree::insert([
            [
                'id' => 1,
                'min_degree' => 90,
                'max_degree' => 100,
                'level' => 'ممتاز',
                'level_code' => 'A+',
                'point' => 4,
                'min_point' => 3.6,
                'max_point' => 4,
            ],
            [
                'id' => 2,
                'min_degree' => 80,
                'max_degree' => 89.99,
                'level' => 'ممتاز',
                'level_code' => 'A',
                'point' => 3.5,
                'min_point' => 3.2,
                'max_point' => 3.59,
            ],
            [
                'id' => 3,
                'min_degree' => 70,
                'max_degree' => 79.99,
                'level' => 'جيد جدا',
                'level_code' => 'B+',
                'point' => 3,
                'min_point' => 2.8,
                'max_point' => 3.19,
            ],
            [
                'id' => 4,
                'min_degree' => 60,
                'max_degree' => 69.99,
                'level' => 'جيد',
                'level_code' => 'B',
                'point' => 2.5,
                'min_point' => 2.4,
                'max_point' => 2.79,
            ],
            [
                'id' => 5,
                'min_degree' => 50,
                'max_degree' => 59.99,
                'level' => 'مقبول',
                'level_code' => 'C',
                'point' => 2,
                'min_point' => 2,
                'max_point' => 2.39,
            ],
            [
                'id' => 6,
                'min_degree' => 45,
                'max_degree' => 49.99,
                'level' => 'ضعيف',
                'level_code' => 'D',
                'point' => 0.5,
                'min_point' => 1.8,
                'max_point' => 1.99,
            ],
            [
                'id' => 7,
                'min_degree' => 0,
                'max_degree' => 44.99,
                'level' => 'رسوب',
                'level_code' => 'F',
                'point' => 0,
                'min_point' => 0,
                'max_point' => 0,
            ],
        ]);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/DepartmentSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Currency;
use Illuminate\Database\Seeder;

class DepartmentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $departments = [
            'بكالوريوس IT',
            'بكالوريوس SE',
            'بكالوريوس IS',
            'بكالوريوس MIS',
            'بكالوريوس MS',
            'بكالوريوس AIS',
            'دبلوم IT',
            'دبلوم SE',
            'دبلوم IS',
            'دبلوم MIS',
            'دبلوم MS',
            'دبلوم AIS',
        ];

        foreach ($departments as $department) {

            $department = \App\Models\Department::create([
                'name'          => $department,
                'college_id'    => 1,
            ]);

            $tuitionFees = [];

            foreach(Currency::all() as $currency)
            {
                $tuitionFees[$currency->id] = 2000;
            }

            \App\Models\DepartmentPrice::create([
                'study_date_id' => 1,
                'department_id' => $department->id,
                'tuition_fees' => $tuitionFees,
            ]);
        } //end of for each departments

    } //end of run

}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/DatabaseSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     *
     * @return void
     */
    public function run()
    {
        $this->call(PermissionsDemoSeeder::class);
        $this->call(SettingsSeeder::class);
        $this->call(BatchSeeder::class);
        $this->call(CurrencySeeder::class);
        $this->call(NationalitySeeder::class);
        $this->call(AdmissionTypeSeeder::class);
        $this->call(PaymentStatusSeeder::class);
        $this->call(AdminsTableSeeder::class);
        $this->call(StudyDateSeeder::class);
        $this->call(DepartmentSeeder::class);
        $this->call(StudyYearSeeder::class);
        $this->call(StatusSeeder::class);
        $this->call(PaymentTypeSeeder::class);
        $this->call(TypeDiscountSeeder::class);
        $this->call(SemesterSeeder::class);
        $this->call(CourseSeeder::class);
        $this->call(LevelsDegreeSeeder::class);
        $this->call(ModulesSeeder::class);
        // $this->call(StudentSeeder::class);

    }//end of run

}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/CurrencySeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Currency;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class CurrencySeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        //
        //
        $currencies = [
            ['name' => 'American dollar' , 'code' => 'USD'],
            ['name' => 'Sudanese pound' , 'code' => 'SDG'],
        ];

        Currency::insert($currencies);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/CourseSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Course;
use App\Models\Department;
use Illuminate\Support\Str;
use Illuminate\Database\Seeder;

class CourseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $courses = ['القران الكريم','اللغة العربية','الحسبان','العلوم','الحاسوب','الحديث','الكيمياء'];

        foreach ($courses as $value) {
            Course::create([
                'name' => $value,
                'name_en' => $value,
                'religion' => 1,
                'hours' => 3,
                'code' => Str::random(5),
                'department_id' => Department::inRandomOrder()->first()->id,
            ]);
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/BatchSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use App\Models\Batch;
use Illuminate\Database\Seeder;

class BatchSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $batches = ['الاولى','الثانية','الثالثة','الرابعة','الخامسة','السادسة',];

        foreach ($batches as $key => $batch) {
            Batch::create([
                'name' => "الدفعة {$batch}",
            ]);
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/AdmissionTypeSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class AdmissionTypeSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $admissionTypes = ['قبول عام','قبول خاص','اجانب'];

        foreach ($admissionTypes as $admissionType) {
            
            \App\Models\AdmissionType::create([
                'type' => $admissionType,
            ]);

        }//end of for each departments

    }//end of run
    
}//end of class
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/seeders/AdminsTableSeeder.php

      
-----------------------------------------------


      <?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class AdminsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $admin = \App\Models\Admin::create([
            'name'     => 'admin',
            'email'    => 'super_admin@app.com',
            'password' => bcrypt('123123123'),
        ]);

        $admin->assignRole('super_admin');

        \App\Models\University::create([
            'name'    => 'كلية الفارابي الجامعة - Al-Farabi University College',
            'hold'    => '',
        ]);

        \App\Models\College::create([
            'name' => 'كلية الفارابي الجامعة - Al-Farabi University College',
        ]);

        $admin1 = \App\Models\Admin::create([
            'name'     => 'admin1',
            'email'    => 'admin1@gmail.com',
            'password' => bcrypt('123123123'),
        ]);

        $admin1->assignRole('admin');

        $admin2 = \App\Models\Admin::create([
            'name'     => 'admin2',
            'email'    => 'admin2@gmail.com',
            'password' => bcrypt('123123123'),
        ]);

        $admin2->assignRole('admin');

        $admin3 = \App\Models\Admin::create([
            'name'     => 'admin3',
            'email'    => 'admin3@gmail.com',
            'password' => bcrypt('123123123'),
        ]);

        $admin3->assignRole('admin');

    }//end of run
    
}//end of class
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/factories/UserFactory.php

      
-----------------------------------------------


      <?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

class UserFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            'name' => $this->faker->name(),
            'email' => $this->faker->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     *
     * @return \Illuminate\Database\Eloquent\Factories\Factory
     */
    public function unverified()
    {
        return $this->state(function (array $attributes) {
            return [
                'email_verified_at' => null,
            ];
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/factories/StudyPlanFactory.php

      
-----------------------------------------------


      <?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

class StudyPlanFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            //
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/factories/StudentFactory.php

      
-----------------------------------------------


      <?php

namespace Database\Factories;

use App\Models\AdmissionType;
use App\Models\Batch;
use App\Models\Currency;
use App\Models\Department;
use App\Models\StudyDate;
use App\Models\StudyYear;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Student>
 */
class StudentFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition()
    {
        return [
            'name1' => $this->faker->name(),
            'name2' => $this->faker->name(),
            'name3' => $this->faker->name(),
            'name4' => $this->faker->name(),


            'name1_en' => $this->faker->name(),
            'name2_en' => $this->faker->name(),
            'name3_en' => $this->faker->name(),
            'name4_en' => $this->faker->name(),

            'university_id' => $this->faker->randomNumber(8),
            'phone' => $this->faker->phoneNumber(),
            'image' => 'dashboard/images/student.png',
            'currency_id' => Currency::inRandomOrder()->first()->id,

            'batch_id' => Batch::inRandomOrder()->first()->id,
            'department_id' => Department::inRandomOrder()->first()->id,
            'study_date_id' => StudyDate::inRandomOrder()->first()->id,
            'study_year_id' => StudyYear::inRandomOrder()->first()->id,
            'admission_type_id' => AdmissionType::inRandomOrder()->first()->id,

        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/factories/SemesterFactory.php

      
-----------------------------------------------


      <?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

class SemesterFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            //
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/factories/RegistrationFactory.php

      
-----------------------------------------------


      <?php

namespace Database\Factories;

use App\Enums\RegistrationStatus;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use Illuminate\Database\Eloquent\Factories\Factory;

class RegistrationFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        $studyDate = StudyDate::inRandomOrder()->first();

        $student = Student::with('department.activePrice')->inRandomOrder()->first();

        $currency_id = $student->currency_id;

        // dd($student->department->activePrice);
        $activePrice = $student->department->activePrice ;

        $register_fees = $studyDate->register_fees[$currency_id];
        $tuition_fees = $activePrice->tuition_fees[$currency_id];

        return [
            'student_id' => Student::inRandomOrder()->first()->id,
            'study_year_id' => StudyYear::inRandomOrder()->first()->id,
            'study_date_id' => $studyDate->id,
            'currency_id' => $currency_id ,
            'register_fees' => $register_fees,
            'tuition_fees' => $tuition_fees,
            'status' => RegistrationStatus::STATUS_UNREGISTERED,
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/factories/CourseFactory.php

      
-----------------------------------------------


      <?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

class CourseFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            //
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/factories/BatchFactory.php

      
-----------------------------------------------


      <?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

class BatchFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            //
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_25_072014_add_second_round_course_student_degree_id_to_course_students.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('course_students', function (Blueprint $table) {

            $table->foreignId('second_round_course_student_degree_id')->nullable()->constrained('course_student_degrees');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('course_students', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_18_124510_add_full_name_to_admins_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('admins', function (Blueprint $table) {
            $table->string('full_name')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('admins', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_10_091145_drop_nationality_column_from_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('students', function (Blueprint $table) {
            $table->dropColumn(['nationality']);
            $table->foreignId('nationality_id')->nullable()->constrained();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('students', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_10_083719_create_nationalities_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('nationalities', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('nationalities');
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_150251_drop_currency_column_from_discounts_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('discounts', function (Blueprint $table) {
            $table->dropColumn(['currency']);
            $table->foreignId('currency_id')->nullable()->constrained();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('discounts', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_124207_drop_currency_from_payments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('payments', function (Blueprint $table) {
            $table->dropColumn(['currency']);
            $table->foreignId('currency_id')->nullable()->constrained();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('payments', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_123957_drop_currency_from_payment_orders_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('payment_orders', function (Blueprint $table) {
            $table->dropColumn(['currency']);
            $table->foreignId('currency_id')->nullable()->constrained();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('payment_orders', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_103312_add_tuition_fees_to_department_prices_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('department_prices', function (Blueprint $table) {
            $table->json('tuition_fees')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('department_prices', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_095304_add_registration_fees_to_study_dates_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('study_dates', function (Blueprint $table) {
            $table->json('register_fees')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('study_dates', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_080841_add_currency_id_to_registrations_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('registrations', function (Blueprint $table) {
            $table->foreignId('currency_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->dropColumn(['currency']);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('registrations', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_080114_add_currency_id_to_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('students', function (Blueprint $table) {
            $table->foreignId('currency_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();

            $table->dropColumn(['currency']);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('students', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_09_070029_create_currencies_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('currencies', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('code');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('currencies');
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2024_01_07_100813_create_settings_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('settings', function (Blueprint $table) {
            $table->id();
            $table->string('key');
            $table->string('value')->nullable();
            $table->string('category')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('settings');
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_11_30_111843_drop_status_id_from_payment_orders_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('payment_orders', function (Blueprint $table) {
            $table->dropForeign(['status_id']);
            $table->dropColumn('status_id');
            $table->string('status')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('payment_orders', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_11_30_102621_add_status_column_to_registrations_column.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('registrations', function (Blueprint $table) {
            $table->string('status')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('registrations_column', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_11_30_102213_drop_status_id_from_registrations_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('registrations', function (Blueprint $table) {
            $table->dropForeign(['status_id']);
            $table->dropColumn('status_id');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('registrations', function (Blueprint $table) {
            //
        });
    }
};

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_16_083619_add_has_approved_column_to_study_plan_dates.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddHasApprovedColumnToStudyPlanDates extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('study_plan_dates', function (Blueprint $table) {
            $table->boolean('is_first_round_approved')->nullable()->default(false);
            $table->string('first_round_approve_date')->nullable();
            $table->boolean('is_second_round_approved')->nullable()->default(false);
            $table->string('second_round_approve_date')->nullable();

        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('study_plan_dates', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_10_065428_create_lecture_student_absent.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateLectureStudentAbsent extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('lecture_attendances', function (Blueprint $table) {
            $table->id();
            $table->foreignId('lecture_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('student_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('lecture_attendances');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_09_090137_add_thumbnail_column_to_attachments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddThumbnailColumnToAttachmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('attachments', function (Blueprint $table) {
            $table->string('duration')->nullable();
            $table->string('thumbnail')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('attachments', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_08_120330_add_mark_column_to_question_answers_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddMarkColumnToQuestionAnswersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('question_answers', function (Blueprint $table) {
            $table->string('mark')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('question_answers', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_08_103551_add_mark_column_to_questions_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddMarkColumnToQuestionsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('questions', function (Blueprint $table) {
            $table->string('mark')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('questions', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_08_092248_add_test_status_to_lectures_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddTestStatusToLecturesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('lectures', function (Blueprint $table) {
            $table->string('test_status')->nullable();
            $table->string('test_time')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('lectures', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_08_091746_create_test_statuses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateTestStatusesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('test_statuses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('lecture_id')->constrained('lectures')->cascadeOnUpdate()->cascadeOnDelete();
            $table->string('status')->nullable();
            $table->string('time')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('test_statuses');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_07_121806_create_question_answers_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateQuestionAnswersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('question_answers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('question_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('student_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->string('answer');
            $table->boolean('is_correct')->default(false);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('question_answers');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_06_071638_add_lecture_id_to_questions_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddLectureIdToQuestionsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('questions', function (Blueprint $table) {
            $table->foreignId('lecture_id')->nullable()->after('id')->constrained('lectures')->cascadeOnUpdate()->cascadeOnDelete();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('questions', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_06_065753_create_questions_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateQuestionsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('questions', function (Blueprint $table) {
            $table->id();
            $table->string('question')->nullable();
            $table->json('options')->nullable();
            $table->string('type')->nullable();
            $table->string('answer')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('questions');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_02_05_093334_add_settings_to_study_plan_dates_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddSettingsToStudyPlanDatesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('study_plan_dates', function (Blueprint $table) {
            $table->string('theory_degree')->default(30)->nullable();
            $table->string('practical_degree')->default(30)->nullable();
            $table->string('min_degree')->default(45)->nullable();
            $table->string('attendance_degree')->default(0)->nullable();
            $table->string('tests_degree')->default(0)->nullable();
            $table->string('assignments_degree')->default(0)->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('study_plan_dates', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_31_093932_add_lecture_id_to_assignments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddLectureIdToAssignmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('assignments', function (Blueprint $table) {
            //$table->foreignId('lecture_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('assignments', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_31_084725_create_study_plan_date_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudyPlanDateStudentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('study_plan_date_students', function (Blueprint $table) {
            $table->id();
            $table->foreignId('study_plan_date_id')->constrained()->onDelete('cascade');
            $table->foreignId('student_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('study_plan_date_students');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_26_131917_add_mark_to_student_tests_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddMarkToStudentTestsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('student_tests', function (Blueprint $table) {
            $table->string('mark')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('student_tests', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_26_131319_create_student_tests_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudentTestsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('student_tests', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained('students')->cascadeOnDelete()->cascadeOnUpdate();
            $table->foreignId('lecture_id')->constrained('lectures')->cascadeOnDelete()->cascadeOnUpdate();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('student_tests');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_25_070548_drop_lecture_id_column_from_student_assignments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class DropLectureIdColumnFromStudentAssignmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('student_assignments', function (Blueprint $table) {
            // $table->dropConstrainedForeignId('lecture_id');
            $table->foreignId('assignment_id')->constrained('assignments')->cascadeOnUpdate()->cascadeOnDelete();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('student_assignments', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_24_120829_add_title_column_to_attachments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddTitleColumnToAttachmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('attachments', function (Blueprint $table) {
            $table->text('title')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('attachments', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_23_123457_add_description_to_lectures_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddDescriptionToLecturesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('lectures', function (Blueprint $table) {
            $table->text('description')->nullable();

        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('lectures', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_23_110723_create_student_assignments_table.php

      
-----------------------------------------------


      <?php

use App\Models\Elearning\Lecture;
use App\Models\Student;
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudentAssignmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('student_assignments', function (Blueprint $table) {
            $table->id();
            $table->foreignIdFor(Student::class)->constrained()->cascadeOnDelete()->cascadeOnUpdate();
            $table->foreignIdFor(Lecture::class)->constrained()->cascadeOnDelete()->cascadeOnUpdate();
            $table->string('path')->nullable();
            $table->string('mark')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('student_assignments');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_23_105215_create_assignments_table.php

      
-----------------------------------------------


      <?php

use App\Models\Elearning\Lecture;
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateAssignmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('assignments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('lecture_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->text('title')->nullable();
            $table->text('description')->nullable();
            $table->string('full_mark')->nullable();
            $table->string('deadline')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('assignments');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_23_104629_create_attachments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateAttachmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('attachments', function (Blueprint $table) {
            $table->id();
            $table->string('path')->nullable();
            $table->string('type')->nullable();
            $table->foreignId('lecture_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('attachments');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_23_101818_create_lectures_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateLecturesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('lectures', function (Blueprint $table) {
            $table->id();
            $table->foreignId('course_id');
            $table->text('title')->nullable();
            $table->string('type')->nullable();
            $table->string('full_mark')->nullable();
            $table->integer('order')->nullable();
            $table->integer('teaching_datetime')->nullable();
            $table->string('live_link')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('lectures');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_23_082324_add_admin_id_to_teachers_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddAdminIdToTeachersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('teachers', function (Blueprint $table) {
            $table->foreignId('admin_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('teachers', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_22_095542_create_study_plan_date_teachers_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudyPlanDateTeachersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('study_plan_date_teachers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('study_plan_date_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('teacher_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('study_plan_date_teachers');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_22_095526_create_study_plan_teachers_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudyPlanTeachersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('study_plan_teachers', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('study_plan_teachers');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_19_112353_create_teachers_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateTeachersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('teachers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('department_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->string('name')->nullable();
            $table->string('phone')->nullable();
            $table->string('email')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('teachers');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_10_090451_add_department_id_to_student_results_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddDepartmentIdToStudentResultsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('student_results', function (Blueprint $table) {
            $table->foreignId('department_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('student_results', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_04_125519_add_degree_code_to_student_results_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddDegreeCodeToStudentResultsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('student_results', function (Blueprint $table) {
            $table->string('degree_code')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('student_results', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_04_124309_add_degree_code_to_student_study_years_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddDegreeCodeToStudentStudyYearsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('student_study_years', function (Blueprint $table) {
            $table->string('degree_code')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('student_study_years', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_03_110520_create_carry_out_courses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCarryOutCoursesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('carry_out_courses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('course_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('student_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('carry_out_courses');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2023_01_02_090108_add_last_status_column_to_registrations_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddLastStatusColumnToRegistrationsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('registrations', function (Blueprint $table) {
            $table->string('last_status')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('registrations', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_28_082802_create_second_rounds_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateSecondRoundsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('second_rounds', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('course_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('study_date_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->string('status');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('second_rounds');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_27_070308_create_student_study_years_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudentStudyYearsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('student_study_years', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('study_year_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->string('status');
            $table->float('cgpa');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('student_study_year');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_27_065821_create_student_results_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudentResultsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('student_results', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('study_year_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('study_date_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->float('cgpa');
            $table->string('status');
            $table->text('description')->nullable();
            $table->boolean('is_first_exam')->default(true);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('student_results');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_27_065054_create_study_plan_dates_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudyPlanDatesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('study_plan_dates', function (Blueprint $table) {
            $table->id();
            $table->foreignId('department_id')->constrained();
            $table->foreignId('semester_id')->constrained();
            $table->foreignId('study_date_id')->nullable()->constrained();
            $table->foreignId('course_id')->constrained();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('study_plan_dates');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_22_114257_create_course_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCourseStudentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('course_students', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('study_year_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('semester_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('course_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('course_student_degree_id')->nullable()->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->integer('hours');
            // $table->string('status')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('course_students');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_18_131206_add_is_pass_column_to_course_student_degrees_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddIsPassColumnToCourseStudentDegreesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('course_student_degrees', function (Blueprint $table) {
            $table->boolean('is_pass')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('course_student_degrees', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_18_081413_create_course_student_degrees__table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCourseStudentDegreesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('course_student_degrees', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('course_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('study_date_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->string('theory_degree')->nullable();
            $table->string('practical_degree')->nullable();
            $table->float('point');
            $table->string('degree_code')->nullable();
            $table->boolean('is_first_exam')->default(true);
            // $table->string('status')->nullable();
            $table->string('attendance_status')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('course_student_degrees_');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_12_073239_create_registration_results_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateRegistrationResultsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('registration_results', function (Blueprint $table) {
            $table->id();
            // $table->foreignId('study_plan_date_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->foreignId('registration_id')->constrained()->cascadeOnUpdate()->cascadeOnDelete();
            $table->boolean('is_first_exam')->default(true);
            $table->string('status')->nullable();
            $table->string('first_semester_sgpa')->nullable();
            $table->string('second_semester_sgpa')->nullable();
            $table->string('cgpa')->nullable();
            $table->text('description')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('registration_results');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_08_075812_add_min_degree_to_courses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddMinDegreeToCoursesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('courses', function (Blueprint $table) {
            $table->string('min_degree')->default(50);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('courses', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_08_072008_drop_level_name_en_from_levels_degree_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class DropLevelNameEnFromLevelsDegreeTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('levels_degree', function (Blueprint $table) {
            $table->dropColumn('level_en','level_code_en');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('levels_degree', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_06_081713_create_levels_degree_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateLevelsDegreeTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('levels_degree', function (Blueprint $table) {
            $table->id();
            $table->string('min_degree');
            $table->string('max_degree');
            $table->string('level');
            $table->string('level_en')->nullable();
            $table->string('level_code')->nullable();
            $table->string('level_code_en')->nullable();
            $table->string('point');
            $table->string('min_point')->nullable();
            $table->string('max_point')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('levels_degree');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_12_04_102915_add_has_practical_to_courses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddHasPracticalToCoursesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('courses', function (Blueprint $table) {
            $table->boolean('has_practical')->default(false);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('courses', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_24_114145_create_study_plans_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudyPlansTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('study_plans', function (Blueprint $table) {
            $table->id();
            $table->foreignId('department_id')->constrained();
            $table->foreignId('semester_id')->constrained();
            $table->foreignId('course_id')->constrained();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('study_plans');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_23_113999_create_result_courses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateResultCoursesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('course_results', function (Blueprint $table) {
            $table->id();
            $table->foreignId('result_id')->constrained();
            $table->foreignId('course_id')->constrained();
            $table->string('hours');
            $table->string('min_degree');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('result_courses');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_23_113992_create_results_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateResultsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('results', function (Blueprint $table) {
            $table->id();
            $table->foreignId('department_id')->constrained();
            $table->foreignId('batch_id')->constrained();
            $table->foreignId('semester_id')->constrained();
            $table->foreignId('study_date_id')->constrained();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('results');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_23_064435_add_code_to_courses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddCodeToCoursesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('courses', function (Blueprint $table) {
            $table->string('code')->unique();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('courses', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_22_131234_create_courses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCoursesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('courses', function (Blueprint $table) {
            $table->id();
            $table->string('name')->nullable();
            $table->string('name_en')->nullable();
            $table->foreignId('department_id')->nullable()->constrained();
            $table->string('hours');
            $table->string('religion')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('courses');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_22_124145_create_semesters_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateSemestersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('semesters', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->foreignId('study_year_id')->constrained();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('semesters');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_22_080801_add_study_year__on_registrations_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddStudyYearOnRegistrationsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('registrations', function (Blueprint $table) {
            $table->foreignId('study_year_id')->constrained()->cascadeOnUpdate();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_19_061001_add_gender_to_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddGenderToStudentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('students', function (Blueprint $table) {
            $table->string('gender')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('students', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_17_135602_add_ver-code_on_student_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddVerCodeOnStudentTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('students', function (Blueprint $table) {
            $table->char('ver_code',4)->nullable();
            $table->integer('is_verification')->default(0);
            $table->date('ver_date')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_17_083444_add_student_id_to_users_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddStudentIdToUsersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->foreignId('student_id')->nullable()->constrained()->cascadeOnUpdate();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('users', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_14_134155_drop_study_year_id_from_departments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class DropStudyYearIdFromDepartmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('departments', function (Blueprint $table) {
            // $table->dropColumn('study_year_id');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('departments', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_14_125149_create_department_study_year_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDepartmentStudyYearTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('department_study_year', function (Blueprint $table) {
            $table->id();
            $table->foreignId('department_id')->constrained()->cascadeOnUpdate();
            $table->foreignId('study_year_id')->constrained()->cascadeOnUpdate();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('department_study_year');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_10_081839_add_english_names_to_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddEnglishNamesToStudentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('students', function (Blueprint $table) {
            $table->string('name1_en');
            $table->string('name2_en');
            $table->string('name3_en');
            $table->string('name4_en');
            $table->string('certificate_date');
            $table->string('certificate_type');
            $table->string('religion');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('students', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_10_071257_create_media_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateMediaTable extends Migration
{
    public function up()
    {
        Schema::create('media', function (Blueprint $table) {
            $table->bigIncrements('id');

            $table->morphs('model');
            $table->uuid('uuid')->nullable()->unique();
            $table->string('collection_name');
            $table->string('name');
            $table->string('file_name');
            $table->string('mime_type')->nullable();
            $table->string('disk');
            $table->string('conversions_disk')->nullable();
            $table->unsignedBigInteger('size');
            $table->json('manipulations');
            $table->json('custom_properties');
            $table->json('generated_conversions');
            $table->json('responsive_images');
            $table->unsignedInteger('order_column')->nullable()->index();

            $table->nullableTimestamps();
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_09_093054_add_acceptance_year_to_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddAcceptanceYearToStudentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('students', function (Blueprint $table) {
            $table->string('acceptance_year')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('students', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_08_104048_drop_discount_id_from_registration_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class DropDiscountIdFromRegistrationTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('registrations', function (Blueprint $table) {
            // $table->dropColumn('discount_id');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('registration', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_08_103600_add_registration_id_to_discounts_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddRegistrationIdToDiscountsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('discounts', function (Blueprint $table) {
            // $table->dropColumn(['student_id','study_date_id']);
            $table->foreignId('registration_id')->nullable()->constrained()->cascadeOnUpdate()->nullOnDelete();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('discounts', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_11_07_173650_add_national_number_to_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddNationalNumberToStudentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('students', function (Blueprint $table) {
            $table->string('national_number')->nullable();
            $table->string('nationality')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('students', function (Blueprint $table) {
            //
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_17_160929_create_discounts_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDiscountsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('discounts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('department_id')->constrained();
            // $table->foreignId('student_id')->constrained();
            // $table->foreignId('study_date_id')->constrained();
            $table->foreignId('type_discount_id')->constrained();
            // $table->foreignIdFor(\App\Models\Department::class);
            // $table->foreignIdFor(\App\Models\Student::class);
            // $table->foreignIdFor(\App\Models\StudyDate::class);
            // $table->foreignIdFor(\App\Models\TypeDiscount::class);
            $table->bigInteger('amount');
            $table->string('currency')->default('sdg');
            $table->string('image')->nullable();
            $table->text('description')->nullable();
            $table->boolean('status')->default(1);
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('discounts');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_17_160918_create_type_discounts_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateTypeDiscountsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('type_discounts', function (Blueprint $table) {
            $table->id();
            $table->string('type');
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('type_discounts');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_08_123901_create_payment_invoices_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePaymentInvoicesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('payment_invoices', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('payment_invoices');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_06_084215_create_payment_statuses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePaymentStatusesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('payment_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->boolean('pay')->default(0);
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('payment_statuses');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_06_081923_create_payments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePaymentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('payments', function (Blueprint $table) {
            $table->id()->from(1000);

            $table->foreignId('payment_order_id')->constrained();
            $table->foreignId('payment_type_id')->constrained();
            $table->foreignId('student_id')->constrained();
            // $table->foreignIdFor(\App\Models\PaymentOrder::class);
            // $table->foreignIdFor(\App\Models\PaymentType::class);
            // $table->foreignIdFor(\App\Models\Student::class);

            $table->boolean('status')->default(1);
            $table->enum('currency', ['usd', 'sdg'])->default('sdg');
            $table->bigInteger('amount')->default(0);
            $table->bigInteger('rate')->default(1);

            $table->text('description')->nullable();

            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('payments');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_04_150256_create_payment_types_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePaymentTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('payment_types', function (Blueprint $table) {
            $table->id();
            $table->string('type');
            $table->string('name')->nullable();
            $table->bigInteger('number')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('payment_types');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_04_131203_create_payment_orders_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePaymentOrdersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('payment_orders', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained();
            $table->foreignId('study_date_id')->constrained();
            $table->foreignId('status_id')->constrained();
            $table->foreignId('registration_id')->constrained();
            // $table->foreignIdFor(\App\Models\Student::class);
            // $table->foreignIdFor(\App\Models\StudyDate::class);
            // $table->foreignIdFor(\App\Models\Status::class);
            // $table->foreignIdFor(\App\Models\Registration::class)->nullable();
            $table->double('amount')->default(0);
            $table->double('total_amount')->default(0);
            $table->boolean('archive')->default(1);
            $table->enum('currency', ['usd', 'sdg'])->default('sdg');
            $table->text('description')->nullable();
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('payment_orders');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_03_154839_create_department_prices_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDepartmentPricesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('department_prices', function (Blueprint $table) {
            $table->id();
            $table->foreignId('study_date_id')->constrained();
            $table->foreignId('department_id')->constrained();
            // $table->foreignIdFor(\App\Models\StudyDate::class);
            // $table->foreignIdFor(\App\Models\StudyDate::class);
            // $table->foreignIdFor(\App\Models\Department::class);

            $table->double('sdg', 2);
            $table->double('usd', 2);

            $table->integer('batch')->default(1);

            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('department_prices');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_03_081703_create_registrations_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateRegistrationsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('registrations', function (Blueprint $table) {
            $table->id();

            $table->foreignId('student_id')->constrained();
            $table->foreignId('study_date_id')->constrained();
            $table->foreignId('status_id')->constrained();
            // $table->foreignIdFor(\App\Models\Student::class);
            // $table->foreignIdFor(\App\Models\StudyDate::class);
            // $table->foreignIdFor(\App\Models\Status::class);
            // $table->foreignIdFor(\App\Models\Discount::class)->nullable();

            $table->string('currency')->default('sdg');
            $table->double('register_fees', 3);
            $table->double('tuition_fees', 3);

            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('registrations');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_10_02_173744_create_students_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->bigInteger('university_id')->nullable();
            $table->string('image')->default('dashboard/images/student.png');
            $table->string('name1')->nullable();
            $table->string('name2')->nullable();
            $table->string('name3')->nullable();
            $table->string('name4')->nullable();
            $table->foreignId('batch_id')->nullable()->constrained();
            $table->bigInteger('phone')->nullable();
            $table->string('address')->nullable();
            $table->string('father_name')->nullable();
            $table->bigInteger('father_phone1')->nullable();
            $table->bigInteger('father_phone2')->nullable();
            $table->string('workplace')->nullable();
            $table->enum('currency', ['usd', 'sdg'])->default('sdg');

            // $table->foreignIdFor(\App\Models\Department::class);
            $table->foreignId('department_id')->nullable()->constrained();
            $table->foreignId('study_date_id')->nullable()->constrained();
            $table->foreignId('study_year_id')->nullable()->constrained();
            $table->foreignId('admission_type_id')->nullable()->constrained();
            // $table->foreignIdFor(\App\Models\StudyDate::class);
            // $table->foreignIdFor(\App\Models\StudyYear::class);
            // $table->foreignIdFor(\App\Models\AdmissionType::class);

            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('students');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_28_124559_create_year_studies_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateYearStudiesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('year_studies', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->date('start_reg');
            $table->date('end_reg');
            $table->boolean('archived')->default(0);
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('year_studies');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_28_094812_create_departments_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDepartmentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('departments', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->integer('batch_number')->default(1);
            // $table->foreignIdFor(\App\Models\College::class)->default(1);
            $table->foreignId('college_id')->constrained()->default(1);
            // $table->foreignId('study_year_id')->constrained();
            // $table->foreignIdFor(\App\Models\StudyYear::class);
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('departments');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_28_070847_create_universities_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateUniversitiesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('universities', function (Blueprint $table) {
            $table->id();
            $table->string('name')->nullable();
            $table->string('hold')->nullable();
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('universities');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_27_124003_create_admission_types_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateAdmissionTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('admission_types', function (Blueprint $table) {
            $table->id();
            $table->string('type');
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('admission_types');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_27_11_create_study_years_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudyYearsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('study_years', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('number')->default(4);
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('study_years');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_27_11_create_study_dates_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStudyDatesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('study_dates', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->date('start_reg');
            $table->date('end_reg');
            $table->double('register_fees_sdg', 3);
            $table->double('register_fees_usd', 3);
            $table->boolean('archived')->default(0);
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('study_dates');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_27_073140_create_colleges_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCollegesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('colleges', function (Blueprint $table) {
            $table->id();
            $table->string('name')->nullable();
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('colleges');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_23_113518_create_batches_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateBatchesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('batches', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('batches');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_21_123905_create_permission_tables.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
use Spatie\Permission\PermissionRegistrar;

class CreatePermissionTables extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        $tableNames = config('permission.table_names');
        $columnNames = config('permission.column_names');
        $teams = config('permission.teams');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.');
        }
        if ($teams && empty($columnNames['team_foreign_key'] ?? null)) {
            throw new \Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.');
        }

        Schema::create($tableNames['permissions'], function (Blueprint $table) {
            $table->bigIncrements('id'); // permission id
            $table->string('name');       // For MySQL 8.0 use string('name', 125);
            $table->string('guard_name'); // For MySQL 8.0 use string('guard_name', 125);
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['roles'], function (Blueprint $table) use ($teams, $columnNames) {
            $table->bigIncrements('id'); // role id
            if ($teams || config('permission.testing')) { // permission.testing is a fix for sqlite testing
                $table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();
                $table->index($columnNames['team_foreign_key'], 'roles_team_foreign_key_index');
            }
            $table->string('name');       // For MySQL 8.0 use string('name', 125);
            $table->string('guard_name'); // For MySQL 8.0 use string('guard_name', 125);
            $table->timestamps();
            if ($teams || config('permission.testing')) {
                $table->unique([$columnNames['team_foreign_key'], 'name', 'guard_name']);
            } else {
                $table->unique(['name', 'guard_name']);
            }
        });

        Schema::create($tableNames['model_has_permissions'], function (Blueprint $table) use ($tableNames, $columnNames, $teams) {
            $table->unsignedBigInteger(PermissionRegistrar::$pivotPermission);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_permissions_model_id_model_type_index');

            $table->foreign(PermissionRegistrar::$pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_permissions_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], PermissionRegistrar::$pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            } else {
                $table->primary([PermissionRegistrar::$pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            }

        });

        Schema::create($tableNames['model_has_roles'], function (Blueprint $table) use ($tableNames, $columnNames, $teams) {
            $table->unsignedBigInteger(PermissionRegistrar::$pivotRole);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_roles_model_id_model_type_index');

            $table->foreign(PermissionRegistrar::$pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_roles_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], PermissionRegistrar::$pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            } else {
                $table->primary([PermissionRegistrar::$pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            }
        });

        Schema::create($tableNames['role_has_permissions'], function (Blueprint $table) use ($tableNames) {
            $table->unsignedBigInteger(PermissionRegistrar::$pivotPermission);
            $table->unsignedBigInteger(PermissionRegistrar::$pivotRole);

            $table->foreign(PermissionRegistrar::$pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');

            $table->foreign(PermissionRegistrar::$pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');

            $table->primary([PermissionRegistrar::$pivotPermission, PermissionRegistrar::$pivotRole], 'role_has_permissions_permission_id_role_id_primary');
        });

        app('cache')
            ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)
            ->forget(config('permission.cache.key'));
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

        Schema::drop($tableNames['role_has_permissions']);
        Schema::drop($tableNames['model_has_roles']);
        Schema::drop($tableNames['model_has_permissions']);
        Schema::drop($tableNames['roles']);
        Schema::drop($tableNames['permissions']);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_21_081836_create_admins_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateAdminsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('admins', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('image')->default('dashboard/images/admin.png');
            $table->rememberToken();
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('admins');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2022_09_20_0001_create_statuses_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStatusesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('statuses', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->boolean('pay')->default(0);
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('statuses');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePersonalAccessTokensTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('personal_access_tokens');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2019_08_19_000000_create_failed_jobs_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFailedJobsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('failed_jobs');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2014_10_12_100000_create_password_resets_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePasswordResetsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('password_resets', function (Blueprint $table) {
            $table->string('email')->index();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('password_resets');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/2014_10_12_000000_create_users_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateUsersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->nullable();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('users');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/database/migrations/0000_00_00_000000_create_websockets_statistics_entries_table.php

      
-----------------------------------------------


      <?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateWebSocketsStatisticsEntriesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('websockets_statistics_entries', function (Blueprint $table) {
            $table->increments('id');
            $table->string('app_id');
            $table->integer('peak_connection_count');
            $table->integer('websocket_message_count');
            $table->integer('api_message_count');
            $table->nullableTimestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('websockets_statistics_entries');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/bootstrap/cache/services.php

      
-----------------------------------------------


      <?php return array (
  'providers' => 
  array (
    0 => 'Illuminate\\Auth\\AuthServiceProvider',
    1 => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    2 => 'Illuminate\\Bus\\BusServiceProvider',
    3 => 'Illuminate\\Cache\\CacheServiceProvider',
    4 => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    5 => 'Illuminate\\Cookie\\CookieServiceProvider',
    6 => 'Illuminate\\Database\\DatabaseServiceProvider',
    7 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
    8 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
    9 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
    10 => 'Illuminate\\Hashing\\HashServiceProvider',
    11 => 'Illuminate\\Mail\\MailServiceProvider',
    12 => 'Illuminate\\Notifications\\NotificationServiceProvider',
    13 => 'Illuminate\\Pagination\\PaginationServiceProvider',
    14 => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    15 => 'Illuminate\\Queue\\QueueServiceProvider',
    16 => 'Illuminate\\Redis\\RedisServiceProvider',
    17 => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    18 => 'Illuminate\\Session\\SessionServiceProvider',
    19 => 'Illuminate\\Translation\\TranslationServiceProvider',
    20 => 'Illuminate\\Validation\\ValidationServiceProvider',
    21 => 'Illuminate\\View\\ViewServiceProvider',
    22 => 'Barryvdh\\Debugbar\\ServiceProvider',
    23 => 'BeyondCode\\QueryDetector\\QueryDetectorServiceProvider',
    24 => 'BeyondCode\\LaravelWebSockets\\WebSocketsServiceProvider',
    25 => 'Fruitcake\\Cors\\CorsServiceProvider',
    26 => 'Inertia\\ServiceProvider',
    27 => 'Intervention\\Image\\ImageServiceProvider',
    28 => 'Jantinnerezo\\LivewireAlert\\LivewireAlertServiceProvider',
    29 => 'Laravel\\Passport\\PassportServiceProvider',
    30 => 'Laravel\\Sail\\SailServiceProvider',
    31 => 'Laravel\\Sanctum\\SanctumServiceProvider',
    32 => 'Laravel\\Tinker\\TinkerServiceProvider',
    33 => 'Larswiegers\\LaravelTranslationsChecker\\LaravelTranslationsCheckerServiceProvider',
    34 => 'Livewire\\LivewireServiceProvider',
    35 => 'Maatwebsite\\Excel\\ExcelServiceProvider',
    36 => 'Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider',
    37 => 'Carbon\\Laravel\\ServiceProvider',
    38 => 'NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider',
    39 => 'Termwind\\Laravel\\TermwindServiceProvider',
    40 => 'ProtoneMedia\\LaravelFFMpeg\\Support\\ServiceProvider',
    41 => 'ProtoneMedia\\Splade\\ServiceProvider',
    42 => 'Spatie\\LaravelIgnition\\IgnitionServiceProvider',
    43 => 'Spatie\\MediaLibrary\\MediaLibraryServiceProvider',
    44 => 'Spatie\\Permission\\PermissionServiceProvider',
    45 => 'Tightenco\\Ziggy\\ZiggyServiceProvider',
    46 => 'LivewireUI\\Modal\\LivewireModalServiceProvider',
    47 => 'Yajra\\DataTables\\DataTablesServiceProvider',
    48 => 'Maatwebsite\\Excel\\ExcelServiceProvider',
    49 => 'Barryvdh\\Debugbar\\ServiceProvider',
    50 => 'App\\Providers\\AppServiceProvider',
    51 => 'App\\Providers\\AuthServiceProvider',
    52 => 'App\\Providers\\BroadcastServiceProvider',
    53 => 'App\\Providers\\EventServiceProvider',
    54 => 'App\\Providers\\RouteServiceProvider',
    55 => 'Spatie\\Permission\\PermissionServiceProvider',
    56 => 'ProtoneMedia\\LaravelFFMpeg\\Support\\ServiceProvider',
    57 => 'App\\Providers\\SettingsServiceProvider',
  ),
  'eager' => 
  array (
    0 => 'Illuminate\\Auth\\AuthServiceProvider',
    1 => 'Illuminate\\Cookie\\CookieServiceProvider',
    2 => 'Illuminate\\Database\\DatabaseServiceProvider',
    3 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
    4 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
    5 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
    6 => 'Illuminate\\Notifications\\NotificationServiceProvider',
    7 => 'Illuminate\\Pagination\\PaginationServiceProvider',
    8 => 'Illuminate\\Session\\SessionServiceProvider',
    9 => 'Illuminate\\View\\ViewServiceProvider',
    10 => 'Barryvdh\\Debugbar\\ServiceProvider',
    11 => 'BeyondCode\\QueryDetector\\QueryDetectorServiceProvider',
    12 => 'BeyondCode\\LaravelWebSockets\\WebSocketsServiceProvider',
    13 => 'Fruitcake\\Cors\\CorsServiceProvider',
    14 => 'Inertia\\ServiceProvider',
    15 => 'Intervention\\Image\\ImageServiceProvider',
    16 => 'Jantinnerezo\\LivewireAlert\\LivewireAlertServiceProvider',
    17 => 'Laravel\\Passport\\PassportServiceProvider',
    18 => 'Laravel\\Sanctum\\SanctumServiceProvider',
    19 => 'Larswiegers\\LaravelTranslationsChecker\\LaravelTranslationsCheckerServiceProvider',
    20 => 'Livewire\\LivewireServiceProvider',
    21 => 'Maatwebsite\\Excel\\ExcelServiceProvider',
    22 => 'Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider',
    23 => 'Carbon\\Laravel\\ServiceProvider',
    24 => 'NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider',
    25 => 'Termwind\\Laravel\\TermwindServiceProvider',
    26 => 'ProtoneMedia\\LaravelFFMpeg\\Support\\ServiceProvider',
    27 => 'ProtoneMedia\\Splade\\ServiceProvider',
    28 => 'Spatie\\LaravelIgnition\\IgnitionServiceProvider',
    29 => 'Spatie\\MediaLibrary\\MediaLibraryServiceProvider',
    30 => 'Spatie\\Permission\\PermissionServiceProvider',
    31 => 'Tightenco\\Ziggy\\ZiggyServiceProvider',
    32 => 'LivewireUI\\Modal\\LivewireModalServiceProvider',
    33 => 'Yajra\\DataTables\\DataTablesServiceProvider',
    34 => 'Maatwebsite\\Excel\\ExcelServiceProvider',
    35 => 'Barryvdh\\Debugbar\\ServiceProvider',
    36 => 'App\\Providers\\AppServiceProvider',
    37 => 'App\\Providers\\AuthServiceProvider',
    38 => 'App\\Providers\\BroadcastServiceProvider',
    39 => 'App\\Providers\\EventServiceProvider',
    40 => 'App\\Providers\\RouteServiceProvider',
    41 => 'Spatie\\Permission\\PermissionServiceProvider',
    42 => 'ProtoneMedia\\LaravelFFMpeg\\Support\\ServiceProvider',
    43 => 'App\\Providers\\SettingsServiceProvider',
  ),
  'deferred' => 
  array (
    'Illuminate\\Broadcasting\\BroadcastManager' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Contracts\\Broadcasting\\Factory' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Contracts\\Broadcasting\\Broadcaster' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Contracts\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Contracts\\Bus\\QueueingDispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Bus\\BatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Bus\\DatabaseBatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
    'cache' => 'Illuminate\\Cache\\CacheServiceProvider',
    'cache.store' => 'Illuminate\\Cache\\CacheServiceProvider',
    'cache.psr6' => 'Illuminate\\Cache\\CacheServiceProvider',
    'memcached.connector' => 'Illuminate\\Cache\\CacheServiceProvider',
    'Illuminate\\Cache\\RateLimiter' => 'Illuminate\\Cache\\CacheServiceProvider',
    'Illuminate\\Foundation\\Console\\AboutCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\ForgetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ClearCompiledCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Auth\\Console\\ClearResetsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\DbCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\PruneCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\ShowCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\WipeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\DownCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentDecryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentEncryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\KeyGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\OptimizeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\OptimizeClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\PackageDiscoverCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ListFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\FlushFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ForgetFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ListenCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\PruneBatchesCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\PruneFailedJobsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RestartCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RetryCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RetryBatchCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\WorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\DumpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Seeds\\SeedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleFinishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleRunCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleClearCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleTestCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleWorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ShowModelCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StorageLinkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\UpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\CacheTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\CastMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ChannelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ComponentMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConsoleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Routing\\Console\\ControllerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\DocsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ExceptionMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\JobMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ListenerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\MailMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Routing\\Console\\MiddlewareMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ModelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\NotificationMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Notifications\\Console\\NotificationTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ObserverMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\PolicyMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ProviderMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\FailedTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\BatchesTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RequestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ResourceMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RuleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ScopeMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Session\\Console\\SessionTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ServeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StubPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\TestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\VendorPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migrator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migration.repository' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migration.creator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\MigrateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\FreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\InstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\RefreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\ResetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\RollbackCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\StatusCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'composer' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'hash' => 'Illuminate\\Hashing\\HashServiceProvider',
    'hash.driver' => 'Illuminate\\Hashing\\HashServiceProvider',
    'mail.manager' => 'Illuminate\\Mail\\MailServiceProvider',
    'mailer' => 'Illuminate\\Mail\\MailServiceProvider',
    'Illuminate\\Mail\\Markdown' => 'Illuminate\\Mail\\MailServiceProvider',
    'Illuminate\\Contracts\\Pipeline\\Hub' => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    'queue' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.connection' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.failer' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.listener' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.worker' => 'Illuminate\\Queue\\QueueServiceProvider',
    'redis' => 'Illuminate\\Redis\\RedisServiceProvider',
    'redis.connection' => 'Illuminate\\Redis\\RedisServiceProvider',
    'auth.password' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    'auth.password.broker' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    'translator' => 'Illuminate\\Translation\\TranslationServiceProvider',
    'translation.loader' => 'Illuminate\\Translation\\TranslationServiceProvider',
    'validator' => 'Illuminate\\Validation\\ValidationServiceProvider',
    'validation.presence' => 'Illuminate\\Validation\\ValidationServiceProvider',
    'Laravel\\Sail\\Console\\InstallCommand' => 'Laravel\\Sail\\SailServiceProvider',
    'Laravel\\Sail\\Console\\PublishCommand' => 'Laravel\\Sail\\SailServiceProvider',
    'command.tinker' => 'Laravel\\Tinker\\TinkerServiceProvider',
  ),
  'when' => 
  array (
    'Illuminate\\Broadcasting\\BroadcastServiceProvider' => 
    array (
    ),
    'Illuminate\\Bus\\BusServiceProvider' => 
    array (
    ),
    'Illuminate\\Cache\\CacheServiceProvider' => 
    array (
    ),
    'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider' => 
    array (
    ),
    'Illuminate\\Hashing\\HashServiceProvider' => 
    array (
    ),
    'Illuminate\\Mail\\MailServiceProvider' => 
    array (
    ),
    'Illuminate\\Pipeline\\PipelineServiceProvider' => 
    array (
    ),
    'Illuminate\\Queue\\QueueServiceProvider' => 
    array (
    ),
    'Illuminate\\Redis\\RedisServiceProvider' => 
    array (
    ),
    'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider' => 
    array (
    ),
    'Illuminate\\Translation\\TranslationServiceProvider' => 
    array (
    ),
    'Illuminate\\Validation\\ValidationServiceProvider' => 
    array (
    ),
    'Laravel\\Sail\\SailServiceProvider' => 
    array (
    ),
    'Laravel\\Tinker\\TinkerServiceProvider' => 
    array (
    ),
  ),
);
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/bootstrap/cache/packages.php

      
-----------------------------------------------


      <?php return array (
  'barryvdh/laravel-debugbar' => 
  array (
    'providers' => 
    array (
      0 => 'Barryvdh\\Debugbar\\ServiceProvider',
    ),
    'aliases' => 
    array (
      'Debugbar' => 'Barryvdh\\Debugbar\\Facades\\Debugbar',
    ),
  ),
  'beyondcode/laravel-query-detector' => 
  array (
    'providers' => 
    array (
      0 => 'BeyondCode\\QueryDetector\\QueryDetectorServiceProvider',
    ),
  ),
  'beyondcode/laravel-websockets' => 
  array (
    'providers' => 
    array (
      0 => 'BeyondCode\\LaravelWebSockets\\WebSocketsServiceProvider',
    ),
    'aliases' => 
    array (
      'WebSocketRouter' => 'BeyondCode\\LaravelWebSockets\\Facades\\WebSocketRouter',
    ),
  ),
  'fruitcake/laravel-cors' => 
  array (
    'providers' => 
    array (
      0 => 'Fruitcake\\Cors\\CorsServiceProvider',
    ),
  ),
  'inertiajs/inertia-laravel' => 
  array (
    'providers' => 
    array (
      0 => 'Inertia\\ServiceProvider',
    ),
  ),
  'intervention/image' => 
  array (
    'providers' => 
    array (
      0 => 'Intervention\\Image\\ImageServiceProvider',
    ),
    'aliases' => 
    array (
      'Image' => 'Intervention\\Image\\Facades\\Image',
    ),
  ),
  'jantinnerezo/livewire-alert' => 
  array (
    'providers' => 
    array (
      0 => 'Jantinnerezo\\LivewireAlert\\LivewireAlertServiceProvider',
    ),
    'aliases' => 
    array (
      'LivewireAlert' => 'Jantinnerezo\\LivewireAlert\\LivewireAlertFacade',
    ),
  ),
  'laravel/passport' => 
  array (
    'providers' => 
    array (
      0 => 'Laravel\\Passport\\PassportServiceProvider',
    ),
  ),
  'laravel/sail' => 
  array (
    'providers' => 
    array (
      0 => 'Laravel\\Sail\\SailServiceProvider',
    ),
  ),
  'laravel/sanctum' => 
  array (
    'providers' => 
    array (
      0 => 'Laravel\\Sanctum\\SanctumServiceProvider',
    ),
  ),
  'laravel/tinker' => 
  array (
    'providers' => 
    array (
      0 => 'Laravel\\Tinker\\TinkerServiceProvider',
    ),
  ),
  'larswiegers/laravel-translations-checker' => 
  array (
    'providers' => 
    array (
      0 => 'Larswiegers\\LaravelTranslationsChecker\\LaravelTranslationsCheckerServiceProvider',
    ),
    'aliases' => 
    array (
      'LaravelTranslationsChecker' => 'Larswiegers\\LaravelTranslationsChecker\\LaravelTranslationsCheckerFacade',
    ),
  ),
  'livewire/livewire' => 
  array (
    'providers' => 
    array (
      0 => 'Livewire\\LivewireServiceProvider',
    ),
    'aliases' => 
    array (
      'Livewire' => 'Livewire\\Livewire',
    ),
  ),
  'maatwebsite/excel' => 
  array (
    'providers' => 
    array (
      0 => 'Maatwebsite\\Excel\\ExcelServiceProvider',
    ),
    'aliases' => 
    array (
      'Excel' => 'Maatwebsite\\Excel\\Facades\\Excel',
    ),
  ),
  'mcamara/laravel-localization' => 
  array (
    'providers' => 
    array (
      0 => 'Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider',
    ),
    'aliases' => 
    array (
      'LaravelLocalization' => 'Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization',
    ),
  ),
  'nesbot/carbon' => 
  array (
    'providers' => 
    array (
      0 => 'Carbon\\Laravel\\ServiceProvider',
    ),
  ),
  'nunomaduro/collision' => 
  array (
    'providers' => 
    array (
      0 => 'NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider',
    ),
  ),
  'nunomaduro/termwind' => 
  array (
    'providers' => 
    array (
      0 => 'Termwind\\Laravel\\TermwindServiceProvider',
    ),
  ),
  'pbmedia/laravel-ffmpeg' => 
  array (
    'providers' => 
    array (
      0 => 'ProtoneMedia\\LaravelFFMpeg\\Support\\ServiceProvider',
    ),
    'aliases' => 
    array (
      'FFMpeg' => 'ProtoneMedia\\LaravelFFMpeg\\Support\\FFMpeg',
    ),
  ),
  'protonemedia/laravel-splade' => 
  array (
    'providers' => 
    array (
      0 => 'ProtoneMedia\\Splade\\ServiceProvider',
    ),
    'aliases' => 
    array (
      'Animation' => 'ProtoneMedia\\Splade\\Facades\\Animation',
      'SEO' => 'ProtoneMedia\\Splade\\Facades\\SEO',
      'Splade' => 'ProtoneMedia\\Splade\\Facades\\Splade',
      'Toast' => 'ProtoneMedia\\Splade\\Facades\\Toast',
    ),
  ),
  'spatie/laravel-ignition' => 
  array (
    'providers' => 
    array (
      0 => 'Spatie\\LaravelIgnition\\IgnitionServiceProvider',
    ),
    'aliases' => 
    array (
      'Flare' => 'Spatie\\LaravelIgnition\\Facades\\Flare',
    ),
  ),
  'spatie/laravel-medialibrary' => 
  array (
    'providers' => 
    array (
      0 => 'Spatie\\MediaLibrary\\MediaLibraryServiceProvider',
    ),
  ),
  'spatie/laravel-permission' => 
  array (
    'providers' => 
    array (
      0 => 'Spatie\\Permission\\PermissionServiceProvider',
    ),
  ),
  'tightenco/ziggy' => 
  array (
    'providers' => 
    array (
      0 => 'Tightenco\\Ziggy\\ZiggyServiceProvider',
    ),
  ),
  'wire-elements/modal' => 
  array (
    'providers' => 
    array (
      0 => 'LivewireUI\\Modal\\LivewireModalServiceProvider',
    ),
  ),
  'yajra/laravel-datatables-oracle' => 
  array (
    'providers' => 
    array (
      0 => 'Yajra\\DataTables\\DataTablesServiceProvider',
    ),
    'aliases' => 
    array (
      'DataTables' => 'Yajra\\DataTables\\Facades\\DataTables',
    ),
  ),
);
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/bootstrap/cache/livewire-components.php

      
-----------------------------------------------


      <?php return array (
  'dashboard.admin.active-study-plan.active-study-plan-index' => 'App\\Http\\Livewire\\Dashboard\\Admin\\ActiveStudyPlan\\ActiveStudyPlanIndex',
  'dashboard.admin.active-study-plan.show' => 'App\\Http\\Livewire\\Dashboard\\Admin\\ActiveStudyPlan\\Show',
  'dashboard.admin.payment.show-payment' => 'App\\Http\\Livewire\\Dashboard\\Admin\\Payment\\ShowPayment',
  'dashboard.admin.payment-order.show-payment-order' => 'App\\Http\\Livewire\\Dashboard\\Admin\\PaymentOrder\\ShowPaymentOrder',
  'dashboard.admin.student.show-student' => 'App\\Http\\Livewire\\Dashboard\\Admin\\Student\\ShowStudent',
  'dashboard.admin.student.show-student-payment' => 'App\\Http\\Livewire\\Dashboard\\Admin\\Student\\ShowStudentPayment',
  'dashboard.admin.student.show-student-table' => 'App\\Http\\Livewire\\Dashboard\\Admin\\Student\\ShowStudentTable',
  'dashboard.student.create-student' => 'App\\Http\\Livewire\\Dashboard\\Student\\CreateStudent',
  'dashboard.student.show-student' => 'App\\Http\\Livewire\\Dashboard\\Student\\ShowStudent',
  'elearnig.teacher.courses.lecture.tabs.videos-tab' => 'App\\Http\\Livewire\\Elearnig\\Teacher\\Courses\\Lecture\\Tabs\\VideosTab',
  'elearning.student.courses.courses-index' => 'App\\Http\\Livewire\\Elearning\\Student\\Courses\\CoursesIndex',
  'elearning.student.courses.lecture.test-tab' => 'App\\Http\\Livewire\\Elearning\\Student\\Courses\\Lecture\\TestTab',
  'elearning.teacher.courses.assignments-item' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\AssignmentsItem',
  'elearning.teacher.courses.course-marks-tab' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\CourseMarksTab',
  'elearning.teacher.courses.courses-index' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\CoursesIndex',
  'elearning.teacher.courses.courses-show' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\CoursesShow',
  'elearning.teacher.courses.lecture.assignment-list-item' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\AssignmentListItem',
  'elearning.teacher.courses.lecture.create-lecture' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\CreateLecture',
  'elearning.teacher.courses.lecture.lecture-attachments' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\LectureAttachments',
  'elearning.teacher.courses.lecture.tabs.assignment-tab' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\Tabs\\AssignmentTab',
  'elearning.teacher.courses.lecture.tabs.attachments-tab' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\Tabs\\AttachmentsTab',
  'elearning.teacher.courses.lecture.tabs.attendance-tab' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\Tabs\\AttendanceTab',
  'elearning.teacher.courses.lecture.tabs.videos-tab' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\Tabs\\VideosTab',
  'elearning.teacher.courses.lecture.test-mark-input' => 'App\\Http\\Livewire\\Elearning\\Teacher\\Courses\\Lecture\\TestMarkInput',
  'elearning.teacher.courses-dashboard' => 'App\\Http\\Livewire\\Elearning\\Teacher\\CoursesDashboard',
  'elearning.teacher.teacher-index' => 'App\\Http\\Livewire\\Elearning\\Teacher\\TeacherIndex',
  'result-index' => 'App\\Http\\Livewire\\ResultIndex',
  'student.courses.lecture.test-tab' => 'App\\Http\\Livewire\\Student\\Courses\\Lecture\\TestTab',
);
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Services/SecondRoundResultService.php

      
-----------------------------------------------


      <?php

namespace App\Services;

use App\Models\CarryOutCourse;
use App\Models\Course;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\SecondRound;
use Illuminate\Http\Request;
use App\Models\StudentResult;
use App\Models\StudentStudyYear;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;
use ResultInterface;

class SecondRoundResultService
{
    private $study_date_id;
    private $study_year_id;
    private $department_id;

    public function __construct($study_date_id, $study_year_id, $department_id)
    {
        $this->study_date_id = $study_date_id;
        $this->study_year_id = $study_year_id;
        $this->department_id = $department_id;

    }

    public function calculateSecondRoundResult()
    {
        $students = DB::table('course_students')
            ->select(
                // '*',
                'course_students.student_id',
                'student_results.status',
                'course_students.course_id',
                'courses.hours',
                'courses.code',
                'courses.min_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.practical_degree',
                'course_student_degrees.point',
                'course_student_degrees.is_first_exam',
                'course_student_degrees.is_pass',
                'course_student_degrees.attendance_status',
            )
            ->join('student_results', function ($q) {
                $q
                    ->where('student_results.is_first_exam', true)
                    // ->whereIn('student_results.status', [StudentResult::STATUS_SUB, StudentResult::STATUS_SUP])
                    ->where('student_results.study_date_id', $this->study_date_id);
            })
            ->join('second_rounds', function ($q) {
                $q
                    ->on('second_rounds.student_id', 'course_students.student_id')
                    ->on('second_rounds.course_id', 'course_students.course_id')
                    ->where('second_rounds.study_date_id', $this->study_date_id)
                ;
            })
            ->leftJoin('course_student_degrees', function ($q) {
                $q
                    ->on('course_student_degrees.id', 'course_students.course_student_degree_id')
                    ->on('course_student_degrees.student_id', 'course_students.student_id')
                    ->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->where('course_student_degrees.study_date_id', $this->study_date_id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->join('students', 'students.id', 'course_students.student_id')
            ->where('course_students.study_year_id', $this->study_year_id)
            ->where('students.department_id', $this->department_id)
            ->get()
            ->groupBy('student_id');

        // dd($students , $this->study_year_id , $this->study_date_id , $this->department_id);


        foreach ($students as $student) {
            // dd($students);

            $hasFailedCourse = false;


            foreach ($student as $course) {
                if ($this->trackFailedCourse($course)) {
                    $hasFailedCourse = $this->trackFailedCourse($course);
                }
            }

            $max_semester = Semester::where('study_year_id', $this->study_year_id)->orderBy('id', 'desc')->first();

            $cgpa = $this->calculateSecondRoundCGPA($max_semester->id, $student->first()->student_id);

            $status = $this->getSecondRoundResultStatus($cgpa, $hasFailedCourse, $student);

            StudentResult::updateOrCreate(
                [
                    'student_id' => $student->first()->student_id,
                    'study_year_id' => $this->study_year_id,
                    'study_date_id' => $this->study_date_id,
                    'is_first_exam' => false,
                    'department_id' => $this->department_id,
                ],
                [
                    'status' => $status,
                    'cgpa' => $cgpa,
                    'description' =>  $this->fillFailedStudentDescription($status),
                ]
            );

            StudentStudyYear::updateOrCreate(
                [
                    'student_id' => $student->first()->student_id,
                    'study_year_id' => $this->study_year_id,
                ],
                [
                    'status' => $status,
                    'cgpa' => $cgpa,
                ]
            );
            $this->StoreFailedOrAbsenceCourses($student->first()->student_id, $student);
        }
    }

    public function fillFailedStudentDescription($status)
    {

        switch ($status) {
            case StudentResult::STATUS_SUCCEEDED:
                return 'PASS';
                break;

            case StudentResult::STATUS_DISMISSED:
                return 'DISMISS';
                break;

            case StudentResult::STATUS_SUB:
                return 'SUB';
                break;

            case StudentResult::STATUS_SUP_AND_SUB:
                return 'SUP/SUB';
                break;

            case StudentResult::STATUS_SUP:
                return 'SUP';
                break;

            case StudentResult::STATUS_RETURNED_WITH_ALL_COURSES:
                return 'RETURN';
                break;

            case StudentResult::STATUS_WARNED:
                return 'WARNED';
                break;

            case StudentResult::STATUS_RETURNED_WITH_SOME_COURSES:
                return 'باقي للاعادة بمواد';
                break;

            case StudentResult::STATUS_RETURNED_WITH_ALL_COURSES:
                return 'باقي للاعادة ';
                break;

            default:
                return '-';
                break;
        }
    }

    public function trackFailedCourse($studentCourse)
    {
        if (in_array($studentCourse->attendance_status, [CourseStudentDegree::STATUS_ABSENCE, CourseStudentDegree::STATUS_EXCUSED_ABSENCE])) {
            return false;
        }
        return !$studentCourse->is_pass;
        return !((int)$studentCourse->theory_degree + (int)$studentCourse->practical_degree >= (int)$studentCourse->min_degree);
    }

    public function getSecondRoundResultStatus($cgpa, $hasFailedCourse, $courses)
    {
        //SUCCEEDED STUDENTS
        if (!$hasFailedCourse && $cgpa >= StudentResult::MIN_SUCCESS_CGPA) {
            return StudentResult::STATUS_SUCCEEDED;
        }

        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $returnCount = StudentResult::where('student_id', $courses->first()->student_id)
            ->where('study_year_id', $this->study_year_id)
            ->where('study_date_id', '!=', $activeStudyDate->id)
            ->count();

        // dd($hasFailedCourse);
        if ($hasFailedCourse) {

            // DISMISS STUDNETS
            if ($returnCount > 0) {
                return StudentResult::STATUS_DISMISSED;
            }

            // RETURNED STUDNETS WITH SOME COURSES
            if ($cgpa >= StudentResult::FAILED_CGPA) {

                return StudentResult::STATUS_RETURNED_WITH_SOME_COURSES;
            }

            // RETURNED STUDNETS WITH ALL COURSES
            if ($cgpa < StudentResult::FAILED_CGPA) {

                return StudentResult::STATUS_RETURNED_WITH_ALL_COURSES;
            }

            return 'UNKNOWN STATUS SECOND RESULT';
        }

        // RETURNED STUDNETS
        if ($cgpa >= StudentResult::MIN_RETURNED_CGPA && $cgpa <= StudentResult::MAX_RETURNED_CGPA) {
            return StudentResult::STATUS_RETURNED_WITH_ALL_COURSES;
        }

        // WARNED STUDNETS
        if (
            $cgpa <= StudentResult::MAX_WARNED_CGPA
            && $cgpa >= StudentResult::MIN_WARNED_CGPA
            && !$hasFailedCourse
        ) {
            return StudentResult::STATUS_WARNED;
        }


        return 666;
    }

    public function calculateSecondRoundCGPA($max_semester, $student_id)
    {
        $courseStudents = DB::table('course_students')
            ->select(
                'course_student_degrees.is_first_exam',
                'courses.hours',
                'course_student_degrees.point',
                'course_student_degrees.is_pass',
                'course_student_degrees.attendance_status',
                'course_students.student_id',
                'course_students.course_id',
                'second_rounds.status as second_round_status',
            )
            ->join('course_student_degrees', function ($q) {
                $q
                    ->on('course_student_degrees.id', 'course_students.course_student_degree_id')
                    ->on('course_student_degrees.student_id', 'course_students.student_id')
                    ->on('course_student_degrees.course_id', 'course_students.course_id');
            })
            ->leftJoin('second_rounds', function ($q) {
                $q
                    ->on('second_rounds.student_id', 'course_students.student_id')
                    ->on('second_rounds.course_id', 'course_students.course_id')
                    ->where('second_rounds.study_date_id', $this->study_date_id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->where('semester_id', '<=', $max_semester)
            ->where('course_students.student_id', $student_id)
            ->get();

        $totalHours = 0;

        $carryOutCourses = CarryOutCourse::where('student_id',$courseStudents->first()?->student_id)
        ->whereIn('course_id',$courseStudents->pluck('course_id'))
        ->get();

        foreach ($courseStudents as $course) {

            if ((int)$course->second_round_status == SecondRound::STATUS_SUB || $carryOutCourses->where('course_id',$course->course_id)->count() > 0) {
                $totalHours += ((float)$course->hours * 2);
            } else {
                $totalHours += (float)$course->hours;
            }
        }
        $totalPoints = 0;
        foreach ($courseStudents as $course) {
            $totalPoints += ($course->point *  (float)$course->hours);
        }


        /**
         * BE CAREFULL :
         *  EXCUSED ABSENCE STUDENT WILL HAVE 0.00 CGPA AND MUST NOT BE DISMISSED
         */

        return round($totalPoints / ($totalHours > 0 ? $totalHours : 1), 2);
        /**
         * 1- Get registration semesters before the current semester.
         *
         * 2- For every semester :
         *      - $gpa = points * hours
         *      - sum gpa and add it to the total
         *
         * 3- Sum the totals and divide by the total hours of all the semesters courses hours .
         *
         */
    }

    public function StoreFailedOrAbsenceCourses($student_id, $courses)
    {
        CarryOutCourse::where('student_id', $student_id)
            ->whereIn('course_id', $courses->pluck('course_id')->toArray())
            ->delete();

        $courses = $courses->where('is_pass', false);

        foreach ($courses as $course) {
            CarryOutCourse::updateOrCreate([
                'course_id' => $course->course_id,
                'student_id' => $student_id,
            ]);
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Services/RegistrationsCoursesService.php

      
-----------------------------------------------


      <?php

namespace App\Services;

use App\Models\CourseStudent;
use App\Models\Student;
use App\Models\StudyPlan;
use App\Models\RegistrationCourse;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyPlanDate;

class RegistrationsCoursesService
{
    public static function syncRegistrationsCourses()
    {
        $studyPlans = StudyPlan::with('studyPlanCourses', 'studyPlanDate')->get();


        $students = Student::select('id', 'department_id', 'study_year_id')->with('registration:id,student_id')->get();

        foreach ($studyPlans as $studyPlan) {
            foreach ($studyPlan->studyPlanCourses as $studyPlanCourse) {
                foreach ($students
                    ->where('department_id', $studyPlan->studyPlanDate->department_id)
                    ->where('study_year_id', $studyPlan->studyPlanDate->semester->study_year_id)
                    as $student) {
                    RegistrationCourse::updateOrCreate([
                        // 'study_plan_course_id' => $studyPlanCourse->id,
                        'study_plan_date_id' => $studyPlan->studyPlanDate->id,
                        'registration_id' => $student->registration->id,
                    ]);
                }
            }
        }
    }


    public static function syncStudentCourses(Student $student)
    {
        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $studentSemesters = Semester::select('id')->where('study_year_id', $student->study_year_id)->get()->pluck('id')->toArray();

        $studyPlanDates = StudyPlanDate::query()
            ->where('department_id', $student->department_id)
            ->whereIn('semester_id', $studentSemesters)
            ->where('study_date_id', $activeStudyDate->id)
            ->get();


        foreach ($studyPlanDates as $studyPlanDate) {

            CourseStudent::updateOrCreate([
                'student_id' => $student->id,
                'study_year_id' => $student->study_year_id,
                'semester_id' => $studyPlanDate->semester_id,
                'course_id' => $studyPlanDate->course_id,
                'hours' => 3 //hard coded for now.
            ]);

        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Services/PaymentService.php

      
-----------------------------------------------


      <?php

namespace App\Http\Services;

use App\Models\PaymentOrder;

class PaymentService {
    
    public function createPayment(PaymentOrder $paymentOrder , $data) {

    }
}
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Services/FirstRoundResultService.php

      
-----------------------------------------------


      <?php

namespace App\Services;

use App\interface\ResultInterface;
use App\Models\Semester;
use App\Models\LevelDegree;
use App\Models\SecondRound;
use App\Models\CourseStudent;
use App\Models\StudentResult;
use App\Models\CarryOutCourse;
use App\Models\StudentStudyYear;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;

class FirstRoundResultService
{
    private $study_date_id;
    private $study_year_id;
    private $department_id;

    public function __construct($study_date_id, $study_year_id, $department_id)
    {
        $this->study_date_id = $study_date_id;
        $this->study_year_id = $study_year_id;
        $this->department_id = $department_id;
    }

    public function calculateResult()
    {
        $students = DB::table('course_students')
            ->select(
                'course_students.student_id',
                'course_students.course_id',
                'courses.hours',
                'courses.code',
                'courses.min_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.practical_degree',
                'course_student_degrees.point',
                'course_student_degrees.is_first_exam',
                'course_student_degrees.is_pass',
                'course_student_degrees.attendance_status',
            )
            ->leftJoin('course_student_degrees', function ($q) {
                $q
                    ->on('course_student_degrees.id', 'course_students.course_student_degree_id')
                    ->on('course_student_degrees.student_id', 'course_students.student_id')
                    ->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->where('course_student_degrees.study_date_id', $this->study_date_id)
                    ->where('course_student_degrees.is_first_exam', true);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->join('students', 'students.id', 'course_students.student_id')
            ->where('course_students.study_year_id', $this->study_year_id)
            ->where('students.department_id', $this->department_id)
            ->get()
            ->groupBy('student_id');

        foreach ($students as $student) {

            $totalPoints = 0;

            $hasFailedCourse = false;

            SecondRound::where('student_id', $student->first()->student_id)
                ->where('study_date_id', $this->study_date_id)
                ->delete();

            foreach ($student as $course) {

                $totalPoints += round(($course->point * (float)$course->hours), 2);

                if ($this->shouldFailInCourse($course)) {
                    $hasFailedCourse = $this->shouldFailInCourse($course);
                }


                if (
                    !!$this->shouldFailInCourse($course) ||
                    in_array($course->attendance_status, [CourseStudentDegree::STATUS_ABSENCE , CourseStudentDegree::STATUS_EXCUSED_ABSENCE , CourseStudentDegree::STATUS_CHEATED])
                ) {

                    $this->insertFailedCoursesInSecondRound($course);
                }
            }

            $max_semester = Semester::where('study_year_id', $this->study_year_id)->orderBy('id', 'desc')->first();

            $cgpa = $this->calculateCGPA($max_semester->id, $student->first()->student_id);

            $status = $this->getStudentStatus($cgpa, $hasFailedCourse, $student);

            $levelDegrees = LevelDegree::all('min_point', 'max_point', 'level_code');

            $degreeCode = $this->getDegreeCode($cgpa,$levelDegrees);

            StudentResult::updateOrCreate(
                [
                    'student_id' => $student->first()->student_id,
                    'study_year_id' => $this->study_year_id,
                    'study_date_id' => $this->study_date_id,
                    'is_first_exam' => true,
                    'department_id' => $this->department_id,
                ],
                [
                    'status' => $status,
                    'cgpa' => $cgpa,
                    'description' =>  $this->fillFailedStudentDescription($status),
                    'degree_code' => $degreeCode,
                ]
            );

            StudentStudyYear::updateOrCreate(
                [
                    'student_id' => $student->first()->student_id,
                    'study_year_id' => $this->study_year_id,
                ],
                [
                    'status' => $status,
                    'cgpa' => $cgpa,
                    'degree_code' => $degreeCode,
                ]
            );
        }
    }

    public function getDegreeCode($cgpa, $levelDegrees)
    {
        foreach ($levelDegrees as $levelDegree) {
            if ($cgpa >= $levelDegree->min_point && $cgpa <= $levelDegree->max_point) {
                return $levelDegree->level_code;
                break;
            }
        }
        return '--';
    }
    public function getStudentStatus($cgpa, $hasFailedCourse, $courses)
    {

        if ($courses->where('attendance_status', CourseStudentDegree::STATUS_FREEZEED)->count() > 0) {
            return StudentResult::STATUS_FREEZEED;
        }

        $excusedAbsenceCourses = $courses->where('attendance_status', CourseStudentDegree::STATUS_EXCUSED_ABSENCE);

        // DISMISS STUDENTS
        if ($cgpa <= StudentResult::DISMISS_CGPA && $excusedAbsenceCourses->count() != $courses->count()) {
            return StudentResult::STATUS_DISMISSED;
        }

        //SUCCEEDED STUDENTS
        if (!$hasFailedCourse && $cgpa >= StudentResult::MIN_SUCCESS_CGPA && $excusedAbsenceCourses->count() == 0) {
            return StudentResult::STATUS_SUCCEEDED;
        }

        // SUB ONLY STUDENTS
        if ($excusedAbsenceCourses->count() == $courses->where('is_pass',false)->count()) {
            return StudentResult::STATUS_SUB;
        }

        //SUB || FAILED STUDENTS
        if ($hasFailedCourse && $cgpa >= StudentResult::FAILED_CGPA) {

            if ($excusedAbsenceCourses->count() > 0) {
                return StudentResult::STATUS_SUP_AND_SUB;
            }

            return StudentResult::STATUS_SUP;
        }

        // RETURNED STUDNETS
        if ($cgpa >= StudentResult::MIN_RETURNED_CGPA && $cgpa <= StudentResult::MAX_RETURNED_CGPA) {
            return StudentResult::STATUS_RETURNED_WITH_ALL_COURSES;
        }

        // WARNED STUDNETS
        if (
            $cgpa <= StudentResult::MAX_WARNED_CGPA
            && $cgpa >= StudentResult::MIN_WARNED_CGPA
            && !$hasFailedCourse
        ) {
            return StudentResult::STATUS_WARNED;
        }

        return 'UNKNOWN STATUS';
    }

    public function insertFailedCoursesInSecondRound($studentCourse)
    {
        $status = (int)$studentCourse->attendance_status == CourseStudentDegree::STATUS_EXCUSED_ABSENCE
            ? SecondRound::STATUS_SUB
            : SecondRound::STATUS_SUP;


        SecondRound::updateOrCreate(
            [
                'student_id' => $studentCourse->student_id,
                'course_id' => $studentCourse->course_id,
                'study_date_id' => $this->study_date_id,
                'status' => $status,
            ]
        );
    }

    public function fillFailedStudentDescription($status)
    {

        switch ($status) {
            case StudentResult::STATUS_SUCCEEDED:
                return 'PASS';
                break;

            case StudentResult::STATUS_DISMISSED:
                return 'DISMISS';
                break;

            case StudentResult::STATUS_FREEZEED:
                return 'FREEZE';
                break;

            case StudentResult::STATUS_SUB:
                return 'SUB';
                break;

            case StudentResult::STATUS_SUP_AND_SUB:
                return 'SUP/SUB';
                break;

            case StudentResult::STATUS_SUP:
                return 'SUP';
                break;

            case StudentResult::STATUS_RETURNED_WITH_ALL_COURSES:
                return 'RETURN';
                break;

            case StudentResult::STATUS_WARNED:
                return 'WARNED';
                break;

            case StudentResult::STATUS_RETURNED_WITH_SOME_COURSES:
                return 'باقي للاعادة بمواد';
                break;

            case StudentResult::STATUS_RETURNED_WITH_ALL_COURSES:
                return 'باقي للاعادة ';
                break;

            default:
                return '-';
                break;
        }
    }

    public function shouldFailInCourse($studentCourse)
    {
        if (!in_array($studentCourse->attendance_status, [CourseStudentDegree::STATUS_ATTENDED])) {
            return true;
        }

        return !((int)$studentCourse->theory_degree + (int)$studentCourse->practical_degree >= (int)$studentCourse->min_degree);
        // return !$studentCourse->is_pass;
    }

    public function calculateCGPA($max_semester, $student_id,)
    {
        $courseStudents = DB::table('course_students')
            ->select(
                'course_student_degrees.is_first_exam',
                'courses.hours',
                'course_student_degrees.theory_degree',
                'course_student_degrees.practical_degree',
                'course_student_degrees.attendance_status',
                'course_student_degrees.point',
                'course_students.student_id',
                'course_students.course_id',
            )
            ->leftJoin('course_student_degrees', function ($q) {
                $q
                    ->on('course_student_degrees.id', 'course_students.course_student_degree_id')
                    ->on('course_student_degrees.student_id', 'course_students.student_id')
                    ->on('course_student_degrees.course_id', 'course_students.course_id');
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->where('semester_id', '<=', $max_semester)
            ->where('course_students.student_id', $student_id)
            ->get();


        $courseStudents = $courseStudents->where('attendance_status', '!=', CourseStudentDegree::STATUS_EXCUSED_ABSENCE);

        $totalHours = $this->calculateTotalHours($courseStudents);
        $totalPoints = 0;

        foreach ($courseStudents as $course) {
            $totalPoints += ($course->point *  (float)$course->hours);
        }

        /**
         * ?Importnant :
         *  ?EXCUSED ABSENCE STUDENT WILL HAVE 0.00 CGPA AND MUST NOT BE DISMISSED
         *
         */

        return round($totalPoints / ($totalHours > 0 ? $totalHours : 1),2);
    }

    public function calculateTotalHours($courses)
    {
        $carryOutCourses = CarryOutCourse::where('student_id', $courses->first()?->student_id)
            ->whereIn('course_id', $courses->pluck('course_id'))
            ->get();

        $hours = 0;
        foreach ($courses as $course) {
            //BUG: we should not double the hours in first round result
            $hours += ($carryOutCourses->where('course_id', $course->course_id)->count() > 0
                ? (float)$course->hours * 2
                : (float) $course->hours
            );
        }
        return $hours;
    }

    public function calculatePoint($studentCourse)
    {
        return  round(((int)$studentCourse->theory_degree + (int)$studentCourse->practical_degree) / 25, 2);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Services/ExportStudentsService.php

      
-----------------------------------------------


      <?php

namespace App\Services;

use App\Enums\RegistrationStatus;
use App\Models\Semester;
use App\Models\SecondRound;
use App\Models\StudentResult;
use App\Models\StudentStudyYear;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;
use App\Models\DepartmentPrice;
use App\Models\Registration;
use App\Models\Student;
use App\Models\StudyDate;

class ExportStudentsService
{
    public $activeStudyDate;

    public function __construct()
    {
        $this->activeStudyDate = StudyDate::getActiveStudyDate();
    }
    public function export($previousStudyDate)
    {

        return DB::transaction(function () use($previousStudyDate) {
            $students = DB::table('student_study_years')
                ->select('student_study_years.*', 'students.currency', 'registrations.tuition_fees')
                ->join('students', 'students.id', 'student_study_years.student_id')
                ->join('registrations', function ($q) use ($previousStudyDate) {
                    $q->on('registrations.student_id', 'students.id')
                        ->on('registrations.study_year_id', 'students.study_year_id')
                        ->where('registrations.study_date_id', $previousStudyDate);
                })
                ->joinSub(
                    DB::table('student_study_years')
                        ->select('student_id', DB::raw('MAX(study_year_id) as study_year_id'))
                        ->groupBy('student_id'),
                    'student',
                    function ($q) {
                        $q->on('student_study_years.student_id', 'student.student_id')
                            ->on('student_study_years.study_year_id', 'student.study_year_id');
                    }
                )
                ->get();

            $succeededStudents = $students->where('status', StudentResult::STATUS_SUCCEEDED);

            $this->handleSucceededStudents($succeededStudents);

            $failedStudents = $students->whereIn('status', [StudentResult::STATUS_RETURNED_WITH_ALL_COURSES, StudentResult::STATUS_RETURNED_WITH_SOME_COURSES]);

            $this->handleFailedStudents($failedStudents);
        });
    }

    public function handleSucceededStudents($students)
    {

        foreach ($students as $student) {
            Student::where('id', $student->student_id)
                ->update('study_year_id', (int)$student->study_year_id + 1);

            $registration = Registration::create([
                'study_date_id' => $this->activeStudyDate->id,
                'study_year_id' => (int)$student->study_year_id + 1,
                'student_id' => $student->student_id,
                'status' => RegistrationStatus::STATUS_UNREGISTERED,
                'currency' => $student->currency,
                'last_status' => $student->status,
                'tuition_fees' => $student->tuition_fees,
                'register_fees' => $student->currency == 'sdg' ? $this->activeStudyDate->register_fees_sdg : $this->activeStudyDate->register_fees_usd,
            ]);

            $registration->createRegistrationPaymentOrder();
        }
    }

    public function handleFailedStudents($students)
    {

        foreach ($students as $student) {
            $registration = Registration::create([
                'study_date_id' => $this->activeStudyDate->id,
                'study_year_id' => $student->study_year_id,
                'student_id' => $student->student_id,
                'status' => RegistrationStatus::STATUS_UNREGISTERED,
                'currency' => $student->currency,
                'last_status' => $student->status,
                'tuition_fees' => $student->tuition_fees,
                'register_fees' => $student->currency == 'sdg' ? $this->activeStudyDate->register_fees_sdg : $this->activeStudyDate->register_fees_usd,
            ]);

            $registration->createRegistrationPaymentOrder();
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Services/AttachmentService.php

      
-----------------------------------------------


      <?php

namespace App\Services;


use FFMpeg\FFMpeg as F;
use Illuminate\Support\Str;
use FFMpeg\Coordinate\TimeCode;
use ProtoneMedia\LaravelFFMpeg\FFMpeg\FFProbe;
use ProtoneMedia\LaravelFFMpeg\Support\FFMpeg;

class AttachmentService
{

  public static function getVideoThumbnail($uploadedVideo)
  {

    // $ffmpeg = FFMpeg::fromDisk('local')->create(
    //   [
    //     'ffmpeg.binaries'  => '/usr/bin/ffmpeg', // the path to the FFMpeg binary
    //     'ffprobe.binaries' => '/usr/bin/ffprobe', // the path to the FFProbe binary
    //   ]
    // );
    $path = 'vue-elearning/thumbnails/' . Str::uuid() . '.png';

      $video = FFMpeg::fromDisk('public')
            ->open($uploadedVideo)
            ->getFrameFromTimecode(TimeCode::fromSeconds(2))
            ->export()
            ->toDisk('public')
            ->save($path);

        return $path;
    // dd($video->frame);
    // $video = $ffmpeg->open('storage/app/' . $uploadedVideo);

    // $videoName = Str::uuid() . '.' . 'jpg';

    // $video
    //   ->frame(TimeCode::fromSeconds(5))
    //   ->save($videoName);

    // return $videoName;
  }

  public static function getVideoDuration($uploadedVideo)
  {
    $duration = FFProbe::create(
      [
        'ffmpeg.binaries'  => '/usr/bin/ffmpeg', // the path to the FFMpeg binary
        'ffprobe.binaries' => '/usr/bin/ffprobe', // the path to the FFProbe binary
      ]
    )
      ->format('storage/' .  $uploadedVideo)
      ->get('duration');
    return str_replace('.',':',round($duration / 60,2));
  }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Rules/CourseCodeExists.php

      
-----------------------------------------------


      <?php

namespace App\Rules;

use Illuminate\Contracts\Validation\Rule;
use Illuminate\Support\Facades\Validator;

class CourseCodeExists implements Rule
{
    private $courseCode;
    /**
     * Create a new rule instance.
     *
     * @return void
     */
    public function __construct($courseCode)
    {
        $this->courseCode = $courseCode;
    }

    /**
     * Determine if the validation rule passes.
     *
     * @param  string  $attribute
     * @param  mixed  $value
     * @return bool
     */
    public function passes($attribute, $value)
    {
        /**
         * If course exists take the id
         * if course not exists :
         *
         *
         */
        // if ($this->insert_courses != 'on') {
        //     return true;
        // }
        // return false;
        $validator = Validator::make([$attribute => $value], [
            $attribute => 'unique:courses,' . $this->courseCode,
        ]);

        return !$validator->fails();
        // return true;
        // dd($attribute, $value);
    }

    /**
     * Get the validation error message.
     *
     * @return string
     */
    public function message()
    {
        return 'The validation error message.';
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Providers/TelescopeServiceProvider.php

      
-----------------------------------------------


      <?php

namespace App\Providers;

use Illuminate\Support\Facades\Gate;
use Laravel\Telescope\IncomingEntry;
use Laravel\Telescope\Telescope;
use Laravel\Telescope\TelescopeApplicationServiceProvider;

class TelescopeServiceProvider extends TelescopeApplicationServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        // Telescope::night();

        $this->hideSensitiveRequestDetails();

        Telescope::filter(function (IncomingEntry $entry) {
            if ($this->app->environment('local')) {
                return true;
            }

            return $entry->isReportableException() ||
                   $entry->isFailedRequest() ||
                   $entry->isFailedJob() ||
                   $entry->isScheduledTask() ||
                   $entry->hasMonitoredTag();
        });
    }

    /**
     * Prevent sensitive request details from being logged by Telescope.
     */
    protected function hideSensitiveRequestDetails(): void
    {
        if ($this->app->environment('local')) {
            return;
        }

        Telescope::hideRequestParameters(['_token']);

        Telescope::hideRequestHeaders([
            'cookie',
            'x-csrf-token',
            'x-xsrf-token',
        ]);
    }

    /**
     * Register the Telescope gate.
     *
     * This gate determines who can access Telescope in non-local environments.
     */
    protected function gate(): void
    {
        Gate::define('viewTelescope', function ($user) {
            return in_array($user->email, [
                //
            ]);
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Providers/SettingsServiceProvider.php

      
-----------------------------------------------


      <?php

namespace App\Providers;

use App\Models\Settings;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\ServiceProvider;

class SettingsServiceProvider extends ServiceProvider
{
    /**
     * Register services.
     *
     * @return void
     */
    public function register()
    {
        //
    }

    /**
     * Bootstrap services.
     *
     * @return void
     */
    public function boot(Cache $cache, Settings $settingsModel)
    {
        if (!App::runningInConsole()) {

            $settings = $cache::remember('settings', 60, function () use ($settingsModel) {
                return $settingsModel::pluck('value', 'key',)->all();
            });

            config()->set('settings', $settings);
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Providers/RouteServiceProvider.php

      
-----------------------------------------------


      <?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    use \Mcamara\LaravelLocalization\Traits\LoadsTranslatedCachedRoutes;
    /**
     * The path to the "home" route for your application.
     *
     * This is used by Laravel authentication to redirect users after login.
     *
     * @var string
     */
    public const HOME = '/home';

    public const ADMIN = '/welcome';

    /**
     * The controller namespace for the application.
     *
     * When present, controller route declarations will automatically be prefixed with this namespace.
     *
     * @var string|null
     */
    // protected $namespace = 'App\\Http\\Controllers';

    /**
     * Define your route model bindings, pattern filters, etc.
     *
     * @return void
     */
    public function boot()
    {
        $this->configureRateLimiting();

        $this->routes(function () {
            Route::prefix('api')
                ->middleware('api')
                ->namespace($this->namespace)
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->namespace($this->namespace)
                ->group(base_path('routes/web.php'));

            Route::middleware('web')
                ->namespace($this->namespace)
                ->group(base_path('routes/dashboard/admin.php'));

            Route::middleware('web')
                ->namespace($this->namespace)
                ->group(base_path('routes/dashboard/admin/reports/accountant.php'));

            Route::middleware('web')
                ->namespace($this->namespace)
                ->group(base_path('routes/dashboard/admin/reports/recorder.php'));

            Route::middleware('web')
                ->namespace($this->namespace)
                ->group(base_path('routes/elearning.php'));

            Route::middleware('web')
                ->namespace($this->namespace)
                ->group(base_path('routes/vue-elearning.php'));
        });
    }

    /**
     * Configure the rate limiters for the application.
     *
     * @return void
     */
    protected function configureRateLimiting()
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by(optional($request->user())->id ?: $request->ip());
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Providers/EventServiceProvider.php

      
-----------------------------------------------


      <?php

namespace App\Providers;

use App\Events\TestPaused;
use App\Events\TestStarted;
use App\Events\PodcastProcessed;
use App\Events\TestEnded;
use App\Events\TestResumed;
use Illuminate\Support\Facades\Event;
use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
            PodcastProcessed::class,
            TestStarted::class,
            TestPaused::class,
            TestResumed::class,
            TestEnded::class,
        ],
    ];

    /**
     * Register any events for your application.
     *
     * @return void
     */
    public function boot()
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Providers/BroadcastServiceProvider.php

      
-----------------------------------------------


      <?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        Broadcast::routes();

        require base_path('routes/channels.php');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Providers/AuthServiceProvider.php

      
-----------------------------------------------


      <?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Gate;
use Laravel\Passport\Passport;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        'App\Models\Model' => 'App\Policies\ModelPolicy',
    ];

    /**
     * Register any authentication / authorization services.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerPolicies();
        Passport::routes();
        //Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Providers/AppServiceProvider.php

      
-----------------------------------------------


      <?php

namespace App\Providers;

use App\Http\Traits\Dashboard\Admin\PaymentOrders\HasBasePaymentOrders;
use App\Models\StudyDate;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        if ($this->app->environment('local')) {
            $this->app->register(\Laravel\Telescope\TelescopeServiceProvider::class);
            $this->app->register(TelescopeServiceProvider::class);
        }
        $this->app->bind(HasBasePaymentOrders::class, function ($app) {
            return new HasBasePaymentOrders($app->make(Registration::class));
        });
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        // $studyDate = StudyDate::where('archived', 1)->first('id');

        // Config::set('active_study_date',$studyDate->id);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Policies/StudyPlanPolicy.php

      
-----------------------------------------------


      <?php

namespace App\Policies;

use App\Models\StudyPlan;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class StudyPlanPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function viewAny(User $user)
    {
        //
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function view(User $user, StudyPlan $studyPlan)
    {
        //
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function create(User $user)
    {
        //
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function update(User $user, StudyPlan $studyPlan)
    {
        //
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function delete(User $user, StudyPlan $studyPlan)
    {
        //
    }

    /**
     * Determine whether the user can restore the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function restore(User $user, StudyPlan $studyPlan)
    {
        //
    }

    /**
     * Determine whether the user can permanently delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function forceDelete(User $user, StudyPlan $studyPlan)
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Policies/CoursePolicy.php

      
-----------------------------------------------


      <?php

namespace App\Policies;

use App\Models\Course;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class CoursePolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function viewAny(User $user)
    {
        //
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function view(User $user, Course $course)
    {
        //
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function create(User $user)
    {
        //
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function update(User $user, Course $course)
    {
        //
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function delete(User $user, Course $course)
    {
        //
    }

    /**
     * Determine whether the user can restore the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function restore(User $user, Course $course)
    {
        //
    }

    /**
     * Determine whether the user can permanently delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function forceDelete(User $user, Course $course)
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/User.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Laravel\Passport\HasApiTokens;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;

/**
 * App\Models\User
 *
 * @property int $id
 * @property string $name
 * @property string|null $email
 * @property \Illuminate\Support\Carbon|null $email_verified_at
 * @property string $password
 * @property string|null $remember_token
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $student_id
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Passport\Client> $clients
 * @property-read int|null $clients_count
 * @property-read \Illuminate\Notifications\DatabaseNotificationCollection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
 * @property-read int|null $notifications_count
 * @property-read \App\Models\Student|null $student
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Passport\Token> $tokens
 * @property-read int|null $tokens_count
 * @method static \Database\Factories\UserFactory factory($count = null, $state = [])
 * @method static \Illuminate\Database\Eloquent\Builder|User newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|User newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|User onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|User query()
 * @method static \Illuminate\Database\Eloquent\Builder|User whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereEmail($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereEmailVerifiedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User wherePassword($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereRememberToken($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|User withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|User withoutTrashed()
 * @mixin \Eloquent
 */
class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'student_id'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function student(){
        return $this->belongsTo(Student::class);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/University.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\University
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $hold
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|University newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|University newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|University onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|University query()
 * @method static \Illuminate\Database\Eloquent\Builder|University whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|University whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|University whereHold($value)
 * @method static \Illuminate\Database\Eloquent\Builder|University whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|University whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|University whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|University withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|University withoutTrashed()
 * @mixin \Eloquent
 */
class University extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $guarded = ['id'];

}//end of models
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/TypeDiscount.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\TypeDiscount
 *
 * @property int $id
 * @property string $type
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount query()
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|TypeDiscount withoutTrashed()
 * @mixin \Eloquent
 */
class TypeDiscount extends Model
{
    use HasFactory;
    use SoftDeletes;
    
    protected $guarded = [];

}//end of models
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Teacher.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

/**
 * App\Models\Teacher
 *
 * @property int $id
 * @property int|null $department_id
 * @property string|null $name
 * @property string|null $phone
 * @property string|null $email
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $admin_id
 * @property-read \App\Models\Admin|null $admin
 * @property-read \App\Models\Department|null $department
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StudyPlanDateTeacher> $studyPlanDateTeacher
 * @property-read int|null $study_plan_date_teacher_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StudyPlanDate> $studyPlanDates
 * @property-read int|null $study_plan_dates_count
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher query()
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher whereAdminId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher whereEmail($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher wherePhone($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Teacher whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Teacher extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function department() {
        return $this->belongsTo(Department::class);
    }

    public function studyPlanDateTeacher() {
        return $this->hasMany(StudyPlanDateTeacher::class);
    }

    public function studyPlanDates() :BelongsToMany
     {
        return $this->belongsToMany(StudyPlanDate::class,'study_plan_date_teachers');
    }

    public function admin() {
        return $this->belongsTo(Admin::class);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudyplanStudent.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\StudyplanStudent
 *
 * @method static \Illuminate\Database\Eloquent\Builder|StudyplanStudent newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyplanStudent newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyplanStudent query()
 * @mixin \Eloquent
 */
class StudyplanStudent extends Model
{
    use HasFactory;

    protected $guarded = [];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudyYear.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Enums\RegistrationStatus;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\StudyYear
 *
 * @property int $id
 * @property string $name
 * @property string $number
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Department> $departments
 * @property-read int|null $departments_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $registerdRegistrations
 * @property-read int|null $registerd_registrations_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Registration> $registration
 * @property-read int|null $registration_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $students
 * @property-read int|null $students_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $totalRegistrations
 * @property-read int|null $total_registrations_count
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear whereNumber($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyYear withoutTrashed()
 * @mixin \Eloquent
 */
class StudyYear extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $guarded = [];

    public function students() {
        return $this->hasMany(Student::class);
    }

    public function registration() {
        return $this->hasManyThrough(Registration::class,Student::class);
    }

    public function departments() {
        return $this->belongsToMany(Department::class);
    }

    public function registerdRegistrations()
    {
        // return $this->hasManyThrough(Student::class,Department::class);
        return $this->hasMany(Student::class)
                    ->whereHas('registration', fn ($q) => $q->where('status', RegistrationStatus::STATUS_REGISTERED));
        // return $this->hasMany(Student::class)->whereHas('registration', fn ($q) => $q->where('status_id', 2));

    }//end of belongsTo studyYear

    public function totalRegistrations()
    {
        return $this->hasMany(Student::class)->has('department.registration');

    }

}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudyPlanDateTeacher.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * App\Models\StudyPlanDateTeacher
 *
 * @property int $id
 * @property int $study_plan_date_id
 * @property int $teacher_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\Models\StudyPlanDate|null $activeStudyPlanDate
 * @property-read \App\Models\StudyPlanDate $studyPlanDate
 * @property-read \App\Models\Teacher $teacher
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher whereStudyPlanDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher whereTeacherId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDateTeacher whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class StudyPlanDateTeacher extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function teacher() : BelongsTo {
        return $this->belongsTo(Teacher::class);
    }

   public function studyPlanDate(): BelongsTo
   {
       return $this->belongsTo(StudyPlanDate::class);
   }

   public function activeStudyPlanDate(): BelongsTo
   {
    
       return $this->belongsTo(StudyPlanDate::class)->where('study_date_id', StudyDate::getActiveStudyDate()->id);
   }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudyPlanDate.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Models\Course;
use App\Models\Semester;
use App\Models\StudyPlan;
use App\Models\Department;
use App\Models\CourseStudent;
use Awobaz\Compoships\Compoships;
use App\Models\StudyPlanDateTeacher;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

/**
 * App\Models\StudyPlanDate
 *
 * @property int $id
 * @property int $department_id
 * @property int $semester_id
 * @property int|null $study_date_id
 * @property int $course_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property float|null $theory_degree
 * @property float|null $practical_degree
 * @property string|null $min_degree
 * @property float|null $attendance_degree
 * @property float|null $tests_degree
 * @property float|null $assignments_degree
 * @property int|null $is_first_round_approved
 * @property string|null $first_round_approve_date
 * @property int|null $is_second_round_approved
 * @property string|null $second_round_approve_date
 * @property-read Course $course
 * @property-read \Illuminate\Database\Eloquent\Collection<int, CourseStudent> $courseStudents
 * @property-read int|null $course_students_count
 * @property-read Department $department
 * @property-read Semester $semester
 * @property-read StudyPlan|null $studyPlan
 * @property-read \Illuminate\Database\Eloquent\Collection<int, StudyPlanDateTeacher> $studyPlanDateTeacher
 * @property-read int|null $study_plan_date_teacher_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, StudyPlanDateTeacher> $studyPlanDateTeachers
 * @property-read int|null $study_plan_date_teachers_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Teacher> $teachers
 * @property-read int|null $teachers_count
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whenDepartmentId($id)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whenSemesterId($id)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereAssignmentsDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereAttendanceDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereCourseId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereFirstRoundApproveDate($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereIsFirstRoundApproved($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereIsSecondRoundApproved($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereMinDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate wherePracticalDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereSecondRoundApproveDate($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereSemesterId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereTestsDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereTheoryDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanDate whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class StudyPlanDate extends Model
{
    use HasFactory;
    use Compoships;

    protected $guarded = [];

    protected $casts = [
        'practical_degree' => 'float',
        'theory_degree' => 'float',
        'assignments_degree' => 'float',
        'attendance_degree' => 'float',
        'tests_degree' => 'float',
    ];

    public function studyPlan(): BelongsTo
    {
        return $this->belongsTo(StudyPlan::class);
    }

    public function semester(): BelongsTo
    {
        return $this->belongsTo(Semester::class);
    }

    public function department(): BelongsTo
    {
        return $this->belongsTo(Department::class);
    }

    public function course(): BelongsTo
    {
        return $this->belongsTo(Course::class);
    }

    public function studyPlanDateTeacher(): HasMany
    {
        return $this->hasMany(StudyPlanDateTeacher::class);
    }

    public function studyPlanDateTeachers(): HasMany
    {
        return $this->hasMany(StudyPlanDateTeacher::class);
    }

    public function teachers(): BelongsToMany
    {
        return $this->belongsToMany(Teacher::class, 'study_plan_date_teachers');
    }

    public function courseStudents()
    {
        return $this->hasMany(CourseStudent::class, ['course_id' , 'semester_id'], ['course_id' , 'semester_id'])
            ->whereHas('student', function ($q) {
                $q->join('study_plan_dates', 'students.department_id', '=', 'study_plan_dates.department_id')
                    ->whereColumn('students.department_id', 'study_plan_dates.department_id');
            });
    }

    public function scopeWhenDepartmentId($query, $id)
    {
        return $id ? $query->where('department_id', $id) : $query;
    }

    public function scopeWhenSemesterId($query, $id)
    {
        return $id ? $query->where('semester_id', $id) : $query;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudyPlanCourse.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\StudyPlanCourse
 *
 * @property-read \App\Models\Course $course
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\RegistrationCourse> $registrationCourses
 * @property-read int|null $registration_courses_count
 * @property-read \App\Models\StudyPlan|null $studyPlan
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanCourse newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanCourse newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlanCourse query()
 * @mixin \Eloquent
 */
class StudyPlanCourse extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function course() {
        return $this->belongsTo(Course::class);
    }

    public function registrationCourses() {
        return $this->hasMany(RegistrationCourse::class);
    }

    public function studyPlan() {
        return $this->belongsTo(StudyPlan::class);
    }

    // public function registration() {
    //     return $this->hasManyThrough(Registration::class,RegistrationCourse::class);
    // }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudyPlan.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Models\Course;
use App\Models\Semester;
use App\Models\Department;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * App\Models\StudyPlan
 *
 * @property int $id
 * @property int $department_id
 * @property int $semester_id
 * @property int $course_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read Course $course
 * @property-read Department $department
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\RegistrationCourse> $registrationCourses
 * @property-read int|null $registration_courses_count
 * @property-read Semester $semester
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StudyPlanCourse> $studyPlanCourses
 * @property-read int|null $study_plan_courses_count
 * @property-read \App\Models\StudyPlanDate|null $studyPlanDate
 * @method static \Database\Factories\StudyPlanFactory factory($count = null, $state = [])
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whenDepartmentId($id)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whenSemesterId($id)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whereCourseId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whereSemesterId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudyPlan whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class StudyPlan extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function department()
    {
        return $this->belongsTo(Department::class);
    }

    public function semester()
    {
        return $this->belongsTo(Semester::class);
    }

    public function studyPlanCourses()
    {
        return $this->hasMany(StudyPlanCourse::class);
    }

    public function registrationCourses()
    {
        return $this->hasManyThrough(RegistrationCourse::class, StudyPlanCourse::class);
    }

    public function course()
    {
        return $this->belongsTo(Course::class);
    }

    public function studyPlanDate()
    {
        return $this->hasOne(StudyPlanDate::class);
    }

    public function scopeWhenDepartmentId($query, $id)
    {
        return $id ? $query->where('department_id', $id) : $query;
    }

    public function scopeWhenSemesterId($query, $id)
    {
        return $id ? $query->where('semester_id', $id) : $query;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudyDate.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Casts\AsArrayObject;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class StudyDate extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $guarded = [];


    protected function registerFees(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => json_decode($value, true),
            set: fn ($value) => json_encode($value),
        );
    }

    public function isActive():Attribute {
        return Attribute::make(
            get: fn () => $this->archived == 1,
        );
    }

    public function highlightActive():Attribute {
        return Attribute::make(
            get: fn () => $this->archived == 1 ? "(" . __('admin.study_dates.active') . ")" : '',
        );
    }

    public function prices()
    {
        return $this->hasMany(DepartmentPrice::class);
    } //end of fun

    public function getPrice($id, $currency)
    {
        $data = DepartmentPrice::where([
            'department_id' => $id,
            'study_date_id' => $this->id,
        ])->first();

        if ($currency == 'sdg') {

            return $data->sdg ?? 0;
        } elseif ($currency == 'usd') {

            return $data->usd ?? 0;
        } //end of if

    } //end of fun

    public function setNameAttribute()
    {
        $first_date = new Carbon($this->start_reg);

        $second_date = new Carbon($this->end_reg);
        $this->attributes['name'] = "{$first_date->year} - {$second_date->year}";
    }


    public function scopeGetActiveStudyDate($q)
    {
        return $q->where('archived', 1)->first();
    }

    public function registrations() {
        return $this->hasMany(Registration::class);
    }
}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudentStudyYear.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\StudentStudyYear
 *
 * @property int $id
 * @property int $student_id
 * @property int $study_year_id
 * @property string $status
 * @property float $cgpa
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $degree_code
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereCgpa($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereDegreeCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereStudyYearId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentStudyYear whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class StudentStudyYear extends Model
{
    use HasFactory;

    protected $guarded = [];

    const STATUS_DISMISSED = 8;

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/StudentResult.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\StudentResult
 *
 * @property int $id
 * @property int $student_id
 * @property int $study_year_id
 * @property int $study_date_id
 * @property float $cgpa
 * @property string $status
 * @property string|null $description
 * @property int $is_first_exam
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $degree_code
 * @property int|null $department_id
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereCgpa($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereDegreeCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereIsFirstExam($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereStudyYearId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentResult whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class StudentResult extends Model
{
    use HasFactory;

    protected $guarded = [];

    const STATUS_SUCCEEDED = 'SUCCEEDED';
    const STATUS_FAILED = 'FAILED';
    const STATUS_SUP = 'SUP';
    const STATUS_SUB = 'SUB';
    const STATUS_SUP_AND_SUB = 'SUP_AND_SUB';
    const STATUS_RETURNED_WITH_SOME_COURSES = 'RETURNED_WITH_SOME_COURSES';
    const STATUS_RETURNED_WITH_ALL_COURSES = 'RETURNED_WITH_ALL_COURSES';
    const STATUS_DISMISSED = 'DISMISSED';
    const STATUS_WARNED = 'WARNED';
    const STATUS_FREEZEED = 'FREEZED';

    const STATUSES = [
        self::STATUS_SUCCEEDED => 'ناجح',
        self::STATUS_FAILED => 'راسب',
        self::STATUS_SUP => 'ملحق',
        self::STATUS_SUB => 'بديل',
        self::STATUS_SUP_AND_SUB => 'ملحق و بديل',
        self::STATUS_RETURNED_WITH_SOME_COURSES => 'باقي للاعادة بمواد',
        self::STATUS_RETURNED_WITH_ALL_COURSES => 'باقي للاعادة',
        self::STATUS_DISMISSED => 'فصل',
        self::STATUS_WARNED => 'انذار',
        self::STATUS_FREEZEED => 'تجميد',
    ];


    const MIN_RETURNED_CGPA = 1;
    const MAX_RETURNED_CGPA = 1.79;

    const FAILED_CGPA = 1.80;

    const MIN_WARNED_CGPA = 1.79;
    const MAX_WARNED_CGPA = 1.99;

    const MIN_SUCCESS_CGPA = 2;

    const DISMISS_CGPA = 0.99;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Student.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Http\Traits\Dashboard\Admin\Results\EnterFirstRoundResultTrait;
use App\Http\Traits\Dashboard\Admin\Results\EnterSecondRoundResultTrait;
use App\Http\Traits\Dashboard\Admin\Results\ShowStudentsResultTrait;
use App\Models\Elearning\QuestionAnswer;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Spatie\MediaLibrary\HasMedia;
use Illuminate\Database\Eloquent\Model;
use Spatie\MediaLibrary\InteractsWithMedia;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\DB;

/**
 * App\Models\Student
 *
 * @property int $id
 * @property int|null $university_id
 * @property string $image
 * @property string|null $name1
 * @property string|null $name2
 * @property string|null $name3
 * @property string|null $name4
 * @property int|null $batch_id
 * @property int|null $phone
 * @property string|null $address
 * @property string|null $father_name
 * @property int|null $father_phone1
 * @property int|null $father_phone2
 * @property string|null $workplace
 * @property int|null $department_id
 * @property int|null $study_date_id
 * @property int|null $study_year_id
 * @property int|null $admission_type_id
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $national_number
 * @property string|null $acceptance_year
 * @property string $name1_en
 * @property string $name2_en
 * @property string $name3_en
 * @property string $name4_en
 * @property string $certificate_date
 * @property string $certificate_type
 * @property string $religion
 * @property string|null $ver_code
 * @property int $is_verification
 * @property string|null $ver_date
 * @property string|null $gender
 * @property int|null $currency_id
 * @property int|null $nationality_id
 * @property-read \App\Models\PaymentOrder|null $PaymentArchived
 * @property-read \App\Models\StudyDate|null $acceptanceYear
 * @property-read \App\Models\AdmissionType|null $admissionType
 * @property-read \Illuminate\Database\Eloquent\Collection<int, QuestionAnswer> $answers
 * @property-read int|null $answers_count
 * @property-read \App\Models\Batch|null $batch
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\CourseStudent> $courses
 * @property-read int|null $courses_count
 * @property-read \App\Models\Currency|null $currency
 * @property-read \App\Models\CourseStudentDegree|null $degree
 * @property-read \App\Models\Department|null $department
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Discount> $discounts
 * @property-read int|null $discounts_count
 * @property-read \App\Models\Registration|null $filteredRegistration
 * @property-read string $formatted_gender
 * @property-read mixed $full_name
 * @property-read string $image_path
 * @property-read int $payment_fees
 * @property-read int $payment_fees_get
 * @property-read string $status
 * @property-read int $total
 * @property-read \Spatie\MediaLibrary\MediaCollections\Models\Collections\MediaCollection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
 * @property-read int|null $media_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Payment> $payments
 * @property-read int|null $payments_count
 * @property-read \App\Models\Registration|null $registration
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Registration> $registrations
 * @property-read int|null $registrations_count
 * @property-read \App\Models\StudyDate|null $studyDate
 * @property-read \App\Models\StudyYear|null $studyYear
 * @property-read \App\Models\User|null $user
 * @method static \Database\Factories\StudentFactory factory($count = null, $state = [])
 * @method static \Illuminate\Database\Eloquent\Builder|Student newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Student newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Student onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Student query()
 * @method static \Illuminate\Database\Eloquent\Builder|Student whenDepartmentId($departmentId)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whenSearch($search)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whenStudyDateId($studyDateId)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whenStudyYearId($studyYearId)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereAcceptanceYear($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereAddress($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereAdmissionTypeId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereBatchId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereCertificateDate($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereCertificateType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereCurrencyId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereFatherName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereFatherPhone1($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereFatherPhone2($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereGender($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereImage($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereIsVerification($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName1($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName1En($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName2($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName2En($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName3($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName3En($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName4($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereName4En($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereNationalNumber($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereNationalityId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student wherePhone($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereReligion($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereStudyYearId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereUniversityId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereVerCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereVerDate($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student whereWorkplace($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withCompleted()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withCourseStudent($course_id, $semester_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withCourseStudentDegree($study_date_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withFirstRoundStudents($semester_id, $study_date_id, $course_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withRegestrations($study_date_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withRegistered()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withResultCourseStudentDegree($study_date_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withResultRegestrations($study_date_id, $study_year_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withResults($study_date_id, $study_year_id, $is_first_exam)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withSecondRound($study_date_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withSecondRoundCourseStudent($course_id, $semester_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withSecondRoundCourseStudentDegree()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withSecondRoundDegree($study_date_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withSecondRoundRegestrations($study_date_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withSecondRoundStudents($semester_id, $study_date_id, $course_id)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withSecondRoundStudentsDetails()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withStudentResults($study_date_id, $is_first_exam)
 * @method static \Illuminate\Database\Eloquent\Builder|Student withStudentsDetails()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withStudentsResultDetails()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withUnRegistered()
 * @method static \Illuminate\Database\Eloquent\Builder|Student withoutTrashed()
 * @mixin \Eloquent
 */
class Student extends Model implements HasMedia
{
    use HasFactory;
    use SoftDeletes;
    use InteractsWithMedia;
    use EnterFirstRoundResultTrait;
    use EnterSecondRoundResultTrait;
    use ShowStudentsResultTrait;

    protected $appends = ['full_name'];

    protected $guarded = [];

    const STUDENT_PHOTO_MEDIA_COLLECTION = 'student_photo';

    const NATIONALITIES = [
        1 => 'سوداني',
        2 => 'اجنبي',
    ];

    const RELIGIONS = [
        1 => 'الاسلام',
        2 => ' المسيحية',
    ];

    const CERTIFICATE_TYPES = [
        1 => 'سودانية',
        2 => 'أجنبية',
    ];


    //attributes----------------------------------
    public function getImagePathAttribute(): string
    {
        return $this->getFirstMediaUrl(self::STUDENT_PHOTO_MEDIA_COLLECTION) ?: asset($this->image);
    } //end of get image path

    public function getFullNameAttribute()
    {
        return $this->name1_en . ' ' . $this->name2_en . ' ' . $this->name3_en . ' ' . $this->name4_en;
        return $this->name1 . ' ' . $this->name2 . ' ' . $this->name3 . ' ' . $this->name4;
    } //end of get full_name

    public function getStatusAttribute(): string
    {
        $studyDates = StudyDate::where('archived', 1)->first();

        $data = Registration::where([
            'student_id'    => $this->id,
            'study_date_id' => $studyDates->id,
        ])->latest()->first();

        if ($data) {

            return $data->status->name;
        } else {

            return '';
        } //end of if

    } //end of get status

    public function getTotalAttribute(): int
    {
        $studyDates = StudyDate::where('archived', 1)->first();

        $data = Registration::where([
            'student_id'    => $this->id,
            'study_date_id' => $studyDates->id,
        ])->latest()->first();

        $discount = Discount::where([
            // 'student_id'    => $this->id,
            // 'study_date_id' => $studyDates->id,
            'status' => 1
        ])->limit(1)->first();

        $d = 0;
        if (isset($discount->id))
            $d = $discount->amount;

        return isset($data) ? ($data->total - $d) . ' ' . __('admin.currency.' . $data->currency) : 0;
    } //end of get status

    // public function getgetPaymentFeesAttributeAttribute()
    // {
    //     $studyDates = StudyDate::where('archived', 1)->first();

    //     $registration = Registration::where([
    //         'student_id'    => $this->id,
    //         'study_date_id' => $studyDates->id,
    //     ])->whereIn('status_id', [1,2,7])->latest()->first();

    //     if (isset($registration->paymentOrders)) {

    //         $paymentOrder = PaymentOrder::where([
    //             'student_id'    => $this->id,
    //             'study_date_id' => $studyDates->id,
    //             'registration_id' => $registration->id,
    //         ])->whereIn('status_id', [1,2,7])->latest()->first();

    //         return isset($paymentOrder) ? $paymentOrder->amount . ' ' . __('admin.currency.' . $registration->currency) : 0;

    //     } else {

    //         return 0;

    //     }//end of if

    // }//end of get payment_fees

    public function getPaymentFeesGetAttribute(): int
    {
        return isset($this->registration->discountedTotal) ? $this->registration->discountedTotal : 0;

        $studyDates = StudyDate::where('archived', 1)->first();

        $registration = Registration::where([
            'student_id'    => $this->id,
            'study_date_id' => $studyDates->id,
        ])->latest()->first();

        if (isset($registration->paymentOrders)) {

            $paymentOrder = PaymentOrder::where([
                'student_id'      => $this->id,
                'study_date_id'   => $studyDates->id,
                'registration_id' => $registration->id,
            ])->whereIn('status', [
                PaymentOrderStatus::STATUS_REGISTRATION,
                PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS,
            ])->latest()->first();
            // ])->whereIn('status_id', [1,2,7])->latest()->first();

            return intVal($paymentOrder->total_amount) > 0 ? intVal($paymentOrder->total_amount) : intval($paymentOrder->amount);
        } else {

            return 0;
        } //end of if

    } //end of get payment_fees

    public function getPaymentFeesAttribute(): int
    {
        return isset($this->registration->discountedTotal) ? $this->registration->discountedTotal : 0;
        $studyDates = StudyDate::where('archived', 1)->first();

        $registration = Registration::where([
            'student_id'    => $this->id,
            'study_date_id' => $studyDates->id,
        ])->latest()->first();

        if (isset($registration->paymentOrders)) {

            $paymentOrder = PaymentOrder::where([
                'student_id'      => $this->id,
                'study_date_id'   => $studyDates->id,
                'registration_id' => $registration->id,
            ])->whereIn('status', [RegistrationStatus::STATUS_UNREGISTERED, RegistrationStatus::STATUS_REGISTERED])->latest()->first();
            // ])->whereIn('status_id', [1,2,7])->latest()->first();

            return intVal($paymentOrder->total_amount) > 0 ? intVal($paymentOrder->total_amount) : intval($paymentOrder->amount);
        } else {

            return 0;
        } //end of if

    } //end of get payment_fees


    //relationShep----------------------------------

    public function registrations(): HasMany
    {
        return $this->hasMany(Registration::class);
    } //end of Registration

    public function filteredRegistration(): HasOne
    {
        return $this->hasOne(Registration::class);
    }

    public function registration()
    {
        $studyDates = StudyDate::where('archived', 1)->first();
        return $this->hasOne(Registration::class)->where('study_date_id', $studyDates->id)->latest();
    } //end of Registration

    public function user(): HasOne
    {
        return $this->hasOne(User::class);
    }
    public function department(): BelongsTo
    {
        return $this->belongsTo(Department::class);
    } //end of belongsTo department

    public function studyYear(): BelongsTo
    {
        return $this->belongsTo(StudyYear::class);
    } //end of belongsTo studyYear

    public function admissionType(): BelongsTo
    {
        return $this->belongsTo(AdmissionType::class);
    } //end of belongsTo studyYear

    public function studyDate(): BelongsTo
    {
        return $this->belongsTo(StudyDate::class);
    } //end of belongsTo studyDate

    public function payments(): HasMany
    {
        return $this->hasMany(Payment::class);
    } //end of hasMany payments

    public function discounts(): HasManyThrough
    {
        return $this->hasManyThrough(Discount::class, Registration::class);
    } //end of hasMany payments

    public function acceptanceYear(): BelongsTo
    {
        return $this->belongsTo(StudyDate::class);
    }

    public function currency(): BelongsTo
    {
        return $this->belongsTo(Currency::class);
    }

    public function batch(): BelongsTo
    {
        return $this->belongsTo(Batch::class);
    }

    public function courses(): HasMany
    {
        return $this->hasMany(CourseStudent::class);
    }

    public function degree(): HasOne
    {
        return $this->hasOne(CourseStudentDegree::class);
    }

    public function answers(): HasMany
    {
        return $this->hasMany(QuestionAnswer::class);
    }

    public function tests(): HasMany
    {
        return $this->hasMany(StudentTest::class);
    }

    public function PaymentArchived()
    {
        $StudyDate = StudyDate::where('archived', 1)->first();

        return $this->hasOne(PaymentOrder::class)->where('study_date_id', $StudyDate->id);
    } //end of belongsTo studyDate

    //scope----------------------------------
    public function scopeWhenSearch($query, $search)
    {
        return $query->when($search, function ($q) use ($search) {

            return $q->where('id', 'like', "%$search%")
                ->orWhere(DB::raw("CONCAT(`name1` , ' ' , `name2` , ' ' , `name3`  , ' ' , `name4`  )"), 'like', "%$search%")
            ->orWhere(DB::raw("CONCAT(`name1_en` , ' ' , `name2_en` , ' ' , `name3_en`  , ' ' , `name4_en`  )"), 'like', "%$search%")
                ->orWhere('name1', 'like', "%$search%")
                ->orWhere('name2', 'like', "%$search%")
                ->orWhere('name3', 'like', "%$search%")
                ->orWhere('name2', 'like', "%$search%")
                ->orWhere('name1_en', 'like', "%$search%")
                ->orWhere('name2_en', 'like', "%$search%")
                ->orWhere('name3_en', 'like', "%$search%")
                ->orWhere('name4_en', 'like', "%$search%")
                ->orWhere('university_id', 'like', "%$search%")
                ->orWhere('phone', 'like', "%$search%")
                ->orWhere('father_phone1', 'like', "%$search%");
        });
    } //end of scope WhenSearch`

    public function scopeWhenStudyDateId($query, $studyDateId)
    {
        return $studyDateId ? $query->where('study_date_id', $studyDateId) : $query;
    } // end of scope When Study Date Id

    public function scopeWhenStudyYearId($query, $studyYearId)
    {
        return $studyYearId ? $query->where('study_year_id', $studyYearId) : $query;
    } // end of scope When Study Year Id

    public function scopeWhenDepartmentId($query, $departmentId)
    {
        return $departmentId ? $query->where('department_id', $departmentId) : $query;
    }

    public function scopeWithRegistered($query)
    {
        return $query->whereHas('registration', function ($q) {
            return $q->whereIn('status', [RegistrationStatus::STATUS_REGISTERED]);
            // return $q->whereIn('status_id',[Regi,7]);
        });
    }

    public function scopeWithUnRegistered($query)
    {
        return $query->whereHas('registration', function ($q) {
            return $q->where('status', RegistrationStatus::STATUS_UNREGISTERED);
        });
    }


    public function scopeWithCompleted($q)
    {
        // dd();
        $studyDates = StudyDate::where('archived', 1)->first();

        $registration = Registration::where([
            'student_id'    => $this->id,
            // 'study_date_id' => $studyDates->id,
        ])->latest()->first();
        return $registration->reminder < 1;
        // return $query->where('completed',2);
    }


    public function registerMediaCollections(): void
    {
        $this->addMediaCollection('student');
    }

    // public function scopeWithActiveStudyDate($query) {
    //     return $query->where('study_date_id',StudyDate::where('archived',1)->first()->id);
    // }

    public function getFormattedGenderAttribute(): string
    {
        return $this->gender == 'male' ? 'ذكر' : 'أنثى';
    }
}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Status.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Status
 *
 * @property int $id
 * @property string $name
 * @property int $pay
 * @property string|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|Status newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Status newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Status query()
 * @method static \Illuminate\Database\Eloquent\Builder|Status whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Status whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Status whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Status whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Status wherePay($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Status whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Status extends Model
{
    use HasFactory;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Settings.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Settings
 *
 * @property int $id
 * @property string $key
 * @property string|null $value
 * @property string|null $category
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|Settings newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Settings newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Settings query()
 * @method static \Illuminate\Database\Eloquent\Builder|Settings whereCategory($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Settings whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Settings whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Settings whereKey($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Settings whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Settings whereValue($value)
 * @mixin \Eloquent
 */
class Settings extends Model
{
    use HasFactory;

    protected $table = 'settings';

    protected $guarded = ['id'];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Semester.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Semester
 *
 * @property int $id
 * @property string $name
 * @property int $study_year_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\Models\StudyYear $studyYear
 * @method static \Database\Factories\SemesterFactory factory($count = null, $state = [])
 * @method static \Illuminate\Database\Eloquent\Builder|Semester newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Semester newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Semester query()
 * @method static \Illuminate\Database\Eloquent\Builder|Semester whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Semester whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Semester whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Semester whereStudyYearId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Semester whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Semester extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function studyYear() {
        return $this->belongsTo(StudyYear::class);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/SecondRound.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\SecondRound
 *
 * @property int $id
 * @property int $student_id
 * @property int $course_id
 * @property int $study_date_id
 * @property string $status
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound query()
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound whereCourseId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|SecondRound whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class SecondRound extends Model
{
    use HasFactory;

    protected $guarded = [];

    const STATUS_SUB = 1;
    const STATUS_SUP = 2;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Rol.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Spatie\Permission\Models\Permission;

/**
 * App\Models\Rol
 *
 * @property int $id
 * @property string $name
 * @property string $guard_name
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Permission> $permissions
 * @property-read int|null $permissions_count
 * @method static \Illuminate\Database\Eloquent\Builder|Rol newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Rol newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Rol query()
 * @method static \Illuminate\Database\Eloquent\Builder|Rol whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Rol whereGuardName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Rol whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Rol whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Rol whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Rol extends Model
{
    use HasFactory;

    protected $table = 'roles';

    protected $guarded = [];

    public function permissions()
    {
        return $this->belongsToMany(Permission::class, 'role_has_permissions', 'role_id');

    }//end of belongsToMany permissions

}//end of model

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/ResultCourse.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\ResultCourse
 *
 * @method static \Illuminate\Database\Eloquent\Builder|ResultCourse newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|ResultCourse newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|ResultCourse query()
 * @mixin \Eloquent
 */
class ResultCourse extends Model
{
    use HasFactory;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Result.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Result
 *
 * @property int $id
 * @property int $department_id
 * @property int $batch_id
 * @property int $semester_id
 * @property int $study_date_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|Result newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Result newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Result query()
 * @method static \Illuminate\Database\Eloquent\Builder|Result whereBatchId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Result whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Result whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Result whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Result whereSemesterId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Result whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Result whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Result extends Model
{
    use HasFactory;

    protected $guarded = [];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/RegistrationResult.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\RegistrationResult
 *
 * @property int $id
 * @property int $registration_id
 * @property int $is_first_exam
 * @property string|null $status
 * @property string|null $first_semester_sgpa
 * @property string|null $second_semester_sgpa
 * @property string|null $cgpa
 * @property string|null $description
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult query()
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereCgpa($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereFirstSemesterSgpa($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereIsFirstExam($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereRegistrationId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereSecondSemesterSgpa($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationResult whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class RegistrationResult extends Model
{
    use HasFactory;

    protected $guarded = [];

    const STATUSES = [
        1 => 'ناجح',
        2 => 'راسب',
        3 => 'باقي للاعادة بمواد',
        4 => 'باقي للاعادة',
        5 => 'فصل',
        6 => 'انذار',
    ];

    const STATUS_SUCCEEDED = 1;
    const STATUS_FAILED = 2;

    const MIN_CGPA = 2;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/RegistrationCourseDegree.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\RegistrationCourseDegree
 *
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationCourseDegree newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationCourseDegree newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationCourseDegree query()
 * @mixin \Eloquent
 */
class RegistrationCourseDegree extends Model
{
    use HasFactory;

    protected $guarded = [];

    protected $casts = [
        'practical_degree' => 'integer',
        'theory_degree' => 'integer',
    ];

    const STATUSES = [
        1 => 'حضور',
        2 => 'غياب بعذر',
        3 => 'غياب بدون عذر',
        4 => 'غش',
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/RegistrationCourse.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\RegistrationCourse
 *
 * @property-read \App\Models\Course $course
 * @property-read \App\Models\Registration $registration
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationCourse newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationCourse newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|RegistrationCourse query()
 * @mixin \Eloquent
 */
class RegistrationCourse extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function registration() {
        return $this->belongsTo(Registration::class);
    }

    // public function studyPlanCourse() {
    //     return $this->belongsTo(StudyPlanCourse::class);
    // }

    public function course() {
        return $this->belongsTo(Course::class);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Registration.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Helpers\helpers;
use App\Http\Resources\StudentCourses;
use App\Http\Traits\Dashboard\Admin\PaymentOrders\HasDismissalPaymentOrders;
use App\Http\Traits\Dashboard\Admin\PaymentOrders\HasPaymentDeals;
use App\Http\Traits\Dashboard\Admin\PaymentOrders\HasRegistrationPaymentOrders;
use App\Http\Traits\Dashboard\Admin\PaymentOrders\HasSuspensionPaymentOrders;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Registration extends Model
{
    use HasFactory;
    use SoftDeletes;
    use HasRegistrationPaymentOrders;
    use HasSuspensionPaymentOrders;
    use HasDismissalPaymentOrders;

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'status' => RegistrationStatus::class,
    ];


    const LAST_STATUS_RETURNED_WITH_SOME_COURSES = StudentResult::STATUS_RETURNED_WITH_SOME_COURSES;
    const LAST_STATUS_RETURNED_WITH_ALL_COURSES = StudentResult::STATUS_RETURNED_WITH_ALL_COURSES;


    protected $guarded = [];

    //attributes----------------------------------
    public function getJustTotalAttribute()
    {
        return $this->tuition_fees + $this->register_fees;
    }


    public function getDiscountedTotalAttribute()
    {
        return $this->justTotal - $this->totalDiscount->sum('amount');
    }

    public function getTotalAttribute()
    {
        return $this->tuition_fees + $this->register_fees;
    } //end of get image path

    public function getPaymentAttribute()
    {
        return $this->payments->sum('amount') ?? 0;
    }

    public function getReminderAttribute()
    {
        $reminder = $this->discountedTotal - $this->payment;
        return  $reminder > 0 ? $reminder : 0;
    }

    public function getFormattedStatusAttribute()
    {
        return __('admin.registrations.' . strtolower($this->status?->value));
    }

    public function canCreateDiscount(): Attribute
    {
        return Attribute::make(
            get: fn () => in_array($this->status, [
                RegistrationStatus::STATUS_REGISTERED,
                RegistrationStatus::STATUS_UNREGISTERED
            ]),
        );
    }

    public function scopewithActiveStudyDate($q)
    {
        $studyDate = StudyDate::where('archived', 1)->first();

        return $q->where('study_date_id', $studyDate->id);
    }

    //relation
    public function department()
    {
        return $this->belongsTo(Department::class);
    } //end of belongsTo department

    public function studyYear()
    {
        return $this->belongsTo(StudyYear::class);
    } //end of belongsTo studyYear

    public function studyDate()
    {
        return $this->belongsTo(StudyDate::class);
    } //end of belongsTo studyDate

    public function student()
    {
        return $this->belongsTo(Student::class);
    } //end of belongsTo student

    public function courses()
    {
        // with study_year_id and student id
        return $this->hasMany(CourseStudent::class, 'student_id')
            ->where('study_year_id', $this->study_year_id);
    }

    public function degree()
    {
        return $this->hasOne(CourseStudentDegree::class);
    }

    // public function getStatusAttribute() {
    //     return $this->status_id;
    // }

    // public function status()
    // {
    //     return $this->belongsTo(Status::class);
    // } //end of belongsTo status

    public function paymentOrders()
    {
        return $this->hasMany(PaymentOrder::class);
    } //end of hasMany paymentOrders

    public function discounts()
    {
        return $this->hasMany(Discount::class);
    } //end of hasMany paymentOrders

    public function totalDiscount()
    {
        return $this->hasMany(Discount::class)->where('status', 1);
    }

    public function getDiscountsSumAttribute()
    {
        return $this->discounts->where('status', 1)->sum('amount');
    }

    public function paymentOrderFirst()
    {
        return $this->hasOne(PaymentOrder::class)->latest();
    } //end of hasMany paymentOrders

    public function payments()
    {
        return $this->hasManyThrough(Payment::class, PaymentOrder::class);
        // ->where(['archive' => 1, 'payment_orders.status' => PaymentOrderStatus::STATUS_REGISTRATION]);
    }

    public function registrationCourses()
    {
        return $this->hasMany(RegistrationCourse::class);
    }

    //scope----------------------------------
    public function scopeWhenSearch($query, $search)
    {
        return $query->when($search, function ($q) use ($search) {

            return $q->where('id', 'like', "%$search%")
                ->orWhere('full_name', 'like', "%$search%");
        });
    } //end of scope WhenSearch`

    public function scopeWhenRegisterArchived($query)
    {
        $StudyDate = StudyDate::where('archived', 1)->first();

        return $query->where('study_date_id', $StudyDate->id);
    } //end of scope WhenSearch`

}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Program.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Program
 *
 * @property-read Program|null $parent
 * @property-read \App\Models\StudyYear|null $start_year
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $students
 * @property-read int|null $students_count
 * @method static \Illuminate\Database\Eloquent\Builder|Program newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Program newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Program query()
 * @mixin \Eloquent
 */
class Program extends Model
{
    protected $table = 'programs';
    protected $fillable = ['nameAR','nameEN','code','start_year_id','parent_id','is_parent', 'sems', 'status','stop_semster'];
    protected $casts = [
        'status' => 'boolean'
    ];

    public function start_year()
    {
        return $this->belongsTo(StudyYear::class,'start_year_id');
    }
    public function parent()
    {
        return $this->belongsTo(Program::class,'parent_id');
    }

    public function students()
    {
        return $this->hasMany(Student::class,'program_id');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/PaymentType.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\PaymentType
 *
 * @property int $id
 * @property string $type
 * @property string|null $name
 * @property int|null $number
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType query()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType whereNumber($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentType whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class PaymentType extends Model
{
    use HasFactory;
    
    protected $guarded = [];

}//end of model
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/PaymentStatus.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\PaymentStatus
 *
 * @property int $id
 * @property string $name
 * @property int $pay
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus query()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus wherePay($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentStatus withoutTrashed()
 * @mixin \Eloquent
 */
class PaymentStatus extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $guarded = [];

}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/PaymentOrder.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Enums\PaymentOrderStatus;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

/**
 * App\Models\PaymentOrder
 *
 * @property int $id
 * @property int $student_id
 * @property int $study_date_id
 * @property int $registration_id
 * @property float $amount
 * @property float $total_amount
 * @property int $archive
 * @property string|null $description
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property PaymentOrderStatus|null $status
 * @property int|null $currency_id
 * @property-read \App\Models\Currency|null $currency
 * @property-read mixed $formatted_status
 * @property-read \Spatie\MediaLibrary\MediaCollections\Models\Collections\MediaCollection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
 * @property-read int|null $media_count
 * @property-read \App\Models\Payment|null $payment
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Payment> $payments
 * @property-read int|null $payments_count
 * @property-read \App\Models\Registration $registration
 * @property-read \App\Models\Student $student
 * @property-read \App\Models\StudyDate $studyDate
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder query()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whenArchiveOn()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whenSearch($search)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereAmount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereArchive($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereCurrencyId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereRegistrationId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereTotalAmount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder withCurrentStudyDate()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentOrder withoutTrashed()
 * @mixin \Eloquent
 */
class PaymentOrder extends Model implements HasMedia
{
    use HasFactory;
    use SoftDeletes;
    use InteractsWithMedia;

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'status' => PaymentOrderStatus::class,
    ];

    protected $guarded = [];

    public function currency()
    {
        return $this->belongsTo(Currency::class);

    }//end of belongsTo studyDate

    public function studyDate()
    {
        return $this->belongsTo(StudyDate::class);

    }//end of belongsTo studyDate

    public function student()
    {
        return $this->belongsTo(Student::class);

    }//end of belongsTo student

    public function payments()
    {
        return $this->hasMany(Payment::class);

    }//end of hasMany payments

    public function payment()
    {
        return $this->hasOne(Payment::class);

    }//end of hasMany payments

    public function registration()
    {
        return $this->belongsTo(Registration::class);

    }//end of belongsTo register

    public function getFormattedStatusAttribute() {
        return __('admin.payment_orders.' . $this->status?->value);
    }

    //scope----------------------------------
    public function scopeWhenSearch($query, $search)
    {
        return $query->when($search, function ($q) use ($search) {

            return $q->where('id', 'like', "%$search%")
                   ->orWhere('amount', 'like', "%$search%")
                   ->orWhere('currency', 'like', "%$search%");
        });

    }//end of scope WhenSearch`
    public function scopeWhenArchiveOn($query)
    {
        return $query->where('archive', 0);

    }//end of scope WhenStatusOn`

    public function scopeWithCurrentStudyDate($query) {
        $studyDate = StudyDate::where('archived',1)->latest()->first();

        return $query->where('study_date_id',$studyDate->id);
    }

    public function getStatusIcon() {
        return $this->archive;

    }

}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/PaymentInvoice.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\PaymentInvoice
 *
 * @property int $id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentInvoice newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentInvoice newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentInvoice query()
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentInvoice whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentInvoice whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|PaymentInvoice whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class PaymentInvoice extends Model
{
    use HasFactory;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Payment.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\Payment
 *
 * @property int $id
 * @property int $payment_order_id
 * @property int $payment_type_id
 * @property int $student_id
 * @property int $status
 * @property int $amount
 * @property int $rate
 * @property string|null $description
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $currency_id
 * @property-read \App\Models\Currency|null $currency
 * @property-read \App\Models\Department $department
 * @property-read mixed $operation_number
 * @property-read mixed $set_amount
 * @property-read \App\Models\PaymentOrder $paymentOrder
 * @property-read \App\Models\PaymentType $paymentType
 * @property-read \App\Models\Student $student
 * @property-read \App\Models\StudyDate $studyDate
 * @property-read \App\Models\StudyYear $studyYear
 * @method static \Illuminate\Database\Eloquent\Builder|Payment newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Payment newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Payment onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Payment query()
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whenSearch($search)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereAmount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereCurrencyId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment wherePaymentOrderId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment wherePaymentTypeId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereRate($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Payment withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Payment withoutTrashed()
 * @mixin \Eloquent
 */
class Payment extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $guarded = [];

    protected $appends = ['set_amount', 'operation_number'];

    //pay_status----------------------------------
    public function getSetAmountAttribute()
    {
        $totalAmount = $this->amount * $this->rate;

        return number_format($totalAmount, 2);

    }//end of get set amount

    public function getOperationNumberAttribute()
    {
        return  $this->id;

    }//end of get set amount

    //relation
    public function department()
    {
        return $this->belongsTo(Department::class);

    }//end of belongsTo department

    public function currency()
    {
        return $this->belongsTo(Currency::class);

    }//end of belongsTo department

    public function studyYear()
    {
        return $this->belongsTo(StudyYear::class);

    }//end of belongsTo studyYear

    public function studyDate()
    {
        return $this->belongsTo(StudyDate::class);

    }//end of belongsTo studyDate

    public function paymentOrder()
    {
        return $this->belongsTo(PaymentOrder::class);

    }//end of belongsTo PaymentOrder

    public function paymentType()
    {
        return $this->belongsTo(PaymentType::class);

    }//end of belongsTo paymentType

    public function student()
    {
        return $this->belongsTo(Student::class);

    }//end of belongsTo student

    //scope----------------------------------
    public function scopeWhenSearch($query, $search)
    {
        return $query->when($search, function ($q) use ($search) {

            return $q
                ->where('id' , 'like', "%$search%")
                     ->orWhere('status', 'like', "%$search%")
                 ;
        });

    }//end of scope WhenSearch`

}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Nationality.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Nationality
 *
 * @property int $id
 * @property string $name
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|Nationality newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Nationality newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Nationality query()
 * @method static \Illuminate\Database\Eloquent\Builder|Nationality whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Nationality whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Nationality whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Nationality whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Nationality extends Model
{
    use HasFactory;

    protected $guarded = [];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/LevelDegree.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\LevelDegree
 *
 * @property int $id
 * @property string $min_degree
 * @property string $max_degree
 * @property string $level
 * @property string|null $level_code
 * @property string $point
 * @property string|null $min_point
 * @property string|null $max_point
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree query()
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereLevel($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereLevelCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereMaxDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereMaxPoint($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereMinDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereMinPoint($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree wherePoint($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LevelDegree whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class LevelDegree extends Model
{
    use HasFactory;
    protected $table = 'levels_degree';

    protected $guarded = [];

    const STATUS_ATTENDED = 'ATTENDED';
    const STATUS_EXUSED_ABSENCE = 'EXCUSED_ABSENCE';
    const STATUS_ABSENCE = 'ABSENCE';
    const STATUS_CHEATED = 'CHEATED';

    const STATUSES = [
        self::STATUS_ATTENDED => self::STATUS_ATTENDED,
        self::STATUS_EXUSED_ABSENCE => self::STATUS_EXUSED_ABSENCE,
        self::STATUS_ABSENCE => self::STATUS_ABSENCE,
        self::STATUS_CHEATED => self::STATUS_CHEATED,
    ];


}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Discount.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Spatie\MediaLibrary\HasMedia;
use Illuminate\Database\Eloquent\Model;
use Spatie\MediaLibrary\InteractsWithMedia;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * App\Models\Discount
 *
 * @property int $id
 * @property int $department_id
 * @property int $type_discount_id
 * @property int $amount
 * @property string|null $image
 * @property string|null $description
 * @property int $status
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $registration_id
 * @property int|null $currency_id
 * @property-read \App\Models\Currency|null $currency
 * @property-read \App\Models\Department $department
 * @property-read \Spatie\MediaLibrary\MediaCollections\Models\Collections\MediaCollection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
 * @property-read int|null $media_count
 * @property-read \App\Models\Registration|null $registration
 * @property-read \App\Models\StudyDate $studyDate
 * @property-read \App\Models\TypeDiscount $typeDiscount
 * @method static \Illuminate\Database\Eloquent\Builder|Discount newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Discount newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Discount onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Discount query()
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereAmount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereCurrencyId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereImage($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereRegistrationId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereTypeDiscountId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Discount withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Discount withoutTrashed()
 * @mixin \Eloquent
 */
class Discount extends Model implements HasMedia
{
    use HasFactory;
    use SoftDeletes;
    use InteractsWithMedia;

    protected $guarded = [];

    public function department()
    {
        return $this->belongsTo(Department::class);

    }//end of belongsTo department

    public function registration()
    {
        return $this->belongsTo(Registration::class);

    }//end of belongsTo Student

    public function studyDate()
    {
        return $this->belongsTo(StudyDate::class);

    }//end of belongsTo StudyDate

    public function typeDiscount()
    {
        return $this->belongsTo(TypeDiscount::class);

    }//end of belongsTo typeDiscount

    public function currency()
    {
        return $this->belongsTo(Currency::class);

    }//end of belongsTo typeDiscount


}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/DepartmentStudyYear.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\DepartmentStudyYear
 *
 * @property-read \App\Models\Department|null $departments
 * @property-read \App\Models\StudyYear $studyYear
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentStudyYear newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentStudyYear newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentStudyYear query()
 * @mixin \Eloquent
 */
class DepartmentStudyYear extends Model
{
    use HasFactory;

    protected $guarded = [];

    public function departments() {
        return $this->belongsTo(Department::class);
    }

    public function studyYear() {
        return $this->belongsTo(StudyYear::class);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/DepartmentPrice.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\DepartmentPrice
 *
 * @property int $id
 * @property int $study_date_id
 * @property int $department_id
 * @property float $sdg
 * @property float $usd
 * @property int $batch
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property mixed|null $tuition_fees
 * @property-read \App\Models\StudyDate $studyDate
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice query()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereBatch($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereSdg($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereTuitionFees($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice whereUsd($value)
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice withActiveStudyDate()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|DepartmentPrice withoutTrashed()
 * @mixin \Eloquent
 */
class DepartmentPrice extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $guarded = [];

    protected function tuitionFees(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => json_decode($value, true),
            set: fn ($value) => json_encode($value),
        );
    }

    public function scopewithActiveStudyDate($q) {
        $studyDates = StudyDate::where('archived', 1)->first();
        $q->where('study_date_id',$studyDates->id);
    }

    public function studyDate() {
        return $this->belongsTo(StudyDate::class);
    }

}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Department.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Enums\RegistrationStatus;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\Department
 *
 * @property int $id
 * @property string $name
 * @property int $batch_number
 * @property int $college_id
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\Models\DepartmentPrice|null $activePrice
 * @property-read mixed $batch
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $registerdRegistrations
 * @property-read int|null $registerd_registrations_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Registration> $registration
 * @property-read int|null $registration_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $students
 * @property-read int|null $students_count
 * @property-read \App\Models\DepartmentPrice|null $studyDatePrices
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StudyYear> $studyYears
 * @property-read int|null $study_years_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StudyYear> $studyYearsFor
 * @property-read int|null $study_years_for_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Discount> $totalDiscount
 * @property-read int|null $total_discount_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $totalRegistrations
 * @property-read int|null $total_registrations_count
 * @method static \Illuminate\Database\Eloquent\Builder|Department newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Department newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Department onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Department query()
 * @method static \Illuminate\Database\Eloquent\Builder|Department whereBatchNumber($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Department whereCollegeId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Department whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Department whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Department whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Department whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Department whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Department withDiscounts()
 * @method static \Illuminate\Database\Eloquent\Builder|Department withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Department withoutTrashed()
 * @mixin \Eloquent
 */
class Department extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $guarded = [];


     //attributes----------------------------------
    public function getBatchAttribute()
    {
        $data = DepartmentPrice::where('department_id', $this->id)->latest()->first();
        if ($data) {
            return $data->batch;
        } else {
            return 1;
        }

    }//end of get image path

    public function studyDatePrices() {
        return $this->hasOne(DepartmentPrice::class);
    }

    public function activePrice() {
        $studyDate = StudyDate::where('archived', 1)->first();
        return $this->hasOne(DepartmentPrice::class)->where('study_date_id',$studyDate->id);
    }

    public function studyYears()
    {
        return $this->belongsToMany(StudyYear::class);

    }//end of belongsTo studyYear

    public function studyYearsFor()
    {
        return $this->belongsToMany(StudyYear::class);

    }

    public function registerdRegistrations()
    {
        return $this->hasMany(Student::class)->whereHas('registration', fn ($q) => $q->where('status', RegistrationStatus::STATUS_REGISTERED));
        // return $this->hasMany(Student::class)->whereHas('registration', fn ($q) => $q->where('status_id', 2));

    }//end of belongsTo studyYear

    public function totalRegistrations()
    {
        return $this->hasMany(Student::class)->has('registration')->has('department');

    }

    public function students()
    {
        return $this->hasMany(Student::class);

    }//end of belongsTo studyYear

    public function registration() {
        return $this->hasManyThrough(Registration::class,Student::class);
    }

    public function totalDiscount() {
        return $this->hasManyThrough(Discount::class,Registration::class);
    }

    public function scopeWithDiscounts($q) {
        return $q->with('registration');
    }

}//end of models

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Currency.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Currency
 *
 * @property int $id
 * @property string $name
 * @property string $code
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|Currency newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Currency newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Currency query()
 * @method static \Illuminate\Database\Eloquent\Builder|Currency whereCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Currency whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Currency whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Currency whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Currency whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Currency extends Model
{
    use HasFactory;

    protected $fillable = ['name' , 'code'];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/CourseStudentDegree.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\CourseStudentDegree
 *
 * @property int $id
 * @property int $student_id
 * @property int $course_id
 * @property int $study_date_id
 * @property int|null $theory_degree
 * @property int|null $practical_degree
 * @property string $point
 * @property string|null $degree_code
 * @property int $is_first_exam
 * @property string|null $attendance_status
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $is_pass
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree query()
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereAttendanceStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereCourseId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereDegreeCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereIsFirstExam($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereIsPass($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree wherePoint($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree wherePracticalDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereStudyDateId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereTheoryDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudentDegree whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class CourseStudentDegree extends Model
{
    use HasFactory;

    protected $guarded = [];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'theory_degree' => 'integer',
        'practical_degree' => 'integer',
        'point' => 'decimal:2',
    ];


    const STATUS_ATTENDED = LevelDegree::STATUS_ATTENDED;
    const STATUS_EXCUSED_ABSENCE = LevelDegree::STATUS_EXUSED_ABSENCE;
    const STATUS_ABSENCE = LevelDegree::STATUS_ABSENCE;
    const STATUS_CHEATED = LevelDegree::STATUS_CHEATED;
    const STATUS_FREEZEED = 'FREEZED';



    // const STATUS_ATTENDED = 'ATTENDED';
    // const STATUS_EXCUSED_ABSENCE = 'EXCUSED_ABSENCE';
    // const STATUS_ABSENCE = 'ABSENCE';
    // const STATUS_CHEATED = 'CHEATED';
    // const STATUS_FREEZEED = 'FREEZED';

    const STATUSES = [
        1 => 'حضور',
        2 => 'غياب بعذر',
        3 => 'غياب بدون عذر',
        4 => 'غش',
        5 => 'تجميد',
    ];

    const DEGREE_TYPE_ALPHABETICAL = 'alphabetical';
    const DEGREE_TYPE_NUMERICAL = 'numerical';

    const ABS = 'ABS';
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/CourseStudent.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Http\Traits\Dashboard\Admin\Results\FirstRoundResultTrait;
use App\Models\Scopes\FirstRoundResultScope;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Awobaz\Compoships\Compoships;


/**
 * App\Models\CourseStudent
 *
 * @property int $id
 * @property int $student_id
 * @property int $study_year_id
 * @property int $semester_id
 * @property int $course_id
 * @property int|null $course_student_degree_id
 * @property int $hours
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\Models\CarryOutCourse|null $carryOutCourse
 * @property-read \App\Models\Course $course
 * @property-read \App\Models\Student $student
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent query()
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereCourseId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereCourseStudentDegreeId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereHours($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereSemesterId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereStudyYearId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CourseStudent whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class CourseStudent extends Model
{
    use HasFactory;
    use Compoships;

    const STATUS_PASS = 1;
    const STATUS_FAILED = 2;
    const STATUS_SUB = 3;
    protected $guarded = [];


    public function student()
    {
        return $this->belongsTo(Student::class);
    }

    public function course()
    {
        return $this->belongsTo(Course::class);
    }


    public function carryOutCourse()
    {
        return $this->hasOne(CarryOutCourse::class, 'course_id', 'course_id');
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Course.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use App\Models\Elearning\Assignment;
use App\Models\Elearning\Lecture;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;

/**
 * App\Models\Course
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $name_en
 * @property int|null $department_id
 * @property string $hours
 * @property string|null $religion
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string $code
 * @property int $has_practical
 * @property string $min_degree
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Assignment> $assignments
 * @property-read int|null $assignments_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\CourseStudent> $courseStudents
 * @property-read int|null $course_students_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Lecture> $lectures
 * @property-read int|null $lectures_count
 * @property-read \App\Models\StudyPlan|null $studyPlan
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StudyPlanDate> $studyPlanDate
 * @property-read int|null $study_plan_date_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StudyPlanDate> $studyPlanDates
 * @property-read int|null $study_plan_dates_count
 * @method static \Database\Factories\CourseFactory factory($count = null, $state = [])
 * @method static \Illuminate\Database\Eloquent\Builder|Course newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Course newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Course query()
 * @method static \Illuminate\Database\Eloquent\Builder|Course whenDepartmentId($id)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereDepartmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereHasPractical($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereHours($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereMinDegree($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereNameEn($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereReligion($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Course whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Course extends Model
{
    use HasFactory;

    protected $guarded = [];
    const RELIGIONS = [
        1 => 'الاسلام',
        2 => ' غير ذلك',
    ];

    public function scopeWhenDepartmentId($query,$id) {
        return $id ? $query->where('department_id', $id) : $query;
    }

    public function studyPlan() {
        return $this->hasOne(StudyPlan::class);
    }

    public function studyPlanDate() {
        return $this->hasMany(StudyPlanDate::class);
    }

    public function studyPlanDates() {
        return $this->hasMany(StudyPlanDate::class);
    }

    public function courseStudents() {
        return $this->hasMany(CourseStudent::class);
    }
    
    public function lectures() {
        return $this->hasMany(Lecture::class);
    }

    public function assignments() { 
        return $this->hasManyThrough(Assignment::class,Lecture::class);
    }

    public function lecturesAttendances(): HasManyThrough
    {
        return $this->hasManyThrough(LectureAttendance::class,Lecture::class);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Country.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Country
 *
 * @property-read \App\Models\Currency|null $currency
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Student> $students
 * @property-read int|null $students_count
 * @method static \Illuminate\Database\Eloquent\Builder|Country newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Country newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Country query()
 * @mixin \Eloquent
 */
class Country extends Model
{
    protected $table = 'countries';
    protected $fillable = ['nameAR','nameEN','code','currency_id'];
    public $timestamps = false;

    public function currency()
    {
        return $this->belongsTo(Currency::class,'currency_id');
    }

    public function students()
    {
        return $this->hasMany(Student::class,'country_id');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/College.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\College
 *
 * @property int $id
 * @property string|null $name
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|College newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|College newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|College onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|College query()
 * @method static \Illuminate\Database\Eloquent\Builder|College whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|College whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|College whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|College whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|College whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|College withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|College withoutTrashed()
 * @mixin \Eloquent
 */
class College extends Model
{
    use HasFactory;
    use SoftDeletes;
    
    protected $guarded = [];

}//end of models
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/CarryOutCourse.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\CarryOutCourse
 *
 * @property int $id
 * @property int|null $course_id
 * @property int|null $student_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse query()
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse whereCourseId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CarryOutCourse whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class CarryOutCourse extends Model
{
    use HasFactory;

    protected $guarded = [];
    protected $table = 'carry_out_courses';
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Batch.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Batch
 *
 * @property int $id
 * @property string $name
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Database\Factories\BatchFactory factory($count = null, $state = [])
 * @method static \Illuminate\Database\Eloquent\Builder|Batch newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Batch newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Batch query()
 * @method static \Illuminate\Database\Eloquent\Builder|Batch whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Batch whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Batch whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Batch whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Batch extends Model
{
    use HasFactory;

    protected $guarded = [];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/AdmissionType.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\AdmissionType
 *
 * @property int $id
 * @property string $type
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType query()
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|AdmissionType withoutTrashed()
 * @mixin \Eloquent
 */
class AdmissionType extends Model
{
    use HasFactory;
    use SoftDeletes;
    
    protected $guarded = [];

}//end of models
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Admin.php

      
-----------------------------------------------


      <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;

/**
 * App\Models\Admin
 *
 * @property int $id
 * @property string $name
 * @property string $email
 * @property \Illuminate\Support\Carbon|null $email_verified_at
 * @property string $password
 * @property string $image
 * @property string|null $remember_token
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $full_name
 * @property-read mixed $image_path
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Permission> $permissions
 * @property-read int|null $permissions_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Role> $roles
 * @property-read int|null $roles_count
 * @property-read \App\Models\Teacher|null $teacher
 * @method static \Illuminate\Database\Eloquent\Builder|Admin newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Admin newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Admin onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Admin permission($permissions)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin query()
 * @method static \Illuminate\Database\Eloquent\Builder|Admin role($roles, $guard = null)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereEmail($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereEmailVerifiedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereFullName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereImage($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin wherePassword($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereRememberToken($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Admin withTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Admin withoutTrashed()
 * @mixin \Eloquent
 */
class Admin extends Authenticatable
{
    use HasFactory;
    use HasRoles;
    use SoftDeletes;

    protected $guard = 'admin';

    protected $fillable = ['name','email','password' , 'full_name'];

    protected $hidden = ['password','remember_token'];

    protected $casts = ['email_verified_at' => 'datetime'];

    protected $appends  = ['image_path'];

     //attributes----------------------------------
    public function getImagePathAttribute()
    {
        if ($this->image == 'dashboard/images/admin.png') {

            return asset($this->image);
        }

        return asset('storage/' . $this->image);

    }//end of get image path

    public function teacher()  {
        return $this->hasOne(Teacher::class,);
    }


}//end of model

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Interfaces/ResultInterface.php

      
-----------------------------------------------


      <?php
namespace App\interface;

interface ResultInterface {
    public function calculate();
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Kernel.php

      
-----------------------------------------------


      <?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Fruitcake\Cors\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            // \Illuminate\Session\Middleware\AuthenticateSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
                \App\Http\Middleware\HandleInertiaRequests::class,
                \App\Http\Middleware\ModulesMiddlewar::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            'throttle:api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's route middleware.
     *
     * These middleware may be assigned to groups or used individually.
     *
     * @var array<string, class-string|string>
     */
    protected $routeMiddleware = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,

        /**** OTHER MIDDLEWARE ****/
        'localize'                => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRoutes::class,
        'localizationRedirect'    => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRedirectFilter::class,
        'localeSessionRedirect'   => \Mcamara\LaravelLocalization\Middleware\LocaleSessionRedirect::class,
        'localeCookieRedirect'    => \Mcamara\LaravelLocalization\Middleware\LocaleCookieRedirect::class,
        'localeViewPath'          => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationViewPath::class,

        'role'                    => \Spatie\Permission\Middlewares\RoleMiddleware::class,
        'permission'              => \Spatie\Permission\Middlewares\PermissionMiddleware::class,
        'role_or_permission'      => \Spatie\Permission\Middlewares\RoleOrPermissionMiddleware::class,

        'splade' => \ProtoneMedia\Splade\Http\SpladeMiddleware::class,
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Imports/StudyPlanImport.php

      
-----------------------------------------------


      <?php

namespace App\Imports;

use Exception;
use App\Models\Course;
use App\Models\StudyPlan;
use Illuminate\Support\Arr;
use App\Rules\CourseCodeExists;
use Illuminate\Validation\Rule;
use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToModel;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Concerns\Importable;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithValidation;

class StudyPlanImport implements ToCollection, WithHeadingRow , WithValidation
{
    private $department_id;

    public function __construct($department_id)
    {
        $this->department_id = $department_id;
    }

    public function collection(Collection $rows)
    {

        foreach ($rows as $row) {
            $course = Course::firstWhere('code', 'sdsdsd');
            if (!$course?->exists()) {
                $v = Validator::make($row->toArray(), [
                    'name_ar' =>  ['required'],
                    'name_en' =>  ['required'],
                    'hours' =>  ['required', 'numeric'],
                    'religion' => ['sometimes', 'in:islam,cristian'],
                    'has_practical' =>  ['required', 'in:1,0'],
                    'min_degree' =>  ['required', 'integer'],
                ], $this->messages);

                if ($v->fails()) {
                    $error = \Illuminate\Validation\ValidationException::withMessages($v->errors()->messages());
                    throw $error;
                }
            }
        }

        foreach ($rows as $row) {
            $course = Course::firstWhere('code', $row['course_code']);
            if (!$course?->exists()) {
                $course = Course::create([
                    'code' => $row['course_code'],
                    'name' => $row['name_ar'],
                    'name_en' => $row['name_en'],
                    'min_degree' => $row['min_degree'],
                    'hours' => $row['hours'],
                    'religion' => $row['religion'] ?? null,
                    'has_practical' => $row['has_practical'],
                ]);
            }

            StudyPlan::updateOrCreate([
                'department_id' => $this->department_id,
                'semester_id' => $row['semester_number'],
                'course_id' => $course->id,
            ]);
        }
    }

    // (Collection $rows)
    // {
    //     dd(44);
    //     foreach ($rows as $row) {
    //         StudyPlan::updateOrCreate([
    //             'department_id' => $this->department_id,
    //             'semester_id' => $row['semester_number'],
    //             'course_id' => Course::firstWhere('code',$row['course_code'])?->id,
    //         ]);
    //     }
    // }

    public function rules(): array
    {
        // dd(Rule::requiredIf(new CourseCodeExists(request()->input('course_code'))));
        return [
            'course_code' =>  ['required'],
            '*.semester_number' => 'required|exists:semesters,id',
            // '*.name_ar' =>  ['required_if:*.course_code,WoVScss'],
            // '*.name_ar' =>  [Rule::requiredIf(new CourseCodeExists(request()->input('course_code')))],
            // '*.name_en' =>  [new CourseCodeExists],
            // '*.hours' =>  [new CourseCodeExists , 'numeric'],
            // '*.religion' => 'nullable|in:islam,cristian',
            // '*.has_practical' =>  [new CourseCodeExists , '|in:1,0'],
            // '*.min_degree' =>  [new CourseCodeExists , 'integer'],
        ];
    }

    public function customValidationMessages(): array
    {
        return [
            '*.course_code.required' => 'يجب أن يحتوي الملف على رمز المادة',
            '*.course_code.exists' => 'المادة :input غير موجودة',
            '*.semester_number.required' => 'يجب أن يحتوي الملف على رقم السمستر',
            '*.semester_number.exists' => ' السمستر :input غير موجود',
        ];
    }

    public $messages = [
        'name_ar.required' => 'يجب أن يحتوي الملف على اسم المادة باللغة العربية',
        'name_en.required' => 'يجب أن يحتوي الملف على اسم المادة باللغة الانجليزية',
        'code.required' => 'يجب أن يحتوي الملف على رمز المادة',
        'code.unique' => 'رمز المادة  :input موجود بالفعل',
        'hours.required' => 'يجب أن يحتوي الملف على عدد ساعات المادة',
        'hours.integer' => ' عدد ساعات المادة :input غير صالح',
        'religion.in' => 'الديانة يجب أن تكون احدى القيمتين : islam , cristian',
        'has_practical.in' => 'has_practical(هل للمادة جزء عملي؟) يجب أن يكون احدى القيمتين : 1 , 0',
        'min_degree.required' => 'يجب أن يحتوي الملف على درجة النجاح',
        'min_degree.integer' => 'يجب أن تكون قيمة درجة النجاح :input  رقما',
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Imports/StudentImport.php

      
-----------------------------------------------


      <?php

namespace App\Imports;

use App\Enums\RegistrationStatus;
use App\Models\AdmissionType;
use App\Models\Batch;
use App\Models\Course;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyPlan;
use App\Models\Department;
use App\Models\LevelDegree;
use App\Models\Registration;
use App\Models\CourseStudent;
use App\Models\DepartmentPrice;
use Illuminate\Validation\Rule;
use Illuminate\Support\Collection;
use App\Models\CourseStudentDegree;
use App\Services\RegistrationsCoursesService;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\SkipsEmptyRows;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithValidation;

class StudentImport implements ToCollection, WithHeadingRow, SkipsEmptyRows, WithValidation
{
    private $studyDate;
    private $price;
    private $department_id;
    private $addmission_types;
    private $batches;
    private $importKeys;

    public function __construct($study_date_id, $department_id, $importKeys)
    {
        $this->studyDate = StudyDate::find($study_date_id);
        $this->department_id = $department_id;
        $this->price = DepartmentPrice::where('department_id', $department_id)
            ->where('study_date_id', $this->studyDate->id)
            ->first();

        $this->addmission_types = AdmissionType::all();
        $this->batches = Batch::select('id')->get();

        $this->importKeys = $importKeys;
    }

    /**
     * @param array $row
     *
     * @return \Illuminate\Database\Eloquent\Model|null
     */
    public function collection(Collection $rows)
    {
        //students
        foreach ($rows as $row) {
            $student = Student::query()->firstWhere('university_id', $row[$this->importKeys['university_id']]);

            // if student record exists : avoid duplicating a record in Student model
            if ($student->exists()) {

                $registration = $this->createRegistrationRecordIfNeeded($row, $student->id);

            } else {

                [$student, $registration] = $this->createStudentRecord($row);
            }



            $studentHasCourses = CourseStudent::where('student_id', $student->id)
                ->where('study_year_id', $student->study_year_id)
                ->exists();

            if (!$studentHasCourses) {
                RegistrationsCoursesService::syncStudentCourses($student);
            }

            if ($this->studyDate->isActive) {
                $registration->createRegistrationPaymentOrder();
            }
        }
    }

    public function getCourseDegreeCode($levelDegrees, $degree)
    {

        foreach ($levelDegrees as $levelDegree) {
            if ((int)$degree >= $levelDegree->min_degree && (int)$degree <= $levelDegree->max_degree) {
                return $levelDegree->level_code;
                break;
            }
        }
        return '--';
    }

    public function getIsPass($degree)
    {
        if ($degree == 'ABS') {
            return false;
        }

        return (int)$degree >= 45;
    }

    public function createRegistrationRecordIfNeeded($row, $student_id): Registration
    {

        $registration = Registration::firstOrCreate([
            'student_id' => $student_id,
            'study_date_id' => $this->studyDate->id,
        ], [
            'study_year_id' => $row[$this->importKeys['study_year_id']],
            'status' => RegistrationStatus::STATUS_UNREGISTERED,
            'register_fees' => $row[$this->importKeys['register_fees']],
            'tuition_fees' => $row[$this->importKeys['tuition_fees']],
            'currency_id' => $row[$this->importKeys['currency_id']],
        ]);

        return $registration;
    }

    public function createStudentRecord($row): array
    {

        $student = Student::create([
            'name1' => $row[$this->importKeys['name1_ar']],
            'name2' => $row[$this->importKeys['name2_ar']],
            'name3' => $row[$this->importKeys['name3_ar']],
            'name4' => $row[$this->importKeys['name4_ar']],

            'name1_en' => $row[$this->importKeys['name1_en']],
            'name2_en' => $row[$this->importKeys['name2_en']],
            'name3_en' => $row[$this->importKeys['name3_en']],
            'name4_en' => $row[$this->importKeys['name4_en']],

            'university_id' => $row[$this->importKeys['university_id']],
            'department_id' => $this->department_id,
            'study_year_id' => $row[$this->importKeys['study_year_id']],
            'study_date_id' => $this->studyDate->id,

            'currency_id' => $row[$this->importKeys['currency_id']],
            'phone' => $row[$this->importKeys['phone_number']],
            'acceptance_year' => $row[$this->importKeys['acceptance_year']],
            'admission_type_id' =>  $row[$this->importKeys['admission_type_id']],
        ]);

        $registration = Registration::create([
            'student_id' => $student->id,
            'study_date_id' => $this->studyDate->id,
            'study_year_id' => $row[$this->importKeys['study_year_id']],
            'status' => RegistrationStatus::STATUS_UNREGISTERED,
            'register_fees' => $row[$this->importKeys['register_fees']],
            'tuition_fees' => $row[$this->importKeys['tuition_fees']],
            'currency_id' => $row[$this->importKeys['currency_id']],
        ]);

        return [
            'student' => $student,
            'registration' => $registration,
        ];
    }

    public function rules(): array
    {
        return [
            '*.' . $this->importKeys['name1_ar']             => ['nullable', 'min:2', 'max:255'],
            '*.' . $this->importKeys['name2_ar']             => ['nullable', 'min:2', 'max:255'],
            '*.' . $this->importKeys['name3_ar']             => ['nullable', 'min:2', 'max:255'],
            '*.' . $this->importKeys['name4_ar']             => ['nullable', 'min:2', 'max:255'],
            '*.' . $this->importKeys['name1_en']          => ['required', 'min:2', 'max:255'],
            '*.' . $this->importKeys['name2_en']          => ['required', 'min:2', 'max:255'],
            '*.' . $this->importKeys['name3_en']          => ['required', 'min:2', 'max:255'],
            '*.' . $this->importKeys['name4_en']          => ['required', 'min:2', 'max:255'],
            // BUG: How to import student record from the first study year until they graduate ?
            // // I removed the unique university_id rule in order to solve this.
            "*." . $this->importKeys['university_id'] => ['required'],
            '*.' . $this->importKeys['study_year_id']     => ['required', 'exists:study_years,id'],
            '*.' . $this->importKeys['phone_number']             => ['required', 'integer', 'digits_between:10,12'],
            '*.' . $this->importKeys['admission_type_id'] => ['required', 'exists:admission_types,id'],
            '*.' . $this->importKeys['currency_id']          => ['required', 'exists:currencies,id'],
            '*.' . $this->importKeys['acceptance_year'] => ['required'],
            '*.' . $this->importKeys['register_fees']  => ['required', 'numeric'],
            '*.' . $this->importKeys['tuition_fees']   => ['required', 'numeric'],
        ];
    }
    /**
     * @return array
     */
    public function customValidationAttributes()
    {
        return [
            'name1_en' => __('admin.students.name1_en'),
            'name2_en' => __('admin.students.name2_en'),
            'name3_en' => __('admin.students.name3_en'),
            'name4_en' => __('admin.students.name4_en'),


            'name1_ar' => __('admin.students.name1_ar'),
            'name2_ar' => __('admin.students.name2_ar'),
            'name3_ar' => __('admin.students.name3_ar'),
            'name4_ar' => __('admin.students.name4_ar'),


            'university_id' => __('admin.students.university_id'),
            'study_year_id' => __('admin.students.study_year_id'),
            'phone_number' => __('admin.students.phone_number'),
            'admission_type_id' => __('admin.students.admission_type_id'),
            'currency_id' => __('admin.students.currency_id'),
            'acceptance_year' => __('admin.students.acceptance_year'),
            'register_fees' => __('admin.students.register_fees'),
            'tuition_fees' => __('admin.students.tuition_fees'),
        ];
    }

    // public function customValidationMessages()
    // {
    //     return [
    //         '*.name1_en.required' => 'يجب ان يحتوي الملف على اسم الطالب الاول باللغة الانجليزية',
    //         '*.name2_en.required' => 'يجب ان يحتوي الملف على اسم الطالب الثاني باللغة الانجليزية',
    //         '*.name3_en.required' => 'يجب ان يحتوي الملف على اسم الطالب الثالث باللغة الانجليزية',
    //         '*.name4_en.required' => 'يجب ان يحتوي الملف على اسم الطالب الرابع باللغة الانجليزية',
    //         '*.university_id.required' => 'يجب ان يحتوي الملف على الرقم الجامعي للطالب',
    //         '*.study_year.required' => 'يجب ان يحتوي الملف على السنة الدراسية للطالب',
    //         '*.study_year.numeric' => 'يجب ان تكون السنة الدراسية رقما ',
    //         '*.study_year.exists' => 'السنة الدراسية غير موجودة',
    //         '*.phone_number.required' => 'يجب أن يحتوي الملف على رقم هاتف الطالب',
    //         '*.phone_number.starts_with' => 'يجب أن يبدا رقم هاتف الطالب ب 249',
    //         '*.phone_number.digits' => 'يجب أن يتكون رقم هاتف الطالب من  12 خانة  ',
    //         '*.admission_type.required' => 'يجب أن يحتوي الملف على نوع القبول  ',
    //         '*.admission_type.exists' => 'نوع القبول غير صالح',
    //         '*.currency.required' => 'يجب أن يحتوي الملف على عملة الطالب',
    //         '*.currency.in' => 'يجب أن تكون عملة الطالب احدى القيمتين : sdg , usd',
    //         '*.acceptance_year.required' => 'يجب أن يحتوي الملف على سنة قبول الطالب',
    //         '*.register_fees.required' => 'يجب أن يحتوي الملف على رسوم تسجيل الطالب',
    //         '*.register_fees.numeric' => 'يجب أن تكون رسوم تسجيل الطالب رقما',
    //         '*.tuition_fees.required' => 'يجب أن يحتوي الملف على رسوم دراسة الطالب',
    //         '*.tuition_fees.numeric' => 'يجب أن تكون رسوم دراسة الطالب رقما',
    //     ];
    // }
}





        // $student = Student::create([
        //     'university_id' => $row[2],
        //     'name1_en' => $row[3],
        //     'name1' => $row[4],
        //     'national_number' => $row[5],
        //     'phone' => $row[6],
        //     'department_id' => $this->department->id,
        //     'acceptance_year' => $this->acceptance_year,
        //     'study_year_id' => $this->study_year_id,
        // ]);
        // Course::updateOrCreate(
        //     [
        //         'code' => $row['code']
        //     ],
        //     [
        //         'name_en' => $row['course_title_en'],
        //         'name' => $row['course_title_ar'],
        //         'hours' => $row['hours'],
        //     ]
        // );




        // $courses = Course::all();

        // $department = Department::firstWhere('name' , $rows[0]['department']);

        // foreach ($rows as $row) {

        //     // dd($row);
        //     if ($courses->where('code', $row['code'])->first()?->id == null) {
        //         $course = Course::updateOrCreate(
        //             [
        //                 'code' => $row['code']
        //             ],
        //             [
        //                 'name' =>  $row['course_title_ar'],
        //                 'name_en' =>  $row['course_title_ar'],
        //                 'hours' =>  $row['hours'],
        //                 'min_degree' =>  45,
        //             ]
        //         );
        //     }
        //     StudyPlan::create([
        //         'department_id' => $department->id,
        //         'course_id' => $courses->where('code', $row['code'])->first()?->id ?? $course->id,
        //         'semester_id' => $row['semester'],
        //     ]);
        // }

        //students
        // $department = Department::firstWhere('name' ,$rows[0]['department']);
        // foreach($rows as $row) {
        //     // dd($row);
        //     $student = Student::updateOrCreate([
        //         'name1' => $row['name1'],
        //         'university_id' => $row['university_id'],
        //         'department_id' => $department->id,
        //         'study_year_id' => 1,
        //         'study_date_id' => 3,
        //     ]);

        //     Registration::updateOrCreate([
        //         'student_id' => $student->id,
        //         'study_date_id' => 3,
        //         'status_id' => 1,
        //         'register_fees' => 300,
        //         'tuition_fees' => 400,
        //         'currency' => 'sdg',
        //     ]);

        // }


        // result
        // $levelDegrees = LevelDegree::all('min_degree', 'max_degree', 'level_code');

        // foreach($rows as $row) {
        //     $student = Student::select('id','university_id')->firstWhere('university_id',$row['university_id']);

        //     unset($row['university_id']);

        //     foreach($row as $key => $degree) {

        //         $studentDegree = CourseStudentDegree::updateOrCreate([
        //             'course_id' => Course::firstWhere('code',$key)->id,
        //             'student_id' => $student->id,
        //             'study_date_id' => 3,
        //             'theory_degree' => $degree == 'ABS' ? 0 : $degree,
        //             'is_first_exam' => true,
        //             'point' => $degree == 'ABS' ? 0 : (int)$degree / 25,
        //             'is_pass' => $this->getIsPass($degree),
        //             'degree_code' =>  $degree == 'ABS' ? null :  $this->getCourseDegreeCode($levelDegrees,(int)$degree),
        //             'attendance_status' => $degree == 'ABS' ? CourseStudentDegree::STATUS_EXCUSED_ABSENCE : CourseStudentDegree::STATUS_ATTENDED,
        //         ]);

        //         // if($student->university_id == 14) {
        //         //     dd($studentDegree);
        //         // }

        //         CourseStudent::where('student_id',$student->id)
        //         ->where('course_id',Course::firstWhere('code',$key)->id)
        //         ->update(['course_student_degree_id' => $studentDegree->id]);

        //     }
        // }

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Imports/PaymentImport.php

      
-----------------------------------------------


      <?php

namespace App\Imports;

use App\Enums\PaymentOrderStatus;
use App\Models\PaymentOrder;
use App\Models\Student;
use DB;
use Illuminate\Support\Collection;
use Illuminate\Validation\Rule;
use Maatwebsite\Excel\Concerns\SkipsEmptyRows;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithValidation;

class PaymentImport implements ToCollection, WithHeadingRow, SkipsEmptyRows, WithValidation
{
    public $studyDateId, $importKeys;
    public function __construct($studyDateId, $importKeys)
    {
        $this->studyDateId = $studyDateId;
        $this->importKeys = $importKeys;
    }
    /**
     * @param Collection $collection
     */
    public function collection(Collection $collection)
    {
        return DB::transaction(function ()  use ($collection) {

            foreach ($collection as $row) {

                $student = Student::query()
                    ->select('id', 'currency_id')
                    ->withWhereHas('filteredRegistration', function ($q) {
                        $q->where('study_date_id', $this->studyDateId);
                    })
                    ->where('university_id', $row[$this->importKeys['university_id']])
                    ->first();


                $paymentOrder = PaymentOrder::updateOrCreate([
                    'student_id' => $student->id,
                    'registration_id' => $student->filteredRegistration->id,
                    'study_date_id' => $this->studyDateId,
                    'total_amount' => $student->filteredRegistration->justTotal,
                    'archive' => true,
                    'currency_id' => $student->filteredRegistration->currency_id,
                ], [
                    'amount' => $row[$this->importKeys['amount']],
                ]);

                $paymentOrder->payments()->updateOrCreate([
                    'payment_type_id' =>  $row[$this->importKeys['payment_method_id']],
                    'student_id' =>  $student->id,
                    'status' =>  1,
                    'rate' => 1,
                    'currency_id' => $student->filteredRegistration->currency_id,
                ], [
                    'amount' => $row[$this->importKeys['amount']],
                ]);
            }
        });
    }


    public function rules(): array
    {
        return [
            '*.' . $this->importKeys['university_id']             => ['required', 'exists:students,university_id'],
            '*.' . $this->importKeys['amount']             => ['required', 'integer'],
            '*.' . $this->importKeys['payment_type']             => ['required', Rule::in(PaymentOrderStatus::values())],
            '*.' . $this->importKeys['payment_method_id']             => ['required', 'exists:payment_types,id'],
        ];
    }

    public function customValidationAttributes()
    {
        return [
            'university_id' => __('admin.import_payments.university_id'),
            'amount' => __('admin.import_payments.amount'),
            'payment_method_id' => __('admin.import_payments.payment_method_id'),
            'payment_type' => __('admin.import_payments.payment_type'),

        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Imports/MarkImport.php

      
-----------------------------------------------


      <?php

namespace App\Imports;

use App\Helpers\FirstRoundResultCalculationHelper;
use App\Models\Course;
use App\Models\CourseStudent;
use App\Models\CourseStudentDegree;
use App\Models\LevelDegree;
use App\Models\Student;
use App\Models\StudyPlanDate;
use App\Rules\VerifyStudentHasActiveStudyPlan;
use App\Rules\VerifyStudentHasActiveStudyPlanRule;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Maatwebsite\Excel\Concerns\SkipsEmptyRows;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithValidation;

class MarkImport implements ToCollection, WithHeadingRow, SkipsEmptyRows, WithValidation
{
    public $studyDateId, $is_first_exam, $importKeys;
    public $levelDegrees;
    public function __construct($studyDateId, $is_first_exam, $importKeys)
    {

        $this->studyDateId = $studyDateId;
        $this->importKeys = $importKeys;
        $this->is_first_exam = $is_first_exam;


        $this->levelDegrees =  LevelDegree::all('min_degree', 'max_degree', 'level_code');
    }
    /**
     * @param Collection $collection
     */
    public function collection(Collection $collection)
    {

        return DB::transaction(function ()  use ($collection) {


            foreach ($collection as $row) {

                $studyPlanDate = StudyPlanDate::with('course')->find($row[$this->importKeys['active_study_plan_id']]);

                $student = Student::select('id', 'study_year_id')->firstWhere('university_id', $row[$this->importKeys['university_id']]);

                $seconRoundDegree = CourseStudentDegree::query()
                    ->where('student_id', $student->id)
                    ->where('course_id', $studyPlanDate->course_id)
                    ->where('is_first_exam', false)
                    ->exists();

                if ($seconRoundDegree) {
                    continue;
                }

                $courseStudentDegree = CourseStudentDegree::updateOrCreate(
                    [
                        'student_id' => $student->id,
                        'course_id' => $studyPlanDate->course_id,
                        'study_date_id' => $this->studyDateId,
                        'is_first_exam' => $this->is_first_exam
                    ],
                    [
                        'theory_degree' =>   $row[$this->importKeys['attendance_status']] == LevelDegree::STATUS_ATTENDED ? $row[$this->importKeys['theory']] : 0,
                        'practical_degree' =>   $row[$this->importKeys['attendance_status']] == LevelDegree::STATUS_ATTENDED ? $row[$this->importKeys['practical']] : 0,
                        'attendance_status' => $row[$this->importKeys['attendance_status']],
                        'point' => ((int)$row[$this->importKeys['theory']] + (int)$row[$this->importKeys['practical']]) / 25,
                        'is_pass' => FirstRoundResultCalculationHelper::calculateIsPass($studyPlanDate->course, (int) $row[$this->importKeys['theory']], (int) $row[$this->importKeys['practical']]),
                        'degree_code' => FirstRoundResultCalculationHelper::getCourseDegreeCode($this->levelDegrees, (int)$row[$this->importKeys['theory']] + (int)$row[$this->importKeys['practical']])
                    ]
                );
                CourseStudent::where('student_id', $student->id)
                    ->where('course_id', $studyPlanDate->course_id)
                    ->where('study_year_id', $student->study_year_id)
                    ->update(['course_student_degree_id' => $courseStudentDegree->id]);
            }
        });
    }

    public function rules(): array
    {
        return [
            '*.' . $this->importKeys['university_id']             => ['required', 'exists:students,university_id'],
            '*.' . $this->importKeys['active_study_plan_id']             => ['required', 'exists:study_plan_dates,id'],
            '*.' . $this->importKeys['theory']             => ['required', 'integer', 'between:0,100'],
            '*.' . $this->importKeys['practical']             => ['required', 'integer', 'between:0,100'],
            '*.' . $this->importKeys['attendance_status']          => ['required', 'string', Rule::in(LevelDegree::STATUSES)],
        ];
    }

    public function withValidator($validator)
    {
        $validator->after(function ($validator) {
            $rows = $validator->getData();
            foreach ($rows as $row) {

                $university_id = $row[$this->importKeys['university_id']];
                $studyPlanDateId = $row[$this->importKeys['active_study_plan_id']];


                $studentHasCourse = CourseStudent::where('student_id', function ($query) use ($university_id) {
                    $query->select('id')
                        ->from('students')
                        ->where('students.university_id', $university_id)
                        ->limit(1);
                })
                    ->where('course_id', function ($query) use ($studyPlanDateId) {
                        $query->select('course_id')
                            ->from('study_plan_dates')
                            ->where('study_plan_dates.id', $studyPlanDateId)
                            ->limit(1);
                    })
                    ->exists();

                if (!$studentHasCourse) {
                    $validator->errors()->add('2.university_id', __('admin.import_marks.student_does_not_have_this_active_study_plan' ,
                        ['active_study_plan_id' => $studyPlanDateId]));
                }
            }
        });
    }

    public function customValidationAttributes()
    {
        return [
            'university_id' => __('admin.import_marks.university_id'),
            'active_study_plan_id' => __('admin.import_marks.active_study_plan_id'),
            'theory' => __('admin.import_marks.theory'),
            'practical' => __('admin.import_marks.practical'),
            'attendance_status' => __('admin.import_marks.attendance_status'),

        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Imports/CourseImport.php

      
-----------------------------------------------


      <?php

namespace App\Imports;

use App\Models\Course;
use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithValidation;

class CourseImport implements ToCollection, WithHeadingRow, WithValidation
{
    protected $departmentId;

    public function __construct($department_id)
    {
        $this->departmentId = $department_id;
    }
    /**
     * @param Collection $collection
     */
    public function collection(Collection $rows)
    {
        foreach ($rows as $row) {

            Course::updateOrCreate(
                [
                    'code' => $row['code']
                ],
                [
                    'name' => $row['name_ar'],
                    'name_en' => $row['name_en'],
                    'min_degree' => $row['min_degree'],
                    'hours' => $row['hours'],
                    'religion' => $row['religion'] ?? null,
                    'has_practical' => $row['has_practical'],
                    'department_id' => $this->departmentId,
                ]
            );
        }
    }

    public function rules(): array
    {
        return [
            '*.name_ar' => 'required',
            '*.name_en' => 'required',
            '*.code' => 'required|unique:courses,code',
            '*.hours' => 'required|integer',
            '*.religion' => 'nullable|in:islam,cristian',
            '*.has_practical' => 'required|in:1,0',
            '*.min_degree' => 'required|integer',
        ];
    }

    public function customValidationMessages(): array
    {
        return [
            '*.name_ar.required' => 'يجب أن يحتوي الملف على اسم المادة باللغة العربية',
            '*.name_en.required' => 'يجب أن يحتوي الملف على اسم المادة باللغة الانجليزية',
            '*.code.required' => 'يجب أن يحتوي الملف على رمز المادة',
            '*.code.unique' => 'رمز المادة  :input موجود بالفعل',
            '*.hours.required' => 'يجب أن يحتوي الملف على عدد ساعات المادة',
            '*.hours.integer' => ' عدد ساعات المادة :input غير صالح',
            '*.religion.in' => 'الديانة يجب أن تكون احدى القيمتين : islam , cristian',
            '*.has_practical.in' => 'has_practical(هل للمادة جزء عملي؟) يجب أن يكون احدى القيمتين : 1 , 0',
            '*.min_degree.required' => 'يجب أن يحتوي الملف على درجة النجاح',
            '*.min_degree.integer' => 'يجب أن تكون قيمة درجة النجاح :input  رقما',
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Imports/ActiveStudyPlanImport.php

      
-----------------------------------------------


      <?php

namespace App\Imports;

use App\Models\Course;
use App\Models\CourseStudent;
use App\Models\Semester;
use App\Models\Student;
use App\Models\StudyPlanDate;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\SkipsEmptyRows;
use Maatwebsite\Excel\Concerns\WithValidation;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;

class ActiveStudyPlanImport implements ToCollection, WithHeadingRow, SkipsEmptyRows, WithValidation
{
    public $studyDateId, $departmentId, $importKeys;
    public function __construct($studyDateId, $departmentId, $importKeys)
    {
        $this->studyDateId = $studyDateId;
        $this->importKeys = $importKeys;
        $this->departmentId = $departmentId;
    }
    /**
     * @param Collection $collection
     */
    public function collection(Collection $collection)
    {
        return DB::transaction(function ()  use ($collection) {

            foreach ($collection as $row) {

                $course = Course::select('id')->firstWhere('code', $row[$this->importKeys['course_code']]);
                $semester = Semester::find($row[$this->importKeys['semester_id']]);


                $studyPlanDate = StudyPlanDate::query()->updateOrCreate([
                    'department_id' => $this->departmentId,
                    'semester_id' => $semester->id,
                    'course_id' => $course->id,
                    'study_date_id' => $this->studyDateId,
                ]);

                // sync active study plan with students
                $students = Student::query()
                    ->select('id', 'study_year_id')
                    ->withWhereHas('filteredRegistration', function ($q) use($semester) {
                        $q->where('study_date_id', $this->studyDateId)
                            ->where('study_year_id' , $semester->study_year_id)
                            ;
                    })
                    ->where('department_id', $this->departmentId)
                    ->get();

                foreach ($students as $student) {
                    CourseStudent::updateOrCreate([
                        'student_id' => $student->id,
                        'course_id' => $studyPlanDate->course_id,
                        'semester_id' => $studyPlanDate->semester_id,
                        'study_year_id' => $student->filteredRegistration->study_year_id,
                    ], [
                        'hours' => $row[$this->importKeys['hours']],
                    ]);
                }
            }
        });
    }

    public function rules(): array
    {
        return [
            '*.' . $this->importKeys['semester_id']             => ['required', 'exists:semesters,id'],
            '*.' . $this->importKeys['course_code']             => ['required', 'exists:courses,code'],
            '*.' . $this->importKeys['hours']             => ['required', 'integer'],
        ];
    }

    public function customValidationAttributes()
    {
        return [
            'semester_id' => __('admin.import_active_study_plans.semester_id'),
            'course_code' => __('admin.import_active_study_plans.course_code'),
            'hours' => __('admin.import_active_study_plans.hours'),

        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Helpers/helpers.php

      
-----------------------------------------------


      <?php

namespace App\Helpers;

use App\Models\Discount;
use App\Models\Payment;
use App\Models\PaymentOrder;
use App\Models\Registration;
use App\Models\Student;

class helpers
{


}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Helpers/PrintHelper.php

      
-----------------------------------------------


      <?php
namespace App\Helpers;
use ArPHP\I18N\Arabic;
use Barryvdh\DomPDF\Facade\Pdf;

class PrintHelper {

    public static function initArabic($html) {
        $arabic = new Arabic();
        $p = $arabic->arIdentify($html);
        $reportHtml = null;

        for ($i = count($p)-1; $i >= 0; $i-=2) {
            $utf8ar = $arabic->utf8Glyphs(substr($html, $p[$i-1], $p[$i] - $p[$i-1]));
            $reportHtml = substr_replace($html, $utf8ar, $p[$i-1], $p[$i] - $p[$i-1]);
        }

        return $reportHtml;
    }


    public static function printInvoice($data) {

        $reportHtml = view('prints.payment-invoice', $data)->render();

        $arabic = new Arabic();
        $p = $arabic->arIdentify($reportHtml);

        for ($i = count($p)-1; $i >= 0; $i-=2) {
            $utf8ar = $arabic->utf8Glyphs(substr($reportHtml, $p[$i-1], $p[$i] - $p[$i-1]));
            $reportHtml = substr_replace($reportHtml, $utf8ar, $p[$i-1], $p[$i] - $p[$i-1]);
        }

        $pdf = PDF::loadHTML($reportHtml);
        return $pdf->download('inovice.pdf');
    }

    public static function printRegisteredStudents($data) {
        $reportHtml = view('prints.students-report',['students' => $data,'title' => __('admin.reports.registered_students')])->render();


        $arabic = new Arabic();
        $p = $arabic->arIdentify($reportHtml);

        for ($i = count($p)-1; $i >= 0; $i-=2) {
            $utf8ar = $arabic->utf8Glyphs(substr($reportHtml, $p[$i-1], $p[$i] - $p[$i-1]));
            $reportHtml = substr_replace($reportHtml, $utf8ar, $p[$i-1], $p[$i] - $p[$i-1]);
        }

        $pdf = PDF::loadHTML($reportHtml);

        return $pdf->download('report.pdf');
    }

    public static function printUnRegisteredStudents($data) {
        $reportHtml = view('prints.students-report',['students' => $data,'title' => __('admin.reports.unregistered_students')])->render();


        $arabic = new Arabic();
        $p = $arabic->arIdentify($reportHtml);

        for ($i = count($p)-1; $i >= 0; $i-=2) {
            $utf8ar = $arabic->utf8Glyphs(substr($reportHtml, $p[$i-1], $p[$i] - $p[$i-1]));
            $reportHtml = substr_replace($reportHtml, $utf8ar, $p[$i-1], $p[$i] - $p[$i-1]);
        }

        $pdf = PDF::loadHTML($reportHtml);

        return $pdf->download('report.pdf');
    }

    public static function printCompletedStudents($data) {
        $reportHtml = view('prints.students-report',['students' => $data,'title' => __('admin.reports.registered_students')])->render();

        $arabic = new Arabic();
        $p = $arabic->arIdentify($reportHtml);

        for ($i = count($p)-1; $i >= 0; $i-=2) {
            $utf8ar = $arabic->utf8Glyphs(substr($reportHtml, $p[$i-1], $p[$i] - $p[$i-1]));
            $reportHtml = substr_replace($reportHtml, $utf8ar, $p[$i-1], $p[$i] - $p[$i-1]);
        }

        $pdf = PDF::loadHTML($reportHtml);

        return $pdf->download('report.pdf');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Helpers/FirstRoundResultCalculationHelper.php

      
-----------------------------------------------


      <?php

namespace App\Helpers;

use App\Models\Course;

class FirstRoundResultCalculationHelper
{

    public static function calculateIsPass(Course $course, $theory_degree, $practical_degree)
    {
        return (int)$theory_degree + (int)$practical_degree >= $course->min_degree;
    }

    public static function getCourseDegreeCode($levelDegrees, $degree)
    {

        foreach ($levelDegrees as $levelDegree) {
            if ($degree >= $levelDegree->min_degree && $degree <= $levelDegree->max_degree) {
                return $levelDegree->level_code;
                break;
            }
        }
        return '--';
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Exports/StudyPlanExport.php

      
-----------------------------------------------


      <?php

namespace App\Exports;

use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\FromCollection;

class StudyPlanExport implements FromArray
{
    /**
     * @return \Illuminate\Support\Array
     */
    public function array(): array
    {
        return [
            [
                'course_code', 'semester_number',
                'name_ar', 'name_en',
                'min_degree',
                'hours', 'religion', 'has_practical'
            ]
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Exports/StudentExport.php

      
-----------------------------------------------


      <?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\FromCollection;

class StudentExport implements FromArray
{
    /**
    * @return \Illuminate\Support\Collection
    */
    public function array():array
    {
        return [
            [
                'name1_ar','name2_ar','name3_ar','name4_ar',
                'name1_en','name2_en','name3_en','name4_en',
                'university_id','study_year_id','register_fees',
                'tuition_fees','currency_id','phone_number',
                'acceptance_year','admission_type_id',
            ],
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Exports/PaymentExport.php

      
-----------------------------------------------


      <?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\FromCollection;

class PaymentExport implements FromArray
{
    public static $headerColumns =  [ 'university_id','amount' ,'payment_type', 'payment_method_id'];
    /**
    * @return array
    */
    public function array(): array
    {
        return [self::$headerColumns];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Exports/MarkExport.php

      
-----------------------------------------------


      <?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;

class MarkExport implements FromArray
{
    public static $headerColumns =  [ 'university_id','active_study_plan_id','theory','practical','attendance_status'];

    /**
    * @return array
    */
    public function array():array
    {
        return [self::$headerColumns];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Exports/CourseExport.php

      
-----------------------------------------------


      <?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\FromCollection;

class CourseExport implements FromArray
{
    /**
    * @return \Illuminate\Support\Collection
    */
    public function array():array
    {
        return [
            [ 'name_ar', 'name_en','code','min_degree','hours','religion','has_practical']
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Exports/ActiveStudyPlanExport.php

      
-----------------------------------------------


      <?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\FromCollection;

class ActiveStudyPlanExport implements FromArray
{
    public static $headerColumns =  [ 'semester_id','course_code' , 'hours'];
    /**
    * @return array
    */
    public function array(): array
    {
        return [self::$headerColumns];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Exceptions/Handler.php

      
-----------------------------------------------


      <?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use ProtoneMedia\Splade\SpladeCore;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        $this->renderable(SpladeCore::exceptionHandler($this));
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Events/TestStarted.php

      
-----------------------------------------------


      <?php

namespace App\Events;

use App\Models\Elearning\Lecture;
use Illuminate\Broadcasting\Channel;
use Illuminate\Queue\SerializesModels;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;

class TestStarted implements ShouldBroadcastNow
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $lecture;
    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(Lecture $lecture)
    {
        $this->lecture = $lecture;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return \Illuminate\Broadcasting\Channel|array
     */
    public function broadcastOn()
    {
        return new Channel('online-test-channel');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Events/TestResumed.php

      
-----------------------------------------------


      <?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Queue\SerializesModels;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;

class TestResumed implements ShouldBroadcastNow
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return \Illuminate\Broadcasting\Channel|array
     */
    public function broadcastOn()
    {
        return new Channel('online-test-channel');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Events/TestPaused.php

      
-----------------------------------------------


      <?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class TestPaused implements ShouldBroadcastNow
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return \Illuminate\Broadcasting\Channel|array
     */
    public function broadcastOn()
    {
        return new Channel('online-test-channel');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Events/TestEnded.php

      
-----------------------------------------------


      <?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class TestEnded implements ShouldBroadcastNow
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return \Illuminate\Broadcasting\Channel|array
     */
    public function broadcastOn()
    {
        return new Channel('online-test-channel');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Events/PodcastProcessed.php

      
-----------------------------------------------


      <?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Queue\SerializesModels;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;

class PodcastProcessed implements ShouldBroadcastNow
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $message;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct($message)
    {
        $this->message = $message;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return \Illuminate\Broadcasting\Channel|array
     */
    public function broadcastOn()
    {
        return new Channel('online-test-channel');
        // return new PrivateChannel('channel-name');
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Enums/RegistrationStatus.php

      
-----------------------------------------------


      <?php

namespace App\Enums;

enum RegistrationStatus :string {

        case STATUS_UNREGISTERED = 'UNREGISTERED';
        case STATUS_REGISTERED = 'REGISTERED';
        case STATUS_FREEZED = 'FREEZED';
        case STATUS_QUIT = 'QUIT';
        case STATUS_DISMISSED = 'DISMESSED';

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Enums/PaymentOrderStatus.php

      
-----------------------------------------------


      <?php
namespace App\Enums;

enum PaymentOrderStatus :string {

        case STATUS_REGISTRATION = 'REGISTRATION';
        case STATUS_REMAINING_INSTALLMENTS = 'REMAINING_INSTALLMENTS';
        case STATUS_FREEZE = 'FREEZE';
        case STATUS_RESIGNATION = 'RESIGNATION';
        case STATUS_DISMISSION = 'DISMISSION';

        public static function values() {
            return collect(self::cases())->pluck('value')->toArray();
        }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Console/Kernel.php

      
-----------------------------------------------


      <?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
        // $schedule->command('inspire')->hourly();
    }

    /**
     * Register the commands for the application.
     *
     * @return void
     */
    protected function commands()
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/fce1d9fb72739496203e6781ac56cb980444af26.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'freeze-student-modal']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'freeze-student-modal']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('admin.students.freeze'); ?>
         <?php $__env->endSlot(); ?>

         <?php $__env->slot('body', null, []); ?> 

                    
                    <div class="mb-3 form-group">
                        <div class="text-right">
                        <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.payments.amount'); ?></label>
                        </div>
                        <input wire:model='freezeData.amount' type="text" class="form-control" placeholder="">
                        <?php $__errorArgs = ['freezeData.amount'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger"><?php echo e($message); ?></span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    <?php
                    ?>

                    
                    <div class="mb-3">
                        <div class="text-right">

                        <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.currency.currency'); ?> <span
                                class="text-danger">*</span></label>
                        </div>
                        <select wire:model='freezeData.currency_id' class="form-control" placeholder="">
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->currencies; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $currency): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($currency); ?>"><?php echo e($currency->name); ?> - <?php echo e($currency->code); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['freezeData.currency_id'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger"><?php echo e($message); ?></span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
                    <div class="mb-3">
                        <div class="text-right">

                        <label class="input-label w-100 text-start"><?php echo app('translator')->get('site.file'); ?></label>
                        </div>
                        <input wire:model='freezeData.file' type="file" class="form-control"
                        placeholder="<?php echo app('translator')->get('site.search'); ?>">
                        <?php $__errorArgs = ['freezeData.file'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger"><?php echo e($message); ?></span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
                    <div class="mb-3">
                        <div class="text-right">

                        <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.payment_orders.description'); ?></label>
                        </div>
                        <textarea wire:model='freezeData.description' rows="6" type="text" class="form-control" placeholder=""></textarea>
                        <?php $__errorArgs = ['freezeData.description'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger"><?php echo e($message); ?></span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

         <?php $__env->endSlot(); ?>

             <?php $__env->slot('footer', null, []); ?> 
                 <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'freezeStudent']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/student/includes/student-profile/_freeze-student-modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/f9e18437ceba629e01ab9fcdd53cb90bccfec101.php

      
-----------------------------------------------


      <?php if(auth()->user()->hasPermissionTo('create-results')): ?>
    <a
    href="<?php echo e(route('dashboard.admin.results.create', ['id' => $id])); ?>"
     class="btn text-secondary font-weight-bold btn-sm "
        data-html="true" data-placement="right" title="رصد نتيجة">
        <i class="fas fa-pen"></i>
        <?php echo app('translator')->get('admin.results.first_phase_grades'); ?>
    </a>
<?php endif; ?>
<?php if(auth()->user()->hasPermissionTo('create-results')): ?>
    <a
    href="<?php echo e(route('dashboard.admin.results.create-second-round-result', ['id' => $id])); ?>"
     class="btn text-secondary font-weight-bold btn-sm "
        data-html="true" data-placement="right" title="ازالة رسوب">
        <i class="fas fa-pen"></i>
        <?php echo app('translator')->get('admin.results.final_phase_grades'); ?>
    </a>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/marks/data_table/actions.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/f54213f667f464cfade323033bbde0db956172b7.php

      
-----------------------------------------------


          <div x-data="{showFilter : false}"

         x-init="() => {
         const filterSidebar = document.getElementById('filter-sidebar')
        filterSidebar.classList.remove('d-none')
         console.log(filterSidebar.classList)
         }"
        >

        <div  class=" m-4">
            <div class="new-card">

                <div class="d-flex align-items-center justify-content-between ">
                    

                    <div class="input-group mb-0 w-50 ">
                        <input type="text" class="form-control" placeholder="<?php echo app('translator')->get('site.search'); ?>" wire:model.live.debounce="search">

                    </div>
                    <!-- btn-group -->
                    <!-- __BLOCK__ --><?php if(auth('admin')->user()->hasPermissionTo('create-students')): ?>
                    <div class="">
                            <div class="btn-group mg-r-auto">
                            <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.students.create')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.students.create')).'']); ?>
                                <?php echo app('translator')->get('site.add'); ?> <?php echo app('translator')->get('admin.students.student'); ?> <i class="fa fa-plus-square"></i>
                             <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                            <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.students.create_via_excel')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.students.create_via_excel')).'']); ?>
                                <?php echo app('translator')->get('site.add_via_excel' , ['target' => __('admin.students.students')]); ?>
                                <i class="fa fa-plus-square"></i>
                             <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                        </div>
                    </div>
                    <?php else: ?>
                    <div class="btn-group mg-r-auto">
                        <a href="" disabled class="btn">
                            <?php echo app('translator')->get('site.add'); ?> <?php echo app('translator')->get('admin.students.students'); ?> <i class="fa fa-plus-square"></i>
                        </a>
                    </div>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->
                    <!-- btn-group -->

                </div>
            </div>

            <div class="br-pagebody">
                <!-- row -->
                <button class="btn btn-primary" @click="showFilter = !showFilter">
                    <i class="fa-solid fa-filter"></i>
                     <?php echo app('translator')->get('site.filter'); ?></button>

                <div class="row">
                    <!-- col-4 -->

                    <table class="table text-dark new-table">
                        <thead>
                            <tr>
                                <td><?php echo app('translator')->get('admin.students.university_id'); ?></td>
                                <td><?php echo app('translator')->get('admin.students.full_name'); ?></td>
                                <td><?php echo app('translator')->get('admin.study_years.study_year'); ?></td>
                                <td><?php echo app('translator')->get('admin.departments.department'); ?></td>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $students; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $student): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <tr>
                                <td><?php echo e($student->university_id); ?></td>
                                <td>

                                    <a class="text-dark" role="button"
                                        href="<?php echo e(route('dashboard.admin.students.show',$student->id)); ?>">
                                        <?php echo e($student->full_name); ?>

                                    </a>
                                </td>
                                <td><?php echo e($student->studyYear->name ?? '-'); ?></td>
                                <td><?php echo e($student->department->name ?? '-'); ?></td>
                            </tr>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->

                        </tbody>
                    </table>
                    <!-- col-4 -->
                </div>

                <div class="p-0 mt-4">

                    <div class="card-footer tx-12 pd-y-15 bg-transparent">
                        <?php echo e($students->links()); ?>

                    </div>
                    <!-- br-section-wrapper -->
                </div>

            </div>

        </div>

        
            <div @mousedown.outside="(e) =>  {
                if(!(e.target instanceof HTMLButtonElement) ) {
                    showFilter = false
                }
                }" x-show="showFilter" wire:ignore.self id="filter-sidebar" class="br-subleft bg-primary d-none " >
            <h6 class="tx-uppercase tx-10 tx-spacing-1 mg-t-10 pd-x-10 tx-white-7"><?php echo app('translator')->get('site.filter'); ?></h6>

            <div class="mg-t-20 pd-x-10 mg-b-40">
                <div class="form-group">
                    <select  wire:model.live='departmentId' type="text" class="form-control form-control-inverse tx-13" placeholder="البرنامج">
                        <option value="">-- <?php echo app('translator')->get('admin.departments.department'); ?> --</option>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($department->id); ?>"><?php echo e($department->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>
                <!-- form-group -->
                <div class="form-group">
                    <select wire:model.live='studyYearId' type="text" class="form-control form-control-inverse tx-13" placeholder="الدفعة">
                        <option value="">-- <?php echo app('translator')->get('admin.study_years.study_year'); ?> --</option>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyYears; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyYear): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($studyYear->id); ?>"><?php echo e($studyYear->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>
                <!-- form-group -->
                <button @click="showFilter = false" class="btn btn-info btn-block tx-uppercase tx-10 tx-spacing-2 tx-semibold"><?php echo app('translator')->get('site.filter'); ?></button>
            </div>

            <h6 class="tx-uppercase tx-10 tx-semibold tx-spacing-1 mg-t-10 pd-x-10 tx-white-7"><?php echo app('translator')->get('admin.students.filter_title'); ?></h6>

            <nav class="nav br-nav-mailbox flex-column">
                <a wire:click='$set("registrationFilter" , "all")'  role="button" class="nav-link <?php echo e($registrationFilter == 'all'  ? 'active' : ''); ?>"><i class="icon ion-refresh tx-16-force"></i> <?php echo app('translator')->get('admin.students.filter_all'); ?></a>
                <a wire:click='$set("registrationFilter" , 1)'  role="button" class="nav-link <?php echo e($registrationFilter == 1  ? 'active' : ''); ?>"><i class="icon ion-checkmark tx-16-force"></i> <?php echo app('translator')->get('admin.students.filter_registered'); ?></a>
                <a wire:click='$set("registrationFilter" , 2)'  role="button" class="nav-link <?php echo e($registrationFilter == 2  ? 'active' : ''); ?>"><i class="icon ion-close tx-16-force"></i> <?php echo app('translator')->get('admin.students.filter_unregistered'); ?></a>
                <a wire:click='$set("registrationFilter" , 4)'  role="button" class="nav-link <?php echo e($registrationFilter == 4  ? 'active' : ''); ?>"><i class="icon ion-ios-snowy tx-16-force"></i><?php echo app('translator')->get('admin.students.filter_freezed'); ?></a>
            </nav>
        </div>

        


    </div>

<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/student/show-student.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/f5315e428d72a688969770352e37805e69378388.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>
<style>
    .selected {
        background: blue
    }
</style>
<?php $__env->stopPush(); ?>
<?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.study_plans.study_plan'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('admin.results.enter_grades'); ?></h4>
<p class="mg-b-0"><?php echo app('translator')->get('pages.import_grades.subtitle'); ?></p>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.mark.import-marks-via-excel');

$__html = app('livewire')->mount($__name, $__params, 'hS6y3LI', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

<div class="pt-4 new-card">
        <p><span class="tx-pink"><?php echo app('translator')->get('admin.create_student.important_notes_title'); ?> </span> <br><small>
                <?php echo app('translator')->get('admin.create_student.important_notes_subtitle'); ?>
                </small></p>
        <ul class=" small pr-2 ">

<li class="mt-1">
    <?php echo app('translator')->get('admin.import_marks.active_study_plan_id_tip'  , ['href' => route('dashboard.admin.active_study_plan.index')]); ?>
</li>
    <li class="mt-1">
                <?php echo app('translator')->get('admin.import_marks.status_tip' ); ?> :

<div class="bd w-25 mt-4 rounded table-responsive">
            <table class="table table-bordered mg-y-0" style="margin-top:0 !important">
              <thead>
                <tr>
                  <td class="text-black"><?php echo app('translator')->get('admin.import_marks.status_name'); ?></td>
                <td class="text-black"><?php echo app('translator')->get('admin.import_marks.status_value'); ?></td>
                </tr>
              </thead>
              <tbody>
                  <?php $__currentLoopData = App\Models\LevelDegree::STATUSES; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $status): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                <tr>
                  <td ><?php echo app('translator')->get('admin.results.' . $status); ?></td>
                  <td ><?php echo e($status); ?></td>
                </tr>
            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
              </tbody>
            </table>
          </div>
                </li>
        </ul>
    </div>
    </div><!-- br-mainpanel -->
    <!-- br-section-wrapper -->

</div><!-- br-mainpanel -->

</div>
<?php $__env->stopSection(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/marks/add_via_excel.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/f529db2496961c09ef66445691c6cbef72423827.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>
<style>
    .selected {
        background: blue
    }
</style>
<?php $__env->stopPush(); ?>
<?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.active_study_plans.active_study_plan'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('admin.active_study_plans.active_study_plan'); ?></h4>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.active-study-plan.active-study-plan-index');

$__html = app('livewire')->mount($__name, $__params, 'l0bAoM7', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>


        <!-- d-flex -->


    </div>
        <!-- br-section-wrapper -->

    </div><!-- br-mainpanel -->

</div>
<?php $__env->stopSection(); ?>

<?php $__env->startPush('scripts'); ?>
<script>
    $(document).on('click', '#create-result', function() {

            let url = '<?php echo e(route('dashboard.admin.active_study_plan.show', ':id')); ?>'

            let dataTable2

             dataTable2 = $('#modal-data-table2').DataTable({
                dom: "tiplr",
                processing: true,
                select: true,
                destroy: true,
                "language": {
                    "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
                },
                ajax: {
                    url: url.replace(':id', $(this).attr('data-id')),
                },
                columns: [{
                        data: 'id',
                        name: 'DT_RowIndex',
                        searchable: false,
                        sortable: false
                    },
                    {
                        data: 'name_en',
                        name: 'name_en',
                        width: '100px',
                    },
                    {
                        data: 'code',
                        name: 'code',
                        width: '20%',
                    },
                    {
                        data: 'hours',
                        name: 'hours',
                        width: '20%',

                    },
                ],
                drawCallback: function(settings) {
                    $('.record__select').prop('checked', false);
                    $('#record__select-all').prop('checked', false);
                    $('#record-ids').val();
                    $('#bulk-delete').attr('disabled', true);
                }
            });

            $('#data-table-search2').keyup(function() {
                dataTable2.search(this.value).draw();
            })

            // $('#confirm-add-result').click(function() {
            //     let element = dataTable2.rows({
            //         selected: true
            //     }).data()[0]
            //     if (element) {
            //         // let url = '<?php echo e(route('dashboard.admin.results.create', ['id=:id&study_plan_id=:study_plan_id'])); ?>'
            //         console.log($(this).parent().parent().attr('data-id'));
            //         return
            //         let url = `dashboard/admin/results/create?id=${element.course_id}&study_plan_id=${$(this).attr('data-id')}`
            //         // url = url.replace(':study_plan_id',$(this).attr('data-id'))
            //         // url = url.replace(',',$(this).attr('data-id'))

            //         // console.log(url.replace(':id', element.course_id));
            //         console.log(url);
            //         // window.location.href = url.replace(':id', element.course_id);

            //     }
            // })


        })
</script>
<script>
    let department;
        let semester;
        let dataTable;
            dataTable = $('#data-table').DataTable({
                dom: "tiplr",
                // paging: false,
                // serverSide: true,
                // processing: true,
                // destroy: true,
                // retrieve: true,
                destroy: true,
                "language": {
                    "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
                },
                ajax: {
                    url: '<?php echo e(route('dashboard.admin.active_study_plan.data')); ?>',
                    data: function(d) {
                        d.department_id = department;
                        d.semester_id = semester;
                    }
                },
                columns: [{
                        data: 'DT_RowIndex',
                        name: 'DT_RowIndex',
                        searchable: false,
                        sortable: false
                    },
                    {
                        data: 'department_name',
                        name: 'department_name'
                    },
                    {
                        data: 'semester_name',
                        name: 'semester_name'
                    },
                    {
                        data: 'courses_count',
                        name: 'courses_count'
                    },
                    {
                        data: 'hours_count',
                        name: 'hours_count'
                    },
                    // {
                    //     data: 'courses_count',
                    //     name: 'courses_count'
                    // },
                    // {
                    //     data: 'registrations_count',
                    //     name: 'registrations_count'
                    // },
                    {
                        data: 'actions',
                        name: 'actions',
                        searchable: false,
                        sortable: false,
                        width: '20%'
                    },
                ],

                drawCallback: function(settings) {
                    $('.record__select').prop('checked', false);
                    $('#record__select-all').prop('checked', false);
                    $('#record-ids').val();
                    $('#bulk-delete').attr('disabled', true);
                }
            });

        $(document).on('change', '.report-search', function() {
            department = $('#departments').find(':selected').val() ?? false;
            semester = $('#semesters').find(':selected').val() ?? false;

            dataTable.ajax.reload();
        });

        $(document).on('click', '#add', function() {

            let url = '<?php echo e(route('dashboard.admin.active_study_plan.show', ':id')); ?>'

            let coursesDataTable
             coursesDataTable = $('#modal-data-table').DataTable({
                dom: "tiplr",
                destroy: true,
                processing: true,
                "language": {
                    "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
                },
                ajax: {
                    url: url.replace(':id', $(this).attr('data-id')),
                },
                columns: [{
                        data: 'id',
                        name: 'DT_RowIndex',
                        searchable: false,
                        sortable: false
                    },
                    {
                        data: 'name_en',
                        name: 'name_en',
                        width: '100px',
                    },
                    {
                        data: 'code',
                        name: 'code',
                        width: '20%',
                    },
                    {
                        data: 'hours',
                        name: 'hours',
                        width: '20%',

                    },
                ],
                drawCallback: function(settings) {
                    $('.record__select').prop('checked', false);
                    $('#record__select-all').prop('checked', false);
                    $('#record-ids').val();
                    $('#bulk-delete').attr('disabled', true);
                }
            });

            $('#data-table-search').keyup(function() {
                coursesDataTable.search(this.value).draw();
            })


        })
</script>
<?php $__env->stopPush(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/active_study_plan/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/efea92b84b402a3ae75a516be5bc2aba5e1f7239.php

      
-----------------------------------------------


      
    <input type="checkbox" class="record__select" value="<?php echo e($id); ?>">
    <?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/study_dates/data_table/record_select.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/ef0a0c610f9aa58015557b5563fca1dd9eaf9b0d.php

      
-----------------------------------------------


      <script>
    /**** Livewire Alert Scripts ****/
    <?php echo file_get_contents($jsPath); ?>

</script>

<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'livewire-alert::components.flash','data' => []] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('livewire-alert::flash'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
<?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?><?php /**PATH /home/ash/sites/UniSoftLaravel/vendor/jantinnerezo/livewire-alert/src/../resources/views/components/scripts.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/ecd9806986955680a030fb4922db5b604370a20e.php

      
-----------------------------------------------


      <?php $__env->startSection('title', __('site.home')); ?>

<?php $__env->startSection('content'); ?>
    <style>
        .bg-blue {
            background: green;
            background-image: linear-gradient(to right, #3478C7, #398CED);
        }
    </style>
    <div class="br-mainpanel">
        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item active"><?php echo app('translator')->get('site.home'); ?></span>
                
                
            </nav>
        </div>
        <!-- br-pageheader -->
        <div class="br-pagetitle">
            <i class="icon ion-ios-gear-outline"></i>
            <div>
                <h4><?php echo app('translator')->get('site.admin_panel'); ?></h4>
            </div>
        </div>

        
            <div class="ms-4">
                <div class="br-pagebody pd-x-20 pd-sm-x-30">
                    <div class="row row-sm">
                                    <?php $__currentLoopData = $paymentsByCurrency; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $payment): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <div class="col-lg-6">
                            <div class="card shadow-base card-body pd-25 bd-0">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <h6 class="card-title tx-uppercase tx-12">

                                            <?php echo app('translator')->get('admin.payments_module.payments_percentage' , ['currency' => $payment->currency_code]); ?>
                                        </h6>
                                        <p class="display-4 tx-normal tx-inverse mg-b-5 tx-lato">
                                            <?php echo e(round(
                                                ($payment?->paid * 100) /
                                                    ($payment?->expected > 0
                                                        ? $payment?->expected
                                                        : 1),
                                                2,
                                            )); ?>

                                            lorem
                                            %</p>
                                        <div class="progress mg-b-10">
                                            <div class="progress-bar bg-primary progress-bar-xs wd-75p" role="progressbar"
                                                aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div><!-- progress -->
                                        <p class="tx-12">
                                            <span><?php echo app('translator')->get('admin.payments_module.paid_from_total', [
                                                "paid" => "<span class='tx-primary'>" .  $payment?->paid  . "</span>",
                                                "total" => "<span class='tx-primary'>" .  $payment?->expected  . "</span>"
                                                ]); ?>
                                        </p>
                                        <p class="tx-11 lh-3 mg-b-0"><?php echo app('translator')->get('admin.payments_module.view_latest_payments'); ?><a
                                                href="<?php echo e(route('dashboard.admin.payments.index')); ?>" target="blank"><?php echo app('translator')->get('site.click_here'); ?></a>.</p>
                                    </div><!-- col-6 -->
                                    <div class="col-sm-6 mg-t-20 mg-sm-t-0 d-flex align-items-center justify-content-center">
                                        <span class="peity-donut"
                                            data-peity="{ &quot;fill&quot;: [&quot;#0866C6&quot;, &quot;#E9ECEF&quot;],  &quot;innerRadius&quot;: 60, &quot;radius&quot;: 90 }"
                                            style="display: none;">75/100</span><svg class="peity" height="180"
                                            width="180">
                                            <path
                                                d="M 90 0 A 90 90 0 1 1 0 90.00000000000001 L 30 90.00000000000001 A 60 60 0 1 0 90 30"
                                                data-value="75" fill="#0866C6"></path>
                                            <path
                                                d="M 0 90.00000000000001 A 90 90 0 0 1 89.99999999999999 0 L 89.99999999999999 30 A 60 60 0 0 0 30 90.00000000000001"
                                                data-value="25" fill="#E9ECEF"></path>
                                        </svg>
                                    </div><!-- col-6 -->
                                </div><!-- row -->
                            </div><!-- card -->
                        </div>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                    </div><!-- row -->

                    <div class="row no-gutters widget-1 shadow-base mg-t-20">
                        <?php $__currentLoopData = $paymentsByType; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $type => $payment): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <div class="col-sm-6 col-lg-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="card-title"><?php echo e($type); ?></h6>
                                    </div><!-- card-header -->
                                    <div class="card-body">
                                        <span id="spark1"><canvas
                                                style="display: inline-block; width: 89px; height: 30px; vertical-align: top;"
                                                width="89" height="30"></canvas></span>
                                        <span>
                                            <?php echo e($payment->sum('students')); ?>

                                            <small class="tx-12"><?php echo app('translator')->get('admin.students.students'); ?></small>

                                        </span>
                                    </div><!-- card-body -->
                                    <div class="card-footer">
                                        <?php $__currentLoopData = $payment; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $paymentType): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                        <div>
                                            <span class="tx-11"><?php echo e($paymentType->currency_code ?? ''); ?></span>
                                            <h6 class="tx-inverse"><?php echo e($paymentType->paid ?? 0); ?></h6>
                                            <span>
                                            <?php echo e($paymentType->students); ?>

                                            <small class="tx-12"><?php echo app('translator')->get('admin.students.students'); ?></small>

                                        </span>
                                        </div>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                                    </div><!-- card-footer -->
                                </div><!-- card -->
                            </div>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                        <!-- col-3 -->
                    </div><!-- row -->

                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    

                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                </div>
            </div>

        <!-- br-pagebody -->
        <!-- d-flex -->

        <!-- br-mainpanel -->
    </div>

<?php $__env->stopSection(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/modules_dashboards/payments-module-dashboard.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/ec6d32b8a612d4fab01fa6593a3c04e09e40a76b.php

      
-----------------------------------------------


      <div class="br-section-wrapper p-0">

            <form class="p-4" method="post" enctype="multipart/form-data"
                wire:submit="submit">
                <?php echo csrf_field(); ?>

                <h4><?php echo app('translator')->get('site.add_via_excel' , ['target' => __('admin.students.students')]); ?></h4>
                <div class="row my-md-1">

                    
                    <div class="form-group col-12 col-md-6 <?php $__errorArgs = ['department_id'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> has-danger <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <label><?php echo app('translator')->get('admin.departments.department'); ?> <span class="text-danger">*</span></label>
                        <select wire:model='selectedDepartmentId' style="width: 100%" class="form-control "
                            data-placeholder="Choose Browser">
                            <option ><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($department->id); ?>"
                                ><?php echo e($department->name); ?>

                            </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['selectedDepartmentId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    <div class="form-group col-12 col-md-6 <?php $__errorArgs = ['study_date_id'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> has-danger <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <label><?php echo app('translator')->get('admin.study_dates.study_date'); ?> <span class="text-danger">*</span></label>
                        <select wire:model='selectedStudyDateId' style="width: 100%" class="form-control "
                            data-placeholder="Choose Browser">
                            <option ><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($studyDate->id); ?>"
                                    ><?php echo e($studyDate->name); ?> <?php echo e($studyDate->isActive ? " (" . __('admin.study_dates.active') . ")" : ''); ?>

                            </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['selectedStudyDateId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
                    <div class="form-group col-12 col-md-6">
                        <label><?php echo app('translator')->get('site.file'); ?> <span class="text-danger">*</span></label>
                        <input wire:model="excelFile" type="file" name="excel" autofocus
                                           class="form-control <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> is-invalid <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                </div>

                <div class="d-flex justify-content-between">
                    <div class="form-group">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => []] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.create'); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>

                    <div class="form-group ">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.students.export_empty_excel_sample')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.students.export_empty_excel_sample')).'']); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.download_empty_sample'); ?>
                         <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>
                </div>


            </form><!-- end of form -->

        <?php echo $__env->make('livewire.dashboard.admin.student.includes._verify-excel-headings', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>

        </div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/student/import-students-via-excel.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/eb72ca08ffe0622cb6478395f248afea778bf548.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'edit-teachers-modal']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'edit-teachers-modal']); ?>
     <?php $__env->slot('title', null, []); ?> <?php echo app('translator')->get('site.add'); ?> <?php echo app('translator')->get('admin.teachers.teacher'); ?> <?php $__env->endSlot(); ?>
     <?php $__env->slot('body', null, []); ?> 
        <input wire:model.live.debounce.500ms='searchTeacher' type="text" class="form-control"
            placeholder="<?php echo app('translator')->get('site.search'); ?>">
<div class="table-responsive">
                            <table style="width: 650px" class="table new-table">
                                <thead>
                                    <tr class="">
                                        <td><?php echo app('translator')->get('admin.teachers.name'); ?></td>
                                        <td><?php echo app('translator')->get('admin.teachers.phone'); ?></td>
                                        <td><?php echo app('translator')->get('site.count'); ?> <?php echo app('translator')->get('admin.courses.courses'); ?></td>
                                        <td><?php echo app('translator')->get('site.add'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $teachers; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $teacher): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                    <tr>
                                        <td><?php echo e($teacher->name); ?></td>
                                        <td><?php echo e($teacher->phone); ?></td>
                                        <td><?php echo e($teacher->study_plan_dates_count); ?></td>
                                        <td><input
                                            wire:key="teacher-<?php echo e($teacher->id); ?>"
                                               wire:change.defer="toggleTeachersSelection(<?php echo e($teacher->id); ?>)"
                                            <?php echo e($selectedTeachers->first(fn($value) => $value == $teacher->id) ? 'checked' : ''); ?>

                                            type="checkbox"
                                                >
                                        </td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>

                            <div><?php echo e($teachers->links()); ?> </div>
                        </div>

         <?php $__env->endSlot(); ?>

         <?php $__env->slot('footer', null, []); ?> 

             <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'updateTeachers']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>

         <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/active-study-plan/includes/_edit-teachers-modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/e34c3a586bbccc65407efeb570d0f7dbc9b8a5a2.php

      
-----------------------------------------------


      <div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" disabled <?php echo e($studyDate->archived == 1 ? 'checked' : ''); ?>>
</div><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/study_dates/data_table/_archived.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/e1b7055476b50dd156144a1e7ecd6ad0fb86e293.php

      
-----------------------------------------------


      
<?php if(auth('admin')->user()->hasPermissionTo('read-study_dates')): ?>
        <li class="br-menu-item">
            <a href="<?php echo e(route('dashboard.admin.study_dates.index')); ?>"
                class=" br-menu-link menu-link <?php echo e(request()->is('*study_dates*') ? 'active' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-people tx-20"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('admin.study_dates.study_dates'); ?></span>
                <?php if(request()->is('*study_dates') ): ?>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary'></span>
                <?php endif; ?>
            </a>
        </li>
    <?php endif; ?>

    
<?php if(auth('admin')->user()->hasPermissionTo('read-active_study_plan')): ?>
<li class="br-menu-item ">
    <a href="<?php echo e(route('dashboard.admin.active_study_plan.index')); ?>"
        class="br-menu-link menu-link my-3 <?php echo e(request()->is('*active_study_plan*') && !request()->is('*active_study_plan/archive*')  ? 'active' : ''); ?>">
        <i class="menu-item-icon icon ion-ios-people tx-20"></i>
        <span class="menu-item-label"><?php echo app('translator')->get('admin.active_study_plans.active_study_plan'); ?></span>
        <span style="" class='rounded-circle <?php echo e(request()->is('*active_study_plan*') && !request()->is('*active_study_plan/archive*') ? 'bg-primary' : 'bg-white'); ?>'></span>
    </a>
</li>


<li class="br-menu-item ">
    <a href="<?php echo e(route('dashboard.admin.active_study_plan.archive.index')); ?>"
        class="br-menu-link menu-link my-3 <?php echo e(request()->is('*active_study_plan/archive*') ? 'active' : ''); ?>">
        <i class="menu-item-icon icon ion-ios-people tx-20"></i>
        <span class="menu-item-label"><?php echo app('translator')->get('site.archive'); ?></span>
        <span style="" class='rounded-circle <?php echo e(request()->is('*active_study_plan/archive*') ? 'bg-primary' : 'bg-white'); ?>'></span>
    </a>
</li>
<?php endif; ?>

<li class="br-menu-item ">
    <a href="<?php echo e(route('dashboard.admin.active_study_plan.index')); ?>"
        class="br-menu-link menu-link my-3  my-3 ">
        <i class="menu-item-icon icon ion-ios-people tx-20"></i>
        <span class="menu-item-label">جدول المحاضرات</span>
        <span style="" class='rounded-circle <?php echo e(request()->is('*active_study_plan') ? 'bg-primary' : 'bg-white'); ?>'></span>
    </a>
</li>

<li class="br-menu-item ">
    <a href="<?php echo e(route('dashboard.admin.active_study_plan.index')); ?>"
        class="br-menu-link menu-link my-3  my-3 ">
        <i class="menu-item-icon icon ion-ios-people tx-20"></i>
        <span class="menu-item-label">جدول الامتحانات</span>
        <span style="" class='rounded-circle <?php echo e(request()->is('*active_study_plan') ? 'bg-primary' : 'bg-white'); ?>'></span>
    </a>
</li>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/includes/sidebar_modules/study_plan_module.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/e00de60db1ad58720b4b2ad420a001daf5dcdab4.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.students.students'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('admin.students.students'); ?></h4>
        </div>
    </div>
    <!-- d-flex -->
    <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.student.show-student');

$__html = app('livewire')->mount($__name, $__params, 'S7EZsJo', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

</div>
<?php $__env->stopSection(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/students/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/ded41a89f6c4f3d2b1df2136206be40f7be89a8d.php

      
-----------------------------------------------


      <div x-data="{showFilter : false}"

         x-init="() => {
         const filterSidebar = document.getElementById('filter-sidebar')
        filterSidebar.classList.remove('d-none')
         }"
        >

        <div  class=" m-4">
            <div class="new-card">

                <div class="d-flex align-items-center justify-content-between ">
                    <div class="input-group mb-0 w-50 ">
                        <input type="text" class="form-control" placeholder="<?php echo app('translator')->get('site.search'); ?>" wire:model.live.debounce="search">
                    </div>

                </div>
            </div>

            <div class="br-pagebody">
                <!-- row -->
                <button class="btn btn-primary" @click="showFilter = !showFilter">
                    <i class="fa-solid fa-filter"></i>
                     <?php echo app('translator')->get('site.filter'); ?></button>

                <div class="row">
                    <!-- col-4 -->

                    <table class="table text-dark new-table">
                        <thead>
                            <tr>
                                <td><?php echo app('translator')->get('admin.students.university_id'); ?></td>
                                <td><?php echo app('translator')->get('admin.students.full_name'); ?></td>
                                <td><?php echo app('translator')->get('admin.study_years.study_year'); ?></td>
                                <td><?php echo app('translator')->get('admin.departments.department'); ?></td>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $students; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $student): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <tr>
                                <td><?php echo e($student->university_id); ?></td>
                                <td>

                                    <a class="text-dark" role="button"
                                        href="<?php echo e(route('dashboard.admin.students.archive.show',$student->id)); ?>">
                                        <?php echo e($student->full_name); ?>

                                    </a>
                                </td>
                                <td><?php echo e($student->filteredRegistration->studyYear->name ?? '-'); ?></td>
                                <td><?php echo e($student->department->name ?? '-'); ?></td>
                            </tr>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->

                        </tbody>
                    </table>
                    <!-- col-4 -->
                </div>

                <div class="p-0 mt-4">

                    <div class="card-footer tx-12 pd-y-15 bg-transparent">
                        <?php echo e($students->links()); ?>

                    </div>
                    <!-- br-section-wrapper -->
                </div>

            </div>

        </div>

        
            <div @mousedown.outside="(e) =>  {
                if(!(e.target instanceof HTMLButtonElement) ) {
                    showFilter = false
                }
                }" x-show="showFilter" wire:ignore.self id="filter-sidebar" class="br-subleft bg-primary d-none " >
            <h6 class="tx-uppercase tx-10 tx-spacing-1 mg-t-10 pd-x-10 tx-white-7"><?php echo app('translator')->get("site.filter"); ?></h6>

            <div class="mg-t-20 pd-x-10 mg-b-40">
                    <div class="form-group">
                    <select  wire:model.live='studyDateId' type="text" class="form-control form-control-inverse tx-13" placeholder="<?php echo app('translator')->get('admin.study_dates.study_date'); ?>">
                        <option value="">-- <?php echo app('translator')->get('admin.study_dates.study_date'); ?> --</option>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($studyDate->id); ?>"><?php echo e($studyDate->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>
                <div class="form-group">
                    <select  wire:model.live='departmentId' type="text" class="form-control form-control-inverse tx-13" placeholder="<?php echo app('translator')->get('admin.departments.department'); ?>">
                        <option value="">-- <?php echo app('translator')->get('admin.departments.department'); ?> --</option>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($department->id); ?>"><?php echo e($department->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>
                <!-- form-group -->
                <div class="form-group">
                    <select wire:model.live='studyYearId' type="text" class="form-control form-control-inverse tx-13" placeholder="<?php echo app('translator')->get('admin.study_years.study_year'); ?>">
                        <option value="">-- <?php echo app('translator')->get('admin.study_years.study_year'); ?> --</option>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyYears; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyYear): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($studyYear->id); ?>"><?php echo e($studyYear->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>
                <!-- form-group -->
                <button @click="showFilter = false" class="btn btn-info btn-block tx-uppercase tx-10 tx-spacing-2 tx-semibold"><?php echo app('translator')->get('site.filter'); ?></button>
            </div>

            <h6 class="tx-uppercase tx-10 tx-semibold tx-spacing-1 mg-t-10 pd-x-10 tx-white-7"><?php echo app('translator')->get('admin.students.filter_title'); ?></h6>

            <nav class="nav br-nav-mailbox flex-column">
                <a wire:click='$set("registrationFilter" , "all")'  role="button" class="nav-link <?php echo e($registrationFilter == 'all'  ? 'active' : ''); ?>"><i class="icon ion-refresh tx-16-force"></i> <?php echo app('translator')->get('admin.students.filter_all'); ?></a>
                <a wire:click='$set("registrationFilter" , 1)'  role="button" class="nav-link <?php echo e($registrationFilter == 1  ? 'active' : ''); ?>"><i class="icon ion-checkmark tx-16-force"></i> <?php echo app('translator')->get('admin.students.filter_registered'); ?></a>
                <a wire:click='$set("registrationFilter" , 2)'  role="button" class="nav-link <?php echo e($registrationFilter == 2  ? 'active' : ''); ?>"><i class="icon ion-close tx-16-force"></i> <?php echo app('translator')->get('admin.students.filter_unregistered'); ?></a>
                <a wire:click='$set("registrationFilter" , 4)'  role="button" class="nav-link <?php echo e($registrationFilter == 4  ? 'active' : ''); ?>"><i class="icon ion-ios-snowy tx-16-force"></i><?php echo app('translator')->get('admin.students.filter_freezed'); ?></a>
            </nav>
        </div>

        


    </div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/student/students-archive-index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/cf76f51f5f893cfc9093445ef4b43b4f5756d4ca.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>

<?php $__env->stopPush(); ?>

<?php $__env->startSection('content'); ?>

    <div class="br-mainpanel">

        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.students.students'); ?></span>
                <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
            </nav>
        </div>
        <!-- br-pageheader -->
        <div class="br-pagetitle">
            <i class="icon ion-ios-gear-outline"></i>
            <div>
                <h4><?php echo app('translator')->get('admin.payments.payments'); ?></h4>
            </div>
        </div>
        <!-- d-flex --> 

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.payment.show-payment');

$__html = app('livewire')->mount($__name, $__params, 'v2L4aCP', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

    </div>

<?php $__env->stopSection(); ?>

<?php $__env->startPush('scripts'); ?>


<?php $__env->stopPush(); ?>
<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/payments/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/cea497eb4e86bf11ade07b164a82d0a70730ec14.php

      
-----------------------------------------------


      <div  class="br-section-wrapper p-0">

    <div wire:loading>
        <?php echo $__env->make('components.spinner', ['show' => true], \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
    </div>
        <div class="br-section-wrapper p-0">
            <div class=" pd-x-20 pd-sm-x-30 pd-t-25 mg-b-20 mg-sm-b-30">
                <div class="row ms-4">
                    <div class="col-sm-2">
                        <div class="form-group">
                            <select  disabled href="#" class="form-control">
                                <option selected value="<?php echo e($studyPlanDate->department_id); ?>">
                                    <?php echo e($studyPlanDate->department->name); ?></option>
                            </select>
                            <small class="tx-info"><?php echo app('translator')->get('admin.departments.department'); ?></small>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group">
                            <select disabled href="#" class="form-control">
                                <option selected value="<?php echo e($studyPlanDate->semester_id); ?>">
                                    <?php echo e($studyPlanDate->semester->name); ?></option>
                            </select>
                            <small class="tx-info"><?php echo app('translator')->get('admin.semesters.semester'); ?></small>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group">
                            <select wire:model.live="selectedCourse"  class="form-control">
                                <!-- __BLOCK__ --><?php $__currentLoopData = $this->courses; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $course): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                    <option value="<?php echo e($course->id); ?>"><?php echo e($course->name_en); ?></option>
                                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                            </select>
                            <small class="tx-info"><?php echo app('translator')->get('admin.courses.course'); ?></small>
                        </div>
                    </div>

                    <div class="col-sm-2">
                        <button <?php if(!$allowEnterGrades): echo 'disabled'; endif; ?> wire:click="updateMarks" type="button" class="btn text-white  btn-teal btn-block"><i
                                class="fa fa-long-arrow-left"></i>
                            <?php echo app('translator')->get('site.update'); ?></button>
                    </div>
                </div>
            </div>



        <div class="br-pagebody">
            <div class="mb-3">
            <div class="mt-2 small">
                <span class="tx-dark"><?php echo app('translator')->get('admin.results.colors_guide'); ?></span>
                <span><i class="fa fa-square tx-teal"></i> <?php echo app('translator')->get('admin.results.success'); ?></span>
                <span><i class="fa fa-square tx-warning"></i> <?php echo app('translator')->get('admin.results.absence'); ?></span>
                <span><i class="fa fa-square tx-warning"></i> <?php echo app('translator')->get('admin.results.excused_absence'); ?></span>
                <span><i class="fa fa-square tx-danger"></i> <?php echo app('translator')->get('admin.results.cheat'); ?></span>
            </div>
        </div>

        
        


            <!-- __BLOCK__ --><?php if(!$allowEnterGrades): ?>
            <div class="alert alert-info  d-flex align-items-center justify-content-start">
    <i class="icon ion-ios-information alert-icon tx-32 mg-t-5 mg-xs-t-0"></i>
                <?php echo app('translator')->get('admin.results.not_allowed_to_enter_grades'); ?></div>
        <?php endif; ?> <!-- __ENDBLOCK__ -->

<form method="post" >
  <div class="new-card p-0 m-0">
    <div class="br-section-wrapper p-1 colored-table-wrapper">
      <table class="table table-bordered table-hover">
          <thead class="thead-colored thead-light">
              <tr>
                  <th>#</th>
                  <th class="text-dark"><?php echo app('translator')->get('admin.students.university_id'); ?></th>
                  <th class="text-dark"><?php echo app('translator')->get('admin.students.student_name'); ?></th>
                  <th class="text-dark"><?php echo app('translator')->get('admin.results.practical'); ?></th>
                  <th class="text-dark"><?php echo app('translator')->get('admin.results.theory'); ?></th>
                  <th class="text-dark"><?php echo app('translator')->get('site.total'); ?></th>
                <th class="text-dark"><?php echo app('translator')->get('admin.results.assessment'); ?></th>
                  <th class="text-dark"><?php echo app('translator')->get('site.status'); ?></th>
              </tr>
          </thead>
          <tbody >
              <!-- __BLOCK__ --><?php $__currentLoopData = $this->students; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $student): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                  <tr wire:key="<?php echo e($selectedCourse); ?>-<?php echo e($student->id); ?>" >
                            <td><?php echo e($loop->index + 1); ?></td>
                            <td><?php echo e($student->university_id); ?></td>
                            <td class="tx-dark"><?php echo e($student->name); ?></td>
                            <td><input
                                <?php if($marks[$selectedCourse][$student->id]['status'] !== $STATUS_ATTENDED || !$allowEnterGrades ): echo 'disabled'; endif; ?>
                                
                                
                                
                                wire:model.blur="temporaryMarks.<?php echo e($selectedCourse); ?>.<?php echo e($student->id); ?>.practical"
                                class="form-control bd-danger" type="number" placeholder="العملي">
                                <div class="text-danger"><?php $__errorArgs = ["temporaryMarks.$selectedCourse.$student->id.practical"];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> <?php echo e($message); ?> <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?></div>
                            </td>
                            <td><input
                                <?php if($marks[$selectedCourse][$student->id]['status'] !== $STATUS_ATTENDED || !$allowEnterGrades ): echo 'disabled'; endif; ?>
                                wire:model.blur="temporaryMarks.<?php echo e($selectedCourse); ?>.<?php echo e($student->id); ?>.theory" class="form-control bd-teal" type="number" placeholder="النظري">
                                <div class="text-danger"><?php $__errorArgs = ["temporaryMarks.$selectedCourse.$student->id.theory"];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> <?php echo e($message); ?> <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?></div>
                            </td>

                            <td><span class="tx-teal"><?php echo e($this->getFullDegree($student->id)); ?></span></td>
                            <td><span class="tx-teal"><?php echo e($this->getDegreeCode(
                                practical: $marks[$selectedCourse][$student->id]['practical'],
                                theory: $marks[$selectedCourse][$student->id]['theory'],
                            )); ?></span></td>
                            <td>
                                <select

                                    <?php if(!$allowEnterGrades ): echo 'disabled'; endif; ?>
                                    wire:model.live="marks.<?php echo e($selectedCourse); ?>.<?php echo e($student->id); ?>.status" class="form-control">
                                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->attendanceStatuses; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $key => $status): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                        <option value="<?php echo e($key); ?>"><?php echo app('translator')->get('admin.results.' . $status); ?></option>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                </select>
                            </td>
                        </tr>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
          </tbody>
      </table>
      <!-- br-section-wrapper -->
  </div>
</div>

</form>

</div>
</div>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/result/enter-first-round-result.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/c8dc7468cf97c26505dac9a2b117a4c85c826c8d.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'dismiss-student-modal']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'dismiss-student-modal']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('admin.students.dismiss'); ?>
         <?php $__env->endSlot(); ?>

         <?php $__env->slot('body', null, []); ?> 
               <div class="mb-3">
                   <div class="text-right">
                   <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.payments.amount'); ?></label>
                   </div>
                   <input wire:model='dismissData.amount'  type="text" class="form-control" >
                   <?php $__errorArgs = ['dismissData.amount'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                   <span class="text-danger"><?php echo e($message); ?></span>
                   <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
               </div>


               <div class="mb-3">
                        <div class="text-right">

                        <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.currency.currency'); ?> <span
                                class="text-danger">*</span></label>
                        </div>
                        <select wire:model='dismissData.currency_id' class="form-control" placeholder="">
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->currencies; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $currency): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($currency); ?>"><?php echo e($currency->name); ?> - <?php echo e($currency->code); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['dismissData.currency_id'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger"><?php echo e($message); ?></span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

               <div class="mb-3">
                   <div class="text-right">

                   <label class="input-label w-100 text-start"><?php echo app('translator')->get('site.file'); ?></label>
                   </div>
                   <input
                    wire:model='dismissData.file'
                        type="file" class="form-control"
                   placeholder="<?php echo app('translator')->get('site.search'); ?>">
                   <?php $__errorArgs = ['dismissData.file'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                   <span class="text-danger"><?php echo e($message); ?></span>
                   <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
               </div>

               <div class="mb-3">
                   <div class="text-right">

                   <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.payment_orders.description'); ?></label>
                   </div>
                   <textarea
                    wire:model='dismissData.description'
                       rows="6" type="text" class="form-control" placeholder=""></textarea>
                   <?php $__errorArgs = ['dismissData.description'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                   <span class="text-danger"><?php echo e($message); ?></span>
                   <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
               </div>

            <?php $__env->endSlot(); ?>

             <?php $__env->slot('footer', null, []); ?> 
                 <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'dismissStudent']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/student/includes/student-profile/_dismiss-student-modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/c7bb11b7c9f5ee33717201538f8f9b17da7c56e7.php

      
-----------------------------------------------


      

        
        <?php if(auth('admin')->user()->hasPermissionTo('read-results')): ?>

        <li class="br-menu-item ">
            <a href="<?php echo e(route('dashboard.admin.results.dashboard')); ?>"
                class="br-menu-link menu-link my-3 <?php echo e(request()->is('*results/dashboard') ? 'active' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-people tx-20"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('site.admin_panel'); ?></span>
                <?php if(request()->is('*results/dashboard') ): ?>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary'></span>
                <?php endif; ?>
            </a>
        </li>

        <li class="br-menu-item ">
            <a href="<?php echo e(route('dashboard.admin.marks.index')); ?>"
               class="br-menu-link menu-link my-3 <?php echo e(request()->is('*grades*') || request()->is('*results/create*') ? 'active' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-people tx-20"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('admin.results.enter_grades'); ?></span>
                <?php if(request()->is('*grades/*') || request()->is('*results/create*')  ): ?>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary'></span>
                <?php endif; ?>
            </a>
        </li>

        <li class="br-menu-item ">
            <a href="<?php echo e(route('dashboard.admin.results.index')); ?>"
                class="br-menu-link menu-link my-3  my-3 <?php echo e(request()->is('*results') ? 'active' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-people tx-20"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('admin.results.results'); ?></span>
                <?php if(request()->is('*results') ): ?>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary'></span>
                <?php endif; ?>
            </a>
        </li>

      
    </li>
      <?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/includes/sidebar_modules/results_module.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/c760945c83a42512a28c9ef2fdcaa2c02466a169.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>
<style>
    .selected {
        background: blue
    }
</style>
<?php $__env->stopPush(); ?>
<?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.study_plans.study_plan'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('admin.results.enter_grades'); ?></h4>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">

        <div class="br-section-wrapper p-0">

            <div class="row container-fluid">

                
                <div class="input-group col-4 col-md-5 my-2">
                    <select class="form-control report-search select2" id="departments">
                        <option value="" selected><?php echo app('translator')->get('site.choose'); ?> <?php echo app('translator')->get('admin.departments.departments'); ?></option>
                        <?php $__currentLoopData = $departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($department->id); ?>">
                            <?php echo e($department->name); ?>

                        </option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                    </select>
                </div>

                
                <div class="input-group col-4 col-md-5 my-2">
                    <select class="form-control report-search select2" id="semesters">
                        <option selected value=""><?php echo app('translator')->get('admin.semesters.semesters'); ?></option>
                        <?php $__currentLoopData = $semesters; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $semester): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($semester->id); ?>">
                            <?php echo e($semester->name); ?>

                        </option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                    </select>
                </div>
                <div class="input-group col-2 col-md-2 my-2 text-end">

                <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.marks.create_via_excel')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.marks.create_via_excel')).'']); ?><?php echo app('translator')->get('site.add_via_excel' , ['target' => __('admin.results.grades')]); ?> <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>

                </div>

            </div>

            <!-- d-flex -->
            <div class="table-responsive">
                <table id="data-table" class="table new-table new-datatable">
                    <thead>
                        <tr class="">
                            <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                            <td><?php echo app('translator')->get('admin.departments.department'); ?></td>
                            <td><?php echo app('translator')->get('admin.semesters.semester'); ?></td>
                            <td><?php echo app('translator')->get('admin.courses.courses_count'); ?></td>
                            <td><?php echo app('translator')->get('admin.courses.hours_count'); ?></td>
                            <td><?php echo app('translator')->get('site.action'); ?></td>
                        </tr>
                    </thead>
                    <tfoot>
                </table>
            </div>

            <!-- br-section-wrapper -->
        </div>

    </div><!-- br-mainpanel -->
    <!-- br-section-wrapper -->

</div><!-- br-mainpanel -->

</div>
<?php $__env->stopSection(); ?>

<?php $__env->startPush('scripts'); ?>

<script>
    let department;
        let semester;
        let dataTable;
            dataTable = $('#data-table').DataTable({
                dom: "tiplr",
                destroy: true,
                "language": {
                    "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
                },
                ajax: {
                    url: '<?php echo e(route('dashboard.admin.marks.data')); ?>',
                    data: function(d) {
                        d.department_id = department;
                        d.semester_id = semester;
                    }
                },
                columns: [{
                        data: 'DT_RowIndex',
                        name: 'DT_RowIndex',
                        searchable: false,
                        sortable: false
                    },
                    {
                        data: 'department_name',
                        name: 'department_name'
                    },
                    {
                        data: 'semester_name',
                        name: 'semester_name'
                    },
                    {
                        data: 'courses_count',
                        name: 'courses_count'
                    },
                    {
                        data: 'hours_count',
                        name: 'hours_count'
                    },
                    {
                        data: 'actions',
                        name: 'actions',
                        searchable: false,
                        sortable: false,
                        width: '20%'
                    },
                ],

                drawCallback: function(settings) {
                    $('.record__select').prop('checked', false);
                    $('#record__select-all').prop('checked', false);
                    $('#record-ids').val();
                    $('#bulk-delete').attr('disabled', true);
                }
            });

        $(document).on('change', '.report-search', function() {
            department = $('#departments').find(':selected').val() ?? false;
            semester = $('#semesters').find(':selected').val() ?? false;

            dataTable.ajax.reload();
        });
</script>
<?php $__env->stopPush(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/marks/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/c134430fd40f4894af69125bf44a23281bcc8413.php

      
-----------------------------------------------


      <div>
    <style>
        .active-tab-border {
            border-bottom: 3px solid #1CAF9A;
            color: #1CAF9A;
        }

        .tab-item {
            border-radius: 10px;
            color: #343a40;
            background-color: #fff;
        }

        .tab-item.active {
            background-color: #0A2F47;
            color: #fff;
        }
    </style>
<div style="margin-top:150px " class="mx-4">

    <div class="new-card" style="">
        <div class="row my-2">
            <div class="col-2">
                <div>
                    <img style="width: 150px ; height:150px !important" class="rounded-circle"
                        src="<?php echo e($student->image_path); ?>" alt="">
                </div>
            </div>
            <div class="col">
                <div class="row  text-dark">
                    <div class="col-5">
                        <div>
                            <p style="font-size:18px;white-space: nowrap; color:#9F143A" class=" font-weight-bold">
                                <?php echo e($student->full_name); ?>

                            </p>
                            <div class="mt-4">

                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.departments.department'); ?>
                                        : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->department->name); ?></p>
                                </div>
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.students.university_id'); ?>
                                        : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->university_id); ?></p>
                                </div>
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"><?php echo app('translator')->get('admin.registrations.status'); ?> : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->registration->formattedStatus); ?></p>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="col mr-5">
                        <div>
                            <div class="mt-5">
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.study_years.study_year'); ?>
                                        : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->studyYear->name); ?></p>
                                </div>
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.students.phone'); ?> : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->phone); ?></p>
                                </div>
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold">
                                        <?php echo app('translator')->get('admin.students.national_number'); ?> : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->national_number); ?></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-3">
                <div class="text-left ml-4">


                    <span  class="">
                        <a href="<?php echo e(route('dashboard.admin.students.edit' , $student->id)); ?>">
                            <img class="" src="<?php echo e(asset('admin_assets/edit-button.svg')); ?>" alt="">
                        </a>
                    </span>
                    <span class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                            <?php echo app('translator')->get('site.action'); ?>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end text-right">
                            <li wire:click='showFreezeModal' role="button">
                                <a class="dropdown-item"><i class="icon ion-ios-person tx-info"></i> <?php echo app('translator')->get('admin.students.freeze'); ?>
                                </a>
                            </li>
                            <li wire:click='showDismissModal'
                                
                                role="button"><a class="dropdown-item">
                                    <i class="icon ion-ios-person tx-info"></i><?php echo app('translator')->get('admin.students.dismiss'); ?>
                                </a>
                            </li>
                        </ul>
                    </span>
                </div>
            </div>
        </div>

        
        
        

    </div>

    <div class="mt-5 mb-3">
        <div class="d-flex justify-content-center">

            <div class="bg-white d-inline-block px-4 py-2 shadow-sm new-border ">

                
                
                
                
                
                <div class="d-inline-block px-4 py-2  mr-3 tab-item <?php echo e($activeTab == 'courses' ? 'active' : ''); ?>">
                    <p wire:click='setActiveTab("courses")' role="button" class="m-0 font-weight-bold">
                        <?php echo app('translator')->get('admin.courses.courses'); ?>
                    </p>
                </div>
                <div class=" d-inline-block px-4 py-2 mr-3 tab-item  <?php echo e($activeTab == 'results' ? 'active' : ''); ?>">
                    <p wire:click='setActiveTab("results")' role="button" class="m-0 font-weight-bold">
                        <?php echo app('translator')->get('admin.results.results'); ?>
                    </p>
                </div>
                <div class=" d-inline-block px-4 py-2 mr-3 tab-item  <?php echo e($activeTab == 'payments' ? 'active' : ''); ?>">
                    <p wire:click='setActiveTab("payments")' role="button" class="m-0 font-weight-bold">
                    <?php echo app('translator')->get('admin.payments.payments'); ?>

                    </p>
                </div>

            </div>
        </div>


        <div class="mt-5">

            <div class="text-start">
                <div class="col-8 mx-auto">
                    <!-- Courses tab -->
                    <!-- __BLOCK__ --><?php if($activeTab == 'courses'): ?>
                    <div>
                        <div class="d-flex justify-content-between mb-3">
                            <div class="w-25">

                                <select wire:model.live='semesterId' class="rounded-2 bg-white tx-16 w-100 py-1 text-primary"
                                    style="border: 1px solid #0A2F47" name="" id="" style="border-radius: 6px">
                                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->semesters; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $semester): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                    <option value="<?php echo e($semester->id); ?>"><?php echo e($semester->name); ?></option>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                </select>

                            </div>

                            
                        </div>
                        <div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('admin.courses.name_en'); ?></td>
                                        <td><?php echo app('translator')->get('admin.courses.code'); ?></td>
                                        <td><?php echo app('translator')->get('admin.courses.hours'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $this->courses; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $courseStudent): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                    <tr>
                                        <td><?php echo e($courseStudent->course->name_en); ?></td>
                                        <td><?php echo e($courseStudent->course->code); ?></td>
                                        <td><?php echo e($courseStudent->course->hours); ?></td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                    <!-- __BLOCK__ --><?php if($activeTab == 'results'): ?>
                    <div>
                        <div class="d-flex justify-content-between mb-3">
                            <div class="w-25">

                                <select wire:model.live='studyYearId'
                                    class="rounded-2 bg-white tx-16 w-100 py-1 text-primary"
                                    style="border: 1px solid #0A2F47; border-radius: 6px">
                                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyYears; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyYear): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                    <option value="<?php echo e($studyYear->id); ?>"><?php echo e($studyYear->name); ?></option>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                </select>

                            </div>
                            <!-- __BLOCK__ --><?php if(!is_null($degrees[0]['cgpa'] ?? null)): ?>

                            <p class="font-weight-bold text-secondary"><?php echo app('translator')->get('admin.results.cgpa'); ?>: <?php echo e($degrees[0]['cgpa']); ?></p>
                            <?php endif; ?> <!-- __ENDBLOCK__ -->

                        </div>
                        <div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('admin.courses.name_en'); ?></td>
                                        <td><?php echo app('translator')->get('admin.results.degree_code'); ?></td>
                                        <td><?php echo app('translator')->get('admin.results.is_pass'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- __BLOCK__ --><?php if($degrees?->count() > 0): ?>

                                    <!-- __BLOCK__ --><?php $__currentLoopData = $degrees; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $degree): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                    <tr>
                                        <td style="border-color:<?php echo e($degree['is_pass'] ? 'green' : 'red'); ?>"><?php echo e($degree['course_name']); ?></td>
                                        <td style="border-color:<?php echo e($degree['is_pass'] ? 'green' : 'red'); ?>"><?php echo e($degree['degree_code']); ?></td>
                                        <td style="border-color:<?php echo e($degree['is_pass'] ? 'green' : 'red'); ?>"><?php echo e($degree['is_pass'] ? __('admin.results.succeeded') :
                                            __('admin.results.failed')); ?></td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                    <?php else: ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                                </tbody>
                            </table>
                        </div>
                    </div>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                    
                    <!-- __BLOCK__ --><?php if($activeTab == 'payments'): ?>
                        <div>
                            <div class="d-flex justify-content-between mb-3">

                            <p class="font-weight-bold text-secondary">
                                <?php echo app('translator')->get('admin.payments.total_amount'); ?>: <?php echo e($student->registration->justTotal); ?> <?php echo e($student->currency?->code); ?></p>

                                <p class="font-weight-bold text-secondary">
                                <?php echo app('translator')->get('admin.payments.remaining'); ?>: <?php echo e($student->registration->reminder); ?> <?php echo e($student->currency?->code); ?></p>

                        </div>
                        <div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payment_orders.type'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payments.amount'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payments.status'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payment_orders.created_at'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $this->paymentOrders; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $paymentOrder): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                    <tr>
                                        <td><?php echo e($paymentOrder->id); ?></td>
                                        <td><?php echo e($paymentOrder->formattedStatus); ?></td>
                                        <td><?php echo e($paymentOrder->amount); ?> <?php echo e($paymentOrder->currency?->code); ?></td>
                                        <td>
                                            <i class="fa fa-<?php echo e($paymentOrder->archive ? 'check' : 'close'); ?>

                                                tx-<?php echo e($paymentOrder->archive ? 'success' : 'danger'); ?>"></i>
                                            </td>
                                        <td><?php echo e($paymentOrder->created_at); ?></td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>
                        </div>
                            <div class="mt-3">
                                <div class="d-flex justify-content-between align-items-end">
                                <h2 class="br-section-label"><?php echo app('translator')->get('admin.discounts.discounts'); ?></h2>

                                <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['title' => !$student->registration->canCreateDiscount ? __('admin.student_profile.disabled_create_discount_button_hint'): '' ,'disabled' => !$student->registration->canCreateDiscount,'wire:click' => 'showCreateDiscountModal']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['title' => \Illuminate\View\Compilers\BladeCompiler::sanitizeComponentAttribute(!$student->registration->canCreateDiscount ? __('admin.student_profile.disabled_create_discount_button_hint'): '' ),'disabled' => \Illuminate\View\Compilers\BladeCompiler::sanitizeComponentAttribute(!$student->registration->canCreateDiscount),'wire:click' => 'showCreateDiscountModal']); ?><?php echo app('translator')->get('site.create'); ?> <?php echo app('translator')->get('admin.discounts.discount'); ?> <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>


                                </div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                                        <td><?php echo app('translator')->get('admin.discounts.type'); ?></td>
                                        <td><?php echo app('translator')->get('admin.discounts.amount'); ?></td>
                                        <td><?php echo app('translator')->get('site.created_at'); ?></td>
                                        <td><?php echo app('translator')->get('site.action'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $student->discounts; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $discount): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                    <tr>
                                        <td><?php echo e($discount->id); ?></td>
                                        <td><?php echo e($discount->typeDiscount->type); ?></td>
                                        <td><?php echo e($discount->amount); ?> <?php echo e($discount->currency->code); ?></td>
                                        <td><?php echo e($discount->created_at); ?></td>
                                        <td>
                                            <i wire:click="confirmDeleteDiscount(<?php echo e($discount->id); ?>)" class="fa fa-trash text-danger cursor-pointer"></i>
                                        </td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>
                        </div>
                    </div>
                <?php endif; ?> <!-- __ENDBLOCK__ -->
                </div>

            </div>
        </div>
    </div>

    <!-- freeze modal -->
    <?php echo $__env->make('livewire.dashboard.student.includes.student-profile._freeze-student-modal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
    <!-- dismiss modal -->
        <?php echo $__env->make('livewire.dashboard.student.includes.student-profile._dismiss-student-modal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>

        <!-- create discount modal -->
            <?php echo $__env->make('livewire.dashboard.student.includes.student-profile._create-discount-modal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
</div>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/student/student-profile.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/bc53a4b818cfa4c3f90710c240be9f32e95e303f.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item"><?php echo app('translator')->get('site.add'); ?></span>
            <a href="<?php echo e(route('dashboard.admin.students.index')); ?>" class="breadcrumb-item active"
                href="#"><?php echo app('translator')->get('admin.students.students'); ?></a>
            <span class="breadcrumb-item"><?php echo app('translator')->get('site.home'); ?></span>
        </nav>
    </div>

    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('site.add'); ?> <?php echo app('translator')->get('admin.students.students'); ?></h4>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">
        
        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.student.import-students-via-excel');

$__html = app('livewire')->mount($__name, $__params, '9PIPZJp', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>
<div class="pt-4 new-card">
        <p><span class="tx-pink"><?php echo app('translator')->get('admin.create_student.important_notes_title'); ?> </span> <br><small>
                <?php echo app('translator')->get('admin.create_student.important_notes_subtitle'); ?>
                </small></p>
        <ul class=" small pr-2 ">
            <li>
                <?php echo app('translator')->get('admin.import_students.id_note' ,['href' => route('dashboard.admin.currencies.index')] ); ?>
                </li>
<li class="mt-1">
                <?php echo app('translator')->get('admin.import_students.optional_arabic_names_tip' ); ?>
                </li>
        </ul>
    </div>
    </div>

</div>
<?php $__env->stopSection(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/students/import-excel.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/b4c350d98362a61a5ab22fa5f7455b77b1185dfb.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'add-course-modal']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'add-course-modal']); ?>
     <?php $__env->slot('title', null, []); ?> <?php echo app('translator')->get('site.add'); ?> <?php echo app('translator')->get('admin.courses.course'); ?> <?php $__env->endSlot(); ?>
     <?php $__env->slot('body', null, []); ?> 
        <div  >
                        <input wire:model.live.debounce.500ms='search' type="text" class="form-control" placeholder="<?php echo app('translator')->get('site.search'); ?>">
                        <div class="mt-3 text-start">
                        <label class=""><?php echo app('translator')->get('admin.semesters.semester'); ?>: </label>
                        <select wire:model.live="addCoursesSemesterId"  style="width: 100%" class="form-control "
                            data-placeholder="Choose Course">
                            <option value=""><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->semesters; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $semester): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($semester->id); ?>"
                                    ><?php echo e($semester->name); ?>

                            </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        </div>
                            <div class="table-responsive  overflow-hidden">
                            <table style="width: 650px" class="table new-table ">
                                <thead>
                                    <tr class="">
                                        <td><?php echo app('translator')->get('admin.semesters.semester'); ?></td>
                                        <td><?php echo app('translator')->get('admin.courses.name'); ?></td>
                                        <td><?php echo app('translator')->get('admin.courses.code'); ?></td>
                                        <td>
                                            <input
                                            wire:model.live="selectAll"
                                                type="checkbox" / >
                                            </td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $courses; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyPlan): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                        <tr wire:key="course-<?php echo e($studyPlan->id); ?>-<?php echo e($studyPlan->course->code); ?>">
                                        <td><?php echo e($studyPlan->semester->name); ?></td>
                                        <td><?php echo e($studyPlan->course->name_en); ?></td>
                                        <td><?php echo e($studyPlan->course->code); ?></td>
                                        <td>
                                            <input
                                                   wire:model="selectedCourses.<?php echo e($studyPlan->course_id); ?>"
                                    <?php echo e($selectedCourses->contains($studyPlan->id) ? 'checked' : ''); ?>

                                                type="checkbox" / >
                                        </td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>
                            <div>
                                <?php echo e($courses->links()); ?>

                            </div>
                        </div>
                        </div>


         <?php $__env->endSlot(); ?>

         <?php $__env->slot('footer', null, []); ?> 
             <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'addCourses']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>

         <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/active-study-plan/includes/_add-course-modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/b090e08157b70d6e292061e13b1f00a52a03d513.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>

<link href="<?php echo e(asset('dashboard/SpinKit/spinkit.css')); ?>" rel="stylesheet">


<?php $__env->stopPush(); ?>


<div style="
position:absolute;
    left:0;
    right:0;
    top:0;
    bottom:0;
    z-index: 100
    ">
    <div class="mg-l-auto mg-r-auto pos-absolute wd-100p z-index-200" style="height: 4000px">
        <div
            style="position:fixed"
            class="d-flex bg-black-3 pos-relative pd-t-200 wd-100p ht-100p">
          <div
              class="sk-cube-grid">
            <div class="sk-cube sk-cube1"></div>
            <div class="sk-cube sk-cube2"></div>
            <div class="sk-cube sk-cube3"></div>
            <div class="sk-cube sk-cube4"></div>
            <div class="sk-cube sk-cube5"></div>
            <div class="sk-cube sk-cube6"></div>
            <div class="sk-cube sk-cube7"></div>
            <div class="sk-cube sk-cube8"></div>
            <div class="sk-cube sk-cube9"></div>
          </div>
        </div><!-- d-flex -->
      </div>

</div>


<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/components/spinner.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/ab8904a1e566322efbf3286165ddf57f863ba4fd.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>

<?php $__env->stopPush(); ?>

<?php $__env->startSection('content'); ?>

    <div class="br-mainpanel">

        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.students.students'); ?></span>
                <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
            </nav>
        </div>
        <!-- br-pageheader -->
        <div class="br-pagetitle">
            <i class="icon ion-ios-gear-outline"></i>
            <div>
                <h4><?php echo app('translator')->get('admin.payment_orders.payment_orders'); ?></h4>
            </div>
        </div>
        <!-- d-flex -->

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.payment-order.show-payment-order');

$__html = app('livewire')->mount($__name, $__params, 'P0vJ7x6', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

    </div>

    <!-- pay payment order modal -->
<?php $__env->stopSection(); ?>

<?php $__env->startPush('scripts'); ?>

    
    

    
    
    

    
    
    
    
    

    
    


    

    

    
    

    
    
    
    

    

    
    


    

    
    

    
    
    
    
    
    

    

    
    
    

    

    

    

    
    

    
    
    

    
    
    
    
    

    

    

    
    

    

    
    

    
    
    

    
    
    
    
    
    
    
    
    

    

    
    

    

    
    

    
    
    
    

    
    
    
    
    
    

    

    
    
    
    

    
    

    
    

    

    
    

<?php $__env->stopPush(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/payment_orders/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/a686c4eaf0688310be2c8e0f3295109d4982d7b6.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>
<style>
    .selected {
        background: blue
    }
</style>
<?php $__env->stopPush(); ?>
<?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.active_study_plans.active_study_plan'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('site.target_archive' , ['target' => __('admin.active_study_plans.active_study_plan')]); ?></h4>
            <p class="mg-b-0"><?php echo app('translator')->get('pages.active_study_plans_archive.subtitle'); ?></p>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.active-study-plan.active-study-plans-archive');

$__html = app('livewire')->mount($__name, $__params, 'UtrlWC1', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>


        <!-- d-flex -->


    </div>
        <!-- br-section-wrapper -->

    </div><!-- br-mainpanel -->

</div>
<?php $__env->stopSection(); ?>

<?php $__env->startPush('scripts'); ?>
<script>
    $(document).on('click', '#create-result', function() {

            let url = '<?php echo e(route('dashboard.admin.active_study_plan.show', ':id')); ?>'

            let dataTable2

             dataTable2 = $('#modal-data-table2').DataTable({
                dom: "tiplr",
                processing: true,
                select: true,
                destroy: true,
                "language": {
                    "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
                },
                ajax: {
                    url: url.replace(':id', $(this).attr('data-id')),
                },
                columns: [{
                        data: 'id',
                        name: 'DT_RowIndex',
                        searchable: false,
                        sortable: false
                    },
                    {
                        data: 'name_en',
                        name: 'name_en',
                        width: '100px',
                    },
                    {
                        data: 'code',
                        name: 'code',
                        width: '20%',
                    },
                    {
                        data: 'hours',
                        name: 'hours',
                        width: '20%',

                    },
                ],
                drawCallback: function(settings) {
                    $('.record__select').prop('checked', false);
                    $('#record__select-all').prop('checked', false);
                    $('#record-ids').val();
                    $('#bulk-delete').attr('disabled', true);
                }
            });

            $('#data-table-search2').keyup(function() {
                dataTable2.search(this.value).draw();
            })

            // $('#confirm-add-result').click(function() {
            //     let element = dataTable2.rows({
            //         selected: true
            //     }).data()[0]
            //     if (element) {
            //         // let url = '<?php echo e(route('dashboard.admin.results.create', ['id=:id&study_plan_id=:study_plan_id'])); ?>'
            //         console.log($(this).parent().parent().attr('data-id'));
            //         return
            //         let url = `dashboard/admin/results/create?id=${element.course_id}&study_plan_id=${$(this).attr('data-id')}`
            //         // url = url.replace(':study_plan_id',$(this).attr('data-id'))
            //         // url = url.replace(',',$(this).attr('data-id'))

            //         // console.log(url.replace(':id', element.course_id));
            //         console.log(url);
            //         // window.location.href = url.replace(':id', element.course_id);

            //     }
            // })


        })
</script>
<script>
    let department;
        let semester;
        let dataTable;
            dataTable = $('#data-table').DataTable({
                dom: "tiplr",
                // paging: false,
                // serverSide: true,
                // processing: true,
                // destroy: true,
                // retrieve: true,
                destroy: true,
                "language": {
                    "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
                },
                ajax: {
                    url: '<?php echo e(route('dashboard.admin.active_study_plan.data')); ?>',
                    data: function(d) {
                        d.department_id = department;
                        d.semester_id = semester;
                    }
                },
                columns: [{
                        data: 'DT_RowIndex',
                        name: 'DT_RowIndex',
                        searchable: false,
                        sortable: false
                    },
                    {
                        data: 'department_name',
                        name: 'department_name'
                    },
                    {
                        data: 'semester_name',
                        name: 'semester_name'
                    },
                    {
                        data: 'courses_count',
                        name: 'courses_count'
                    },
                    {
                        data: 'hours_count',
                        name: 'hours_count'
                    },
                    // {
                    //     data: 'courses_count',
                    //     name: 'courses_count'
                    // },
                    // {
                    //     data: 'registrations_count',
                    //     name: 'registrations_count'
                    // },
                    {
                        data: 'actions',
                        name: 'actions',
                        searchable: false,
                        sortable: false,
                        width: '20%'
                    },
                ],

                drawCallback: function(settings) {
                    $('.record__select').prop('checked', false);
                    $('#record__select-all').prop('checked', false);
                    $('#record-ids').val();
                    $('#bulk-delete').attr('disabled', true);
                }
            });

        $(document).on('change', '.report-search', function() {
            department = $('#departments').find(':selected').val() ?? false;
            semester = $('#semesters').find(':selected').val() ?? false;

            dataTable.ajax.reload();
        });

        $(document).on('click', '#add', function() {

            let url = '<?php echo e(route('dashboard.admin.active_study_plan.show', ':id')); ?>'

            let coursesDataTable
             coursesDataTable = $('#modal-data-table').DataTable({
                dom: "tiplr",
                destroy: true,
                processing: true,
                "language": {
                    "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
                },
                ajax: {
                    url: url.replace(':id', $(this).attr('data-id')),
                },
                columns: [{
                        data: 'id',
                        name: 'DT_RowIndex',
                        searchable: false,
                        sortable: false
                    },
                    {
                        data: 'name_en',
                        name: 'name_en',
                        width: '100px',
                    },
                    {
                        data: 'code',
                        name: 'code',
                        width: '20%',
                    },
                    {
                        data: 'hours',
                        name: 'hours',
                        width: '20%',

                    },
                ],
                drawCallback: function(settings) {
                    $('.record__select').prop('checked', false);
                    $('#record__select-all').prop('checked', false);
                    $('#record-ids').val();
                    $('#bulk-delete').attr('disabled', true);
                }
            });

            $('#data-table-search').keyup(function() {
                coursesDataTable.search(this.value).draw();
            })


        })
</script>
<?php $__env->stopPush(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/active_study_plan/archive/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/9e5130ca1e1e4d0d4c54f76457314a352ba57772.php

      
-----------------------------------------------


      <div class="br-header" style="height: 100px">

        <div class="br-header-left">
            <div class="navicon-left hidden-md-down"><a id="btnLeftMenu" href=""><i
                        class="icon ion-navicon-round"></i></a></div>
            <div class="navicon-left hidden-lg-up"><a id="btnLeftMenuMobile" href=""><i
                        class="icon ion-navicon-round"></i></a></div>






            <!-- input-group -->
        </div>
        <!-- br-header-left -->
        <div class="br-header-right">
            <nav class="nav">
                <!-- dropdown language -->
                <div class="dropdown">
                    <a class="nav-link nav-link-profile cursor-pointer"  data-bs-toggle="dropdown">
                        <i class="fa fa-language tx-24"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-header wd-250">
                        <ul class="list-unstyled user-profile-nav">

                            <?php $__currentLoopData = LaravelLocalization::getSupportedLocales(); $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $localeCode=>$properties): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <li>
                                    <a rel="alternate" hreflang="<?php echo e($localeCode); ?>"
                                       href="<?php echo e(LaravelLocalization::getLocalizedURL($localeCode, null, [], true)); ?>">
                                        <?php echo e($properties['native']); ?>

                                    </a>
                                </li>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>

                        </ul>
                    </div>
                    <!-- dropdown-menu -->
                </div>
                <!-- dropdown -->
                 <!-- profile -->
                <div class="dropdown cursor-pointer">
                    <a class="nav-link nav-link-profile" data-bs-toggle="dropdown">
                        
                        <span class="logged-name hidden-md-down"><?php echo e(auth('admin')->user()->name); ?></span>
                        <img src="<?php echo e(auth('admin')->user()->image_path); ?>" class="wd-32 rounded-circle" alt="">
                        <span class="square-10 bg-success"></span>
                    </a>

                    <div class="dropdown-menu dropdown-menu-header wd-250">
                        <div class="tx-center">

                            <a href=""><img src="<?php echo e(auth('admin')->user()->image_path); ?>"
                                    class="wd-80 rounded-circle" alt=""></a>
                            <h6 class="logged-fullname"><?php echo e(auth('admin')->user()->name); ?></h6>
                            <p><?php echo e(auth('admin')->user()->email); ?></p>
                            <p><?php echo app('translator')->get('admin.roles.roles'); ?> | <?php echo e(auth('admin')->user()->roles->first()?->name); ?></p>
                        </div>









                        <ul class="list-unstyled user-profile-nav">
                            <li><a href="<?php echo e(route('dashboard.admin.settings.profile.index')); ?>">
                                    <i class="icon ion-ios-person"></i>
                                    <?php echo app('translator')->get('admin.settings.my_profile'); ?>
                                </a>
                            </li>


                            <li>
                                <a href="<?php echo e(route('dashboard.admin.logout')); ?>">
                                    <i class="icon ion-power"></i> <?php echo app('translator')->get('site.logout'); ?>
                                </a>
                            </li>
                        </ul>
                    </div>
                    <!-- dropdown-menu -->
                </div>
                <!-- dropdown -->
            </nav>
            <!-- navicon-right -->
        </div>
        <!-- br-header-right -->
    </div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/includes/_header.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/9ca8980faa6e8f20f698ab754e180922dbc45c7b.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>
    <div class="br-mainpanel">
        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item active">المكتب الأكاديمي</span>
            </nav>
        </div>
        <!-- d-flex -->
        <div class="ms-4 pd-x-20 pd-sm-x-30 pd-t-25 mg-b-20 mg-sm-b-30">
            <div class="new-card">

            <div class="row result-info">
                <div class="col-sm-3">
                    <div class="form-group">
                        <select id="studyDate" class="form-control select2">
                            <?php $__currentLoopData = $studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($studyDate->id); ?>"><?php echo e($studyDate->name); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                        </select>
                        <small class="tx-info"><?php echo app('translator')->get('admin.study_dates.study_date'); ?></small>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <select id="department" class="form-control select2">
                            <?php $__currentLoopData = $departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($department->id); ?>"><?php echo e($department->name); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                        </select>
                        <small class="tx-info"><?php echo app('translator')->get('admin.departments.department'); ?></small>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group ">
                        <select id="studyYear" class="form-control select2">
                            <?php $__currentLoopData = $studyYears; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyYear): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($studyYear->id); ?>"><?php echo e($studyYear->name); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                        </select>
                        <small class="tx-info"><?php echo app('translator')->get('admin.study_years.study_year'); ?></small>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group ">
                        <select id="rounds" class="form-control select2">
                            <?php $__currentLoopData = $rounds; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $key => $round): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($key); ?>"><?php echo e($round); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                        </select>
                        <small class="tx-info"><?php echo app('translator')->get('admin.results.phase'); ?></small>
                    </div>
                </div>
                <div class=" text-left">
                    <button id="show" type="button" class="btn btn-primary"><i class="fa fa-pie-chart"></i>
                        <?php echo app('translator')->get('admin.results.show_statistics'); ?></button>
                </div>
            </div>
        </div>

        </div>
        
        <!-- d-flex -->
        <div class="br-pagebody">
            <!-- ! Title section -->
            <!-- TODO: Title of result -->
            <div class="mb-3">

                
                
                
                

            </div>
            <!-- ! End of section -->

            <!-- ! Statistics of result -->
            <!-- TODO: Statistics -->
            <div>
                <div class="row mg-b-10">
                    <div id="general-statistics" class="row mg-b-10">
                    </div>
                </div>

                <!-- ! Chart of subjects -->
                <div class="row mg-b-10">
                    <div id="top-degrees" class="col-md-6">

                    </div>

                    <div class="col-md-6  pd-r-0">
                        <div class="widget-2">
                            <div class="card shadow-base">
                                <div class="card-header">
                                    <h6 class="card-title tx-13 pd-t-10 pd-b-10">مؤشرات المعدل الفصلي التراكمي</h6>
                                </div>
                                <div class="card-body">
                                    <div class="pd-t-0 pd-b-0 pd-x-0"><canvas id="cgpa-chart"></canvas></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ! End of chart of subjects -->

                <div class="row mg-b-10">
                    <div class="col-md-12">
                        <div class="widget-2">
                            <div class="card shadow-base">
                                <div class="card-header">
                                    <h6 class="card-title tx-13 pd-t-10 pd-b-10">نسب النجاح للمواد في السنة الحالية</h6>
                                </div>
                                <div>
                                    <div class="bd-b pd-t-30 pd-b-20 pd-x-20">
                                        <canvas id="courses-chart"></canvas>
                                        
                                        <div class="tx-info pd-10 small tx-center">المخطط يوضح جميع نسب النجاح للمواد في
                                            السنة الحالية </div>

                                    </div>

                                </div>
                                <div class="table-responsive">
                                    
                                    <div id="courses-statistics" class="row mg-b-10">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mg-b-10">
                </div>
                <!-- ! End of statistics of result -->






            </div>
        <?php $__env->stopSection(); ?>

        <?php $__env->startPush('scripts'); ?>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script>
                $(document).ready(function() {
                    fetchData()
                })

                function fetchData() {
                    $.ajax({
                        url: "<?php echo e(route('dashboard.admin.results.statistics')); ?>",
                        method: 'GET',
                        data: {
                            department_id: $('#department').val(),
                            study_date_id: $('#studyDate').val(),
                            study_year_id: $('#studyYear').val(),
                            is_first_exam: $('#rounds').val(),
                        },
                        success(response) {
                            $('#general-statistics').html(response.generalStatistics)
                            $('#courses-statistics').html(response.coursesStatistics)
                        }
                    })

                    $.ajax({
                        url: "<?php echo e(route('dashboard.admin.results.dashboard.data')); ?>",
                        method: 'GET',
                        data: {
                            department_id: $('#department').val(),
                            study_date_id: $('#studyDate').val(),
                            study_year_id: $('#studyYear').val(),
                            is_first_exam: $('#rounds').val(),
                        },
                        success(response) {
                            $('#top-degrees').html(response.topCgpaStudents)
                            handleCoursesChart(response.coursesChart)
                            handleCgpaChart(response.cgpaStatistics)

                        }
                    })
                }
                $(document).on('click', '#show', function() {
                    fetchData()
                })

                function handleCoursesChart(data) {

                    let chartStatus = Chart.getChart("courses-chart"); // <canvas> id

                    if (chartStatus != undefined) {
                        chartStatus.destroy();
                    }

                    const ctx = document.getElementById('courses-chart');
                    let chart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: data.map(course => course.name),
                            datasets: [{
                                label: 'الإحصائيات بالمقررات الدراسية',
                                data: data.map(course => Math.round(course.succeed_percentage)),
                            }]
                        },
                        options: {
                            barThickness: 50,
                            rotation: 100,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        },
                    })
                }

                function handleCgpaChart(data) {

                    let chartStatus = Chart.getChart("cgpa-chart"); // <canvas> id

                    if (chartStatus != undefined) {
                        chartStatus.destroy();
                    }

                    const ctx = document.getElementById('cgpa-chart');

                    let chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: data.map(course => course.name),
                            datasets: [{
                                label: 'نسب النجاح للمواد في السنة الحالية',
                                data: data.map(course => Math.round(course.cgpa_avg)),
                            }]
                        },
                    })
                }
            </script>
        <?php $__env->stopPush(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/results/dashboard.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/97c393c877c01003770abddcf3c6ce4add740e24.php

      
-----------------------------------------------


      <div>
    <!-- __BLOCK__ --><?php if($paginator->hasPages()): ?>
        <nav>
            <ul class="pagination">
                
                <!-- __BLOCK__ --><?php if($paginator->onFirstPage()): ?>
                    <li class="page-item disabled" aria-disabled="true" aria-label="<?php echo app('translator')->get('pagination.previous'); ?>">
                        <span class="page-link" aria-hidden="true">&lsaquo;</span>
                    </li>
                <?php else: ?>
                    <li class="page-item">
                        <button type="button" dusk="previousPage<?php echo e($paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName()); ?>" class="page-link" wire:click="previousPage('<?php echo e($paginator->getPageName()); ?>')" wire:loading.attr="disabled" rel="prev" aria-label="<?php echo app('translator')->get('pagination.previous'); ?>">&lsaquo;</button>
                    </li>
                <?php endif; ?> <!-- __ENDBLOCK__ -->

                
                <!-- __BLOCK__ --><?php $__currentLoopData = $elements; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $element): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                    
                    <!-- __BLOCK__ --><?php if(is_string($element)): ?>
                        <li class="page-item disabled" aria-disabled="true"><span class="page-link"><?php echo e($element); ?></span></li>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                    
                    <!-- __BLOCK__ --><?php if(is_array($element)): ?>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $element; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $page => $url): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <!-- __BLOCK__ --><?php if($page == $paginator->currentPage()): ?>
                                <li class="page-item active" wire:key="paginator-<?php echo e($paginator->getPageName()); ?>-page-<?php echo e($page); ?>" aria-current="page"><span class="page-link"><?php echo e($page); ?></span></li>
                            <?php else: ?>
                                <li class="page-item" wire:key="paginator-<?php echo e($paginator->getPageName()); ?>-page-<?php echo e($page); ?>"><button type="button" class="page-link" wire:click="gotoPage(<?php echo e($page); ?>, '<?php echo e($paginator->getPageName()); ?>')"><?php echo e($page); ?></button></li>
                            <?php endif; ?> <!-- __ENDBLOCK__ -->
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    <?php endif; ?> <!-- __ENDBLOCK__ -->
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->

                
                <!-- __BLOCK__ --><?php if($paginator->hasMorePages()): ?>
                    <li class="page-item">
                        <button type="button" dusk="nextPage<?php echo e($paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName()); ?>" class="page-link" wire:click="nextPage('<?php echo e($paginator->getPageName()); ?>')" wire:loading.attr="disabled" rel="next" aria-label="<?php echo app('translator')->get('pagination.next'); ?>">&rsaquo;</button>
                    </li>
                <?php else: ?>
                    <li class="page-item disabled" aria-disabled="true" aria-label="<?php echo app('translator')->get('pagination.next'); ?>">
                        <span class="page-link" aria-hidden="true">&rsaquo;</span>
                    </li>
                <?php endif; ?> <!-- __ENDBLOCK__ -->
            </ul>
        </nav>
    <?php endif; ?> <!-- __ENDBLOCK__ -->
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/vendor/livewire/bootstrap.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/93e60a741ea4cfbdde9b7a8dca22dc7a35ce3a5a.php

      
-----------------------------------------------


      <?php $__env->startSection('title', __('Forbidden')); ?>
<?php $__env->startSection('code', '403'); ?>
<?php $__env->startSection('message', __($exception->getMessage() ?: 'Forbidden')); ?>

<?php echo $__env->make('errors::minimal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/errors/403.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/929446d3e74f70b184f7b1d9135d3ecd43e1dd0b.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'create-discount-modal']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'create-discount-modal']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('site.create'); ?>
        <?php echo app('translator')->get('admin.discounts.discount'); ?>
         <?php $__env->endSlot(); ?>

         <?php $__env->slot('body', null, []); ?> 
               <div class="mb-3">

                   <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.discounts.amount'); ?></label>
                   <div class="input-group">

                       <input wire:model='discountData.amount' type="number" name="amount"
                       class="form-control amount" placeholder="000,000.00"
                                                   max="<?php echo e($student->registration->reminder); ?>"
                                                   >
                                                   <span class="input-group-addon tx-size-sm lh-2">
                                                       <?php echo e($student->currency?->code); ?></span>
                   </div>
                   <?php $__errorArgs = ['discountData.amount'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                   <span class="text-danger"><?php echo e($message); ?></span>
                   <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
               </div>


               <div class="mb-3">


                   <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.discounts.type'); ?> <span
                          class="text-danger">*</span></label>

                        <select wire:model='discountData.type_discount_id' class="form-control" placeholder="">
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->typeDiscounts; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $type): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($type->id); ?>"><?php echo e($type->type); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['discountData.type_discount_id'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger"><?php echo e($message); ?></span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

               <div class="mb-3">


                   <label class="input-label w-100 text-start"><?php echo app('translator')->get('site.file'); ?></label>

                   <input
                    wire:model='discountData.file'
                        type="file" class="form-control"
                   placeholder="<?php echo app('translator')->get('site.search'); ?>">
                   <?php $__errorArgs = ['discountData.file'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                   <span class="text-danger"><?php echo e($message); ?></span>
                   <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
               </div>

               <div class="mb-3">


                   <label class="input-label w-100 text-start"><?php echo app('translator')->get('admin.payment_orders.description'); ?></label>

                   <textarea
                    wire:model='discountData.description'
                       rows="6" type="text" class="form-control" placeholder=""></textarea>
                   <?php $__errorArgs = ['discountData.description'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                   <span class="text-danger"><?php echo e($message); ?></span>
                   <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
               </div>

            <?php $__env->endSlot(); ?>

             <?php $__env->slot('footer', null, []); ?> 
                 <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'createDiscount']); ?> <?php echo app('translator')->get('site.create'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/student/includes/student-profile/_create-discount-modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/8bc42c21c156d40245f8ec5d6c93a6b2b6f850e8.php

      
-----------------------------------------------


      <?php $__env->startPush('style'); ?>
<style>
    .text-gray {
        color: #868ba1
    }
</style>
<?php $__env->stopPush(); ?>
<?php $__env->startSection('content'); ?>
<div class="br-mainpanel">
    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item"><?php echo app('translator')->get('site.add'); ?></span>
            <a href="<?php echo e(route('dashboard.admin.results.index')); ?>" class="breadcrumb-item active"
                href="#"><?php echo app('translator')->get('admin.results.results'); ?></a>
            <span class="breadcrumb-item"><?php echo app('translator')->get('site.home'); ?></span>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('site.add'); ?> <?php echo app('translator')->get('admin.results.results'); ?></h4>
        </div>
    </div>

    <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.result.show-students-result');

$__html = app('livewire')->mount($__name, $__params, 'h9b4yH8', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>
    <!-- d-flex -->
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    


    

    


    
    
    
    
    
    
    

    
    

    
    
    
    
    

    
    

    
    
    

    
    

    

    
    
    

    
    
    
    
    
    
    
    
    

    
    

    

    

    
    <?php $__env->stopSection(); ?>
    <?php $__env->startPush('scripts'); ?>
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    

    

    

    
    
    
    <?php $__env->stopPush(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/results/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/89b3eb30158ad18970e1edd29379102437d187f5.php

      
-----------------------------------------------


      <?php if(session('success')): ?>

    <script>
        new Noty({
            type: 'success',
            layout: 'topRight',
            text: "<?php echo e(session('success')); ?>",
            timeout: 2000,
            killer: true
        }).show();
    </script>

<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/partials/_session.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/893c1db72ed77c4649d8ddb2fdcbad8ee4e672e6.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>
<style>
    .selected {
        background: blue
    }
</style>
<?php $__env->stopPush(); ?>
<?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.study_plans.study_plan'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('site.target_archive' , ['target' => __('admin.active_study_plans.active_study_plan')]); ?></h4>
<p class="mg-b-0"><?php echo app('translator')->get('pages.import_active_study_plans.subtitle'); ?></p>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.active_study_plan.import-active-study-plans');

$__html = app('livewire')->mount($__name, $__params, '5PSTZ0l', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

<div class="pt-4 new-card">
        <p><span class="tx-pink"><?php echo app('translator')->get('admin.create_student.important_notes_title'); ?> </span> <br><small>
                <?php echo app('translator')->get('admin.create_student.important_notes_subtitle'); ?>
                </small></p>
        <ul class=" small pr-2 ">

<li class="mt-1">
                <?php echo app('translator')->get('admin.import_active_study_plans.archived_study_dates_note'); ?>

                </li>
<li class="mt-1">
    <?php echo app('translator')->get('admin.import_active_study_plans.add_active_study_plans_for_current_study_date' , ['href' => route("dashboard.admin.active_study_plan.index")]); ?>

                </li>
        </ul>
    </div>
    </div><!-- br-mainpanel -->
    <!-- br-section-wrapper -->

</div><!-- br-mainpanel -->

</div>
<?php $__env->stopSection(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/active_study_plan/archive/add_via_excel.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/8790f8bee4caec3121e491add12064dc9f0511e6.php

      
-----------------------------------------------


      

<!-- Modal -->
<div
    wire:ignore.self
    class="modal fade " id="<?php echo e($target); ?>" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg"
    style=""
      >
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5 text-dark" id="<?php echo e($target); ?>-label"><?php echo e($title); ?></h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body"><?php echo e($body); ?></div>
      <div class="modal-footer">
          <?php echo e($footer); ?>

        <button <?php echo e($dismissButton->attributes); ?> type="button" class="btn btn-secondary" data-bs-dismiss="modal"><?php echo e($dismissButton); ?></button>
        <button <?php echo e($confirmButton->attributes); ?> type="button" class="btn btn-primary"><?php echo e($confirmButton); ?></button>
      </div>
    </div>
  </div>
</div>

<?php $__env->startPush('scripts'); ?>

<script>
    Livewire.on('modalClosed', (target = null) => {
        if(target) {
            $(`#${target}`).modal('hide')
        }
        else {
            $(`#<?php echo e($target); ?>`).modal('hide')
        }
    })

    Livewire.on('modalOpened', (target = null) => {
        if(target) {
            $(`#${target}`).modal('show')
        }
        else {
            $(`#<?php echo e($target); ?>`).modal('show')
        }
    })
</script>
<?php $__env->stopPush(); ?>

<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/components/modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/8785c1a47d1271cae3fc58415966a53fff265812.php

      
-----------------------------------------------


      <script>
    $(document).ready(function () {
        //delete
        // $(document).on('click', '.delete', function (e) {
        //     e.preventDefault();

        //     var that = $(this)

        //     e.preventDefault();

        //     var n = new Noty({
        //         text: "<?php echo app('translator')->get('site.confirm_delete'); ?>",
        //         type: "alert",
        //         killer: true,
        //         buttons: [
        //             Noty.button("<?php echo app('translator')->get('site.yes'); ?>", 'btn btn-success mr-2', function () {
        //                 let url = that.closest('form').attr('action');
        //                 let data = new FormData(that.closest('form').get(0));

        //                 let loadingText = '<i class="fa fa-circle-o-notch fa-spin"></i>';
        //                 let originalText = that.html();
        //                 that.html(loadingText);

        //                 n.close();

        //                 $.ajax({
        //                     url: url,
        //                     data: data,
        //                     method: 'post',
        //                     processData: false,
        //                     contentType: false,
        //                     cache: false,
        //                     success: function (response) {

        //                         $("#record__select-all").prop("checked", false);

        //                         $('.datatable').DataTable().ajax.reload();

        //                         // new Noty({
        //                         //     layout: 'topRight',
        //                         //     type: 'alert',
        //                         //     text: response,
        //                         //     killer: true,
        //                         //     timeout: 2000,
        //                         // }).show();

        //                         that.html(originalText);
        //                     },

        //                 });//end of ajax call

        //             }),

        //             Noty.button("<?php echo app('translator')->get('site.no'); ?>", 'btn btn-danger mr-2', function () {
        //                 n.close();
        //             })
        //         ]
        //     });

        //     n.show();

        // });//end of delete

        $(document).on('change', '.record__select', function () {
            $(this).closest('tr').toggleClass('bg-hover');
        });

        $(document).on('change', '.record__select-all', function () {
            $(this).closest('body').toggleClass('bg-hover');
        });
/*
        $(document).on('change keyup', '.input-number',function (e) {
            var val = this.value;
            if (val > 0) {
                e.currentTarget.value = parseFloat(e.currentTarget.value).toFixed(2);
            } else {
                e.currentTarget.value = parseFloat(0).toFixed(2);
            }//end of if

        });
*/
    });//end of document ready
</script>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/includes/_scripts.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/85a15a8fffb5faf886fa2217d77f3a532ca4cd41.php

      
-----------------------------------------------


      <?php $__env->startSection('title', __('site.home')); ?>

<?php $__env->startSection('content'); ?>
    <style>
        .bg-blue {
            background: green;
            background-image: linear-gradient(to right, #3478C7, #398CED);
        }
    </style>
    <div class="br-mainpanel">
        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item active"><?php echo app('translator')->get('site.home'); ?></span>
                
                
            </nav>
        </div>
        <!-- br-pageheader -->
        <div class="br-pagetitle">
            <i class="icon ion-ios-gear-outline"></i>
            <div>
                <h4><?php echo app('translator')->get('site.admin_panel'); ?></h4>
            </div>
        </div>

        
            <div class="mx-4">
                <div class="br-pagebody pd-x-20 pd-sm-x-30">
                    <div class="row no-gutters widget-1">
                        <?php $__currentLoopData = $studentsByAdmissionType; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $key => $admission): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <div class="col-sm-6 col-lg-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="card-title"><?php echo e($admission->type); ?></h6>
                                    </div><!-- card-header -->
                                    <div class="card-body">
                                        <span id="spark1"></span>
                                        <span><?php echo e($admission->total_students); ?> <small class="tx-12"><?php echo app('translator')->get('admin.students.students'); ?></small></span>
                                    </div><!-- card-body -->
                                    <div class="card-footer">
                                        <div>
                                            <span class="tx-11"><?php echo app('translator')->get('admin.reports.registered_students'); ?></span>
                                            <h6 class="tx-inverse"><?php echo e($admission->registered_students); ?></h6>
                                        </div>
                                        <div>
                                            <span class="tx-11"><?php echo app('translator')->get('admin.reports.unregistered_students'); ?></span>
                                            <h6 class="tx-inverse"><?php echo e($admission->unregistered_students); ?></h6>
                                        </div>
                                        <div>
                                            <span class="tx-11"><?php echo app('translator')->get('site.percentage'); ?></span>
                                            <h6 class="tx-danger"><?php echo e(round($admission->registration_percentage, 2)); ?></h6>
                                        </div>
                                    </div><!-- card-footer -->
                                </div><!-- card -->
                            </div><!-- col-3 -->
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                    </div><!-- row -->

                    <div class="row row-sm mg-t-20">
                        <div class="col-lg-6">
                            <div class="card shadow-base card-body pd-25 bd-0">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <h6 class="card-title tx-uppercase tx-12"><?php echo app('translator')->get('admin.students_module.registration_summery'); ?></h6>
                                        <p class="display-4 tx-normal tx-inverse mg-b-5 tx-lato">
                                            <?php echo e(round($students->registration_percentage, 2)); ?>%</p>
                                        <div class="progress mg-b-10">
                                            <div class="progress-bar bg-primary progress-bar-xs wd-75p" role="progressbar"
                                                aria-valuenow="7" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div><!-- progress -->
                                        <p class="tx-12"><?php echo app('translator')->get('admin.students_module.registration_summery_description'); ?></p>
                                        <p class="tx-11 lh-3 mg-b-0"><?php echo app('translator')->get('admin.students_module.navigate_to_registered_students'); ?>  <a
                                                href="<?php echo e(route('dashboard.admin.report.registered.students')); ?>" ><?php echo app('translator')->get('site.click_here'); ?></a>.</p>
                                    </div><!-- col-6 -->
                                    <div class="col-sm-6 mg-t-20 mg-sm-t-0 d-flex align-items-center justify-content-center">
                                        <span class="peity-donut"
                                            data-peity='{ "fill": ["#0866C6", "#E9ECEF"],  "innerRadius": 60, "radius": 90 }'>75/100</span>
                                    </div><!-- col-6 -->
                                </div><!-- row -->
                            </div><!-- card -->
                        </div><!-- col-6 -->

                            <!-- NOTE: ON PROGRESS -->
                        <div class="col-lg-6 mg-t-30 mg-lg-t-0">
                            <div class="card shadow-base card-body pd-25 bd-0">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <h6 class="card-title tx-uppercase tx-12 tx-inverse"><?php echo app('translator')->get('admin.students_module.registration_summery'); ?></h6>
                                        <p class="display-4 tx-normal tx-lato tx-inverse mg-b-5">
                                            <?php echo e($students->registered_students); ?><small class="tx-11 tx-gray-600"><?php echo app('translator')->get('admin.students.student'); ?></small>
                                        </p>
                                        <div class="progress mg-b-10">
                                            <div class="progress-bar bg-info progress-bar-xs wd-46p" role="progressbar"
                                                aria-valuenow="45" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div><!-- progress -->
                                        <p class="tx-12">
                                            <?php echo app('translator')->get('admin.students_module.registrations_count_summery' , [
                                            'registered' =>  $students->registered_students ,
                                            'total' =>  $students->total_students ,
                                            ]); ?>
                                        </p>
                                        <p class="tx-11 lh-3 mg-b-0"><?php echo app('translator')->get('admin.students_module.registrations_count_summery_description'); ?></p>
                                    </div><!-- col-6 -->
                                    <div class="col-sm-6 mg-t-20 mg-sm-t-0 d-flex align-items-end justify-content-center">
                                        <span class="peity-bar"
                                            data-peity='{ "fill": ["#17A2B8","#6F42C1","#20C997","#0866C6"], "height": 150, "width": 250 }'>8,6,5,9,8,4,9,3,5,9</span>
                                    </div><!-- col-6 -->
                                </div><!-- row -->
                            </div><!-- card -->
                        </div><!-- col-6 -->
                    </div><!-- row -->

                    <div class="row row-sm mg-t-20">
                        <div class="col-sm-6 col-lg-4">
                            <div class="card shadow-base bd-0">
                                <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                                    <h6 class="card-title tx-uppercase tx-12 mg-b-0"><?php echo app('translator')->get('admin.students_module.freezed_students'); ?></h6>
                                    <span class="tx-12 tx-uppercase">20-27, 2021</span>
                                </div><!-- card-header -->
                                <div class="card-body d-xs-flex justify-content-between align-items-center">
                                    <h4 class="mg-b-0 tx-inverse tx-lato tx-bold"><?php echo e($students->freezed_students); ?></h4>
                                    <p class="mg-b-0 tx-13"><span class="tx-success"><i class="fa fa-arrow-up"></i>
                                            34.32%</span> <?php echo app('translator')->get('admin.students_module.for_previous_year'); ?></p>
                                </div><!-- card-body -->
                            </div><!-- card -->
                        </div><!-- col-4 -->
                        <div class="col-sm-6 col-lg-4 mg-t-20 mg-sm-t-0">
                            <div class="card shadow-base bd-0">
                                <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                                    <h6 class="card-title tx-uppercase tx-12 mg-b-0"><?php echo app('translator')->get('admin.students_module.dismissed_students'); ?></h6>
                                    <span class="tx-12 tx-uppercase">20-27, 2021</span>
                                </div><!-- card-header -->
                                <div class="card-body d-xs-flex justify-content-between align-items-center">
                                    <h4 class="mg-b-0 tx-inverse tx-lato tx-bold"><?php echo e($students->dismissed_students); ?></h4>
                                    <p class="mg-b-0 tx-13"><span class="tx-danger"><i class="fa fa-arrow-down"></i>
                                            0.92%</span> <?php echo app('translator')->get('admin.students_module.for_previous_year'); ?></p>
                                </div><!-- card-body -->
                            </div><!-- card -->
                        </div><!-- col-4 -->
                        <div class="col-sm-6 col-lg-4 mg-t-20 mg-lg-t-0">
                            <div class="card shadow-base bd-0">
                                <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                                    <h6 class="card-title tx-uppercase tx-12 mg-b-0"><?php echo app('translator')->get('admin.students_module.dropped_out_students'); ?></h6>
                                    <span class="tx-12 tx-uppercase">20-27, 2021</span>
                                </div><!-- card-header -->
                                <div class="card-body d-xs-flex justify-content-between align-items-center">
                                    <h4 class="mg-b-0 tx-inverse tx-lato tx-bold"><?php echo e($students->dropped_out_students); ?></h4>
                                    <p class="mg-b-0 tx-13"><span class="tx-success"><i class="fa fa-arrow-up"></i>
                                            16.34%</span> <?php echo app('translator')->get('admin.students_module.for_previous_year'); ?></p>
                                </div><!-- card-body -->
                            </div><!-- card -->
                        </div><!-- col-4 -->
                    </div><!-- row -->
                    <div class="row row-sm mg-t-20">
                        <div class="col-lg-12 mg-t-20 mg-lg-t-0">
                            <div class="card shadow-base bd-0 ">
                                <div class="card-header pd-20 bg-transparent d-flex justify-content-between align-items-center">
                                    <h6 class="card-title tx-uppercase tx-12 mg-b-0"><?php echo app('translator')->get('admin.students_module.admission_summery'); ?></h6>
                                    <span class="tx-12 tx-uppercase">20-27, 2021</span>
                                </div><!-- card-header -->
                                <table class="table table-responsive mg-b-0 tx-12">
                                    <thead>
                                        <tr class="tx-10">
                                            <th class="pd-y-5 tx-normal text-dark" style=""><?php echo app('translator')->get('admin.departments.department'); ?></th>
                                            <th class="pd-y-5 tx-normal text-dark" style=""><?php echo app('translator')->get('site.percentage'); ?></th>
                                            <th class="pd-y-5 tx-normal text-dark" style=""><?php echo app('translator')->get('admin.reports.registered_students'); ?></th>
                                            <th class="pd-y-5 tx-normal text-dark" style=""><?php echo app('translator')->get('site.total'); ?></th>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <?php $__currentLoopData = $departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                            <tr>
                                                <td>
                                                    <a href=""
                                                        class="tx-inverse tx-14 d-block"><?php echo e($department->name); ?></a>
                                                    <span class="tx-11 d-block"><span
                                                            class="square-8 bg-danger mg-r-5 rounded-circle"></span>
                                                        <?php echo app('translator')->get('admin.students_module.no_remaining_seats'); ?>
                                                        </span>
                                                </td>
                                                <td class="valign-middle"><span class="tx-success"><i
                                                            class="icon ion-android-arrow-up mg-r-5"></i><?php echo e(round(($department->registered_students * 100) /
                                                                ($department->total_students > 0 ? $department->total_students : 1),2)); ?>%</span>
                                                </td>
                                                <td class="valign-middle tx-center"><?php echo e($department->registered_students); ?></td>
                                                <td class="valign-middle tx-center"><?php echo e($department->total_students); ?></td>
                                            </tr>
                                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>

                                    </tbody>
                                </table>
                                <div class="card-footer tx-12 pd-y-15 bg-transparent">
                                    
                                    
                                </div><!-- card-footer -->
                            </div><!-- card -->
                        </div><!-- col-6 -->
                    </div><!-- row -->
                </div>
            </div>

        <!-- br-pagebody -->
        <!-- d-flex -->

        <!-- br-mainpanel -->
    </div>

<?php $__env->stopSection(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/modules_dashboards/students-module-dashboard.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/856b10799d2588dc815b67df990148aef6335101.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>

<div class="br-mainpanel">
    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item"><?php echo app('translator')->get('site.add'); ?></span>
            <a href="<?php echo e(route('dashboard.admin.results.index')); ?>" class="breadcrumb-item active"
                href="#"><?php echo app('translator')->get('admin.results.results'); ?></a>
            <span class="breadcrumb-item"><?php echo app('translator')->get('site.home'); ?></span>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('admin.results.enter_grades'); ?></h4>
        </div>
    </div>
    <!-- d-flex -->

    <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.result.enter-first-round-result' , ['studyPlanDateId' => $studyPlanDateId]);

$__html = app('livewire')->mount($__name, $__params, 'GteoAbT', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    

    

    
    
    
    
    
    
    
    
    

    
    





    

    

</div>
<?php $__env->stopSection(); ?>








































































































































































































































































































<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/results/first-round/create-students-result.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/83c70161d933502a722d824fad47edd18a84b6cb.php

      
-----------------------------------------------


      <!DOCTYPE html>

<html lang="<?php echo e(app()->getLocale()); ?>"
      dir="<?php echo e(LaravelLocalization::getCurrentLocaleDirection()); ?>"
      class="<?php echo e(LaravelLocalization::getCurrentLocaleDirection()); ?>">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Meta -->
    <meta name="description" content="النظام الاكاديمي">
    <meta name="author" content="WeDo Tecnology">

    <!-- CSRF Token -->
    <meta name="csrf-token" content="<?php echo e(csrf_token()); ?>">

    <title><?php echo app('translator')->get('site.name'); ?> | <?php echo app('translator')->get('auth.login_page'); ?></title>

    <!-- vendor css -->
    <link href="<?php echo e(asset('dashboard/font-awesome/css/font-awesome.css')); ?>" rel="stylesheet">
    <link href="<?php echo e(asset('dashboard/Ionicons/css/ionicons.css')); ?>" rel="stylesheet">

    <!-- Bracket CSS -->
    <link rel="stylesheet" href="<?php echo e(asset('css/bracket.css')); ?>">

    <!-- Custom Style CSS -->
    <link rel="stylesheet" href="<?php echo e(asset('css/style.css')); ?>">

    <style>
        button {
            cursor:pointer;
        }
    </style>
</head>

<body>

    <div class="row no-gutters flex-row-reverse ht-100v">
        <div class="col-md-6 bg-gray-200 d-flex align-items-center justify-content-center">
            <div class="login-wrapper wd-250 wd-xl-350 mg-y-30">
                <img  class="mb-5" style=""   src="<?php echo e(asset('img/lastLogo.png')); ?>" alt="">
                <div></div>
                <h4 class="tx-inverse tx-center"><?php echo app('translator')->get('auth.login_page'); ?></h4>
                <p class="tx-center mg-b-60"><?php echo app('translator')->get('auth.login_page_welcome'); ?></p>

                <form action="<?php echo e(route('dashboard.admin.login.store')); ?>" method="post">

                	<?php echo csrf_field(); ?>
                	<?php echo method_field('post'); ?>

	                <div class="form-group">
	                    <input type="text" name="login" class="form-control <?php echo e(session('login') ? 'is-invalid': ''); ?>"
                        placeholder="<?php echo app('translator')->get('site.email_or_username'); ?>" required value="<?php echo e(old('login', 'admin')); ?>">
	                    <?php if(session('login')): ?>
                            <p class="text-danger"><?php echo e(session('login')); ?></p>
                        <?php endif; ?>
	                </div>
	                <!-- form-group -->
	                <div class="form-group">
	                    <input type="password" name="password" class="form-control" placeholder="<?php echo app('translator')->get('site.password'); ?>" required
	                    value="<?php echo e(old('password', '123123123')); ?>">
	                    
	                </div>
	                <!-- form-group -->
	                <button class="btn btn-primary btn-block"><?php echo app('translator')->get('site.login'); ?></button>

                </form>

                <div class="mg-t-60 tx-center"><?php echo app('translator')->get('auth.are_you_student'); ?>
                    <a href="<?php echo e(route('elearning.student.login.get')); ?>" class="tx-info"><?php echo app('translator')->get('admin.elearning.elearning'); ?></a></div>
            </div>
            <!-- login-wrapper -->
        </div>
        <!-- col -->

        <div class="col-md-6 bg-br-primary d-flex align-items-center justify-content-center">

            <div class="wd-250 wd-xl-450 mg-y-30">
                
                        <img class="mb-5" src="<?php echo e(asset('img/royal.png')); ?>" alt="">


                
                <div class="signin-logo tx-28 tx-bold tx-white"><span class="tx-normal">[</span>كلية رويال<span class="tx-normal">]</span></div>
                <div class="tx-white mg-b-60">البوابة الإلكترونية للنظام الأكاديمي</div>

                <h5 class="tx-white">لماذا التحول الرقمي؟</h5>
                <p class="tx-white-6 text-justify">يُعرف التحول الرقمي بأنه عملية انتقال القطاعات الحكومية أو الشركات إلى نموذج عمل يعتمد على التقنيات الرقمية في ابتكار المنتجات والخدمات، وتوفير قنوات جديدة من العائدات التي تزيد من قيمة منتجاتها.</p>
                <p class="tx-white-6 mg-b-60 text-justify">التحول الرقمي له فوائد عديدة ومتنوعة ليس فقط للعملاء والجمهور ولكن للمؤسسات الحكومية والشركات أيضاً منها أنه يوفر التكلفة والجهد بشكل كبير ويُحسن الكفاءة التشغيليلة وينظمها.</p>
                <a href="https://alfarrabi.com" class="btn btn-outline-light bd bd-white bd-2 tx-white pd-x-25 tx-uppercase tx-12 tx-spacing-2 tx-medium">قم بزيارة موقع الكلية</a>
            </div>
            <!-- wd-500 -->
        </div>
    </div>
    <!-- row -->

    <script src="<?php echo e(asset('dashboard/jquery/jquery.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/popper/popper.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/bootstrap/js/bootstrap.js')); ?>"></script>

</body>

</html>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/auth/login.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/82c5428f008a3f8cfc7f169bba3e1e9e8a3f95b2.php

      
-----------------------------------------------


      <!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title><?php echo $__env->yieldContent('title'); ?></title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com">
        <link href="https://fonts.googleapis.com/css2?family=Nunito&display=swap" rel="stylesheet">

        <style>
            /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}a{background-color:transparent}code{font-family:monospace,monospace;font-size:1em}[hidden]{display:none}html{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}*,:after,:before{box-sizing:border-box;border:0 solid #e2e8f0}a{color:inherit;text-decoration:inherit}code{font-family:Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}svg,video{display:block;vertical-align:middle}video{max-width:100%;height:auto}.bg-white{--bg-opacity:1;background-color:#fff;background-color:rgba(255,255,255,var(--bg-opacity))}.bg-gray-100{--bg-opacity:1;background-color:#f7fafc;background-color:rgba(247,250,252,var(--bg-opacity))}.border-gray-200{--border-opacity:1;border-color:#edf2f7;border-color:rgba(237,242,247,var(--border-opacity))}.border-gray-400{--border-opacity:1;border-color:#cbd5e0;border-color:rgba(203,213,224,var(--border-opacity))}.border-t{border-top-width:1px}.border-r{border-right-width:1px}.flex{display:flex}.grid{display:grid}.hidden{display:none}.items-center{align-items:center}.justify-center{justify-content:center}.font-semibold{font-weight:600}.h-5{height:1.25rem}.h-8{height:2rem}.h-16{height:4rem}.text-sm{font-size:.875rem}.text-lg{font-size:1.125rem}.leading-7{line-height:1.75rem}.mx-auto{margin-left:auto;margin-right:auto}.ml-1{margin-left:.25rem}.mt-2{margin-top:.5rem}.mr-2{margin-right:.5rem}.ml-2{margin-left:.5rem}.mt-4{margin-top:1rem}.ml-4{margin-left:1rem}.mt-8{margin-top:2rem}.ml-12{margin-left:3rem}.-mt-px{margin-top:-1px}.max-w-xl{max-width:36rem}.max-w-6xl{max-width:72rem}.min-h-screen{min-height:100vh}.overflow-hidden{overflow:hidden}.p-6{padding:1.5rem}.py-4{padding-top:1rem;padding-bottom:1rem}.px-4{padding-left:1rem;padding-right:1rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.pt-8{padding-top:2rem}.fixed{position:fixed}.relative{position:relative}.top-0{top:0}.right-0{right:0}.shadow{box-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px 0 rgba(0,0,0,.06)}.text-center{text-align:center}.text-gray-200{--text-opacity:1;color:#edf2f7;color:rgba(237,242,247,var(--text-opacity))}.text-gray-300{--text-opacity:1;color:#e2e8f0;color:rgba(226,232,240,var(--text-opacity))}.text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}.text-gray-500{--text-opacity:1;color:#a0aec0;color:rgba(160,174,192,var(--text-opacity))}.text-gray-600{--text-opacity:1;color:#718096;color:rgba(113,128,150,var(--text-opacity))}.text-gray-700{--text-opacity:1;color:#4a5568;color:rgba(74,85,104,var(--text-opacity))}.text-gray-900{--text-opacity:1;color:#1a202c;color:rgba(26,32,44,var(--text-opacity))}.uppercase{text-transform:uppercase}.underline{text-decoration:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.tracking-wider{letter-spacing:.05em}.w-5{width:1.25rem}.w-8{width:2rem}.w-auto{width:auto}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}@-webkit-keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@-webkit-keyframes ping{0%{transform:scale(1);opacity:1}75%,to{transform:scale(2);opacity:0}}@keyframes ping{0%{transform:scale(1);opacity:1}75%,to{transform:scale(2);opacity:0}}@-webkit-keyframes pulse{0%,to{opacity:1}50%{opacity:.5}}@keyframes pulse{0%,to{opacity:1}50%{opacity:.5}}@-webkit-keyframes bounce{0%,to{transform:translateY(-25%);-webkit-animation-timing-function:cubic-bezier(.8,0,1,1);animation-timing-function:cubic-bezier(.8,0,1,1)}50%{transform:translateY(0);-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1)}}@keyframes bounce{0%,to{transform:translateY(-25%);-webkit-animation-timing-function:cubic-bezier(.8,0,1,1);animation-timing-function:cubic-bezier(.8,0,1,1)}50%{transform:translateY(0);-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1)}}@media (min-width:640px){.sm\:rounded-lg{border-radius:.5rem}.sm\:block{display:block}.sm\:items-center{align-items:center}.sm\:justify-start{justify-content:flex-start}.sm\:justify-between{justify-content:space-between}.sm\:h-20{height:5rem}.sm\:ml-0{margin-left:0}.sm\:px-6{padding-left:1.5rem;padding-right:1.5rem}.sm\:pt-0{padding-top:0}.sm\:text-left{text-align:left}.sm\:text-right{text-align:right}}@media (min-width:768px){.md\:border-t-0{border-top-width:0}.md\:border-l{border-left-width:1px}.md\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}}@media (min-width:1024px){.lg\:px-8{padding-left:2rem;padding-right:2rem}}@media (prefers-color-scheme:dark){.dark\:bg-gray-800{--bg-opacity:1;background-color:#2d3748;background-color:rgba(45,55,72,var(--bg-opacity))}.dark\:bg-gray-900{--bg-opacity:1;background-color:#1a202c;background-color:rgba(26,32,44,var(--bg-opacity))}.dark\:border-gray-700{--border-opacity:1;border-color:#4a5568;border-color:rgba(74,85,104,var(--border-opacity))}.dark\:text-white{--text-opacity:1;color:#fff;color:rgba(255,255,255,var(--text-opacity))}.dark\:text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}}
        </style>

        <style>
            body {
                font-family: 'Nunito', sans-serif;
            }
        </style>
    </head>
    <body class="antialiased">
        <div class="relative flex items-top justify-center min-h-screen bg-gray-100 dark:bg-gray-900 sm:items-center sm:pt-0">
            <div class="max-w-xl mx-auto sm:px-6 lg:px-8">
                <div class="flex items-center pt-8 sm:justify-start sm:pt-0">
                    <div class="px-4 text-lg text-gray-500 border-r border-gray-400 tracking-wider">
                        <?php echo $__env->yieldContent('code'); ?>
                    </div>

                    <div class="ml-4 text-lg text-gray-500 uppercase tracking-wider">
                        <?php echo $__env->yieldContent('message'); ?>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/errors/minimal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/7f2b20507d9fb9cefbe74a9ca33d9122da07d0da.php

      
-----------------------------------------------


      <div>
    <style>
        .active-tab-border {
            border-bottom: 3px solid #1CAF9A;
            color: #1CAF9A;
        }

        .tab-item {
            border-radius: 10px;
            color: #343a40;
            background-color: #fff;
        }

        .tab-item.active {
            background-color: #0A2F47;
            color: #fff;
        }
    </style>
<div style="margin-top:150px " class="mx-4">

    <div class="new-card" style="">
        <div class="row my-2">
            <div class="col-2">
                <div>
                    <img style="width: 150px ; height:150px !important" class="rounded-circle"
                        src="<?php echo e($student->image_path); ?>" alt="">
                </div>
            </div>
            <div class="col">
                <div class="row  text-dark">
                    <div class="col-5">
                        <div>
                            <p style="font-size:18px;white-space: nowrap; color:#9F143A" class=" font-weight-bold">
                                <?php echo e($student->full_name); ?>

                            </p>
                            <div class="mt-4">

                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.departments.department'); ?>
                                        : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->department->name); ?></p>
                                </div>
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.students.university_id'); ?>
                                        : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->university_id); ?></p>
                                </div>
                                
                                
                                
                                
                                
                            </div>

                        </div>
                    </div>
                    <div class="col mr-5">
                        <div>
                            <div class="mt-5">
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.study_years.study_year'); ?>
                                        : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($this->filteredRegistration->studyYear->name); ?></p>
                                </div>
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold"> <?php echo app('translator')->get('admin.students.phone'); ?> : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->phone); ?></p>
                                </div>
                                <div class="row">
                                    <p style="font-size: 14px;white-space: nowrap;"
                                        class="text-dark col-6 font-weight-bold">
                                        <?php echo app('translator')->get('admin.students.national_number'); ?> : </p>
                                    <p style="white-space: nowrap" class="col"><?php echo e($student->national_number); ?></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
<div class="collapse" id="collapseExample">
  <div class="card card-body">
    Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.
  </div>
</div>
            <div class="col-3">
                <div class="text-left ml-4">
<div >
                                <select wire:model.live='studyDateId' class="rounded-2 bg-white tx-16 w-100 py-1 text-primary"
                                    style="border: 1px solid #0A2F47" name="" id="" style="border-radius: 6px">
                                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                        <option wire:key="<?php echo e($studyDate->id); ?>" value="<?php echo e($studyDate->id); ?>"><?php echo e($studyDate->name); ?></option>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                </select>

                            </div>

                </div>
            </div>
        </div>

        <div class="text-center text-black">
            
 
            
            
            
            

            </div>
            </div>
            </div>
    <div class="mt-5 mb-3">
        <div class="d-flex justify-content-center">

            <div class="bg-white d-inline-block px-4 py-2 shadow-sm new-border ">

                
                
                
                
                
                <div class="d-inline-block px-4 py-2  mr-3 tab-item <?php echo e($activeTab == 'courses' ? 'active' : ''); ?>">
                    <p x-on:click="$wire.set('activeTab' , 'courses')" role="button" class="m-0 font-weight-bold">
                        <?php echo app('translator')->get('admin.courses.courses'); ?>
                    </p>
                </div>
                <div class=" d-inline-block px-4 py-2 mr-3 tab-item  <?php echo e($activeTab == 'results' ? 'active' : ''); ?>">
                    <p x-on:click="$wire.set('activeTab' , 'results')" role="button" class="m-0 font-weight-bold">
                        <?php echo app('translator')->get('admin.results.results'); ?>
                    </p>
                </div>
                <div class=" d-inline-block px-4 py-2 mr-3 tab-item  <?php echo e($activeTab == 'payments' ? 'active' : ''); ?>">
                    <p x-on:click="$wire.set('activeTab' , 'payments')"role="button" class="m-0 font-weight-bold">
                    <?php echo app('translator')->get('admin.payments.payments'); ?>

                    </p>
                </div>

            </div>
        </div>


        <div class="mt-5">

            <div class="text-start">
                <div class="col-8 mx-auto">
                    <!-- Courses tab -->

                    <!-- __BLOCK__ --><?php if($activeTab == 'courses'): ?>
                    <div>
                        <div class="d-flex justify-content-between mb-3">
                            <div class="w-25">
                                <select wire:model.live='semesterId' class="rounded-2 bg-white tx-16 w-100 py-1 text-primary"
                                    style="border: 1px solid #0A2F47" name="" id="" style="border-radius: 6px">
                                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->semesters; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $semester): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                        <option wire:key="<?php echo e($semester->id); ?>" value="<?php echo e($semester->id); ?>"><?php echo e($semester->name); ?></option>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                </select>

                            </div>

                            
                        </div>
                        <div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('admin.courses.name_en'); ?></td>
                                        <td><?php echo app('translator')->get('admin.courses.code'); ?></td>
                                        <td><?php echo app('translator')->get('admin.courses.hours'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $this->courses; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $courseStudent): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                    <tr>
                                        <td><?php echo e($courseStudent->course->name_en); ?></td>
                                        <td><?php echo e($courseStudent->course->code); ?></td>
                                        <td><?php echo e($courseStudent->course->hours); ?></td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                    <!-- __BLOCK__ --><?php if($activeTab == 'results'): ?>
                    <div>
                        <div class="d-flex justify-content-between mb-3">
                            <div class="w-25">

                                <select wire:model.live='studyYearId'
                                    class="rounded-2 bg-white tx-16 w-100 py-1 text-primary"
                                    style="border: 1px solid #0A2F47; border-radius: 6px">
                                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyYears; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyYear): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                    <option value="<?php echo e($studyYear->id); ?>"><?php echo e($studyYear->name); ?></option>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                </select>

                            </div>
                            <!-- __BLOCK__ --><?php if(!is_null($degrees[0]['cgpa'] ?? null)): ?>

                            <p class="font-weight-bold text-secondary"><?php echo app('translator')->get('admin.results.cgpa'); ?>: <?php echo e($degrees[0]['cgpa']); ?></p>
                            <?php endif; ?> <!-- __ENDBLOCK__ -->

                        </div>
                        <div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('admin.courses.name_en'); ?></td>
                                        <td><?php echo app('translator')->get('admin.results.degree_code'); ?></td>
                                        <td><?php echo app('translator')->get('admin.results.is_pass'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- __BLOCK__ --><?php if($degrees?->count() > 0): ?>

                                    <!-- __BLOCK__ --><?php $__currentLoopData = $degrees; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $degree): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                    <tr>
                                        <td style="border-color:<?php echo e($degree['is_pass'] ? 'green' : 'red'); ?>"><?php echo e($degree['course_name']); ?></td>
                                        <td style="border-color:<?php echo e($degree['is_pass'] ? 'green' : 'red'); ?>"><?php echo e($degree['degree_code']); ?></td>
                                        <td style="border-color:<?php echo e($degree['is_pass'] ? 'green' : 'red'); ?>"><?php echo e($degree['is_pass'] ? __('admin.results.succeeded') :
                                            __('admin.results.failed')); ?></td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                    <?php else: ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                                </tbody>
                            </table>
                        </div>
                    </div>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                    
                    <!-- __BLOCK__ --><?php if($activeTab == 'payments'): ?>
                        <div>
                            <div class="d-flex justify-content-between mb-3">

                            <p class="font-weight-bold text-secondary">
                                <?php echo app('translator')->get('admin.payments.total_amount'); ?>: <?php echo e($this->filteredRegistration->justTotal); ?> <?php echo e($student->currency?->code); ?></p>

                                <p class="font-weight-bold text-secondary">
                                <?php echo app('translator')->get('admin.payments.remaining'); ?>: <?php echo e($this->filteredRegistration->reminder); ?> <?php echo e($student->currency?->code); ?></p>

                        </div>
                        <div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payment_orders.type'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payments.amount'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payments.status'); ?></td>
                                        <td><?php echo app('translator')->get('admin.payment_orders.created_at'); ?></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $this->paymentOrders; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $paymentOrder): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                    <tr>
                                        <td><?php echo e($paymentOrder->id); ?></td>
                                        <td><?php echo e($paymentOrder->formattedStatus); ?></td>
                                        <td><?php echo e($paymentOrder->amount); ?> <?php echo e($paymentOrder->currency?->code); ?></td>
                                        <td>
                                            <i class="fa fa-<?php echo e($paymentOrder->archive ? 'check' : 'close'); ?>

                                                tx-<?php echo e($paymentOrder->archive ? 'success' : 'danger'); ?>"></i>
                                            </td>
                                        <td><?php echo e($paymentOrder->created_at); ?></td>
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>
                        </div>
                            <div class="mt-3">
                                <div class="d-flex justify-content-between align-items-end">
                                <h2 class="br-section-label"><?php echo app('translator')->get('admin.discounts.discounts'); ?></h2>
                                </div>
                            <table class="table text-dark new-table">
                                <thead>
                                    <tr>
                                        <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                                        <td><?php echo app('translator')->get('admin.discounts.type'); ?></td>
                                        <td><?php echo app('translator')->get('admin.discounts.amount'); ?></td>
                                        <td><?php echo app('translator')->get('site.created_at'); ?></td>
                                        
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php $__empty_1 = true; $__currentLoopData = $student->discounts; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $discount): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                                    <tr>
                                        <td><?php echo e($discount->id); ?></td>
                                        <td><?php echo e($discount->typeDiscount->type); ?></td>
                                        <td><?php echo e($discount->amount); ?> <?php echo e($discount->currency->code); ?></td>
                                        <td><?php echo e($discount->created_at); ?></td>
                                        
                                        
                                        
                                    </tr>
                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                                    <tr>
                                        <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
                                    </tr>
                                    <?php endif; ?>
                                </tbody>
                            </table>
                        </div>
                    </div>
                <?php endif; ?> <!-- __ENDBLOCK__ -->
                </div>

            </div>
        </div>
    </div>
</div>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/student/archived-student-profile.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/7e60485622f26281dd72c93343851cb8d712fbf6.php

      
-----------------------------------------------


      <?php $__env->startPush('styles'); ?>
<style>
    .selected {
        background: blue
    }
</style>
<?php $__env->stopPush(); ?>
<?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.payments.payments'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('site.target_archive' , ['target' => __('admin.payments.payments')]); ?></h4>
<p class="mg-b-0"><?php echo app('translator')->get('pages.import_payments.subtitle'); ?></p>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.payment.import-archived-payments');

$__html = app('livewire')->mount($__name, $__params, 'kv3pCGl', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

<div class="pt-4 new-card">
        <p><span class="tx-pink"><?php echo app('translator')->get('admin.create_student.important_notes_title'); ?> </span> <br><small>
                <?php echo app('translator')->get('admin.create_student.important_notes_subtitle'); ?>
                </small></p>
        <ul class=" small pr-2 ">
<li class="mt-1">
                <?php echo app('translator')->get('admin.import_payments.payment_type_tip' ); ?> :

<div class="bd w-25 mt-4 rounded table-responsive">
            <table class="table table-bordered mg-y-0" style="margin-top:0 !important">
              <thead>
                <tr>
                  <td class="text-black"><?php echo app('translator')->get('admin.import_payments.payment_type_name'); ?></td>
                <td class="text-black"><?php echo app('translator')->get('admin.import_payments.payment_type_value'); ?></td>
                </tr>
              </thead>
              <tbody>
                  <?php $__currentLoopData = App\Enums\PaymentOrderStatus::cases(); $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $status): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                <tr>
                    <td ><?php echo app('translator')->get('admin.payment_orders.' . $status->value); ?></td>
                    <td><?php echo e($status->value); ?></td>
                </tr>
            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
              </tbody>
            </table>
          </div>
                </li>
        
        

        

        </ul>
    </div>
    </div><!-- br-mainpanel -->
    <!-- br-section-wrapper -->

</div><!-- br-mainpanel -->

</div>
<?php $__env->stopSection(); ?>


<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/payments/archive/add_via_excel.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/7ddc60d357ab93840ec01993930d38c82031e5d6.php

      
-----------------------------------------------


      <div>

    <div wire:loading>
        <?php echo $__env->make('components.spinner', ['show' => true], \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
    </div>
<div class="ms-4 pd-x-20 pd-sm-x-30 pd-t-25 mg-b-20 mg-sm-b-30">
        <div class="new-card mb-3">

        <div class="row result-info ">
            <div class="col-sm-3">
                <div class="form-group">
                    <select wire:model.live='selectedStudyDateId' class="form-control ">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($studyDate->id); ?>"><?php echo e($studyDate->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                    <small class="tx-info"><?php echo app('translator')->get('admin.study_dates.study_date'); ?></small>
                </div>
            </div>
            <div class="col-sm-3">
                <div wire:ignore  class="form-group">
                    <select wire:model.live="selectedDepartmentId" id="department" class="form-control ">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($department->id); ?>"><?php echo e($department->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                    <small contenteditable="true" class="tx-info"><?php echo app('translator')->get('admin.departments.department'); ?></small>
                </div>
            </div>
            <div class="col-sm-3">
                <div wire:ignore  class="form-group ">
                    <select wire:model.live="selectedStudyYearId" id="studyYear" class="form-control ">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyYears; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyYear): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($studyYear->id); ?>"><?php echo e($studyYear->name); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                    <small class="tx-info"><?php echo app('translator')->get('admin.study_years.study_year'); ?></small>
                </div>
            </div>
            <div class="col-sm-2">
                <div wire:ignore class="form-group ">
                    <select  wire:model.live="isFirstRound" id="select2" class="form-control">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $rounds; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $key => $round): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($key); ?>"><?php echo e(__('admin.results.' . $round)); ?></option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                    <small class="tx-info"><?php echo app('translator')->get('admin.results.phase'); ?></small>
                </div>
            </div>

        </div>
        <div class="d-flex justify-content-end">
            <div class="me-2">
                <button wire:click="calculate" type="button" class="btn btn-primary"><?php echo app('translator')->get('admin.results.calculate_result'); ?></button>
            </div>
        </div>
    </div>


    </div>
<div class="br-pagebody">


        <!-- ! Title section -->
        <!-- TODO: Title of result -->
        <div class="mb-3 ">
            <div><?php echo app('translator')->get('admin.study_dates.study_date'); ?> <span class="tx-dark"><?php echo e($this->studyDates->firstWhere('id' , $this->selectedStudyDateId)?->name); ?> - </span> <?php echo app('translator')->get('admin.departments.department'); ?> <span class="tx-dark"><?php echo e($this->departments->firstWhere('id' , $this->selectedDepartmentId)->name); ?></span>
                -
                
                                 
                                 <span class="tx-dark"><?php echo e($this->studyYears->firstWhere('id' , $this->selectedStudyYearId)?->name); ?>

                                     -
                                 </span> <?php echo app('translator')->get('admin.results.phase'); ?> <span
                    class="tx-dark"><?php echo e($isFirstRound ? 'الأول' : 'الثاني'); ?></span>
            </div>

        </div>
        <!-- ! End of section -->



        <!-- ! Statistics of result -->
        <!-- TODO: Statistics -->
        <div class="">
            <div id="general-statistics" class="row mg-b-10">
            </div>

        </div>
        <!-- ! End of statistics of result -->

        <!-- ! Section one -->
        <!-- TODO: Printing template -->
        <div class="new-card my-3">
            <!-- __BLOCK__ --><?php if($this->students->count() > 0): ?>
                <div>
                <button wire:click="print" class="btn btn-info pull-left" ><i class="fa fa-print"></i> <?php echo app('translator')->get('site.print'); ?></button>
                <div class="clearfix mg-b-10"></div>
                <div class="br-section-wrapper p-0">

                    <div id="div-result-print">
                        <table class="table-responsive">
                            <thead>
                                <tr>
                                    <th>
                                        <table style="width: 100%;" class="vertical-align-top">
                                            <thead>
                                                <tr>
                                                    <td colspan="2">
                                                        <table style="width: 100%;">
                                                            <thead>
                                                                <tr>
                                                                    <td class="center" width="33.33%"><img src="../img/logo.png" width="130px" alt="">
                                                                    </td>
                                                                    <td class="center" width="33.33%">
                                                                        <div class=" bold font-10 text-nowrap">
                                                                            <span>Elfarrabi College for Sciences and
                                                                                Technology</span><br>
                                                                            <span>Secretary of Academic Affairs</span><br>
                                                                            <span>Final Examinations –Academic year <?php echo e($this->studyDates->firstWhere('id' , $selectedStudyDateId)?->name); ?></span><br>
                                                                            <span>Program Name: <?php echo e($this->departments->firstWhere('id' , $selectedDepartmentId)?->name); ?></span><br>
                                                                            <span>Study Level : <?php echo e($this->studyYears->firstWhere('id' , $selectedStudyYearId)?->name); ?></span>

                                                                        </div>
                                                                    </td>
                                                                    <td class="center" width="33.33%"><img src="../img/logo.png" width="130px" alt="">
                                                                    </td>

                                                                    <!-- <td width="33.33%">
                                                                        <div class="right bold font-10 text-nowrap">
                                                                            <span>بسم الله الرحمن الرحيم</span><br>
                                                                            <span>كلية الفارابي للعلوم و التكنلوجيا</span> -
                                                                            <span>علوم التمريض</span><br>
                                                                            <span>الدفعة الثانية</span> -
                                                                            <span>الفصل الدراسي الخامس</span> -
                                                                            <span>العام 2020 - 2021</span>

                                                                        </div>
                                                                    </td>                                                   -->
                                                                </tr>
                                                            </thead>
                                                        </table>
                                                    </td>
                                                </tr>

                                            </thead>
                                        </table>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <table class="print full-width table-with-bordered">
                                            <thead class="text-dark">
                                                <tr >
                                                    <th class="rotate" rowspan="2">
                                                        <div><span class="text-dark">#</span></div>
                                                    </th>
                                                    <th class="rotate" rowspan="2">
                                                        <div><span  class="text-dark">No.Unversity</span></div>
                                                    </th>
                                                    <th rowspan="2">
                                                        <div>
                                                            <span  class="text-dark">Student Name</span>
                                                        </div>
                                                    </th>
                                                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->courses; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $course): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                                    <th class="rotate">
                                                        <div>
                                                            <span class="text-dark"><?php echo e($course->name); ?></span>
                                                        </div>
                                                    </th>
                                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                                    
                                                    
                                                    
                                                    
                                                    <th class="rotate" rowspan="2">
                                                        <div><span  class="text-dark">CGPA</span></div>
                                                    </th>
                                                    <th rowspan="2" class="full-width">
                                                        <div><span  class="text-dark">Notes</span></div>
                                                    </th>
                                                </tr>
                                                <!-- __BLOCK__ --><?php $__currentLoopData = $this->students; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $student): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                            </thead>
                                            <tbody>
                                                <!-- __BLOCK__ --><?php $__currentLoopData = $this->students; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $student): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                                    <tr wire:key="<?php echo e($student->first()->id); ?>">
                                                    <td><?php echo e($loop->index + 1); ?></td>
                                                    <td><?php echo e($student->first()->university_id); ?></td>
                                                    <td>
                                                        <div class="right"><span><?php echo e($student->first()->name1); ?></span></div>
                                                    </td>

                                                    <!-- __BLOCK__ --><?php $__currentLoopData = $student; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $course): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                                        <td class="min-width "><span><?php echo e($course->theory_degree + $course->practical_degree); ?></span></td>
                                                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->

                                                    <td><span><?php echo e($student->first()->cgpa); ?></span></td>
                                                    <td>
                                                        <div class="right"><?php echo e($student->first()->description); ?></div>
                                                    </td>
                                                </tr>
                                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td>

                                        <table class="full-width small-font">
                                            <tbody>
                                                <tr>
                                                    <th>Faculty Register : U.Nisreen Kamal Ali Mohammed<br>
                                                        Sig : ...........................
                                                    </th>
                                                    <td></td>

                                                    <th>Program coordinator : Dr.Hanadi Mohammed Elhassen<br>
                                                        Sig : ...........................</th>
                                                    <td></td>

                                                    <th>Secertary of Acadmic Affairs : Dr.Yasir Ahmed Abdalla <br>
                                                        Sig : ...........................</th>
                                                    <td></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    <!-- br-section-wrapper -->
                </div>
            </div>
        <?php else: ?>
            <div class="text-center ">
                <img style="width: 30rem"  class="" src="<?php echo e(asset('dashboard/images/no-data.svg')); ?>" />
                <div>
                    <h5 class="tx-xs-24 tx-normal text-dark  mg-b-30 lh-5"><?php echo app('translator')->get('admin.results.no_results_found'); ?></h5>
                </div>
            </div>
        <?php endif; ?> <!-- __ENDBLOCK__ -->
    </div>

        <!-- ! End of section one -->

        <!-- TODO: Remove this Block after coded -->
        <br /><br />
        <!-- ----------------------------- -->

        <!-- ! Section two -->
        <!-- TODO: if found edit at student degrees) -->
        

        <div id="courses-statistics" class="row mg-b-10">
        </div>

        <!-- ! End of section two -->

        <!-- br-pagebody -->

    </div>
<?php $__env->startPush('scripts'); ?>

    <script>
 $(document).ready(function () {
    $('.select2').each(function() {
    $(this).select2({
        minimumResultsForSearch: -1
    });

    $(this).on('change', function (e) {
        var data = $(this).select2("val");
        window.Livewire.find('<?php echo e($_instance->getId()); ?>').set('selected', data);
    });
});;
});;
    </script>

<?php $__env->stopPush(); ?>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/result/show-students-result.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/7d1db29dfdbaa6c761fd9df8579ba0234a824f3a.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>
    <div class="br-mainpanel br-profile-page">

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.student.student-profile' ,['student' => $student]);

$__html = app('livewire')->mount($__name, $__params, 'OaUBhHH', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

        <!-- br-pagebody -->

    </div>
<?php $__env->stopSection(); ?>


<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/students/show.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/7c56424163e743e5ff1987b29ea412e82c044ef4.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'verify-headings']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'verify-headings']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('site.verify_columns'); ?>
         <?php $__env->endSlot(); ?>

         <?php $__env->slot('body', null, []); ?> 
            <div class="mx-6">
                <!-- __BLOCK__ --><?php if($excelError): ?>
                    <div class="alert alert-danger alert-solid pd-20" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                  <span aria-hidden="true">×</span>
                </button>
                <div class="d-sm-flex align-items-center justify-content-start">
                  <i class="icon ion-ios-close-outline lh-0 tx-52"></i>
                  <div class="ms-4 text-start">
                    <h5 class="mg-b-2 "><?php echo app('translator')->get('admin.import_students.error'); ?></h5>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.row'); ?> : <?php echo e($excelError->get('row')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.attribute'); ?> : <?php echo e($excelError->get('attribute')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.errors'); ?> : </p>

                    <ul>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $excelError->get('messages'); $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $message): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <li><?php echo e($message); ?></li>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </ul>
                  </div>
                </div><!-- d-flex -->
              </div>
                <?php endif; ?> <!-- __ENDBLOCK__ -->
                <!-- __BLOCK__ --><?php $__currentLoopData = $headerColumns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $column): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                <div class="d-flex justify-content-between align-items-center mb-2 px-2">
                    <div class="ms-5">
                        <p class="text-dark"><?php echo e(__('admin.import_payments.' . $column)); ?></p>
                        </div><div class="d-inline-block ">
                        <div class="select-wrapper">
                        <select v-data wire:model='importInputs.<?php echo e($column); ?>' class="form-control select2" >
                            <option value=""><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $sheetColumns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $sheetColumn): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>

                                <option <?php if($sheetColumn == $column): echo 'selected'; endif; ?>

                                >
                                        <?php echo e($sheetColumn); ?>

                                </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                    </div>
                    <?php $__errorArgs = ["importInputs.$column"];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                    <p class="text-danger" role="alert">
                         <strong><?php echo e($message); ?></strong>
                    </p>
                    <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    </div>
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
            </div>
         <?php $__env->endSlot(); ?>

             <?php $__env->slot('footer', null, []); ?> 
                 <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'import']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/payment/includes/_verify-excel-headings.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/70d8317d71e71733ee19577b6906477b79436503.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>
<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.students.students'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('site.target_archive' , ['target' => __('admin.students.students')]); ?></h4>
        </div>
    </div>
    <!-- d-flex -->
    <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.student.students-archive-index');

$__html = app('livewire')->mount($__name, $__params, 'J8RQNEC', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

</div>
<?php $__env->stopSection(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/students/archive/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/6d4691d8f4b9cb3130b4a24b482670ed61c7faaf.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>

<div class="br-mainpanel">

    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active"><?php echo app('translator')->get('admin.study_dates.study_dates'); ?></span>
            <a class="breadcrumb-item active" href="#"><?php echo app('translator')->get('site.home'); ?></a>
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4><?php echo app('translator')->get('admin.study_dates.study_dates'); ?></h4>
        </div>
    </div>
    <!-- d-flex -->

    <div class="br-pagebody">

        <div class="br-section-wrapper p-0">

            <div class="d-flex align-items-center container-fluid justify-content-start pd-t-25 mg-b-20 mg-sm-b-30">

                <!-- btn-group -->

                <?php if(auth('admin')->user()->hasPermissionTo('create-study_dates')): ?>

                <div class="btn-group mg-l-auto">
                    <a href="<?php echo e(route('dashboard.admin.study_dates.create')); ?>" class="btn btn-primary">
                        <?php echo app('translator')->get('site.add'); ?>
                        <i class="fa fa-plus-square"></i>
                    </a>
                </div>

                <?php endif; ?>
                <!-- btn-group -->

            </div>

            <div class="col-12 col-md-6">
                <div class="input-group">
                    <input type="text" id="data-table-search" class="form-control" placeholder="<?php echo app('translator')->get('site.search'); ?>" required>
                </div>
            </div>
            <!-- d-flex -->
            <div class="table-responsive">
                <table id="data-table" class="table new-table new-datatable">
                <thead>
                        <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                        <td><?php echo app('translator')->get('admin.study_dates.study_dates'); ?></td>
                        <td><?php echo app('translator')->get('admin.study_dates.start_reg'); ?></td>
                        <td><?php echo app('translator')->get('admin.study_dates.end_reg'); ?></td>
                        <td><?php echo app('translator')->get('admin.study_dates.archived'); ?></td>
                        <td><?php echo app('translator')->get('site.created_at'); ?></td>
                        <td><?php echo app('translator')->get('site.action'); ?></td>
                    </tr>
                </thead>
                <tfoot>
            </table>
            </div>
            <div class="card-footer tx-12 pd-y-15 bg-transparent">
                العدد الكلي 21 برنامج
            </div>
            <!-- br-section-wrapper -->
        </div>

    </div><!-- br-mainpanel -->

</div>
<?php $__env->stopSection(); ?>

<?php $__env->startPush('scripts'); ?>

    <script>

        let role;

        let dataTable = $('#data-table').DataTable({
            dom: "tiplr",
            serverSide: true,
            processing: true,
            "language": {
                "url": "<?php echo e(asset('admin_assets/datatable-lang/' . app()->getLocale() . '.json')); ?>"
            },
            ajax: {
                url: '<?php echo e(route('dashboard.admin.study_dates.data')); ?>',
            },
            columns: [
                {data: 'DT_RowIndex', name: 'DT_RowIndex', searchable: false, sortable: false},
                {data: 'name', name: 'name'},
                {data: 'start_reg', name: 'start_reg'},
                {data: 'end_reg', name: 'end_reg'},
                {data: 'archived', name: 'archived'},
                {data: 'created_at', name: 'created_at', searchable: false},
                {data: 'actions', name: 'actions', searchable: false, sortable: false, width: '20%'},
            ],

            drawCallback: function (settings) {
                $('.record__select').prop('checked', false);
                $('#record__select-all').prop('checked', false);
                $('#record-ids').val();
                $('#bulk-delete').attr('disabled', true);
            }
        });

        $('#data-table-search').keyup(function () {
            dataTable.search(this.value).draw();
        })


    </script>

<?php $__env->stopPush(); ?>

<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/study_dates/index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/655d7429a74d98141b454a0e3a871011d5a49767.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'pay']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'pay']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('admin.payment_orders.invoice_form_title'); ?>
     <?php $__env->endSlot(); ?>

     <?php $__env->slot('body', null, []); ?> 
        <div class="br-section-wrapper p-0 mb-3 collapse show" id="paying" role="tabpanel" aria-labelledby="headingOne"
            style="">

            <!-- br-section-wrapper -->
            <div class="">

                <!-- row -->
                <form>
                    <?php echo csrf_field(); ?>
                    <?php echo method_field('post'); ?>

                    <div class="row">

                        <div class="col">
                            <div class="form-group">
                                <label class="form-control-label w-100 text-start" for=""><?php echo app('translator')->get('admin.payments.amount'); ?>
                                    <span class="tx-danger">*</span></label>
                                <div class="input-group">
                                    <input type="number" wire:model="payData.amount"
                                        class="form-control amount calculator-rate input-number <?php $__errorArgs = ['payData.amount'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> is-invalid <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>  "
                                        placeholder="000,000.00" value="<?php echo e($modalPaymentOrder->amount); ?>"
                                        max="<?php echo e($modalPaymentOrder->total_amount > 0 ? $paymentOrder->total_amount : $paymentOrder->amount); ?>"
                                        <?php if (app(\Illuminate\Contracts\Auth\Access\Gate::class)->denies('update-payment_orders', $paymentOrder)): ?> readonly <?php endif; ?>>
                                    <span class="input-group-addon tx-size-sm lh-2">
                                        <?php echo e($paymentOrder->currency?->code); ?></span>
                                </div>
                                <small class="tx-info text-start w-100"><?php echo app('translator')->get('admin.payment_orders.invoice_form_hint'); ?></small>

                                <?php $__errorArgs = ['payData.amount'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                                    <span class="text-danger" role="alert">
                                        <strong><?php echo e($message); ?></strong>
                                    </span>
                                <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                            </div>
                        </div>

                    </div>

                    <div class="">
                        <label class="w-100 text-start"><?php echo app('translator')->get('admin.payment_types.payment_types'); ?></label>
                        <select wire:model="payData.payment_type_id" name="payment_type_id"
                            class="form-select  <?php $__errorArgs = ['payData.payment_type_id'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> is-invalid <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>  ">
                            <option selected value="">-- <?php echo app('translator')->get('site.choose'); ?> --</option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->paymentTypes; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $type): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($type->id); ?>"><?php echo e($type->type); ?></option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>

                        <?php $__errorArgs = ['payData.payment_type_id'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                            <span class="text-danger" role="alert">
                                <strong><?php echo e($message); ?></strong>
                            </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    <div class=" px-0 pt-2">
                        <label class="form-control-label w-100 text-start"><?php echo app('translator')->get('admin.payment_orders.description'); ?></label>
                        <textarea wire:model="payData.description" name="description"
                            class="form-control <?php $__errorArgs = ['payData.description'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> is-invalid <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>  " rows="4" cols="50"></textarea>

                        <?php $__errorArgs = ['payData.description'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                            <span class="text-danger" role="alert">
                                <strong><?php echo e($message); ?></strong>
                            </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>


                </form>

            </div>

        </div>


        <!-- padding -->

        <!-- action buttons -->

     <?php $__env->endSlot(); ?>

     <?php $__env->slot('footer', null, []); ?> 
         <?php $__env->slot('dismissButton', null, []); ?> <i class="icon ion-close"></i> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
         <?php $__env->slot('confirmButton', null, ['wire:click' => 'pay']); ?> <i class="icon ion-disc"></i> <?php echo app('translator')->get('site.save'); ?> <?php $__env->endSlot(); ?>
     <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/payment-order/includes/_pay-payment-order-modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/5a79d24de3bb489883ebdf23047b2b293c4828ce.php

      
-----------------------------------------------


      <div class="br-mainpanel">
    <!-- br-page-body -->
    <footer class="br-footer">
    <div class="footer-left ">

        <div class="mg-b-2 ">© <?php echo e(now()->year); ?>. كلية رويال. جميع الحقوق محفوظة.</div>
        <div>صنع بواسطة WeDo Technology.</div>
    </div>
    <div class="footer-right d-flex align-items-center ">
        <span class="tx-uppercase mg-l-10 ">تنقل سريع :</span>
        <a target="_blank " class="pd-x-5 " href="https://www.facebook.com/sharer/sharer.php?u=http%3A//themepixels.me/bracketplus/intro "><i class="fa fa-link tx-20 "></i></a>
        <a target="_blank " class="pd-x-5 " href="https://www.facebook.com/sharer/sharer.php?u=http%3A//themepixels.me/bracketplus/intro "><i class="fa fa-facebook tx-20 "></i></a>
        <a target="_blank " class="pd-x-5 " href="https://twitter.com/home?status=Bracket%20Plus,%20your%20best%20choice%20for%20premium%20quality%20admin%20template%20from%20Bootstrap.%20Get%20it%20now%20at%20http%3A//themepixels.me/bracketplus/intro"><i class="fa fa-twitter tx-20 "></i></a>
    </div>
</footer>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/partials/_footer.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/566fd3c2e90a9024953d4d1ecda75685206a3357.php

      
-----------------------------------------------


      <div>

 <style>
        .custom-file {
            position: relative;
            display: inline-block;
            max-width: 100%;
            height: 2.5rem;
            margin-bottom: 0;
        }

        upload {
            opacity: 0;
        }

        #upload-label {
            position: absolute;
            top: 50%;
            left: 1rem;
            transform: translateY(-50%);
        }

        .image-area {
            padding: 10px 0;
            position: relative;
        }

        .image-area::before {
            content: '';
            color: #fff;
            font-weight: bold;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.8rem;
            z-index: 1;
        }

        .image-area img {
            z-index: 2;
            position: relative;
        }
    </style>
    <div>

    <div wire:loading>
        <?php echo $__env->make('components.spinner', ['show' => true], \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>

    </div>
    <div class="br-mainpanel">

        <div class="br-pageheader">
            <nav class="breadcrumb pd-0 mg-0 tx-12">
                <span class="breadcrumb-item"><?php echo app('translator')->get('site.add_new' , ['target' => __('admin.students.student')]); ?></span>
                <a href="<?php echo e(route('dashboard.admin.students.index')); ?>" class="breadcrumb-item active"
                    href="#"><?php echo app('translator')->get('admin.students.students'); ?></a>
                <span class="breadcrumb-item"><?php echo app('translator')->get('site.home'); ?></span>
            </nav>
        </div>

        <!-- br-pageheader -->

        <div class="br-pagetitle">
            <i class="icon ion-ios-gear-outline"></i>
            <div>

                <h4>
                    <!-- __BLOCK__ --><?php if($isCreatePage): ?>
                <?php echo app('translator')->get('site.add_new' , ['target' => __('admin.students.student')]); ?>
            <?php else: ?>

                <?php echo app('translator')->get('site.update_target' , ['target' => __('admin.students.student')]); ?>
            <?php endif; ?> <!-- __ENDBLOCK__ -->
                </h4>
            </div>
        </div>

        <!-- d-flex -->

        <div class="br-pagebody">

            <div class="br-section-wrapper p-0">

                <div class="new-card mb-3">


                    <!-- __BLOCK__ --><?php if($isCreatePage): ?>
                        <h6 class="br-section-label"><?php echo app('translator')->get('admin.students.students'); ?> - <?php echo app('translator')->get('site.add_new' , ['target' => __('admin.students.student')]); ?> </h6>
                    <?php else: ?>
                        <h6 class="br-section-label"><?php echo app('translator')->get('admin.students.students'); ?> - <?php echo app('translator')->get('site.update_target' , ['target' => __('admin.students.student')]); ?> </h6>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                        <p class="">
                            <?php echo app('translator')->get('admin.create_student.form_tip'); ?>
                        </p>
                </div>


                <div class="new-card">

                <div id="wizard5" class="pr-4 pl-4 pb-4 wizard wizard-style-1 clearfix" role="application">

                    <div class="steps clearfix">
                        <ul role="tablist">
                            <li role="tab"
                                class="<?php echo e($currentStep < 1 ? 'disabled' : ($currentStep > 1 ? 'done' : 'current')); ?>"
                                aria-disabled="false" aria-selected="true">
                                <a>
                                    <span class="current-info audible">current step: </span>
                                    <span class="number ">1</span>
                                    <span class="title "><i class="fa fa-user-secret"></i>
                                        <?php echo app('translator')->get('admin.students.personal_info'); ?></span>
                                </a>
                            </li>
                            <li role="tab"
                                class="<?php echo e($currentStep < 2 ? 'disabled' : ($currentStep > 2 ? 'done' : 'current')); ?>"
                                aria-disabled="false" aria-selected="false">
                                <a>
                                    <span class="number ">2</span>
                                    <span class="title ">
                                        <i class="fa fa-money"></i>
                                        <?php echo app('translator')->get('admin.students.parent_info'); ?></span>
                                        </span>
                                </a>
                            </li>
                            <li role="tab"
                                class="<?php echo e($currentStep < 3 ? 'disabled' : ($currentStep > 3 ? 'done' : 'current')); ?> "
                                aria-disabled="false" aria-selected="false">
                                <a>
                                    <span class="number ">3</span>
                                    <span class="title "><i class="fa fa-check">
                                        </i>
                                        <?php echo app('translator')->get('admin.students.admission_info'); ?></span>
                                        </span>
                                </a>
                            </li>

                            <li role="tab"
                                class="<?php echo e($currentStep < 4 ? 'disabled' : ($currentStep > 4 ? 'done' : 'current')); ?>"
                                aria-disabled="false" aria-selected="false"><a>
                                    <span class="number ">4</span>
                                    <span class="title ">
                                        <i class="fa fa-handshake-o "></i>
                                        <?php echo app('translator')->get('admin.students.congratulations'); ?>
                                    </span>
                                </a>
                            </li>
                        </ul>
                    </div>

                    <div class="content clearfix">


                        
                        
                        
                        <!-- __BLOCK__ --><?php if($currentStep == 1): ?>

                            <?php echo $__env->make('livewire.dashboard.student.includes.create-student._personal-info', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
                        <?php endif; ?> <!-- __ENDBLOCK__ -->

                        <!-- __BLOCK__ --><?php if($currentStep == 2): ?>

                            <?php echo $__env->make('livewire.dashboard.student.includes.create-student._parent-info', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
                        <?php endif; ?> <!-- __ENDBLOCK__ -->

                        
                        
                        <!-- __BLOCK__ --><?php if($currentStep == 3): ?>

                            <?php echo $__env->make('livewire.dashboard.student.includes.create-student._admission-info', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
                        <?php endif; ?> <!-- __ENDBLOCK__ -->
                        
                        
                        
                        <!-- __BLOCK__ --><?php if($currentStep == 4): ?>
                        <?php endif; ?> <!-- __ENDBLOCK__ -->
                        <h3 id="wizard5-h-3" tabindex="-1" class="title"><i class="fa fa-handshake-o "></i>
                            تهانينا</h3>
                        <!-- __BLOCK__ --><?php if($currentStep == 4): ?>
                        <section id="wizard5-p-3" role="tabpanel" aria-labelledby="wizard5-h-3" class="body"
                            aria-hidden="true">
                            <p class="tx-teal "><i class="fa fa-check "></i>
                                <?php echo app('translator')->get('admin.create_student.student_created' ,['name' =>   $student['name1_en'] . $student['name2_en']  ]); ?>
                            </p>
                            <small><?php echo app('translator')->get('admin.create_student.proceed_academic_operations'); ?></small>
                            <a
                                href="<?php echo e(route('dashboard.admin.students.show',$student['id'])); ?>"><small
                                    class="tx-info "><?php echo app('translator')->get('admin.create_student.navigate_to_student_profile'); ?></small></a>
                        </section>
                        <?php endif; ?> <!-- __ENDBLOCK__ -->
                    </div>
                    <div class="actions clearfix">
                        <ul role="menu" aria-label="التنقل ">
                            <li wire:click='<?php echo e($currentStep > 1  && $currentStep != 4 ? ' back' : ''); ?>'
                                class="<?php echo e($currentStep > 1 && $currentStep != 4 ? '' : 'disabled'); ?>"
                                aria-disabled="true"><a href="#previous" role="menuitem"><?php echo app('translator')->get('site.back'); ?></a></li>
                            <li wire:click='<?php echo e($currentStep != 4 ? ' directToCorrectStep' : ''); ?>' aria-hidden="false"
                                aria-disabled="false" style="display: block;"
                                class="<?php echo e($currentStep != 4 ? '' : 'disabled'); ?>"><a href="#next" role="menuitem">
                                    <?php echo app('translator')->get('site.next'); ?> <i class="fa fa-long-arrow-<?php echo e(LaravelLocalization::getCurrentLocale() == 'en' ? 'right' : 'left'); ?>"></i></a>
                            </li>
                            <li style="display: none;" aria-hidden="true"><a href="#finish" role="menuitem">النهاية
                                    <i class="fa fa-handshake-o"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>

                <!-- br-section-wrapper -->
            </div>
            <!-- br-pagebody -->
        </div>
    </div>
</div>
    </div>

<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/student/create-student.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/562ed3a16890c63e933b117b66ba7f7de3d68bb6.php

      
-----------------------------------------------


      
<?php if(auth('admin')->user()->hasPermissionTo('read-payment_orders')): ?>
<li class="br-menu-item">
    <a href="<?php echo e(route('dashboard.admin.payments-module')); ?>"
        class="br-menu-link my-3 menu-link <?php echo e(request()->is('*dashboard') ? 'active' : ''); ?>">
        <i class="menu-item-icon icon ion-ios-people tx-20"></i>
        <span class="menu-item-label"><?php echo app('translator')->get('site.admin_panel'); ?></span>
        <?php if( request()->is('*dashboard') ): ?>
        <span style="" class='rounded-circle bg-primary'></span>
        <?php endif; ?>

    </a>
</li>

<li class="br-menu-item">
    <a href="<?php echo e(route('dashboard.admin.payment_orders.index')); ?>"
        class="br-menu-link my-3  menu-link <?php echo e(request()->is('*payment_orders*') ? 'active' : ''); ?>">
        <i class="menu-item-icon icon ion-ios-people tx-20"></i>
        <span class="menu-item-label"><?php echo app('translator')->get('admin.payment_orders.payment_orders'); ?></span>
        <?php if( request()->is('*payment_orders*') ): ?>
        <span style="" class='rounded-circle bg-primary'></span>
        <?php endif; ?>
    </a>
</li>
<?php endif; ?>


<?php if(auth('admin')->user()->hasPermissionTo('read-payments')): ?>
<li class="br-menu-item">
    <a href="<?php echo e(route('dashboard.admin.payments.index')); ?>"
        class="br-menu-link my-3 menu-link   <?php echo e(request()->is('*/payments') && !request()->is('*payments_module*') ? 'active' : ''); ?>">
        <i class="menu-item-icon icon ion-ios-people tx-20"></i>
        <span class="menu-item-label"><?php echo app('translator')->get('admin.payments.payments'); ?></span>
        <?php if( request()->is('*/payments*')  && !request()->is('*payments_module*') ): ?>
        <span style="" class='rounded-circle bg-primary'>
        </span>
        <?php endif; ?>

    </a>
</li>
<?php endif; ?>


<?php if(auth('admin')->user()->hasPermissionTo('read-reports_accountant')): ?>

<!-- settings -->
<li class="br-menu-item">
    <a href="" class="br-menu-link my-3 menu-link with-sub show-sub active">
        <i class="menu-item-icon  icon ion-ios-gear-outline tx-20"></i>
        <span class="menu-item-label">
            <?php echo app('translator')->get('admin.reports.accountant_reports'); ?>
        </span>
    </a>
    <!-- br-menu-link my-3  -->

    <ul class="br-menu-sub">
        <li class="sub-item">
            <a href="<?php echo e(route('dashboard.admin.report.payment_reports.students')); ?>"
                class="sub-link <?php echo e(request()->is('*payment_reports') ? 'active' : ''); ?>">
                 <?php echo app('translator')->get('admin.reports.payments_report'); ?>
            </a>
        </li>
        <li class="sub-item">
            <a href="<?php echo e(route('dashboard.admin.report.total_payments.students')); ?>"
                class="sub-link <?php echo e(request()->is('*total_payments*') ? 'active' : ''); ?>">
                <?php echo app('translator')->get('admin.reports.daily_payments_report'); ?>
            </a>
        </li>

        <li class="sub-item">
            <a href="<?php echo e(route('dashboard.admin.report.total_department_payments.students')); ?>"
                class="sub-link <?php echo e(request()->is('*total_department_payments*') ? 'active' : ''); ?>">
                <?php echo app('translator')->get('admin.reports.department_payments_report'); ?>
            </a>
        </li>

        <li class="sub-item">
            <a href="<?php echo e(route('dashboard.admin.report.payment_fees.students')); ?>"
                class="sub-link <?php echo e(request()->is('*payment_fees*') ? 'active' : ''); ?>">
                <?php echo app('translator')->get('admin.reports.payment_fees'); ?>
            </a>
        </li>

        
    </ul>

</li>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/includes/sidebar_modules/payments_module.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/52ade9299c4b218b5f407c4a65f409c4039bd390.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>
    <div class="br-mainpanel br-profile-page">

        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.admin.student.archived-student-profile' ,['student' => $student]);

$__html = app('livewire')->mount($__name, $__params, 'TqqH0v6', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

        <!-- br-pagebody -->

    </div>
<?php $__env->stopSection(); ?>


<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/students/archive/show.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/50ed1b22326a1ed94caaed0c92a5775469280b5f.php

      
-----------------------------------------------


      <!-- __BLOCK__ --><?php if($attributes->has('href')): ?>

    <a
        href="<?php echo e($attributes->get('href')); ?>"
        class="btn btn-primary mx-1"
        ><?php echo e($slot); ?></a>

<?php else: ?>
    <button
        class="btn btn-primary mx-1"
        <?php echo e($attributes); ?>

        ><?php echo e($slot); ?></button>
<?php endif; ?> <!-- __ENDBLOCK__ -->
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/components/button.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/4d9d58f895827dfc28dbe7685b3e8c0b026f078c.php

      
-----------------------------------------------


      <div class="br-section-wrapper p-0">

            <form class="p-4" method="post" enctype="multipart/form-data"
                wire:submit="submit">
                <?php echo csrf_field(); ?>

                <div class="row my-md-1">

                    
                    <div class="form-group col-12 col-md-6 <?php $__errorArgs = ['studyDateId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> has-danger <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <label><?php echo app('translator')->get('admin.study_dates.study_date'); ?> <span class="text-danger">*</span></label>
                        <select wire:model='studyDateId' style="width: 100%" class="form-control select2"
                            data-placeholder="Choose Browser">
                            <option ><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($studyDate->id); ?>"
                                    ><?php echo e($studyDate->name); ?> <?php echo e($studyDate->highlightActive); ?>

                            </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['studyDateId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
                    <div class="form-group col-12 col-md-6">
                        <label><?php echo app('translator')->get('site.file'); ?> <span class="text-danger">*</span></label>
                        <input accept="xlsx" wire:model="excelFile" type="file" name="excel" autofocus
                                           class="form-control <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> is-invalid <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                </div>

                <div class="d-flex justify-content-between">
                    <div class="form-group">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => []] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.create'); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>

                    <div class="form-group ">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.payments.archive.export_empty_excel_sample')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.payments.archive.export_empty_excel_sample')).'']); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.download_empty_sample'); ?>
                         <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>
                </div>


            </form><!-- end of form -->

        <?php echo $__env->make('livewire.dashboard.admin.payment.includes._verify-excel-headings', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        </div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/payment/import-archived-payments.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/470c26d040f1a2e7cd8623f6ed31e39de4afffd1.php

      
-----------------------------------------------


      <div class="br-section-wrapper p-0">

            <form class="p-4" method="post" enctype="multipart/form-data"
                wire:submit="submit">
                <?php echo csrf_field(); ?>

                <div class="row my-md-1">

                    
                    <div class="form-group col-12 col-md-6 <?php $__errorArgs = ['studyDateId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> has-danger <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <label><?php echo app('translator')->get('admin.study_dates.study_date'); ?> <span class="text-danger">*</span></label>
                        <select wire:model='studyDateId' style="width: 100%" class="form-control"
                            data-placeholder="Choose Browser">
                            <option ><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($studyDate->id); ?>"
                                    ><?php echo e($studyDate->name); ?> <?php echo e($studyDate->highlightActive); ?>

                            </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['studyDateId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
<div class="form-group col-12 col-md-6 <?php $__errorArgs = ['isFirstExam'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> has-danger <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <label><?php echo app('translator')->get('admin.results.phase'); ?> <span class="text-danger">*</span></label>
                        <select wire:model='isFirstExam' style="width: 100%" class="form-control"
                            data-placeholder="Choose Browser">
                            <option value="true" ><?php echo app('translator')->get('admin.results.first_phase'); ?></option>
                            <option value="false" ><?php echo app('translator')->get('admin.results.final_phase'); ?></option>
                        </select>
                        <?php $__errorArgs = ['isFirstExam'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
                    <div class="form-group col-12 col-md-6">
                        <label><?php echo app('translator')->get('site.file'); ?> <span class="text-danger">*</span></label>
                        <input accept="xlsx" wire:model="excelFile" type="file" name="excel" autofocus
                                           class="form-control <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> is-invalid <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                </div>

                <div class="d-flex justify-content-between">
                    <div class="form-group">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => []] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.create'); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>

                    <div class="form-group ">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.marks.export_empty_excel_sample')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.marks.export_empty_excel_sample')).'']); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.download_empty_sample'); ?>
                         <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>
                </div>


            </form><!-- end of form -->

        <?php echo $__env->make('livewire.dashboard.admin.mark.includes._verify-excel-headings', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        </div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/mark/import-marks-via-excel.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/42dd0fef193f33de0f5f4595d6beb7169c09028d.php

      
-----------------------------------------------


      <?php if(session()->has('livewire-alert')): ?>
    <script>
        flashAlert(<?php echo json_encode(session('livewire-alert'), 15, 512) ?>)
    </script>
<?php endif; ?><?php /**PATH /home/ash/sites/UniSoftLaravel/vendor/jantinnerezo/livewire-alert/src/../resources/views/components/flash.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/3aa5a2957d9cf353ade4d75c555cb1d72005631e.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'verify-headings']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'verify-headings']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('site.verify_columns'); ?>
         <?php $__env->endSlot(); ?>

         <?php $__env->slot('body', null, []); ?> 
            <div class="mx-6">
                <!-- __BLOCK__ --><?php if($excelError): ?>
                    <div class="alert alert-danger alert-solid pd-20" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                  <span aria-hidden="true">×</span>
                </button>
                <div class="d-sm-flex align-items-center justify-content-start">
                  <i class="icon ion-ios-close-outline lh-0 tx-52"></i>
                  <div class="ms-4 text-start">
                    <h5 class="mg-b-2 "><?php echo app('translator')->get('admin.import_students.error'); ?></h5>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.row'); ?> : <?php echo e($excelError->get('row')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.attribute'); ?> : <?php echo e($excelError->get('attribute')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.errors'); ?> : </p>

                    <ul>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $excelError->get('messages'); $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $message): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <li><?php echo e($message); ?></li>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </ul>
                  </div>
                </div><!-- d-flex -->
              </div>
                <?php endif; ?> <!-- __ENDBLOCK__ -->
                <!-- __BLOCK__ --><?php $__currentLoopData = $headerColumns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $column): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                <div class="d-flex justify-content-between align-items-center mb-2 px-2">
                    <div class="ms-5">
                        <p class="text-dark"><?php echo e(__('admin.import_active_study_plans.' . $column)); ?></p>
                        </div><div class="d-inline-block ">
                        <div class="select-wrapper">
                        <select v-data wire:model='importInputs.<?php echo e($column); ?>' class="form-control select2" >
                            <option value=""><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $sheetColumns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $sheetColumn): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>

                                <option <?php if($sheetColumn == $column): echo 'selected'; endif; ?>

                                >
                                        <?php echo e($sheetColumn); ?>

                                </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                    </div>
                    <?php $__errorArgs = ["importInputs.$column"];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                    <p class="text-danger" role="alert">
                         <strong><?php echo e($message); ?></strong>
                    </p>
                    <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    </div>
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
            </div>
         <?php $__env->endSlot(); ?>

             <?php $__env->slot('footer', null, []); ?> 
                 <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'import']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/active-study-plan/includes/_verify-excel-headings.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/363744710025334b9e53b99a39f2b657a1b40b2b.php

      
-----------------------------------------------


      

        <?php if(auth('admin')->user()->hasPermissionTo('read-students')): ?>
        <li class="br-menu-item">
            <a href="<?php echo e(route('dashboard.admin.students-module')); ?>"
                class="br-menu-link menu-link my-3  <?php echo e(request()->is('*dashboard') ? 'active shadow-sm' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-people tx-20"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('site.admin_panel'); ?></span>
                <?php if(request()->is('*dashboard') ): ?>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary'></span>
                <?php endif; ?>
            </a>
        </li>
        <li class="br-menu-item">
            <a href="<?php echo e(route('dashboard.admin.students.index')); ?>"
               class="br-menu-link menu-link my-3  <?php echo e(in_array(request()->route()->getName() , ['dashboard.admin.students.index'  , 'dashboard.admin.students.show' ]) ? 'active shadow-sm' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-people tx-20"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('admin.students.students'); ?></span>
                <?php if(in_array(request()->route()->getName() , ['dashboard.admin.students.index'  , 'dashboard.admin.students.show' ]) ): ?>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary'></span>
                <?php endif; ?>
            </a>
        </li>
            <li class="br-menu-item">
            <a href="<?php echo e(route('dashboard.admin.students.archive.index')); ?>"
                class="br-menu-link menu-link my-3  <?php echo e(request()->is('*students/archive*') ? 'active shadow-sm' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-people tx-20"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('site.archive'); ?></span>
                <?php if(request()->is('*students/archive*') ): ?>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary'></span>
                <?php endif; ?>
            </a>
        </li>
        <?php endif; ?>

        
        

        
        <?php if(auth('admin')->user()->hasPermissionTo('read-reports_recorder')): ?>

        <!-- registered_students -->
        <li class="br-menu-item">
            <a href="" class="br-menu-link menu-link my-3  with-sub show-sub active">
                <i class="menu-item-icon icon ion-ios-gear-outline tx-20"></i>
                <span class="menu-item-label">
                    <?php echo app('translator')->get('admin.reports.registrar_reports'); ?>
                </span>
                <span style="width: 15px;height:15px" class='rounded-circle bg-primary active'></span>
            </a>
            <!-- br-menu-link menu-link my-3  -->
            <ul class="br-menu-sub">
                <li class="sub-item">
                    <a href="<?php echo e(route('dashboard.admin.report.registered.students')); ?>"
                        class="sub-link <?php echo e(request()->is('*/registered_students*') ? 'active' : ''); ?>">
                        <?php echo app('translator')->get('admin.reports.registered_students'); ?>
                    </a>
                </li>
                <li class="sub-item">
                    <a href="<?php echo e(route('dashboard.admin.report.unregistered.students')); ?>"
                        class="sub-link <?php echo e(request()->is('*unregistered_students*') ? 'active' : ''); ?>">
                        <?php echo app('translator')->get('admin.reports.unregistered_students'); ?>
                    </a>
                </li>
                <li class="sub-item">
                    <a href="<?php echo e(route('dashboard.admin.report.completed.fees.students')); ?>"
                        class="sub-link <?php echo e(request()->is('*completed_fees_students*') ? 'active' : ''); ?>">
                        <?php echo app('translator')->get('admin.reports.completed_students'); ?>
                    </a>
                </li>
                
                
                
                
                
                
                <li class="sub-item">
                    <a href="<?php echo e(route('dashboard.admin.report.department-statistics.index')); ?>"
                        class="sub-link <?php echo e(request()->is('*department_statistics') ? 'active' : ''); ?>">
                        <?php echo app('translator')->get('admin.reports.departments_statistics'); ?>
                    </a>
                </li>
            </ul>

        </li>
        <?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/includes/sidebar_modules/students_module.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/26fe69d054740b120ba31c30c5cddc8042929c63.php

      
-----------------------------------------------


      <!doctype html>
<html lang="<?php echo e(app()->getLocale()); ?>" dir="<?php echo e(LaravelLocalization::getCurrentLocaleDirection()); ?>"
    class="<?php echo e(LaravelLocalization::getCurrentLocaleDirection()); ?>">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Meta -->
    <meta name="description" content="النظام الاكاديمي">
    <meta name="author" content="WeDo Tecnology">
    <!-- CSRF Token -->
    <meta name="csrf-token" content="<?php echo e(csrf_token()); ?>">

    <title><?php echo app('translator')->get('site.name'); ?> | <?php echo $__env->yieldContent('title'); ?></title>

    <!-- vendor css -->
    


    <link href="<?php echo e(asset('dashboard/font-awesome/css/font-awesome.min.css')); ?>" rel="stylesheet">
    <link href="<?php echo e(asset('dashboard/Ionicons/css/ionicons.css')); ?>" rel="stylesheet">
    <link href="<?php echo e(asset('dashboard/perfect-scrollbar/css/perfect-scrollbar.css')); ?>" rel="stylesheet">
    <link href="<?php echo e(asset('dashboard/jquery-switchbutton/jquery.switchButton.css')); ?>" rel="stylesheet">
    
    <link href="<?php echo e(asset('dashboard/jquery.steps/jquery.steps.css')); ?>" rel="stylesheet">
    <link href="<?php echo e(asset('dashboard/jquery.steps/jquery.steps.css')); ?>" rel="stylesheet">
    <link href="<?php echo e(asset('dashboard/select2/css/select2.min.css')); ?>" rel="stylesheet">
    <link href="<?php echo e(asset('dashboard/SpinKit/spinkit.css')); ?>" rel="stylesheet">


    <?php if(app()->getLocale() == 'ar'): ?>

        <link rel="stylesheet" href="<?php echo e(asset('css/bootstrap.rtl.css')); ?>">

    
    

    
<link href="https://fonts.googleapis.com/css2?family=Almarai:wght@300;400;700;800&display=swap" rel="stylesheet">
    <?php else: ?>
    <link rel="stylesheet" href="<?php echo e(asset('css/bootstrap.css')); ?>">
    <?php endif; ?>
    <?php echo $__env->yieldPushContent('styles'); ?>

    <?php echo \Livewire\Mechanisms\FrontendAssets\FrontendAssets::styles(); ?>



    <!-- Custom Style CSS -->
    <link rel="stylesheet" href="<?php echo e(asset('css/style.css')); ?>">

    <!-- Bracket CSS -->
    <link rel="stylesheet" href="<?php echo e(asset('css/bracket.css')); ?>">
    
    <script src="<?php echo e(asset('admin_assets/js/jquery-3.3.1.min.js')); ?>"></script>
    

    

    
    <link rel="stylesheet" href="<?php echo e(asset('admin_assets/plugins/noty/noty.css')); ?>">
    <script src="<?php echo e(asset('admin_assets/plugins/noty/noty.min.js')); ?>"></script>

    
    <script type="text/javascript" src="<?php echo e(asset('admin_assets/plugins/jquery.dataTables/jquery.dataTables.min.js')); ?>">
    </script>
    <script type="text/javascript" src="<?php echo e(asset('admin_assets/plugins/dataTables.bootstrap/dataTables.bootstrap.min.js')); ?>"></script>

    
    <link rel="stylesheet" href="https://cdn.datatables.net/rowgroup/1.2.0/css/rowGroup.dataTables.min.css">
    <link rel="stylesheet" href="<?php echo e(asset('new-design.css')); ?>">

    <script src="https://cdn.datatables.net/buttons/1.6.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.6.2/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/select/1.3.1/js/dataTables.select.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.3/js/buttons.print.min.js"></script>
    <script src="https://cdn.datatables.net/rowgroup/1.2.0/js/dataTables.rowGroup.min.js"></script>
    <script src="https://cdn.datatables.net/plug-ins/1.10.19/api/sum().js"></script>

    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


    

    <style type="text/css">
        button {
            cursor: pointer;
        }

        th {
            color: #fff !important;
            text-align: center !important;
        }

        table {
            margin-top: 10px !important;
        }

        @media (max-width: 991px) {
            .table-responsive {
                /*display: inline-table;*/
                display: inline-block !important;
            }
        }

        .paginate_button {
            margin: 0px 6px;
        }

        .rtl .pagination .page-item+.page-item,
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled,
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover,
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:focus {
            background-color: #fff;
            color: #adb5bd !important;
        }

        .dataTables_length>label {
            display: inline-flex;
            margin-top: 20px;
        }

        .dataTables_length>label>select {
            margin: 0px 10px;
        }

        tr {
            text-align: center;
            color: black;
        }

        .pagination {
            float: left;
        }

        .page-link {
            border: none;
        }
        .swal2-container  .swal2-popup  {
            width : 26em !important;
        }
body.swal2-shown > [aria-hidden='true'] {
  transition: 0.1s filter;
  filter: blur(3px);
}


    </style>
<?php echo \Livewire\Mechanisms\FrontendAssets\FrontendAssets::styles(); ?>


</head>

<body>

    <!-- ########## START: LEFT PANEL ########## -->
    <div class="br-logo justify-content-center" style="height:100px;"><a href=""><span> <img width="100" height="100px"
                    src="<?php echo e(asset('img/royal.png')); ?>" alt=""> </span></a></div>

    <?php echo $__env->make('layouts.includes._side', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
    <!-- br-sideleft -->
    <!-- ########## END: LEFT PANEL ########## -->

    <!-- ########## START: HEAD PANEL ########## -->
    <?php echo $__env->make('layouts.includes._header', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
    <!-- br-header -->
    <!-- ########## END: HEAD PANEL ########## -->

    <!-- ########## START: RIGHT PANEL ########## -->
    <?php echo $__env->yieldContent('left-sidebar'); ?>
    <!-- ########## END: RIGHT PANEL ########## --->

    <!-- ########## START: MAIN PANEL ########## -->

    <?php echo $__env->make('layouts.partials._session', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>

    <?php echo $__env->yieldContent('content'); ?>
        

    <?php echo $__env->make('layouts.partials._footer', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>


    <script src="<?php echo e(asset('dashboard/jquery/jquery.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/popper/popper.js')); ?>"></script>
    <script src="<?php echo e(asset('js/bootstrap.bundle.min.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/perfect-scrollbar/js/perfect-scrollbar.jquery.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/moment/moment.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/jquery-ui/jquery-ui.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/jquery-switchbutton/jquery.switchButton.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/peity/jquery.peity.js')); ?>"></script>
    
    <script src="<?php echo e(asset('dashboard/jquery.steps/jquery.steps.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/parsleyjs/parsley.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/select2/js/select2.min.js')); ?>"></script>
    <script src="<?php echo e(asset('admin_assets/js/query.number.min.js')); ?>"></script>

    <script src="<?php echo e(asset('js/bracket.js')); ?>"></script>
    <?php if(request()->is('*home*')): ?>
    <script src="<?php echo e(asset('dashboard/peity/jquery.peity.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/d3/d3.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/rickshaw/rickshaw.min.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/Flot/jquery.flot.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/Flot/jquery.flot.resize.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/flot-spline/jquery.flot.spline.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/jquery.sparkline.bower/jquery.sparkline.min.js')); ?>"></script>
    <script src="<?php echo e(asset('dashboard/echarts/echarts.min.js')); ?>"></script>
    <script src="http://maps.google.com/maps/api/js?key=AIzaSyCuWEQWfVkWfcUoSIZeGw5JioT9LVCwYkE"></script>
    <script src="<?php echo e(asset('dashboard/gmaps/gmaps.js')); ?>"></script>
    <script src="<?php echo e(asset('js/ResizeSensor.js')); ?>"></script>
    <script src="<?php echo e(asset('js/dashboard.js')); ?>"></script>
    <?php endif; ?>
    <script type="text/javascript">
        $(function() {

            $.ajaxSetup({
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                }
            });

        }); //end of ready
    </script>


<script src="<?php echo e(asset('js/sweetalert2.js')); ?>"></script>

    <?php echo $__env->make('layouts.includes._scripts', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
    <?php echo \Livewire\Mechanisms\FrontendAssets\FrontendAssets::scripts(); ?>

    <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('wire-elements-modal');

$__html = app('livewire')->mount($__name, $__params, 'ddBoq8b', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

    <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'livewire-alert::components.scripts','data' => []] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('livewire-alert::scripts'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
<?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>

        
        
        
        
        

        
        
        
        
        
    <?php echo $__env->yieldPushContent('scripts'); ?>

</body>

</html>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/main.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/266c8afd0f6ec73c029315e4b3af5705c53c75c9.php

      
-----------------------------------------------


      <html lang="ar">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <link type="text/css" href="" rel="stylesheet" />
    <?php if(app()->getLocale() == 'ar'): ?>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.rtl.min.css"
        integrity="sha384-DOXMLfHhQkvFFp+rWTZwVlPVqdIhpDVYT9csOnHSgWQWPX0v5MCGtjCJbY6ERspU" crossorigin="anonymous">
    <?php else: ?>

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
            integrity="sha384-DOXMLfHhQkvFFp+rWTZwVlPVqdIhpDVYT9csOnHSgWQWPX0v5MCGtjCJbY6ERspU" crossorigin="anonymous">
        <?php endif; ?>

        <link href="<?php echo e(asset('css/print.min.css')); ?>" rel="stylesheet">
</head>
<body class="">
    <div style=" margin-bottom:20px;">
        <img style="float: right;" width="100px" height="100px" src="<?php echo e(public_path('img/royal.png')); ?>" alt="">
        <p class="text-center" style="font-size: 30px" ><?php echo e($data['university_name']); ?></p>
        
    </div>
    <div>
        <p class=" text-center" style="font-size: 26px" >ايصال مالي</p>
        <div>
            <div style="margin-top: 10px">
                <span style="float: right;" >
                    <span ><?php echo e($data['date']->toDateString()); ?></span>
                    <span > : تاريخ الدفع</span>
                </span>
                <span class="">
                    <span ><?php echo e($data['id']); ?></span>
                    <span > :  رقم الايصال</span>
                </span>
            </div>
            <div style="margin-top: 80px">
                <span style="float: right;"> :اسم الطالب</span>
                <span style="float: left" ><?php echo e($data['student_name']); ?></span>
            </div>
            <div style="margin-top: 100px">
                <span style="float: right;" >
                    <span ><?php echo e($data['department']); ?></span>
                    <span > : البرنامج</span>
                </span>
                <span class="">
                    <span ><?php echo e($data['study_date']); ?></span>
                    <span >: العام الدراسي</span>
                </span>
            </div>
            
            <div style="margin-top: 100px">

                
                <table class="table text-right">
                    <thead class="">
                      <tr>
                        <th scope="col">المبلغ</th>
                        <th scope="col">البيان</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                          <td><?php echo e($data['amount']); ?></td>
                          <td>رسوم دراسية</td>
                      </tr>
                    </tbody>
                  </table>
            </div>
            <div style="margin-top: 10px">

                <hr>
            </div>
            <div style="margin-top: 100px">
                <span style="float: right;"> : اسم المتحصل</span>
                <span style="float: left;"><?php echo e($data['user']); ?></span>
            </div>
            <div class="" style="margin-top: 100px">
                <span style="float: right;"> : تاريخ الطباعة</span>
                <span style="float: left;"><?php echo e(now()->toDateString()); ?></span>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="<?php echo e(asset('js/print.min.js')); ?>"></script>
    <script>
        window.print()

    </script>
</body>

</html>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/prints/payment-invoice.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/26423ca33331237109d50b2ed89da12d6769754e.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'verify-headings']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'verify-headings']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('site.verify_columns'); ?>
         <?php $__env->endSlot(); ?>

         <?php $__env->slot('body', null, []); ?> 
            <div class="mx-6">
                <!-- __BLOCK__ --><?php if($excelError): ?>
                    <div class="alert alert-danger alert-solid pd-20" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                  <span aria-hidden="true">×</span>
                </button>
                <div class="d-sm-flex align-items-center justify-content-start">
                  <i class="icon ion-ios-close-outline lh-0 tx-52"></i>
                  <div class="ms-4 text-start">
                    <h5 class="mg-b-2 "><?php echo app('translator')->get('admin.import_students.error'); ?></h5>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.row'); ?> : <?php echo e($excelError->get('row')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.attribute'); ?> : <?php echo e($excelError->get('attribute')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import.errors'); ?> : </p>

                    <ul>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $excelError->get('messages'); $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $message): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <li><?php echo e($message); ?></li>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </ul>
                  </div>
                </div><!-- d-flex -->
              </div>
                <?php endif; ?> <!-- __ENDBLOCK__ -->
                <!-- __BLOCK__ --><?php $__currentLoopData = $headerColumns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $column): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                <div class="d-flex justify-content-between align-items-center mb-2 px-2">
                    <div class="ms-5">
                        <p class="text-dark"><?php echo e(__('admin.import_marks.' . $column)); ?></p>
                        </div><div class="d-inline-block ">
                        <div class="select-wrapper">
                        <select v-data wire:model='importInputs.<?php echo e($column); ?>' class="form-control select2" >
                            <option value=""><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $sheetColumns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $sheetColumn): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>

                                <option <?php if($sheetColumn == $column): echo 'selected'; endif; ?>

                                >
                                        <?php echo e($sheetColumn); ?>

                                </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                    </div>
                    <?php $__errorArgs = ["importInputs.$column"];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                    <p class="text-danger" role="alert">
                         <strong><?php echo e($message); ?></strong>
                    </p>
                    <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    </div>
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
            </div>
         <?php $__env->endSlot(); ?>

             <?php $__env->slot('footer', null, []); ?> 
                 <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'import']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/mark/includes/_verify-excel-headings.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/25333a7636f6773ea651bffce1a8189f4f3f790c.php

      
-----------------------------------------------


      <?php $__env->startSection('title', __('Not Found')); ?>
<?php $__env->startSection('code', '404'); ?>
<?php $__env->startSection('message', __('Not Found')); ?>

<?php echo $__env->make('errors::minimal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/errors/404.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/23eda9c43874d6920a013fb80b62f9a0243a9bcb.php

      
-----------------------------------------------


      <div class="br-sideleft overflow-y-auto " style="background-color: #0A2F47 !important">
    <label class="sidebar-label pd-x-10 mg-t-20 op-3">القائمة</label>
    <ul class="br-sideleft-menu">

        <!-- home -->
        <li class="br-menu-item">
             <a href="<?php echo e(route('dashboard.admin.home')); ?>"
                class="br-menu-link my-3  menu-link <?php echo e(request()->is('*home*') ? 'active' : ''); ?>">
                <i class="menu-item-icon icon ion-ios-gear-outline tx-24"></i>
                <span class="menu-item-label"><?php echo app('translator')->get('site.home'); ?></span>
            </a>
        </li>

        <?php switch(session()->get('module','students')):

        case ('students'): ?>
            <?php echo $__env->make('layouts.includes.sidebar_modules.students_module', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        <?php break; ?>

        <?php case ('study'): ?>
        <?php echo $__env->make('layouts.includes.sidebar_modules.study_plan_module', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        <?php break; ?>

        <?php case ('financial'): ?>
        <?php echo $__env->make('layouts.includes.sidebar_modules.payments_module', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        <?php break; ?>

        <?php case ('elearning'): ?>
        <?php echo $__env->make('layouts.includes.sidebar_modules.elearning_module', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        <?php break; ?>

        <?php case ('results'): ?>
        <?php echo $__env->make('layouts.includes.sidebar_modules.results_module', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        <?php break; ?>

        <?php case ('settings'): ?>
        <?php echo $__env->make('layouts.includes.sidebar_modules.settings_module', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        <?php break; ?>

        <?php default: ?>
            
        <?php endswitch; ?>



        


        

        


</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/layouts/includes/_side.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/238a896715c0d719c6ab12138f486713de801c8b.php

      
-----------------------------------------------


      <div>
    <?php if(isset($jsPath)): ?>
        <script><?php echo file_get_contents($jsPath); ?></script>
    <?php endif; ?>
    <?php if(isset($cssPath)): ?>
        <style><?php echo file_get_contents($cssPath); ?></style>
    <?php endif; ?>

    <div
            x-data="LivewireUIModal()"
            x-on:close.stop="setShowPropertyTo(false)"
            x-on:keydown.escape.window="closeModalOnEscape()"
            x-show="show"
            class="fixed inset-0 z-10 overflow-y-auto"
            style="display: none;"
    >
        <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-10 text-center sm:block sm:p-0">
            <div
                    x-show="show"
                    x-on:click="closeModalOnClickAway()"
                    x-transition:enter="ease-out duration-300"
                    x-transition:enter-start="opacity-0"
                    x-transition:enter-end="opacity-100"
                    x-transition:leave="ease-in duration-200"
                    x-transition:leave-start="opacity-100"
                    x-transition:leave-end="opacity-0"
                    class="fixed inset-0 transition-all transform"
            >
                <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>

            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <div
                    x-show="show && showActiveComponent"
                    x-transition:enter="ease-out duration-300"
                    x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                    x-transition:leave="ease-in duration-200"
                    x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                    x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    x-bind:class="modalWidth"
                    class="inline-block w-full align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:w-full"
                    id="modal-container"
                    x-trap.noscroll.inert="show && showActiveComponent"
                    aria-modal="true"
            >
                <?php $__empty_1 = true; $__currentLoopData = $components; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $id => $component): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                    <div x-show.immediate="activeComponent == '<?php echo e($id); ?>'" x-ref="<?php echo e($id); ?>" wire:key="<?php echo e($id); ?>">
                        <?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split($component['name'], $component['arguments']);

$__html = app('livewire')->mount($__name, $__params, $id, $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>
                    </div>
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
                <?php endif; ?>
            </div>
        </div>
    </div>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/vendor/wire-elements-modal/modal.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/20ddc513554bf98c771a215f71a60f50a10b0a50.php

      
-----------------------------------------------


      <div class="br-section-wrapper p-0 hidden">

    <div class="new-card">
        <div class="row container-fluid">

            <div wire:loading style="" id="spinner" >
                <?php if (isset($component)) { $__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d = $component; } ?>
<?php $component = App\View\Components\Spinner::resolve([] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('spinner'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(App\View\Components\Spinner::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['show' => true]); ?>
<?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d)): ?>
<?php $component = $__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d; ?>
<?php unset($__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d); ?>
<?php endif; ?>
            </div>

            
            <div class="input-group col-12 col-md-6 my-2">
                <div class="select-wrapper">
                    <select wire:model.live='studyDateId'
                        class="form-control ">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($studyDate->id); ?>">
                            <?php echo e($studyDate->name); ?>

                        </option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>
<small class="tx-info"><?php echo app('translator')->get('admin.study_dates.study_date'); ?></small>
            </div>

            
            <div class="input-group col-12 col-md-6 my-2">
                <div class="select-wrapper">

                    <select wire:model.live='departmentId'
                        class="form-control report-search">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($department->id); ?>">
                            <?php echo e($department->name); ?>

                        </option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>

                <small class="tx-info"><?php echo app('translator')->get('admin.departments.department'); ?></small>
            </div>

            
            <div class="input-group col-12 col-md-6 my-2">
                <div class="select-wrapper">

                    <select wire:model.live='semesterId' class="form-control report-search ">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->semesters; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $semester): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($semester->id); ?>">
                            <?php echo e($semester->name); ?>

                        </option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>

                <small class="tx-info"><?php echo app('translator')->get('admin.semesters.semester'); ?></small>

            </div>
        </div>

<div class="text-end">
    <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.active_study_plan.archive.create_via_excel')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.active_study_plan.archive.create_via_excel')).'']); ?><?php echo app('translator')->get('site.add_via_excel' , ['target' => __('admin.active_study_plans.active_study_plan')]); ?> <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
            </div>
    </div>

    <div class="new-card mt-5">
        <div class="row">
            <div class="col-5 mb-3">
                <div class="row text-primary">
                    <div class="col-5 text-primary font-weight-bold"><?php echo app('translator')->get('admin.departments.department'); ?></div>
                    <div class="col-6"><?php echo e($this->departments->firstWhere('id',$departmentId)?->name); ?></div>
                </div>
                <p></p>
            </div>
            <div class="col-5 mb-3">
                <div class="row text-primary">
                    <div class="col-5 text-primary font-weight-bold"><?php echo app('translator')->get('admin.semesters.semester'); ?></div>
                    <div class="col-6"><?php echo e($this->semesters->firstWhere('id',$semesterId)?->name); ?></div>
                </div>
                <p></p>
            </div>
            <div class="col-5">
                <div class="row text-primary">
                    <div class="col-5 text-primary font-weight-bold"><?php echo app('translator')->get('admin.courses.courses_count'); ?></div>
                    
                    <div class="col-6"><?php echo e($this->studyPlanDatesInfo->first()?->courses_count ?? 0); ?></div>
                </div>
                <p></p>
            </div>
            <div class="col-5">
                <div class="row text-primary">
                    <div class="col-6 text-primary font-weight-bold"><?php echo app('translator')->get('admin.courses.hours_count'); ?></div>
                    <div class="col-6"><?php echo e($this->studyPlanDatesInfo->first()?->hours_count ?? 0); ?></div>
                </div>
                <p></p>
            </div>
        </div>


    </div>

    <table class="table new-table">
        <thead>
            <tr>
                <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                <td><?php echo app('translator')->get('admin.courses.name_en'); ?></td>
                <td><?php echo app('translator')->get('admin.courses.code'); ?></td>
                <td><?php echo app('translator')->get('admin.teachers.teachers'); ?></td>
                <td><?php echo app('translator')->get('admin.courses.hours'); ?></td>
            </tr>
        </thead>
        <tbody>
            <?php $__empty_1 = true; $__currentLoopData = $this->studyPlanDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyPlanDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
            <tr>
                <td><?php echo e($studyPlanDate->id); ?></td>
                <td><?php echo e($studyPlanDate->name_en); ?></td>
                <td><?php echo e($studyPlanDate->code); ?></td>
                <td>
                    <!-- __BLOCK__ --><?php if($this->studyPlanDatesTeachers?->where('study_plan_date_id',$studyPlanDate->id)?->count() > 0 ?? []): ?>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyPlanDatesTeachers?->where('study_plan_date_id',$studyPlanDate->id) ?? []; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyPlanDateTeacher): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>

                            <span><?php echo e($studyPlanDateTeacher->teacher->name); ?> , </span>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    <?php else: ?>
                        <span><?php echo app('translator')->get('site.no_target' , ['target' => __('admin.teachers.teachers')]); ?></span>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                </td>
                <td><?php echo e($studyPlanDate->hours); ?></td>

            </tr>

            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
            <tr>
                <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
            </tr>
            <?php endif; ?>

        </tbody>
    </table>

</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/active-study-plan/active-study-plans-archive.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/1f8fc8c1a0fc7e55ccd49a0197b1d158d89ff6d6.php

      
-----------------------------------------------


      <div class="br-section-wrapper p-0">

            <form class="p-4" method="post" enctype="multipart/form-data"
                wire:submit="submit">
                <?php echo csrf_field(); ?>

                <div class="row my-md-1">

                    
                    <div class="form-group col-12 col-md-6 <?php $__errorArgs = ['studyDateId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> has-danger <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <label><?php echo app('translator')->get('admin.study_dates.study_date'); ?> <span class="text-danger">*</span></label>
                        <select wire:model='studyDateId' style="width: 100%" class="form-control"
                            data-placeholder="Choose Browser">
                            <option ><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($studyDate->id); ?>"
                                    ><?php echo e($studyDate->name); ?>

                            </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['studyDateId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
                    <div class="form-group col-12 col-md-6 <?php $__errorArgs = ['departmentId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> has-danger <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <label><?php echo app('translator')->get('admin.departments.department'); ?> <span class="text-danger">*</span></label>
                        <select wire:model='departmentId' style="width: 100%" class="form-control"
                            data-placeholder="Choose Browser">
                            <option ><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <option value="<?php echo e($department->id); ?>"
                                    ><?php echo e($department->name); ?>

                            </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        <?php $__errorArgs = ['departmentId'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    
                    <div class="form-group col-12 col-md-6">
                        <label><?php echo app('translator')->get('site.file'); ?> <span class="text-danger">*</span></label>
                        <input accept="xlsx" wire:model="excelFile" type="file" name="excel" autofocus
                                           class="form-control <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?> is-invalid <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>">
                        <?php $__errorArgs = ['excelFile'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                        <span class="text-danger" role="alert">
                            <strong><?php echo e($message); ?></strong>
                        </span>
                        <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                </div>

                <div class="d-flex justify-content-between">
                    <div class="form-group">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => []] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.create'); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>

                    <div class="form-group ">
<?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.active_study_plan.archive.export_empty_excel_sample')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.active_study_plan.archive.export_empty_excel_sample')).'']); ?>
                            <i class="fa fa-plus"></i>
                            <?php echo app('translator')->get('site.download_empty_sample'); ?>
                         <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                    </div>
                </div>


            </form><!-- end of form -->

        <?php echo $__env->make('livewire.dashboard.admin.active-study-plan.includes._verify-excel-headings', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
        </div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/active-study-plan/import-active-study-plans.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/1d9d8ec38099a038987a56938e4a522391f8136f.php

      
-----------------------------------------------


      <?php $__env->startSection('content'); ?>

<?php
$__split = function ($name, $params = []) {
    return [$name, $params];
};
[$__name, $__params] = $__split('dashboard.student.create-student',['student' => $student]);

$__html = app('livewire')->mount($__name, $__params, 'eIqTM31', $__slots ?? [], get_defined_vars());

echo $__html;

unset($__html);
unset($__name);
unset($__params);
unset($__split);
if (isset($__slots)) unset($__slots);
?>

<?php $__env->stopSection(); ?>

<?php $__env->startPush('scripts'); ?>

<?php $__env->stopPush(); ?>
<?php echo $__env->make('layouts.main', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/students/edit.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/1a8b9aae720bf5b23f65dbf034a25e883e2864da.php

      
-----------------------------------------------


      <div class="widget-2">
    <div class="card shadow-base">
        <div class="card-header">
            <h6 class="card-title tx-13 pd-t-10 pd-b-10 text-dark">أعلى المعدلات</h6>
        </div>
        <div class="table-responsive">
            <table class="table pd-b-12 mg-b-0">
                <thead>
                    <tr>
                        <th><span class="tx-medium text-dark">الترتيب</span></th>
                        <th><span class="tx-medium text-dark">الطالب</span></th>
                        <th><span class="tx-medium text-dark">م. التراكمي</span></th>
                    </tr>
                </thead>
                <tbody>
                    <?php $__currentLoopData = $students; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $student): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <tr>
                            <td><?php echo e($loop->index + 1); ?></td>
                            <td><span class="tx-dark"><?php echo e($student->full_name); ?></span></td>
                            <td><?php echo e($student->cgpa); ?></td>
                        </tr>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>

                </tbody>
            </table>
        </div>
    </div>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/results/_include/statistics/top-students-cgpa.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/18227927e09308599d2f833f2a74941f320e7754.php

      
-----------------------------------------------


      <div class="new-card">

<div class="pt-4 pr-4 pl-4 pb-2 ">
    <h6 class="br-section-label"><?php echo app('translator')->get('admin.payment_orders.invoice_form_title'); ?></h6>
    
</div>
<!-- padding -->
<div class="pr-4 pl-4">

    
    
    
    
    
    
    
    
    
    
    <!-- row -->
    <form id="store-payments" action="<?php echo e(route('dashboard.admin.payments.store')); ?>" method="post">
        <?php echo csrf_field(); ?>
        <?php echo method_field('post'); ?>

        <div class="row">
            <input type="number" name="payment_order_id" value="<?php echo e($paymentOrder->id); ?>" hidden>
            <input type="number" name="student_id" value="<?php echo e($paymentOrder->student->id); ?>" hidden>

            <div class="col-lg-3">
                <div class="form-group">
                    <label class="form-control-label" for=""><?php echo app('translator')->get("admin.payments.amount"); ?> <span class="tx-danger">*</span></label>
                    <div class="input-group">

                        <input id="amount" type="number" name="amount"
                            class="form-control amount calculator-rate input-number" placeholder="000,000.00"
                            value="<?php echo e($paymentOrder->amount); ?>"
                            max="<?php echo e($paymentOrder->total_amount > 0 ? $paymentOrder->total_amount : $paymentOrder->amount); ?>"
                            <?php if (app(\Illuminate\Contracts\Auth\Access\Gate::class)->denies('update-payment_orders', $paymentOrder)): ?> readonly <?php endif; ?> 

                        >
                        <span class="input-group-addon tx-size-sm lh-2">
                            <?php echo e($paymentOrder->currency?->code); ?></span>
                    </div>
                    <small class="tx-info"><?php echo app('translator')->get('admin.payment_orders.invoice_form_hint'); ?></small>
                </div>
            </div>

            
            
            
            
            
            
            
            
            
            
            

            
            
            
            
            
            
            
            
            
            
            
            

            
            
            
            
            
            
            
            
            

        </div>

        <hr>

        <div class="col-lg-4 px-0">
            <label class="form-control-label"><?php echo app('translator')->get('admin.payment_types.types'); ?></label>
            <select name="payment_type_id" class="form-select select2">
                <?php $__currentLoopData = $paymentTypes; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $type): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>

                <option value="<?php echo e($type->id); ?>"><?php echo e($type->type); ?></option>

                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
            </select>
        </div>

        <div class="col-lg-4 px-0">
            <label class="form-control-label"><?php echo app('translator')->get('admin.payment_orders.description'); ?></label>
            <textarea name="description" class="form-control" rows="4"></textarea>
        </div>


    </form>

</div>
<!-- action buttons -->
<div class="card-footer tx-12 pd-y-15 bg-transparent tx-left">


    <button class="btn btn-primary" id="add-payments"><i class="icon ion-disc"></i> <?php echo app('translator')->get('site.save'); ?></button>
    <button class="btn btn-primary" id="add-payments-print"><i class="icon ion-disc"></i><?php echo app('translator')->get('site.save_and_print'); ?></button>
    
</div>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/payments/includes/_invoice.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/17548d40b2c7a7649a1d2b6a0004b2b308e55374.php

      
-----------------------------------------------


      <div>

    <div wire:loading>
        <?php echo $__env->make('components.spinner', ['show' => true], \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
    </div>

    <div class="d-flex align-items-center justify-content-start pd-x-20 pd-sm-x-30 pd-t-25 mg-b-20 mg-sm-b-30"
        style="padding-right: 30px;">

        <div class="form-group mb-0 mr-sm-1">
            <input type="text" class="form-control" placeholder="<?php echo app('translator')->get('site.search'); ?>" wire:model.live.debounce.500ms="search">
        </div>
        <!-- btn-group -->

    </div>


    <div class="br-pagebody">

        <div class="br-section-wrapper model-invoice p-0 mb-3 collapse" id="paying" role="tabpanel"
            aria-labelledby="headingOne">
            

            <!-- br-section-wrapper -->
        </div>
        <div class="br-section-wrapper edit-model-invoice p-0 mb-3 collapse" id="updating" role="tabpanel"
            aria-labelledby="headingOne">
            

            <!-- br-section-wrapper -->
        </div>

        <div class="br-section-wrapper p-0">
            <table class="table new-table new-datatable">
                <thead class="">
                    <tr class="">
                        <td class="wd-50"></td>
                        <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.students.full_name'); ?></td>
                        <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payment_orders.amount_required'); ?></td>
                        <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payment_orders.status'); ?></td>
                        <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payment_orders.created_at'); ?></td>
                        <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('site.action'); ?></td>
                    </tr>
                </thead>
                <tbody>

                    <?php $__empty_1 = true; $__currentLoopData = $paymentOrders; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $paymentOrder): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
                    <tr>
                        <td>
                            <a href="<?php echo e(route('dashboard.admin.students.show', $paymentOrder->student->id)); ?>">
                                <img width="50px" height="50px" class="rounded-circle"
                                    src="<?php echo e($paymentOrder->student->image_path); ?>">
                            </a>
                        </td>
                        <td>
                            <a href="<?php echo e(route('dashboard.admin.students.show', $paymentOrder->student->id)); ?>"
                                class="tx-inverse tx-12 tx-medium d-block">
                                <?php echo e($paymentOrder->student->full_name); ?>

                            </a>
                            <span class="d-block tx-info">PH-<?php echo e($paymentOrder->student->university_id); ?></span>
                            
                            <span class="d-block tx-dark"><?php echo e($paymentOrder->student->department?->name); ?></span>
                        </td>
                        <td>
                            <?php echo e(number_format($paymentOrder->amount, 2) . ' ' . $paymentOrder->currency?->code); ?>

                        </td>
                        <td>
                            <?php echo e($paymentOrder->formattedStatus); ?>

                        </td>
                        <td>
                            <?php echo e($paymentOrder->created_at->format('m-d-Y')); ?>

                        </td>
                        <td>
                            <div class="btn-group">
                                <!-- __BLOCK__ --><?php if(auth()->user()->hasPermissionTo('update-payment_orders')): ?>
                                <a
data-bs-toggle="modal" data-bs-target="#pay"
                                    href="#updating"
                                    class="btn btn-outline-warning btn-sm edit-my-invoice mr-2"><?php echo app('translator')->get('site.edit'); ?> <i
                                        class="fa fa-hand-grab-o"></i></a>

                                <?php endif; ?> <!-- __ENDBLOCK__ -->
                                <!-- __BLOCK__ --><?php if(auth()->user()->hasPermissionTo('create-payment_orders')): ?>

                                <a
                                    wire:click="showPayModal(<?php echo e($paymentOrder->id); ?>)"
                                    href="#paying"
                                    class="btn btn-outline-info btn-sm my-invoice"><?php echo app('translator')->get('admin.payments.pay'); ?> <i
                                        class="fa fa-hand-grab-o"></i></a>
                                <?php endif; ?> <!-- __ENDBLOCK__ -->
                            </div>
                        </td>
                    </tr>
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>

                    <tr>
                        <td><td/>
                        <td><?php echo app('translator')->get('site.no_date_found'); ?><td/>
                        <td><td/>
                    </tr>
                        <?php endif; ?>
                </tbody>
            </table>
            <div class="card-footer tx-12 pd-y-15 bg-transparent pb-5">
                <?php echo e($paymentOrders->links()); ?>

            </div>
            <!-- br-section-wrapper -->
        </div>

    </div>

    <?php echo $__env->make('livewire.dashboard.admin.payment-order.includes._pay-payment-order-modal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/payment-order/show-payment-order.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/1208c091b82a567c8cf024c87f084bf6c91622bc.php

      
-----------------------------------------------


      <?php if(auth()->user()->hasPermissionTo('update-study_dates')): ?>
    <a href="<?php echo e(route('dashboard.admin.study_dates.edit', $id)); ?>" class="btn text-warning btn-sm"
        data-html="true" data-placement="right" title="<?php echo app('translator')->get('site.edit'); ?>">
        <i class="fas fa-pen"></i> 
        
    </a>
<?php endif; ?>

<?php if(auth()->user()->hasPermissionTo('delete-study_dates')): ?>
    <form action="<?php echo e(route('dashboard.admin.study_dates.destroy', $id)); ?>" class="my-1 my-xl-0" method="post" style="display: inline-block;">
        <?php echo csrf_field(); ?>
        <?php echo method_field('delete'); ?>
        <button type="submit" class="btn text-danger btn-sm delete"
            data-html="true" data-placement="right" title="<?php echo app('translator')->get('site.delete'); ?>">
            <i class="fa fa-trash"></i> 
            
        </button>
    </form>
<?php endif; ?><?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/dashboard/admin/study_dates/data_table/actions.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/0b760b6fad9da0a96d04828d04840dbf0a51ca4a.php

      
-----------------------------------------------


      <!DOCTYPE html>
<html lang="en">


<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
  <link rel="stylesheet" href="<?php echo e(asset('dashboard/bootstrap/css/bootstrap.css')); ?>">

  <style>
    @import url('https://fonts.googleapis.com/css2?family=Almarai:wght@300;400;700&display=swap');

    body {
      font-family: 'Almarai', sans-serif;
    }

  </style>

<?php if(app()->getLocale() == 'ar'): ?>

    <style>
     .text-aligned {
        text-align:right;
    }

    </style>
<?php else: ?>

    <style>
     .text-aligned {
        text-align:left !important;
    }

    </style>
<?php endif; ?>

  
  <title>
       <?php echo app('translator')->get('site.welcome_back_unstretched'); ?> - <?php echo app('translator')->get('site.name'); ?>
  </title>

</head>
<nav class="bg-white h-10 flex flex-row items-center justify-between self-center">

</nav>

<body dir="" class="overflow-y-hidden container-fluid px-4  h-screen ">

  <div class="m-2 px-3">
    <div class="d-flex justify-content-between">
      <h4 class="mt-3">
        <a style="color: #1CAF9A" href="<?php echo e(route('dashboard.admin.logout')); ?>"><?php echo app('translator')->get('site.logout'); ?></a>

      </h4>
      <a href="#" class="logo">
        <img width="100" src="<?php echo e(asset('img/royal2.png')); ?>" alt="">
      </a>

    </div>

    <h1
        class="text-aligned rtl-align mt-3 mb-5 font-monospace" style="color: #1CAF9A;margin-right:100px"><?php echo app('translator')->get('site.welcome_back'); ?></h1>

    <div class="">
      <div class="row">
        <div class="col-8">
          <div class="row" style="gap:20px">


            <?php if(auth('admin')->user()->hasPermissionTo('read-active_study_plan')): ?>

            
            <div style="background: #1CAF9A;border-radius:20px; width:20%">
              <div class="py-5 rounded">
                <div class="text-center">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'elearning','route' => 'dashboard.admin.teachers.index'])); ?>">
                    <img class='w-25' src="<?php echo e(asset('img/welcome-icon.svg')); ?>" alt="">
                  </a>
                </div>
                <h5 class="text-center  mt-4">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'elearning','route' => 'dashboard.admin.teachers.index'])); ?>">
                    <?php echo app('translator')->get('site.elearning_module'); ?>
                    </a>
                </h5>
              </div>
            </div>

            <?php endif; ?>


            <?php if(auth('admin')->user()->hasPermissionTo('read-elearning') && auth('admin')->user()->hasRole('teacher')): ?>

            
            <div style="background: #1CAF9A;border-radius:20px; width:20%">
              <div class="py-5 rounded">
                <div class="text-center">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'elearning','route' => 'elearning.teacher.index'])); ?>">
                    <img class='w-25' src="<?php echo e(asset('img/welcome-icon.svg')); ?>" alt="">
                  </a>
                </div>
                <h5 class="text-center  mt-4">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'elearning','route' => 'elearning.teacher.index'])); ?>">
                    التعليم
                الالكتروني</a>
                </h5>
              </div>
            </div>

            <?php endif; ?>

            <?php if(
            auth('admin')->user()->hasPermissionTo('read-payments') ||
            auth('admin')->user()->hasPermissionTo('read-payment_orders') ||
            auth('admin')->user()->hasPermissionTo('read-reports_accountant')
            ): ?>
            
            <div style="background: #1CAF9A;border-radius:20px; width:20%">
              <div class="py-5 rounded">
                <div class="text-center">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'financial','route' => 'dashboard.admin.payments-module'])); ?>">
                    <img class='w-25' src="<?php echo e(asset('img/welcome-icon.svg')); ?>" alt="">
                  </a>
                </div>
                <h5 class="text-center  mt-4">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'payments','route' => 'dashboard.admin.payments-module'])); ?>"><?php echo app('translator')->get('site.payments_module'); ?></a>
                </h5>
              </div>
            </div>
            <?php endif; ?>



            <?php if(auth('admin')->user()->hasPermissionTo('read-active_study_plan')): ?>
            
            <div style="background: #1CAF9A;border-radius:20px; width:20%">
              <div class="py-5 rounded">
                <div class="text-center">
                  <a data-module='study' class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'study','route' => 'dashboard.admin.active_study_plan.index'])); ?>">
                    <img class='w-25' src="<?php echo e(asset('img/welcome-icon.svg')); ?>" alt="">
                  </a>
                </div>
                <h5 class="text-center  mt-4">
                  <a data-module='study' class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'study_plan','route' => 'dashboard.admin.active_study_plan.index'])); ?>"><?php echo app('translator')->get('site.active_study_plan_module'); ?></a>
                </h5>
              </div>
            </div>
            <?php endif; ?>


            <?php if(
            auth('admin')->user()->hasPermissionTo('read-students') ||
            auth('admin')->user()->hasPermissionTo('read-reports_recorder')
            ): ?>

            
            <div style="background: #1CAF9A;border-radius:20px; width:20%">
              <div class="py-5 rounded">
                <div class="text-center">
                  <a class="text-white d-inline "
                    href="<?php echo e(route('redirect-to-module',['module' => 'students','route' => 'dashboard.admin.students-module'])); ?>">
                    <img class='w-25' src="<?php echo e(asset('img/welcome-icon.svg')); ?>" alt="">
                  </a>
                </div>
                <h5 class="text-center  mt-4">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'students','route' => 'dashboard.admin.students-module'])); ?>"><?php echo app('translator')->get('site.admission_module'); ?>
                     </a>
                </h5>
              </div>
            </div>
            <?php endif; ?>

            





            <?php if(
            auth('admin')->user()->hasPermissionTo('read-departments') ||
            auth('admin')->user()->hasPermissionTo('read-admission_types') ||
            auth('admin')->user()->hasPermissionTo('read-type_discounts') ||
            auth('admin')->user()->hasPermissionTo('read-study_dates') ||
            auth('admin')->user()->hasPermissionTo('read-admins') ||
            auth('admin')->user()->hasPermissionTo('read-roles')

            ): ?>
            
            <div style="background: #1CAF9A;border-radius:20px; width:20%">
              <div class="py-5 rounded">
                <div class="text-center">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'settings','route' => 'dashboard.admin.departments.index'])); ?>">
                    <img class='w-25' src="<?php echo e(asset('img/welcome-icon.svg')); ?>" alt="">
                  </a>
                </div>
                <h5 class="text-center  mt-4">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'settings','route' => 'dashboard.admin.departments.index'])); ?>">
                  <?php echo app('translator')->get('site.settings_module'); ?>  </a>
                </h5>
              </div>
            </div>
            <?php endif; ?>

            <?php if(auth('admin')->user()->hasPermissionTo('read-results')): ?>
            
            <div style="background: #1CAF9A;border-radius:20px; width:20%">
              <div class="py-5 rounded">
                <div class="text-center">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'results','route' => 'dashboard.admin.results.index'])); ?>">
                    <img class='w-25' src="<?php echo e(asset('img/welcome-icon.svg')); ?>" alt="">
                  </a>
                </div>
                <h5 class="text-center  mt-4">
                  <a class="text-white"
                    href="<?php echo e(route('redirect-to-module',['module' => 'results','route' => 'dashboard.admin.results.index'])); ?>"><?php echo app('translator')->get('site.results_module'); ?></a>
                </h5>
              </div>
            </div>
            <?php endif; ?>

          </div>
        </div>
        <div class="col-4">

          <img class="w-75" src="<?php echo e(asset('img/welcome.svg')); ?>" alt="">
        </div>
        </div>
        </div>
        </body>

</html>


<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/welcome.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/0b373156b15db3b4f1e07247e99c0f910a568fa4.php

      
-----------------------------------------------


      <div class="br-section-wrapper p-0 hidden">

    <div class="new-card">
        <div class="row container">

            <div wire:loading style="" id="spinner" >
                <?php if (isset($component)) { $__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d = $component; } ?>
<?php $component = App\View\Components\Spinner::resolve([] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('spinner'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(App\View\Components\Spinner::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['show' => true]); ?>
<?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d)): ?>
<?php $component = $__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d; ?>
<?php unset($__componentOriginala3d009c76209a1b0afa72a2a2493add4e842527d); ?>
<?php endif; ?>
            </div>

            
            <div class="input-group col-12 col-md-6 my-2">
                <div class="select-wrapper">

                    <select wire:change='getStudyPlanDates' wire:model='departmentId'
                        class="form-control report-search">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($department->id); ?>">
                            <?php echo e($department->name); ?>

                        </option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>
            </div>

            
            <div class="input-group col-12 col-md-6 my-2">
                <div class="select-wrapper">

                    <select wire:change='getStudyPlanDates' wire:model='semesterId' class="form-control report-search ">
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->semesters; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $semester): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($semester->id); ?>">
                            <?php echo e($semester->name); ?>

                        </option>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </select>
                </div>

            </div>

        </div>
    </div>

    <div class="new-card mt-5">
        <div class="row">
            <div class="col-5 mb-3">
                <div class="row text-primary">
                    <div class="col-5 text-primary font-weight-bold"><?php echo app('translator')->get('admin.departments.department'); ?></div>
                    <div class="col-6"><?php echo e($this->departments->firstWhere('id',$departmentId)?->name); ?></div>
                </div>
                <p></p>
            </div>
            <div class="col-5 mb-3">
                <div class="row text-primary">
                    <div class="col-5 text-primary font-weight-bold"><?php echo app('translator')->get('admin.semesters.semester'); ?></div>
                    <div class="col-6"><?php echo e($this->semesters->firstWhere('id',$semesterId)?->name); ?></div>
                </div>
                <p></p>
            </div>
            <div class="col-5">
                <div class="row text-primary">
                    <div class="col-5 text-primary font-weight-bold"><?php echo app('translator')->get('admin.courses.courses_count'); ?></div>
                    
                    <div class="col-6"><?php echo e($this->studyPlanDatesInfo->first()?->courses_count ?? 0); ?></div>
                </div>
                <p></p>
            </div>
            <div class="col-5">
                <div class="row text-primary">
                    <div class="col-6 text-primary font-weight-bold"><?php echo app('translator')->get('admin.courses.hours_count'); ?></div>
                    <div class="col-6"><?php echo e($this->studyPlanDatesInfo->first()?->hours_count ?? 0); ?></div>
                </div>
                <p></p>
            </div>
        </div>


    </div>

    <table class="table new-table">
        <thead>
            <tr>
                <td><?php echo app('translator')->get('site.DT_RowIndex'); ?></td>
                <td><?php echo app('translator')->get('admin.courses.name_en'); ?></td>
                <td><?php echo app('translator')->get('admin.courses.code'); ?></td>
                <td><?php echo app('translator')->get('admin.teachers.name'); ?></td>
                <td><?php echo app('translator')->get('admin.courses.hours'); ?></td>
                <td><?php echo app('translator')->get('site.action'); ?></td>
            </tr>
        </thead>
        <tbody>
            <?php $__empty_1 = true; $__currentLoopData = $this->studyPlanDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyPlanDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); $__empty_1 = false; ?>
            <tr>
                <td><?php echo e($studyPlanDate->id); ?></td>
                <td><?php echo e($studyPlanDate->name_en); ?></td>
                <td><?php echo e($studyPlanDate->code); ?></td>
                <td>
                    <!-- __BLOCK__ --><?php if($this->studyPlanDatesTeachers?->where('study_plan_date_id',$studyPlanDate->id) ?? []): ?>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyPlanDatesTeachers?->where('study_plan_date_id',$studyPlanDate->id) ?? []; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyPlanDateTeacher): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>

                            <span><?php echo e($studyPlanDateTeacher->teacher->name); ?> , </span>
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    <?php else: ?>
                        <span><?php echo app('translator')->get('site.no_target' , ['target' => __('admin.teachers.teachers')]); ?></span>
                    <?php endif; ?> <!-- __ENDBLOCK__ -->

                    <i data-bs-toggle="modal" data-bs-target="#edit-teachers-modal"
                                              wire:click='openTeachersModal(<?php echo e($studyPlanDate->id); ?>)'
                        class="fa-solid fa-pen text-secondary" role="button"></i>
                </td>
                <td><?php echo e($studyPlanDate->hours); ?></td>
                <td>
                    <i wire:click='deleteCourse(<?php echo e($studyPlanDate->id); ?>)' class="fa-solid fa-trash text-secondary"
                        role="button"></i>
                </td>
            </tr>

            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); if ($__empty_1): ?>
            <tr>
                <td colspan="5" class="text-center"><?php echo app('translator')->get('site.no_data_found'); ?></td>
            </tr>
            <?php endif; ?>

        </tbody>
    </table>
    <div class="d-flex justify-content-center">
<button  type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#add-course-modal"
    ><?php echo app('translator')->get('site.add'); ?> <?php echo app('translator')->get('admin.courses.course'); ?></button>
        
        
        <!-- __BLOCK__ --><?php if(count($this->studyPlanDates) > 0): ?>


        <a class="btn btn-primary mr-2"
           href="<?php echo e(route('dashboard.admin.results.create', ['id' => $studyPlanDates->first()->id])); ?>"><?php echo app('translator')->get('admin.results.enter_first_exam_grades'); ?></a>
        <a class="btn btn-primary mr-2"
           href="<?php echo e(route('dashboard.admin.results.create-second-round-result', ['id' => $studyPlanDates->first()->id])); ?>">
<?php echo app('translator')->get('admin.results.enter_final_exam_grades'); ?>
        </a>
        <?php endif; ?> <!-- __ENDBLOCK__ -->
        <!-- Button trigger modal -->

        <!-- Courses Modal -->
       <?php echo $__env->make('livewire.dashboard.admin.active-study-plan.includes._add-course-modal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>

        <!-- Teachers Modal -->

        <?php echo $__env->make('livewire.dashboard.admin.active-study-plan.includes._edit-teachers-modal', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>


    </div>
</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/active-study-plan/active-study-plan-index.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/0aa11b1bb8db06b597a50762177b1d4af2a2e303.php

      
-----------------------------------------------


      
<section id="wizard5-p-0" role="tabpanel" aria-labelledby="wizard5-h-0" class="body current"
    aria-hidden="false" style="display: block;">

    <!-- row -->
    <div class="row">

        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for="">
                   <?php echo app('translator')->get('admin.students.name1_en'); ?>
                   <span class="tx-danger">*</span></label>
                <input wire:model='student.name1_en' type="text" class="form-control"
                    placeholder="">
            </div>
            <?php $__errorArgs = ['student.name1_en'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>
        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for=""><?php echo app('translator')->get('admin.students.name2_en'); ?></label>
                <input wire:model.defer='student.name2_en' type="text" class="form-control"
                    placeholder="">
            </div>
            <?php $__errorArgs = ['student.name2_en'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>

        <div class="col-lg-6">
            <div class="form-group" style="max-height: 140px">

                

                    <div>

                        <!-- Uploaded image area-->
                        <div class="image-area">
                            
                            <img id="imageResult"
                                style="width: 200px; height:200px; object-fit:cover;"
                                src="<?php echo e($photo ? $photo?->temporaryUrl() : asset('dashboard/images/student.png')); ?>"
                                alt=""
                                class="img-fluid rounded-circle shadow-sm mx-auto d-block">
                            

                        </div>
                    </div>

                    <div class="mb-4">
                        <!-- Upload image input-->
                        <div class="input-group  px-2 py-2 rounded-pill bg-white shadow-sm">
                            <input style="visibility: hidden" wire:model.live='photo' id="upload"
                                type="file" class="form-control border-0">
                            
                            <div class="input-group-append">
                                <label class="d-flex" for="upload" >
                                    <p class="text-uppercase font-weight-bold text-muted my-auto mx-4">
                                        <?php echo e($photo?->getClientOriginalName()); ?>

                                    </p>
                                    <div  class="btn btn-light m-0 rounded-pill px-4">
                                        <i class="fa fa-cloud-upload mr-2 text-muted"></i><small
                                            class="text-uppercase font-weight-bold text-muted">Choose
                                            file</small>
                                    </div>
                                </label>

                            </div>
                        </div>
                    </div>

                    

            </div>


        </div>


        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for="">
                    <?php echo app('translator')->get('admin.students.name3_en'); ?>
                    <span class="tx-danger">*</span></label>
                <input wire:model.defer='student.name3_en' type="text" class="form-control"
                    placeholder="">
            </div>
            <?php $__errorArgs = ['student.name3_en'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>
        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for="">
                    <?php echo app('translator')->get('admin.students.name4_en'); ?>
                    <span class="tx-danger">*</span></label>
                <input wire:model.defer='student.name4_en' type="text" class="form-control"
                    placeholder="">
            </div>
            <?php $__errorArgs = ['student.name4_en'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>
        


        <div class="row mt-5">
        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for="">
                    <?php echo app('translator')->get('admin.students.name1'); ?>
                     </label>
                <input wire:model.defer='student.name1' type="text" class="form-control"
                    placeholder="">
                <?php $__errorArgs = ['student.name1'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                <span class="text-danger" role="alert">
                    <strong><?php echo e($message); ?></strong>
                </span>
                <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
            </div>
        </div>
        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for="">
                    <?php echo app('translator')->get('admin.students.name2'); ?>
</label>
                <input wire:model.defer='student.name2' type="text" class="form-control"
                    placeholder="">
            </div>
            <?php $__errorArgs = ['student.name2'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>
        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for="">
                    <?php echo app('translator')->get('admin.students.name3'); ?>
 </label>
                <input wire:model.defer='student.name3' type="text" class="form-control"
                    placeholder="">
            </div>
            <?php $__errorArgs = ['student.name3'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>
        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for="">
                    <?php echo app('translator')->get('admin.students.name4'); ?>
                    </label>
                <input wire:model.defer='student.name4' type="text" class="form-control"
                    placeholder="">
            </div>
            <?php $__errorArgs = ['student.name4'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>

        </div>

        <div class="col-lg-3">
            <div class="form-group">
                <label class="form-control-label" for=""><?php echo app('translator')->get('admin.students.gender'); ?> <span
                        class="tx-danger">*</span></label>
                <select wire:model.defer='student.gender' class="form-control" placeholder="">
                    <option value="">-- <?php echo app('translator')->get('site.choose'); ?>--</option>
                    <option value="male"><?php echo app('translator')->get('admin.students.male'); ?></option>
                    <option value="female"><?php echo app('translator')->get('admin.students.female'); ?></option>
                </select>
                <small class="tx-info"><?php echo app('translator')->get('admin.create_student.gender_tip'); ?></small>
                <small class="tx-info">قم بإختيار جنس الطالب</small>
            </div>
            <?php $__errorArgs = ['student.gender'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>
        <div class="col-lg-3">
            <label class="form-control-label" for=""><?php echo app('translator')->get('admin.students.phone'); ?> <span
                    class="tx-danger">*</span></label>
            <div class="input-group">
                <span class="input-group-addon"><i
                        class="fa fa-universal-access tx-16 lh-0 op-6"></i></span>
                <input wire:model.defer='student.phone' type="number" class="form-control"
                    placeholder="123456789">
            </div>
            <small class="tx-info"><?php echo app('translator')->get('admin.create_student.phone_number_tip'); ?></small>

            <?php $__errorArgs = ['student.phone'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>

        <div class="col-lg-3">
            <label class="form-control-label" for=""><?php echo app('translator')->get('admin.students.nationality'); ?></label>
            <div class="input-group">
                <span class="input-group-addon"><i
                        class="fa fa-heartbeat tx-16 lh-0 op-6"></i></span>
                <select wire:model.defer='student.nationality_id' class="form-control"
                    placeholder="">
                    <option value="">-- <?php echo app('translator')->get('site.choose'); ?>--</option>
                    <!-- __BLOCK__ --><?php $__currentLoopData = $this->nationalities; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $nationality): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <option value="<?php echo e($nationality->id); ?>"><?php echo e($nationality->name); ?></option>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                </select>
            </div>
            <small class="tx-info"><?php echo app('translator')->get('admin.create_student.nationality_tip'); ?></small>

            <?php $__errorArgs = ['student.nationality'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>

        <div class="col-lg-3">
            <label class="form-control-label"
                for=""><?php echo app('translator')->get('admin.students.national_number'); ?><span
                    class="tx-danger">*</span></label>
            <div class="input-group">
                <span class="input-group-addon"><i
                        class="fa fa-id-card tx-16 lh-0 op-6"></i></span>
                <input wire:model.defer='student.national_number' class="form-control"
                    placeholder="" type="text">
            </div>
            <small class="tx-info"><?php echo app('translator')->get('admin.create_student.national_number_tip'); ?></small>
            <?php $__errorArgs = ['student.national_number'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>



        <div class="col-lg-3">
            <label class="form-control-label" for=""><?php echo app('translator')->get('admin.students.religion'); ?><span
                    class="tx-danger">*</span></label>
            <div class="input-group">
                <span class="input-group-addon"><i
                        class="fa fa-id-card tx-16 lh-0 op-6"></i></span>
                <select wire:model.defer='student.religion' class="form-control" placeholder="">
                    <option value="">-- <?php echo app('translator')->get('site.choose'); ?> --</option>
                    <!-- __BLOCK__ --><?php $__currentLoopData = $religions; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $key => $religion): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                    <option value="<?php echo e($key); ?>"><?php echo e($religion); ?></option>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                </select>
            </div>
            <small class="tx-info"><?php echo app('translator')->get('admin.create_student.religion_tip'); ?></small>
            <?php $__errorArgs = ['student.religion'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>
        <div class="col-lg-8">

            <div class="form-group">
                <label class="form-control-label" for=""><?php echo app('translator')->get('admin.students.address'); ?></label>
                <input wire:model.defer='student.address' class="form-control"
                    placeholder="<?php echo app('translator')->get('admin.create_student.address_placeholder'); ?>">
            </div>
            <?php $__errorArgs = ['student.address'];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
            <span class="text-danger" role="alert">
                <strong><?php echo e($message); ?></strong>
            </span>
            <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
        </div>

    </div>
    <!-- row two -->


    <!-- helps -->
    <div class="pt-4">
        <p><span class="tx-pink"><?php echo app('translator')->get('admin.create_student.important_notes_title'); ?> </span> <br><small>
                <?php echo app('translator')->get('admin.create_student.important_notes_subtitle'); ?>
                </small></p>
        <ul class=" small pr-2 ">
            <li>
                <?php echo app('translator')->get('admin.create_student.required_fields_note' , ['star' =>'<span class="tx-danger ">*</span>' ]); ?>
                </li>
            <li><?php echo app('translator')->get('admin.create_student.information_accuracy_note' , [
                'highlight' => '<span class="tx-info">البيانات الطبية</span>'
                ]); ?></li>
        </ul>
    </div>
    <!-- helps -->
</section>

<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/student/includes/create-student/_personal-info.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/08b4a7ce3268f70ce38edb8feddb6fb3b1250491.php

      
-----------------------------------------------


      <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.modal','data' => ['target' => 'verify-headings']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('modal'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['target' => 'verify-headings']); ?>
     <?php $__env->slot('title', null, []); ?> 
        <?php echo app('translator')->get('site.verify_columns'); ?>
         <?php $__env->endSlot(); ?>

         <?php $__env->slot('body', null, []); ?> 
            <div class="mx-6">
                <!-- __BLOCK__ --><?php if($excelError): ?>
                    <div class="alert alert-danger alert-solid pd-20" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                  <span aria-hidden="true">×</span>
                </button>
                <div class="d-sm-flex align-items-center justify-content-start">
                  <i class="icon ion-ios-close-outline lh-0 tx-52"></i>
                  <div class="ms-4 text-start">
                    <h5 class="mg-b-2 "><?php echo app('translator')->get('admin.import_students.error'); ?></h5>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import_students.row'); ?> : <?php echo e($excelError->get('row')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import_students.attribute'); ?> : <?php echo e($excelError->get('attribute')); ?></p>
                    <p class="mg-b-0 tx-xs py-1"><?php echo app('translator')->get('admin.import_students.errors'); ?> : </p>

                    <ul>
                        <!-- __BLOCK__ --><?php $__currentLoopData = $excelError->get('messages'); $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $message): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                        <li><?php echo e($message); ?></li>
                    <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                    </ul>
                  </div>
                </div><!-- d-flex -->
              </div>
                <?php endif; ?> <!-- __ENDBLOCK__ -->
                <!-- __BLOCK__ --><?php $__currentLoopData = $columns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $column): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                <div class="d-flex justify-content-between align-items-center mb-2 px-2">
                    <div class="ms-5">
                        <p class="text-dark"><?php echo e(__('admin.students.' . $column)); ?></p>
                        </div><div class="d-inline-block ">
                        <div class="select-wrapper">
                        <select v-data wire:model='importInputs.<?php echo e($column); ?>' class="form-control " >
                            <option value=""><?php echo app('translator')->get('site.choose'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $sheetColumns; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $sheetColumn): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>

                                <option <?php if($sheetColumn == $column): echo 'selected'; endif; ?>

                                >
                                        <?php echo e($sheetColumn); ?>

                                </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                    </div>
                    <?php $__errorArgs = ["importInputs.$column"];
$__bag = $errors->getBag($__errorArgs[1] ?? 'default');
if ($__bag->has($__errorArgs[0])) :
if (isset($message)) { $__messageOriginal = $message; }
$message = $__bag->first($__errorArgs[0]); ?>
                    <p class="text-danger" role="alert">
                         <strong><?php echo e($message); ?></strong>
                    </p>
                    <?php unset($message);
if (isset($__messageOriginal)) { $message = $__messageOriginal; }
endif;
unset($__errorArgs, $__bag); ?>
                    </div>

                    </div>
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
            </div>
         <?php $__env->endSlot(); ?>

             <?php $__env->slot('footer', null, []); ?> 
                 <?php $__env->slot('dismissButton', null, []); ?> <?php echo app('translator')->get('site.close'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->slot('confirmButton', null, ['wire:click' => 'import']); ?> <?php echo app('translator')->get('site.update'); ?> <?php $__env->endSlot(); ?>
                 <?php $__env->endSlot(); ?>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/student/includes/_verify-excel-headings.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/views/0435ac1fb39f6654a69a0222f07ac6dc544042fa.php

      
-----------------------------------------------


      <div>

    <div class=" pd-x-20 pd-sm-x-30 pd-t-25 mg-b-20 mg-sm-b-30" style="padding-right: 30px;">
<div class="new-card mb-3">
    <div class="d-flex justify-content-between">

                <div class="row container">

                    <div class="input-group col-12 col-md-6 my-2">
                        <input wire:model.live.debounce="search" type="text" class="form-control" placeholder="<?php echo app('translator')->get('site.search'); ?>" required>
                    </div>

                    
                    <div class="input-group col-12 col-md-6 my-2">
                        <div class="select-wrapper">

                        <select wire:model.live="studyDateId" class="form-control " >
                            <option value="" selected><?php echo app('translator')->get('site.choose'); ?> <?php echo app('translator')->get('admin.study_dates.study_date'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyDates; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyDate): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($studyDate->id); ?>">
                                        <?php echo e($studyDate->name); ?>

                                </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                    </div>

                    </div>

                    
                    <div class="input-group col-12 col-md-6 my-2">
                        <div class="select-wrapper">

                        <select wire:model.live="departmentId" class="form-control" >
                            <option value="" selected><?php echo app('translator')->get('site.choose'); ?> <?php echo app('translator')->get('admin.departments.department'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->departments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $department): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($department->id); ?>">
                                    <?php echo e($department->name); ?>

                                </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        </div>
                    </div>

                    
                    <div class="input-group col-12 col-md-6 my-2">
                        <div class="select-wrapper">

                        <select wire:model.live="studyYearId" class="form-control " >
                            <option value="" selected><?php echo app('translator')->get('site.choose'); ?> <?php echo app('translator')->get('admin.study_years.study_year'); ?></option>
                            <!-- __BLOCK__ --><?php $__currentLoopData = $this->studyYears; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $studyYear): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                                <option value="<?php echo e($studyYear->id); ?>">
                                    <?php echo e($studyYear->name); ?>

                                </option>
                            <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                        </select>
                        </div>
                    </div>

                </div>
                <div>
                    <?php if (isset($component)) { $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4 = $component; } ?>
<?php $component = Illuminate\View\AnonymousComponent::resolve(['view' => 'components.button','data' => ['href' => ''.e(route('dashboard.admin.payments.archive.create_via_excel')).'']] + (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('button'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $attributes instanceof Illuminate\View\ComponentAttributeBag && $constructor = (new ReflectionClass(Illuminate\View\AnonymousComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['href' => ''.e(route('dashboard.admin.payments.archive.create_via_excel')).'']); ?><?php echo app('translator')->get('site.add_archived_target' , ['target' => __('admin.payments.payments')]); ?> <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4)): ?>
<?php $component = $__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4; ?>
<?php unset($__componentOriginalc254754b9d5db91d5165876f9d051922ca0066f4); ?>
<?php endif; ?>
                </div>
            </div>
            </div>
    </div>


    <div class="br-pagebody">

        <div class="br-section-wrapper p-0">
            <table class="table new-table new-datatable">
                <thead class="">
                <tr class="">
                    <td class="wd-50"></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payments.operation_number'); ?></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.students.full_name'); ?></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.currencys.currencys'); ?></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payments.created_at'); ?></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payment_types.payment_types'); ?></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payment_orders.description'); ?></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('admin.payments.status'); ?></td>
                    <td class="pd-y-5"><span class="tx-bold"><?php echo app('translator')->get('site.action'); ?></th>
                </tr>
                </thead>
                <tbody>
                <!-- __BLOCK__ --><?php $__currentLoopData = $payments; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $payment): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                    <tr>
                        <td>
                            
                            <a href="<?php echo e(route('dashboard.admin.students.show', $payment->student->id)); ?>">
                                <img class="wd-50 rounded-circle" alt="<?php echo e($payment->paymentOrder?->studyDate?->name); ?>" src="<?php echo e($payment->student->image_path); ?>">
                            </a>
                        </td>
                        <td>
                            <?php echo e($payment->operation_number); ?>

                        </td>
                        <td>
                            <a href="<?php echo e(route('dashboard.admin.students.show', $payment->student->id)); ?>" class="tx-inverse tx-12 tx-medium d-block">
                                <?php echo e($payment->student->full_name); ?>

                            </a>
                            <span class="d-block tx-info"><?php echo e($payment->student->university_id); ?></span>
                            <span class="d-block tx-dark">الدفعة <?php echo e($payment->student->batch_id); ?></span>
                            <span class="d-block tx-dark"><?php echo e($payment->student->department?->name); ?></span>
                        </td>
                        <td>
                            <?php echo e($payment->set_amount . ' ' . $payment->currency?->code); ?>

                        </td>
                        <td>
                            <?php echo e($payment->created_at->format('m-d-Y')); ?>

                        </td>
                        <td>
                            <?php echo e($payment->paymentType->type); ?>

                        </td>
                        <td>
                            <?php echo $payment->description; ?>

                        </td>
                        <td>
                            <!-- __BLOCK__ --><?php if($payment->status == 1): ?>
                                <i class="fa fa-check tx-success"></i>
                            <?php else: ?>
                                <i class="fa fa-check tx-pink"></i>
                            <?php endif; ?> <!-- __ENDBLOCK__ -->
                        </td>
                        <td>
                            <div class="d-flex justify-content-between">
                            
                            <form method="POST"  action="<?php echo e(route('payments.printInvoice',$payment->id)); ?>">
                                <?php echo csrf_field(); ?>
                                <button type="submit" class="btn btn-warning btn-sm"
                                data-html="true" data-placement="right" title="<?php echo app('translator')->get('site.print'); ?>">
                                    <?php echo app('translator')->get('site.print'); ?>
                                </button>
                            </form>
                        </div>
                        </td>
                    </tr>
                <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?> <!-- __ENDBLOCK__ -->
                </tbody>
            </table>
            <div class="card-footer tx-12 pd-y-15 bg-transparent pb-5">
                <?php echo e($payments->links()); ?>

            </div>
            <!-- br-section-wrapper -->
        </div>

    </div>

</div>
<?php /**PATH /home/ash/sites/UniSoftLaravel/resources/views/livewire/dashboard/admin/payment/show-payment.blade.php ENDPATH**/ ?>
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/storage/framework/cache/facade-1e06026dbe325cba543b2306bd7e55d66d31e4c1.php

      
-----------------------------------------------


      <?php

namespace Facades\Livewire\Features\SupportFileUploads;

use Illuminate\Support\Facades\Facade;

/**
 * @see \Livewire\Features\SupportFileUploads\GenerateSignedUploadUrl
 */
class GenerateSignedUploadUrl extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return 'Livewire\Features\SupportFileUploads\GenerateSignedUploadUrl';
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/ar/validation.php

      
-----------------------------------------------


      <?php

return [
    /*
    |--------------------------------------------------------------------------
    | Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines contain the default error messages used by
    | the validator class. Some of these rules have multiple versions such
    | as the size rules. Feel free to tweak each of these messages here.
    |
    */

    'accepted'             => 'يجب قبول :attribute.',
    'active_url'           => ':attribute لا يُمثّل رابطًا صحيحًا.',
    'after'                => 'يجب على :attribute أن يكون تاريخًا لاحقًا للتاريخ :date.',
    'after_or_equal'       => ':attribute يجب أن يكون تاريخاً لاحقاً أو مطابقاً للتاريخ :date.',
    'alpha'                => 'يجب أن لا يحتوي :attribute سوى على حروف.',
    'alpha_dash'           => 'يجب أن لا يحتوي :attribute سوى على حروف، أرقام ومطّات.',
    'alpha_num'            => 'يجب أن يحتوي :attribute على حروفٍ وأرقامٍ فقط.',
    'array'                => 'يجب أن يكون :attribute ًمصفوفة.',
    'before'               => 'يجب على :attribute أن يكون تاريخًا سابقًا للتاريخ :date.',
    'before_or_equal'      => ':attribute يجب أن يكون تاريخا سابقا أو مطابقا للتاريخ :date.',
    'between'              => [
        'numeric' => 'يجب أن تكون قيمة :attribute بين :min و :max.',
        'file'    => 'يجب أن يكون حجم الملف :attribute بين :min و :max كيلوبايت.',
        'string'  => 'يجب أن يكون عدد حروف النّص :attribute بين :min و :max.',
        'array'   => 'يجب أن يحتوي :attribute على عدد من العناصر بين :min و :max.',
    ],
    'boolean'              => 'يجب أن تكون قيمة :attribute إما true أو false .',
    'confirmed'            => 'حقل التأكيد غير مُطابق للحقل :attribute.',
    'date'                 => ':attribute ليس تاريخًا صحيحًا.',
    'date_equals'          => 'يجب أن يكون :attribute مطابقاً للتاريخ :date.',
    'date_format'          => 'لا يتوافق :attribute مع الشكل :format.',
    'different'            => 'يجب أن يكون الحقلان :attribute و :other مُختلفين.',
    'digits'               => 'يجب أن يحتوي :attribute على :digits رقمًا/أرقام.',
    'digits_between'       => 'يجب أن يحتوي :attribute بين :min و :max رقمًا/أرقام .',
    'dimensions'           => 'الـ :attribute يحتوي على أبعاد صورة غير صالحة.',
    'distinct'             => 'للحقل :attribute قيمة مُكرّرة.',
    'email'                => 'يجب أن يكون :attribute عنوان بريد إلكتروني صحيح البُنية.',
    'ends_with'            => 'يجب أن ينتهي :attribute بأحد القيم التالية: :values',
    'exists'               => 'القيمة المحددة :attribute غير موجودة.',
    'file'                 => 'الـ :attribute يجب أن يكون ملفا.',
    'filled'               => ':attribute إجباري.',
    'gt'                   => [
        'numeric' => 'يجب أن تكون قيمة :attribute أكبر من :value.',
        'file'    => 'يجب أن يكون حجم الملف :attribute أكبر من :value كيلوبايت.',
        'string'  => 'يجب أن يكون طول النّص :attribute أكثر من :value حروفٍ/حرفًا.',
        'array'   => 'يجب أن يحتوي :attribute على أكثر من :value عناصر/عنصر.',
    ],
    'gte'                  => [
        'numeric' => 'يجب أن تكون قيمة :attribute مساوية أو أكبر من :value.',
        'file'    => 'يجب أن يكون حجم الملف :attribute على الأقل :value كيلوبايت.',
        'string'  => 'يجب أن يكون طول النص :attribute على الأقل :value حروفٍ/حرفًا.',
        'array'   => 'يجب أن يحتوي :attribute على الأقل على :value عُنصرًا/عناصر.',
    ],
    'image'                => 'يجب أن يكون :attribute صورةً.',
    'in'                   => ':attribute غير موجود.',
    'in_array'             => ':attribute غير موجود في :other.',
    'integer'              => 'يجب أن يكون :attribute عددًا صحيحًا.',
    'ip'                   => 'يجب أن يكون :attribute عنوان IP صحيحًا.',
    'ipv4'                 => 'يجب أن يكون :attribute عنوان IPv4 صحيحًا.',
    'ipv6'                 => 'يجب أن يكون :attribute عنوان IPv6 صحيحًا.',
    'json'                 => 'يجب أن يكون :attribute نصًا من نوع JSON.',
    'lt'                   => [
        'numeric' => 'يجب أن تكون قيمة :attribute أصغر من :value.',
        'file'    => 'يجب أن يكون حجم الملف :attribute أصغر من :value كيلوبايت.',
        'string'  => 'يجب أن يكون طول النّص :attribute أقل من :value حروفٍ/حرفًا.',
        'array'   => 'يجب أن يحتوي :attribute على أقل من :value عناصر/عنصر.',
    ],
    'lte'                  => [
        'numeric' => 'يجب أن تكون قيمة :attribute مساوية أو أصغر من :value.',
        'file'    => 'يجب أن لا يتجاوز حجم الملف :attribute :value كيلوبايت.',
        'string'  => 'يجب أن لا يتجاوز طول النّص :attribute :value حروفٍ/حرفًا.',
        'array'   => 'يجب أن لا يحتوي :attribute على أكثر من :value عناصر/عنصر.',
    ],
    'max'                  => [
        'numeric' => 'يجب أن تكون قيمة :attribute مساوية أو أصغر من :max.',
        'file'    => 'يجب أن لا يتجاوز حجم الملف :attribute :max كيلوبايت.',
        'string'  => 'يجب أن لا يتجاوز طول النّص :attribute :max حروفٍ/حرفًا.',
        'array'   => 'يجب أن لا يحتوي :attribute على أكثر من :max عناصر/عنصر.',
    ],
    'mimes'                => 'يجب أن يكون ملفًا من نوع : :values.',
    'mimetypes'            => 'يجب أن يكون ملفًا من نوع : :values.',
    'min'                  => [
        'numeric' => 'يجب أن تكون قيمة :attribute مساوية أو أكبر من :min.',
        'file'    => 'يجب أن يكون حجم الملف :attribute على الأقل :min كيلوبايت.',
        'string'  => 'يجب أن يكون طول النص :attribute على الأقل :min حروفٍ/حرفًا.',
        'array'   => 'يجب أن يحتوي :attribute على الأقل على :min عُنصرًا/عناصر.',
    ],
    'multiple_of'          => ':attribute يجب أن يكون من مضاعفات :value',
    'not_in'               => 'العنصر :attribute غير صحيح.',
    'not_regex'            => 'صيغة :attribute غير صحيحة.',
    'numeric'              => 'يجب على :attribute أن يكون رقمًا.',
    'password'             => 'كلمة المرور غير صحيحة.',
    'present'              => 'يجب تقديم :attribute.',
    'regex'                => 'صيغة :attribute .غير صحيحة.',
    'required'             => ':attribute مطلوب.',
    'required_if'          => ':attribute مطلوب في حال ما إذا كان :other يساوي :value.',
    'required_unless'      => ':attribute مطلوب في حال ما لم يكن :other يساوي :values.',
    'required_with'        => ':attribute مطلوب إذا توفّر :values.',
    'required_with_all'    => ':attribute مطلوب إذا توفّر :values.',
    'required_without'     => ':attribute مطلوب إذا لم يتوفّر :values.',
    'required_without_all' => ':attribute مطلوب إذا لم يتوفّر :values.',
    'same'                 => 'يجب أن يتطابق :attribute مع :other.',
    'size'                 => [
        'numeric' => 'يجب أن تكون قيمة :attribute مساوية لـ :size.',
        'file'    => 'يجب أن يكون حجم الملف :attribute :size كيلوبايت.',
        'string'  => 'يجب أن يحتوي النص :attribute على :size حروفٍ/حرفًا بالضبط.',
        'array'   => 'يجب أن يحتوي :attribute على :size عنصرٍ/عناصر بالضبط.',
    ],
    'starts_with'          => 'يجب أن يبدأ :attribute بأحد القيم التالية: :values',
    'string'               => 'يجب أن يكون :attribute نصًا.',
    'timezone'             => 'يجب أن يكون :attribute نطاقًا زمنيًا صحيحًا.',
    'unique'               => 'قيمة :attribute مُستخدمة من قبل.',
    'uploaded'             => 'فشل في تحميل الـ :attribute.',
    'url'                  => 'صيغة الرابط :attribute غير صحيحة.',
    'uuid'                 => ':attribute يجب أن يكون بصيغة UUID سليمة.',

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | Here you may specify custom validation messages for attributes using the
    | convention "attribute.rule" to name the lines. This makes it quick to
    | specify a specific custom language line for a given attribute rule.
    |
    */

    'custom' => [
        'attribute-name' => [
            'rule-name' => 'custom-message',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Attributes
    |--------------------------------------------------------------------------
    |
    | The following language lines are used to swap attribute place-holders
    | with something more reader friendly such as E-Mail Address instead
    | of "email". This simply helps us make messages a little cleaner.
    |
    */

    'attributes' => [
        'username'              => 'اسم المستخدم',
        'phone'                 => 'رقم الهاتف',
        'name'                  => 'الاسم',
        'image'                 => 'الصوره',
        'name_en'               => 'الاسم بلغه الانجلزيه',
        'password'              => 'كلمه المرور',
        'permissions'           => 'الصلاحيات',
        'email'                 => 'البريد الالكتروني',
        'value'                 => 'القيمه',
        'cart_name'             => 'البطاقه بغخ العربيه',
        'cart_name_en'          => 'الاسم بلغه الانجلزيه ',
        'cart_text'             => 'الوصف بلغه العربيه',
        'cart_text_en'          => 'الوصف بلغه الانجلزيه',
        'count_of_buy'          => 'عدد المشترين',
        'ar_price'              => 'السعر بلريال السعودي',
        'amrecan_price'         => 'السعر بلدولار الامركي',
        'amarat_price'          => 'السعر بدرهم الامراتي',
        'cart_code'             => 'رمز البطاقة',
        'kowit_price'           => 'السعر بلعمله الكويتيه',
        'subject'               => 'الموضوع',
        'message'               => 'الرساله',
        'short_descript_en'     => 'الوصف لغه الانجلزيه',
        'short_descript'        => 'الوصف',
        'balance'               => 'رصيد البطافه',
        'password_confirmation' => 'اعاده كلمه المرور',
        'changpassword'         => 'تغير كلمه المرور',
        'permissions'           => 'الصلاحيات',

        'current_password'      => 'كلمه المرور القديمه',
        'new_password'          => 'كلمه المرور الجديده',
        'new_confirm_password'  => 'اعاده كلمه المرور',
        'phone_number'          => 'رقم الهاتف',
        'body'                  => 'الموضوع',
        'description'           => 'الوصف',
        'start_data'            => 'من تاريخ',
        'end_data'              => 'الي نهايه تاريخ',
        'count'                 => 'عدد الاشخاص',
        'country'               => 'البلد',
        'city'                  => 'المدينه',
        'title'                 => '',
        'name_en'               => 'الاسم باللغة الانجليزية',
        'name_ar'               => 'الاسم باللغة الإنجليزية',

        'start_reg'   => 'بداية من تاريخ',
        'end_reg'     => 'الي نهاية تاريخ',
        'archived'    => 'السنة الحالية',

    ],
];
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/ar/site.php

      
-----------------------------------------------


      <?php

return [
    'name'    => 'النظام الأساسي - كلية رويال',
    'home'    => ' الرئيسية',
    'logout'  => 'تسجيل الخروج',
    'login'   => 'دخول',
    'serial'  => 'تسلسل',

    'add'    => 'اضافه',
    'edit'   => 'تعديل',
    'delete' => 'حذف',
    'action' => 'العمليات',
    'search' => 'بحث',
    'count'  => 'العدد',
    'count_of'  => 'عدد :target',

    'no_data_found'        => 'عفوا لا يوجد بيانات',
    'added_successfully'   => 'تمت الاضافة بنجاح',
    'updated_successfully' => 'تم التحديث بنجاح',
    'imported_successfully' => 'تم الاستيراد بنجاح',
    'deleted_successfully' => 'تم الحذف بنجاح',
    'confirm_delete'       => 'تم تأكيد الحذف',
    'login_successfully'   => 'تم تسجيل الدخول بنجاح ',
    'paid_successfully'   => 'تم  الدفع بنجاح ',

    'yes' => 'نعم',
    'no'  => 'لا',

    'ok' => 'موافق',

    'usd' => 'العملة بالدولار',
    'sdg' => 'الجنية السوداني',

    'choose' => 'اختر',
    'file'   => 'ارفاق مستند',
    'change' => 'تغيير',
    'create' => 'إنشاء',
    'data'   => 'بيانات',

    'read'   => 'قراءة',
    'update' => 'تحديث',
    'delete' => 'حذف',
    'enter'  => 'ادخل',

    'created_at' => 'تاريخ الانشاء',
    'all'        => 'الكل',
    'close'      => 'اغلاق',

    'bulk_delete' => 'حذف مجموعة',
    'loading'     => 'تحميل ...',
    'show'        => 'عرض',

    'DT_RowIndex'         => 'رقم',
    'email_or_username'   => 'اسم المسنخدم او الاميل',
    'same_request'        => 'لقد ارسلت طلب بلفعل',

    'pdf'         => 'بي دي اف',
    'print'       => 'طباعة',
    'save'       => 'حفط',
    'save_and_print'       => 'حفظ و طباعة',


    'number_of_students' => 'عدد الطلاب',
    'verified_students' => ' الطلاب المسجلين',
    'quiters' => 'المستقيلين ',
    'freezers' => 'المجمدين ',

    'exported_successfully' => 'تم الاستيراد بنجاح',

    'admin_panel' => 'لوحة القيادة',

    'add_via_excel' => 'اضافة :target عبر اكسيل',
    'add_new' => 'اضافة :target جديد',

    'next' => 'التالي',
    'back' => 'رجوع',

    'filter' => 'فلتر',

    'error' => 'خطأ',

    'percentage' => 'النسبة',
    'click_here' => 'اضغط هنا',

    'no_target' => 'لا يوجد :target',

    'from' => 'من',
    'to' => 'الى',

    'status' => ' الحالة',

    'total' => 'المجموع',

    'download_empty_sample' => 'تحميل نموذج فارغ',

    'welcome_back' => ' أهـــــلا
      بــــــعـــودتـــــــــــك',

'welcome_back_unstretched' => 'أهلا بعودتك',


    'elearning_module' => 'التعليم الالكتروني',
    'payments_module' => 'التحصيل',
    'active_study_plan_module' => 'الدراسة',
    'admission_module' => 'القبول و التسجيل',
    'settings_module' => 'مدير النظام',
    'results_module' => 'النتائج الأكاديمية',

    'warning' => 'تحذير !',

    'cancel' => 'الغاء',

    'archive' => 'الأرشيف',
    'target_archive' => 'أرشيف :target',

    'verify_columns' => 'تأكيد الأعمدة',

    'remove' => 'ازالة',

    'add_archived_target' => 'اضافة :target مؤرشفة',
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/ar/pages.php

      
-----------------------------------------------


      <?php

return [
    'import_grades' => [
        'subtitle' => 'يتيح لك النظام اضافة الدرجات الدراسية عبر اكسيل',
    ],

    'active_study_plans_archive' => [
        'subtitle' => 'يمكنك رؤية الخطط الدراسية للأعوام السابقة في هذه الصفحة',
    ],

    'import_active_study_plans' => [
        'subtitle' => 'يمكنك استيراد خطط عامة لأعوام دراسية سابقة عبر ملفات اكسيل',
    ],

    'import_payments' => [
        'subtitle' => 'يمكنك استيراد دفعيات مؤرشفة عبر ملفات اكسيل',
    ],
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/ar/auth.php

      
-----------------------------------------------


      <?php

return [

    'failed' => 'These credentials do not match our records.',
    'password' => 'The provided password is incorrect.',
    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',

    'no_data_found' => 'بيانات الاعتماد غير صحيحة',
    'login_page' => ' تسجيل دخول',

    'login_page_welcome' => 'مرحباً بعودتك! سجل دخولك لو سمحت.',

    'are_you_student' => 'هل أنت طالب ?'
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/ar/admin.php

      
-----------------------------------------------


      <?php

return   array(
    'admins'           => array(
        'admins'                        => 'المستخدمين',
        'name'                          => 'اسم المستخدم',
        'full_name'                          => 'الأسم الكامل',
        'email'                         => 'البريد الالكتروني',
        'password_confirmation'         => 'إعادة كتابة كلمة المرور',
        'password'                      => 'كلمة المرور'
    ),

    'permissions'         => array(
        'permissions'                   => 'الصلاحيات',
        'model'                         => 'الاقسام',
        'email'                         => 'البريد الالكتروني',
    ),

    'roles'               => array(
        'roles'                         => 'الأدوار',
        'name'                          => 'الاسم',
        'email'                         => 'البريد الالكتروني',
    ),

    'settings'            => array(
        'settings'                      => 'الاعدادات',
        'my_profile'                    => 'الملف الشخصي',
        'admin_settings'                    => 'مدير النظام',
        'main'                          => 'البيانات الاساسيه',
    ),

    'status'              => array(
        'completed'                     => 'تم',
        'not_completed'                => 'لم يكمل',
    ),

    'coleage'             => array(
        'coleage'                       => 'الاعدادات',
        'main'                         => 'البيانات الاساسيه',
        'name'                         => 'اسم الكلية',
    ),

    'departments'         => array(
        'departments'                   => 'البرامج او التخصصات',
        'department'                     => 'البرنامج او التخصص',
        'name'                         => 'اسم التخصص',
        'last_batch_number'            => 'رقم اخر دفعة',
        'study_years'                  => 'عدد السنوات الدراسية للتخصص',
        'batch_number'                 => 'رقم الدفعة',
    ),

    'study_dates'         => array(
        'study_dates'                   => 'العام الدراسي',
        'study_date'                   => 'العام الدراسي',
        'start_reg'                     => 'بداية من تاريخ',
        'end_reg'                       => 'الي نهاية تاريخ',
        'archived'                      => 'السنة الحالية',
        'name'                             => 'الاسم',
        'batch'                         => 'الدفعة',
        'price'                         => 'الرسوم الدراسية',
        'usd_price'                     => 'دولار مطلوب',
        'sdg_price'                     => 'ج س مطلوب',
        'register_fees_sdg'             => 'رسوم التسجيل بالجنيه',
        'previous_study_date_not_archived'  => '  يجب أن تكون السنوات السابقة مؤرشفة',
        'register_fees_usd'             => 'رسوم التسجيل بالدولار',

        'register_fees_with_currency'             => 'رسوم التسجيل (:target)',

        'active' => 'السنة الحالية',

    ),

    'study_years'         => array(
        'study_years'                   => 'عدد السنوات الدراسية',
        'name'                            => 'الاسم',
        'study_year'                            => 'السنة الدراسية',
    ),

    'currency'            => array(
        'currency'   => 'العملة',
        'usd'  => 'دولار',
        'sdg'  => 'ج س'
    ),

    'nationalities' => array(
        'nationalities' => 'الجنسيات',
        'nationality' => 'جنسية',
        'name' => 'اسم الجنسية',
    ),

    'payment_status'      => array(
        'payment_status'                => 'حالات الدفع',
        'name'                             => 'الاسم',
    ),

    'receipts'            => array(
        'receipts'                      => 'الايصلات',
        'name'                             => 'الاسم',
    ),

    'payments'            => array(
        'payments'                        => 'الايصالات',
        'payment_fees'                   => 'الرسوم المتبقية',
        'discounts'                      => 'مجموع التخفيض',
        'receipts'                       => 'الإيصالات',
        'created_at'                     => 'تاريخ الدفع',
        'status'                         => 'الحالة',
        'total'                          => 'المبلغ محموغ',
        'total_amount'                   => 'المبلغ الكلي',
        'amount'                         => 'المبلغ',
        'receipts'                       => 'الإيصالات',
        'remaining'                      => 'المبلغ المتبقي',
        'required'                       => 'المبلغ المطلوب',
        'paid'                            => 'المبلغ المدفوع',
        'operation_number'               => 'رقم العملية',
        'Incorrect_amount'               => 'المبلغ غير صحيح',
        'pay'                            => 'سداد',

        'invoice_number' => 'رقم الايصال',
        'payments_count' => 'عدد الدفغيات',

        'invoices_count' => 'عدد الأيصالات',

        'edit_invoice' => 'تعديل إيصال مالي',
    ),

    'payment_orders'      => array(
        'payment_orders'                => 'اوامر السداد',
        'amount_required'                => 'المبلغ المطلوب',
        'type'                           => 'نوع الامر',
        'status'                           => 'نوع الامر',
        'description'                    => 'ملاحظات',
        'created_at'                     => 'تاريخ الامر',
        "REGISTRATION"                     => 'تسجيل جديد',
        "REMAINING_INSTALLMENTS"                     => 'متبقي أقساط',
        "FREEZE"                     => 'تجميد',
        "DISMISSION"                     => 'فصل',
        "RESIGNATION"                     => 'استقالة',

        'invoice_form_title' => 'دفع إيصال مالي ',
        'invoice_form_hint' => ' القسط الأول يحدد تلقائي ',

        'invoice_paid_successfully' => 'تم سداد دفعية الطالب بنجاح',
    ),

    'currencys'           => array('currencys'                     => 'المبلغ',),

    'admission_types'     => array(
        'admission_types'               => 'نوع القبول',
        'type'                             => 'نوع',
    ),
    'college' => array(
        'college' => 'College',
        'university_name' => 'اسم الجامعة',
        'main' => 'Main',
        'name' => 'Name',
    ),


    'payment_types'       => array(
        'payment_types'                 => 'طريق الدفع',
        'types'                             => 'طرق الدفع',
    ),

    'students'            => array(
        'students'                      => 'الطلاب',
        'students_count'                          => 'عدد الطلاب',
        'student'                          => 'طالب',
        'student_data'                     => 'البيانات الشخصية',
        'students_registration'           => 'الطلاب والتسجيل',
        'father'                          => 'البيانات الخاصه بولي الامر',
        'full_name'                       => 'الاسم كامل',
        'student_name'                       => 'الاسم كامل',
        'name1'                           => ' الاسم الاول باللغة العربية',
        'name2'                           => 'الاسم الثاني باللغة العربية',
        'name3'                           => 'الاسم الثالث باللغة العربية',
        'name4'                           => 'الاسم الرابع باللغة العربية',
        'name1_ar'                           => ' الاسم الاول باللغة العربية',
        'name2_ar'                           => 'الاسم الثاني باللغة العربية',
        'name3_ar'                           => 'الاسم الثالث باللغة العربية',
        'name4_ar'                           => 'الاسم الرابع باللغة العربية',
        'name1_en'                        => ' الاسم الاول باللغة الانجليزية',
        'name2_en'                        => 'الاسم الثاني باللغة الانجليزية',
        'name3_en'                        => 'الاسم الثالث باللغة الانجليزية',
        'name4_en'                        => 'الاسم الرابع باللغة الانجليزية',
        'certificate_date'                => ' تاريخ الشهادة',
        'certificate_type'                => ' نوع الشهادة',
        'religion'                         => 'الديانة ',
        'university_id'                   => 'الرقم الجامعي',
        'phone'                           => 'رقم الهاتف',
        'national_number'                 => 'رقم إثبات الهوية ',
        'nationality'                     => 'الجنسية',
        'address'                         => 'العنوان',
        'photo'                           => 'صورة الطالب',
        'workplace'                       => 'مهنة ولي الامر',
        'father_name'                     => 'اسم ولي الأمر كامل',
        'father_phone1'                   => 'رقم الهاتف الاول لولي الامر',
        'father_phone2'                   => 'رقم الهاتف الثاني لولي الامر',
        'registration'                    => 'بيانات التسجيل',
        'tuition_fees'                    => 'رسوم دراسية',
        'required_fees'                   => 'الرسوم المطلوبة',
        'acceptance_year'                 => ' سنة القبول',
        'my_profile'                      => 'ملف الطالب',
        'freeze'                          => 'تجميد',
        'dismiss'                         => 'فصل',
        'resignation'                       => 'استقالة',
        'gender'                               => 'الجنس',
        'male'                               => 'ذكر',
        'female'                           => 'أنثى',

        'personal_info' => 'البيانات الشخصية',
        'parent_info' => 'بيانات ولي الأمر',
        'admission_info' => 'بيانات القبول',
        'congratulations' => 'تم التسجيل',


        'study_year_id' => 'رقم السنة الدراسية',
        'currency_id' => 'رقم العملة',
        'register_fees' => 'رسوم التسجيل',
        'phone_number' => 'رقم الهاتف',
        'admission_type_id' => 'رقم نوع القبول',

        'filter_title' => 'تصفية سريعة',
        'filter_all' => ' الكل',
        'filter_registered' => ' المسجلين',
        'filter_unregistered' => 'الغير مسجلين',
        'filter_freezed' => 'المجمدين',

    ),

    'create_student' => array(
        'form_tip' => 'تحتوي على جميع البيانات الضرورية لاضافة أو تحديث بيانات طالب في النظام بسرعة و سهولة',
        'phone_number_tip' => 'قم بكتابة رقم هاتف الطالب',
        'nationality_tip' => 'قم بكتابة جنسية الطالب',
        'national_number_tip' => 'قم بكتابة رقم الجواز \ الرقم القومي للطالب',
        'religion_tip' => 'قم باختيار ديانة الطالب',

        'important_notes_title' => 'ملاحظات مهمة',
        'important_notes_subtitle' => 'هذه الملاحظات تقوم بمساعدتك في إستخدامك للنظام',

        'required_fields_note' => 'الحقول المشار إلها :star بالـ  إجبارية ولا يمكن تركها خالية',
        'information_accuracy_note' => 'يرجى تحري الدقة في <span class="tx-info">بيانات الطالب</span>',
        'automatic_payment_fields_note' => 'قيمة حقول الرسوم <span class="tx-orange">تلقائية</span> ولا تحتاج لإدخال.',

        'gender_tip' => 'قم بإختيار جنس الطالب',
        'father_name_tip' => ' قم بكتابة إسم ولي الأمر رباعي',
        'father_workplace_tip' => ' قم بكتابة مهنة ولي الأمر',
        'father_phone1_tip' => ' قم بكتابة رقم الهاتف الأول ولي الأمر',
        'father_phone2_tip' => ' قم بكتابة رقم الهاتف الثاني ولي الأمر',

        'certificate_type_tip' => ' قم باختيار نوع شهادة الطالب ',
        'certificate_date_tip' => ' قم بكتابة تاريخ شهادة الطالب',
        'university_id_tip' => ' قم بكتابة الرقم الجامعي للطالب',
        'admission_type_tip' => 'قم باختيار نوع قبول الطالب',
        'acceptance_year_tip' => 'قم بكتابة سنة قبول للطالب',
        'study_date_tip' => ' قم باختيار العام الدراسي للطالب',
        'department_tip' => 'البرنامج اﻷكاديمي',
        'study_year_tip' => 'قم باختيار السنة الدراسية للطالب',
        'batch_tip' => 'قم باختيار رقم دفعة  للطالب',
        'currency_tip' => 'قم باختيار العملة التي سيدفع بها الطالب',
        'automatic' => 'تلقائية',
        'address_placeholder' => 'الولاية - المحلية - المربع - حي - رقم المنزل',

        'student_created' => 'تم اضافة الطالب <span class="tx-bold">:name</span> بنجاح',
        'student_updated' => 'تم تحديث بيانات  الطالب <span class="tx-bold">:name</span> بنجاح',
        'proceed_academic_operations' => 'تستطيع تنفيذ الإجراءات المالية و اﻷكاديمية الأن ',
        'navigate_to_student_profile' => 'للدخول إلي ملف الطالب إضعط هنا',

    ),

    'registrations'       => array(
        'registrations'                 => 'التسجيل',
        'status'                             => 'الحالة',
        'register_fees'                   => 'رسوم التسجيل',
        'tuition_fees'                    => 'الرسوم الدراسية',
        'registered' => 'مسجل',
        'unregistered' => 'غير مسجل',
        'freezed' => 'مجمد',
        'quit' => 'مستقيل',
        'dismissed' => 'مفصول',
    ),

    'student_profile'     => array(
        'student_profile'               => 'الملف الشخصي لطالب',
        'status'                                => 'الحالة',
        'register_fees'                   => 'رسوم التسجيل',
        'tuition_fees'                    => 'الرسوم الدراسية',
        'financial_receipts'              => 'الإيصالات المالية',
        'admission'                       => 'القبول والتسجيل',
        'personal_data'                   => 'البيانات الشخصية',

        'can_not_freeze_profile_after_marks_are_entered' => 'لا يمكن تجميد ملف الطالب بعد رصد درجاته',
        'student_has_suspension_payment_order' => 'لدى الطالب أمر سداد بالتجميد بالفعل.',
        'student_is_already_suspended' => 'ملف الطالب مجمد بالفعل',
        'unsuspend_student' => 'فك تجميد ملف الطالب',
        'student_has_been_unsuspended' => 'تم الغاء تجميد الطالب بنجاح',

        'cancel_payment_order' => 'الغاء أمر السداد.',
        'payment_order_issued' => 'تم انشاء أمر السداد.',
        'student_has_dismiss_payment_order' => 'لدى الطالب أمر سداد بالفصل بالفعل',
        'payment_order_canceled' => 'تم الغاء أمر السداد.',
        'student_profile_already_dismissed' => 'ملف الطالب مفصول بالفعل',
        'discount_created' => 'تم انشاء التخفبض بنجاح',
        'confirm_delete_discount' => 'هل أنت متأكد؟',

        'disabled_create_discount_button_hint' => 'لا يمكن اضافة تخفيض لطالب مجمد أو مفصول',
    ),

    'type_discounts'      => array(
        'type_discounts'               => 'انوع التخفيض',
        'type'                               => 'نوع',
        'register_fees'                  => 'رسوم التسجيل',
        'tuition_fees'                   => 'الرسوم الدراسية',
    ),

    'discounts'           => array(
        'discounts'                    => 'التخفيض',
        'discount'                    => 'تخفيض',
        'status'                               => 'الحالة',
        'register_fees'                  => 'رسوم التسجيل',
        'tuition_fees'                   => 'الرسوم الدراسية',
        'amount' => 'مبلغ التخفيض',

        'type' => 'نوع التخفيض',
    ),

    'reports'             => array(
        'reports'                      => 'التقارير',
        'registrar_reports' => 'تقارير المسجل',
        'accountant_reports' => 'تقارير المحاسب',
        'registered_students'             => 'طلاب مسجلين',
        'registered_students2'             => 'مسجلين',
        'unregistered_students'           => 'طلاب غير مسجلين',
        'completed_students'              => 'طلاب  مكملين الرسوم',
        'payment_fees'                    => 'كشف الرسوم',
        'departments_statistics'          => 'احصائيات القبول و التسجيل ',
        'payment_reports'                 => 'احصائيات الدفع  ',

        'total_registrations' => 'العدد الكبي للطلاب',
        'registered_students_count' => 'غدد الطلاب المسجلين',
        'registration_percentage' => 'نسبة تسجيل الطلاب',

        'payments_report' => 'تقرير التحصيل',
        'daily_payments_report' => 'تقرير التحصيل اليومي',
        'department_payments_report' => 'تقرير تحصيل البرامج',
    ),

    'reports_recorder'    => array(
        'reports_recorder'                => 'تقارير المسجل'
    ),
    'reports_accountant'    => array(
        'reports_accountant'                => 'تقارير المحاسب'
    ),

    'courses'    => array(
        'course'                => ' المادة الدراسية',
        'hours'                => ' الساعات',
        'name'                  => '  اسم المادة الدراسية بالعربي',
        'name_en'                => ' اسم المادة الدراسية بالانجليزي',
        'courses'                => 'المواد الدراسية',
        'code'                => ' الكود',
        'min_degree'                => ' درجة النجاح',
        'courses_count'                => ' عدد المواد الدراسية',
        'hours_count'                => 'عدد الساعات',

        'course_has_practical'                => 'هل للمادة جزء عملي؟ ',

    ),

    'semesters'    => array(
        'semesters'                => ' الفصول الدراسية',
        'semester'                => ' الفصل الدراسي',
    ),

    'results'    => array(
        'results'                => ' النتائج',
        'result'                => ' النتيجة',
        'min'                => ' درجة النجاح',
        'degree_code'                => ' الدرجة',
        'is_pass'                => ' الحالة',
        'succeeded'                => ' نجاح',
        'failed'                => ' رسوب',
        'enter_grades' => 'رصد النتائج',
        'colors_guide' => 'مفاتيح الألوان',
        'success' => 'نجاح',
        'absence' => 'غياب بدون عذر',
        'excused_absence' => 'غياب بعذر',
        'cheat' => 'غش',

        'assessment' => 'التقدير الاكاديمي',
        'practical' => 'العملي',
        'theory' => 'النظري',

        'phase' => 'الدور',
        'show_statistics' => 'عرض الاحصائيات',
        'first_phase' => 'الدور الأول',
        'final_phase' => 'الدور الاخير',

        'grades_total_should_be_less_than_hundred' => 'يجب أن لا يزيد مجموع الدرجات عن 100',

        'enter_first_exam_grades' => 'رصد درجات الدور الاول',
        'enter_final_exam_grades' => 'رصد درجات الدور الاخير',

        'calculate_result' => 'حساب النتيجة',

        'no_results_found' => 'عذرا, لم يتم ايجاد نتيجة.',
        'allow_enter_grades' => 'السماح للمعلمين بادخال درجات الطلاب',

        'first_phase_grades' => 'درجات الدور الأول',
        'final_phase_grades' => 'درجات الدور الأخير',
        'not_allowed_to_enter_grades' => 'لا يمكن تعديل الدرجات حاليا',

        'grades' => 'الدرجات الدراسية',

        'ATTENDED' => 'حضور',
        'EXCUSED_ABSENCE' => 'غياب بعذر',
        'ABSENCE' => 'غياب بدون عذر',
        'CHEATED' => 'غش',
    ),

    'currencies' => array(
        'currencies' => 'العملات',
        'currency' => 'عملة',
        'name' => 'اسم العملة',
        'code' => 'رمز العملة',
        'code_hint' => 'ادخل رمز اختصار للعملة مثال : ٍUSD , SDG',
    ),

    'study_plans'    => array(
        'study_plan'                => '  الخطة الدراسية',
        'study_plans'                => '  الخطة الدراسية العامة',
        'general_study_plan'        => 'الخطة الدراسية العامة',

    ),


    'active_study_plans'    => array(
        'active_study_plan'                => '   خطة العام',
        'confirm_remove_course' => 'هل تريد ازالة المادة؟',

        'confirm_remove_course_has_grades' => 'تم بالفعل إدخال درجات لبعض الطلاب في هذا المساق. سيؤدي حذف المساق إلى إزالة دائمة لجميع الدرجات المدخلة لجميع الطلاب.',
        'confirm_remove_course_has_no_grades' => 'لم يتم رصد درجات لهذه المادة بعد.',
    ),
    'active_study_plan'    => array(
        'active_study_plan'                => '   خطة العام',

    ),

    'teachers'    => array(
        'teachers'                => 'المعلمين',
        'teacher'                => 'معلم',
        'name'                => 'اسم المعلم',
        'phone'                => 'رقم الهاتف',

    ),

    'elearning'    => array(
        'elearning'                => 'التعليم الالكتروني',

    ),


    'students_module'    => array(
        'students_module'                => 'الصفحة الرئيسية - الطلاب',

        'foreign_students' => 'طلاب أجانب',
        'general_admission' => 'قبول عام',
        'private_admission' => 'قبول خاص',

        'registration_summery' => 'ملخص التسجيل',

        'registration_summery_description' => 'نسبة الطلاب المسجلين لهذا العام الدراسي...',

        'navigate_to_registered_students' => 'لعرض بيانات الطلاب المسجلين',

        'freezed_students' => 'الطلاب المجمدين',
        'dismissed_students' => 'الظلاب المفصولين',
        'dropped_out_students' => 'الطلاب المستقيلين / المحولين',

        'registrations_count_summery' => 'عدد الطلاب المسجلين لهذا العام :registered  من العدد الكلي :total',

        'registrations_count_summery_description' => 'هذا المخطط يعكس مدى قبول الطلاب علي التسجيل الأخيرة.',

        'for_previous_year' => ' من أخر عام دراسي',

        'admission_summery' => 'ملخص القبول',

        'no_remaining_seats' => 'لا يوجد مقاعد متبقية'
    ),

    'elearning_module'    => array(
        'elearning_module'                => 'الصفحة الرئيسية - التعليم الالكتروني',
    ),

    'results_module'    => array(
        'results_module'                => 'الصفحة الرئيسية -  النتائج',
    ),

    'payments_module'    => array(

        'payments_module'                => 'الصفحة الرئيسية - المعاملات المالية',

        'payments_percentage' => 'نسبة التحصيل :currency',

        'paid_from_total' => 'المبلغ المتحصل عليه :paid من المبلغ المتوقع :total',

        'view_latest_payments' => 'يمكنك الإطلاع علي أخر الإيرادات ',

        'fees_payments' => 'إيرادات الرسوم',
        'departments_payments' => 'إيراد الرسوم حسب المستوى',

        'this_month' => 'هذا اشهر',
        'this_week' => 'هذا اأسبوع',
        'today' => 'اليوم',

    ),

    'settings_module'    => array(
        'settings_module'                => 'الصفحة الرئيسية -  الاعدادات',
    ),

    'study_plan_module'    => array(
        'study_plan_module'                => 'الصفحة الرئيسية -  الدراسة',
    ),

    'import_students' => array(
        'row' => 'رقم الصف',
        'attribute' => 'اسم الحقل',
        'value' => 'القيمة الخاطئة',
        'error' => 'توجد حقول غير صحيحة',
        'errors' => 'الأخطاء',

        'id_note' => 'يمكنك معرفة رقم العملة من  <a href=":href" target="_blank" class="tx-danger text-underline">صفحة العملات</a>.',

        'optional_arabic_names_tip' => 'حقول الأسماء باللغة العربية اختيارية.',
    ),

    'import_marks' => array(
        'university_id' => 'الرقم الجامعي',
        'active_study_plan_id' => 'رقم خطة العام',
        'theory' => 'درجة النظري',
        'practical' => 'درجة العملي',
        'attendance_status' => 'حالة الحضور',
        'status_tip' => 'حقل حالة الحضور يجب أن يكون أحد القيم التالية',
        'status_name' => 'اسم الحالة',
        'status_value' => 'قيمتها في الملف',

        'student_does_not_have_this_active_study_plan' => 'ليس لدى الطالب خطة عام بالرقم : :active_study_plan_id .
        تحقق من خطط الطالب الدراسية من ملف الطالب.',


        'active_study_plan_id_tip' =>
        'يمكنك الحصول على رقم خطة العام من <a href=":href" target="_blank" class="tx-danger text-underline">صفحة خطة العام</a>',
    ),


    'import' => array(
        'row' => 'رقم الصف',
        'attribute' => 'اسم الحقل',
        'value' => 'القيمة الخاطئة',
        'error' => 'توجد حقول غير صحيحة',
        'errors' => 'الأخطاء',
    ),

    'import_active_study_plans' => array(
        'semester_id' => 'رقم الفصل الدراسي',
        'course_code' => 'رمز المادة',
        'hours' => 'الساعات الدراسية',

        'archived_study_dates_note' => 'يمكنك فقط استيراد خطط الدراسة النشطة التي تنتمي إلى أعوام دراسية سابقة',
        'add_active_study_plans_for_current_study_date' => 'لاضافة خطة العام للعام الدراسي الحالي <a href=":href" target="_blank" class="tx-info">اضغط هنا</a>',
    ),

    'import_payments' => array(
        'university_id' => 'الرقم الجامعي',
        'payment_method_id' => 'رقم وسيلة الدفع',
        'amount' => 'المبلغ المدفوع',
        'payment_type' => 'نوع السداد',
        'payment_type_tip' => 'حقل نوع السداد يجب أن يكون أحد القيم التالية',
        'payment_type_name' => 'نوع السداد',
        'payment_type_value' => 'القيمة المقابلة لها في ملف اكسيل',
    ),

    'payment_types' => array(
        'payment_types' => 'وسائل الدفع',
        'payment_type' => 'وسيلة الدفع',
    ),
);//end of main array

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/en/validation.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines contain the default error messages used by
    | the validator class. Some of these rules have multiple versions such
    | as the size rules. Feel free to tweak each of these messages here.
    |
    */

    'accepted' => 'The :attribute must be accepted.',
    'accepted_if' => 'The :attribute must be accepted when :other is :value.',
    'active_url' => 'The :attribute is not a valid URL.',
    'after' => 'The :attribute must be a date after :date.',
    'after_or_equal' => 'The :attribute must be a date after or equal to :date.',
    'alpha' => 'The :attribute must only contain letters.',
    'alpha_dash' => 'The :attribute must only contain letters, numbers, dashes and underscores.',
    'alpha_num' => 'The :attribute must only contain letters and numbers.',
    'array' => 'The :attribute must be an array.',
    'before' => 'The :attribute must be a date before :date.',
    'before_or_equal' => 'The :attribute must be a date before or equal to :date.',
    'between' => [
        'numeric' => 'The :attribute must be between :min and :max.',
        'file' => 'The :attribute must be between :min and :max kilobytes.',
        'string' => 'The :attribute must be between :min and :max characters.',
        'array' => 'The :attribute must have between :min and :max items.',
    ],
    'boolean' => 'The :attribute field must be true or false.',
    'confirmed' => 'The :attribute confirmation does not match.',
    'current_password' => 'The password is incorrect.',
    'date' => 'The :attribute is not a valid date.',
    'date_equals' => 'The :attribute must be a date equal to :date.',
    'date_format' => 'The :attribute does not match the format :format.',
    'declined' => 'The :attribute must be declined.',
    'declined_if' => 'The :attribute must be declined when :other is :value.',
    'different' => 'The :attribute and :other must be different.',
    'digits' => 'The :attribute must be :digits digits.',
    'digits_between' => 'The :attribute must be between :min and :max digits.',
    'dimensions' => 'The :attribute has invalid image dimensions.',
    'distinct' => 'The :attribute field has a duplicate value.',
    'email' => 'The :attribute must be a valid email address.',
    'ends_with' => 'The :attribute must end with one of the following: :values.',
    'enum' => 'The selected :attribute is invalid.',
    'exists' => 'The selected :attribute is invalid.',
    'file' => 'The :attribute must be a file.',
    'filled' => 'The :attribute field must have a value.',
    'gt' => [
        'numeric' => 'The :attribute must be greater than :value.',
        'file' => 'The :attribute must be greater than :value kilobytes.',
        'string' => 'The :attribute must be greater than :value characters.',
        'array' => 'The :attribute must have more than :value items.',
    ],
    'gte' => [
        'numeric' => 'The :attribute must be greater than or equal to :value.',
        'file' => 'The :attribute must be greater than or equal to :value kilobytes.',
        'string' => 'The :attribute must be greater than or equal to :value characters.',
        'array' => 'The :attribute must have :value items or more.',
    ],
    'image' => 'The :attribute must be an image.',
    'in' => 'The selected :attribute is invalid.',
    'in_array' => 'The :attribute field does not exist in :other.',
    'integer' => 'The :attribute must be an integer.',
    'ip' => 'The :attribute must be a valid IP address.',
    'ipv4' => 'The :attribute must be a valid IPv4 address.',
    'ipv6' => 'The :attribute must be a valid IPv6 address.',
    'json' => 'The :attribute must be a valid JSON string.',
    'lt' => [
        'numeric' => 'The :attribute must be less than :value.',
        'file' => 'The :attribute must be less than :value kilobytes.',
        'string' => 'The :attribute must be less than :value characters.',
        'array' => 'The :attribute must have less than :value items.',
    ],
    'lte' => [
        'numeric' => 'The :attribute must be less than or equal to :value.',
        'file' => 'The :attribute must be less than or equal to :value kilobytes.',
        'string' => 'The :attribute must be less than or equal to :value characters.',
        'array' => 'The :attribute must not have more than :value items.',
    ],
    'mac_address' => 'The :attribute must be a valid MAC address.',
    'max' => [
        'numeric' => 'The :attribute must not be greater than :max.',
        'file' => 'The :attribute must not be greater than :max kilobytes.',
        'string' => 'The :attribute must not be greater than :max characters.',
        'array' => 'The :attribute must not have more than :max items.',
    ],
    'mimes' => 'The :attribute must be a file of type: :values.',
    'mimetypes' => 'The :attribute must be a file of type: :values.',
    'min' => [
        'numeric' => 'The :attribute must be at least :min.',
        'file' => 'The :attribute must be at least :min kilobytes.',
        'string' => 'The :attribute must be at least :min characters.',
        'array' => 'The :attribute must have at least :min items.',
    ],
    'multiple_of' => 'The :attribute must be a multiple of :value.',
    'not_in' => 'The selected :attribute is invalid.',
    'not_regex' => 'The :attribute format is invalid.',
    'numeric' => 'The :attribute must be a number.',
    'password' => 'The password is incorrect.',
    'present' => 'The :attribute field must be present.',
    'prohibited' => 'The :attribute field is prohibited.',
    'prohibited_if' => 'The :attribute field is prohibited when :other is :value.',
    'prohibited_unless' => 'The :attribute field is prohibited unless :other is in :values.',
    'prohibits' => 'The :attribute field prohibits :other from being present.',
    'regex' => 'The :attribute format is invalid.',
    'required' => 'The :attribute field is required.',
    'required_array_keys' => 'The :attribute field must contain entries for: :values.',
    'required_if' => 'The :attribute field is required when :other is :value.',
    'required_unless' => 'The :attribute field is required unless :other is in :values.',
    'required_with' => 'The :attribute field is required when :values is present.',
    'required_with_all' => 'The :attribute field is required when :values are present.',
    'required_without' => 'The :attribute field is required when :values is not present.',
    'required_without_all' => 'The :attribute field is required when none of :values are present.',
    'same' => 'The :attribute and :other must match.',
    'size' => [
        'numeric' => 'The :attribute must be :size.',
        'file' => 'The :attribute must be :size kilobytes.',
        'string' => 'The :attribute must be :size characters.',
        'array' => 'The :attribute must contain :size items.',
    ],
    'starts_with' => 'The :attribute must start with one of the following: :values.',
    'string' => 'The :attribute must be a string.',
    'timezone' => 'The :attribute must be a valid timezone.',
    'unique' => 'The :attribute has already been taken.',
    'uploaded' => 'The :attribute failed to upload.',
    'url' => 'The :attribute must be a valid URL.',
    'uuid' => 'The :attribute must be a valid UUID.',

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | Here you may specify custom validation messages for attributes using the
    | convention "attribute.rule" to name the lines. This makes it quick to
    | specify a specific custom language line for a given attribute rule.
    |
    */

    'custom' => [
        'attribute-name' => [
            'rule-name' => 'custom-message',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Attributes
    |--------------------------------------------------------------------------
    |
    | The following language lines are used to swap our attribute placeholder
    | with something more reader friendly such as "E-Mail Address" instead
    | of "email". This simply helps us make our message more expressive.
    |
    */

    'attributes' => [],

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/en/site.php

      
-----------------------------------------------


      <?php

return [
    'name'    => 'Royal College - Core System',
    'home'    => 'Home',
    'logout'  => 'Logout',
    'login'   => 'Login',
    'serial'  => 'Serial',

    'add'    => 'Add',
    'edit'   => 'Edit',
    'delete' => 'Delete',
    'action' => 'Actions',
    'search' => 'Search',
    'count'  => 'Count',
    'count_of'  => ':target count',


    'no_data_found'        => 'No data found',
    'added_successfully'   => 'Added successfully',
    'updated_successfully' => 'Updated successfully',
    'imported_successfully' => 'Imported successfully',
    'deleted_successfully' => 'Deleted successfully',
    'confirm_delete'       => 'Confirm delete',
    'login_successfully'   => 'Logged in successfully',

    'paid_successfully'   => 'Successful payment',

    'yes' => 'Yes',
    'no'  => 'No',
    'ok' => 'Ok',

    'usd' => 'USD',
    'sdg' => 'SDG',

    'choose' => 'Choose',
    'file'   => 'Attach file',
    'change' => 'Change',
    'create' => 'Create',
    'data'   => 'Data',

    'read'   => 'Read',
    'update' => 'Update',
    'delete' => 'Delete',
    'enter'  => 'Enter',

    'created_at' => 'Created at',
    'all'        => 'All',
    'close'      => 'Close',

    'bulk_delete' => 'Bulk delete',
    'loading'     => 'Loading...',
    'show'        => 'Show',

    'DT_RowIndex'         => 'Number',
    'email_or_username'   => 'Username or email',
    'same_request'        => 'You have already sent a request',

    'pdf'         => 'PDF',
    'print'       => 'Print',
    'save'       => 'Save',
    'save_and_print'       => 'Save and print',

    'number_of_students' => 'Number of students',
    'verified_students' => 'Verified students',
    'quiters' => 'Quitters',
    'freezers' => 'Freezers',

    'exported_successfully' => 'Exported successfully',

    'admin_panel' => 'Admin panel',

    'add_via_excel' => 'Add :target with excel',

    'add_new' => 'Add new :target',
    'update_target' => 'Update :target',

    'next' => 'Next',
    'back' => 'Back',

    'filter' => 'Filter',

    'error' => 'Error',

    'percentage' => 'Percentage',

    'click_here' => 'click here',

    'no_target' => 'No :target',

    'from' => 'From',
    'to' => 'To',

    'status' => 'Status',
    'total' => 'Total',

    'download_empty_sample' => 'Download empty sample',

    'welcome_back' => 'Welcome back' ,

    'welcome_back_unstretched' => 'Welcome back',

    'elearning_module' => 'E-Learning',
    'payments_module' => 'Payments',
    'active_study_plan_module' => 'Active study plans',
    'admission_module' => 'Admission',
    'settings_module' => 'Administrator',
    'results_module' => 'Academic results',

    'warning' => 'Warning !',
    'cancel' => 'Cancel',

    'archive' => 'archive',
    'target_archive' => ':target archive',

    'verify_columns' => 'Verify columns',

    'remove' => 'Remove',

    'add_archived_target' => 'Import archived :target'
];



      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/en/passwords.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Password Reset Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are the default lines which match reasons
    | that are given by the password broker for a password update attempt
    | has failed, such as for an invalid token or invalid new password.
    |
    */

    'reset' => 'Your password has been reset!',
    'sent' => 'We have emailed your password reset link!',
    'throttled' => 'Please wait before retrying.',
    'token' => 'This password reset token is invalid.',
    'user' => "We can't find a user with that email address.",

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/en/pagination.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Pagination Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used by the paginator library to build
    | the simple pagination links. You are free to change them to anything
    | you want to customize your views to better match your application.
    |
    */

    'previous' => '&laquo; Previous',
    'next' => 'Next &raquo;',

];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/en/pages.php

      
-----------------------------------------------


      <?php

return [
    'import_grades' => [
        'subtitle' => 'The system allows you to import grades with excel sheets',
    ],

    'active_study_plans_archive' => [
        'subtitle' => 'You can view active study plans for archived study dates in this page',
    ],

    'import_active_study_plans' => [
        'subtitle' => 'You can import active study plans for previous study dates using excel sheets',
    ],

    'import_payments' => [
        'subtitle' => 'You can import archived payments for previous study dates using excel sheets',
    ],
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/en/auth.php

      
-----------------------------------------------


      <?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used during authentication for various
    | messages that we need to display to the user. You are free to modify
    | these language lines according to your application's requirements.
    |
    */

    'failed' => 'These credentials do not match our records.',
    'password' => 'The provided password is incorrect.',
    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',

    'no_data_found' => 'These credentials do not match our records.',
    'login_page' => 'Sign In',
    'login_page_welcome' => 'Welcome !, fill in your credentials please.',
    'are_you_student' => 'Are you a student ?'
];

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/lang/en/admin.php

      
-----------------------------------------------


      <?php

return   array(
    'admins' => array(
        'admins' => 'Admins',
        'name' => 'Username',
        'full_name' => 'Full name',
        'email' => 'Email',
        'password_confirmation' => 'Confirm Password',
        'password' => 'Password',

        'users' => 'Users',
        'user' => 'User',
    ),

    'permissions' => array(
        'permissions' => 'Permissions',
        'model' => 'Models',
        'email' => 'Email',
    ),

    'roles' => array(
        'roles' => 'Roles',
        'name' => 'Name',
        'email' => 'Email',
    ),

    'settings' => array(
        'settings' => 'Settings',
        'my_profile' => 'My Profile',
        'admin_settings' => 'Admin Settings',
        'main' => 'Main',
    ),

    'status' => array(
        'completed' => 'Completed',
        'not_completed' => 'Not Completed',
    ),

    'college' => array(
        'college' => 'College',
        'university_name' => 'University name',
        'main' => 'Main',
        'name' => 'Name',
    ),

    'departments' => array(
        'departments' => 'Departments',
        'department' => 'Department',
        'name' => 'Name',
        'last_batch_number' => 'Last Batch Number',
        'study_years' => 'Number of Study Years',
        'batch_number' => 'Batch Number',
    ),

    'study_dates' => array(
        'study_dates' => 'Study Dates',
        'study_date' => 'Study date',
        'start_reg' => 'Start Registration Date',
        'end_reg' => 'End Registration Date',
        'archived' => 'Archived',
        'name' => 'Name',
        'batch' => 'Batch',
        'price' => 'Tuition Fee',
        'usd_price' => 'USD Fee',
        'sdg_price' => 'SDG Fee',
        'register_fees_sdg' => 'SDG Registration Fee',
        'previous_study_date_not_archived' => 'Previous Study Dates Must Be Archived',
        'register_fees_usd' => 'USD Registration Fee',

        'register_fees_with_currency'             => 'Register fees (:target)',
        'active' => 'Active',
    ),

    'study_years' => array(
        'study_years' => 'Study Years',
        'name' => 'Name',
        'study_year' => 'Study Year',
    ),

    'currency' => array(
        'currency' => 'Currency',
        'usd' => 'USD',
        'sdg' => 'SDG'
    ),

    'nationalities' => array(
        'nationalities' => 'Nationalities',
        'nationality' => 'Nationality',
        'name' => 'Nationality name',
    ),

    'payment_status' => array(
        'payment_status' => 'Payment Statuses',
        'name' => 'Name',
    ),

    'receipts' => array(
        'receipts' => 'Receipts',
        'name' => 'Name',
    ),

    'payments' => array(
        'payments' => 'Payments',
        'payment_fees' => 'Remaining Fees',
        'discounts' => 'Total Discount',
        'receipts' => 'Receipts',
        'created_at' => 'Payment Date',
        'status' => 'Status',
        'total' => 'Total Amount',
        'total_amount' => 'Total Amount',
        'amount' => 'Amount',
        'receipts' => 'Receipts',
        'remaining' => 'Remaining Amount',
        'required' => 'Required Amount',
        'paid' => 'Paid Amount',
        'operation_number' => 'Operation Number',
        'Incorrect_amount' => 'Incorrect Amount',
        'pay' => 'Pay',

        'invoice_number' => 'Invoice number',
        'payments_count' => 'Payments count',
        'invoices_count' => 'Invoices count',

        'edit_invoice' => 'Edit invoice amount',


    ),
    'payment_orders'      => array(
        'payment_orders'                => 'Payment Orders',
        'amount_required'                => 'Required Amount',
        'status'                           => 'Status',
        'description'                    => 'Description',
        'created_at'                     => 'Created At',
        "REGISTRATION"                     => 'New Registration',
        "REMAINING_INSTALLMENTS"                     => 'Remaining Installments',
        "FREEZE"                     => 'suspension',
        "DISMISSION"                     => 'Dismissal',
        "RESIGNATION"                     => 'Resignation',

        'type' => 'Type',
        'invoice_form_title' => 'Invoice payment page',
        'invoice_form_hint' => 'First installment is automaticly calculated.',

        'invoice_paid_successfully' => 'Invoice has been paid successfully',
    ),

    'currencys'           => array('currencys'                     => 'Amount',),

    'admission_types'     => array(
        'admission_types'               => 'Admission Type',
        'type'                             => 'Type',
    ),

    'payment_types'       => array(
        'payment_types'                 => 'Payment Type',
        'types'                             => 'Payment Methods',
    ),

    'students'            => array(
        'students'                      => 'Students',
        'students_count'                          => 'Number of Students',
        'student'                          => 'Student',
        'student_data'                     => 'Personal Data',
        'students_registration'           => 'Students and Registration',
        'father'                          => 'Parent Data',
        'student_name'                       => 'Student name',
        'full_name'                       => 'Full Name',
        'name1'                           => 'Student First Name (Arabic)',
        'name2'                           => 'Student Second Name (Arabic)',
        'name3'                           => 'Student Third Name (Arabic)',
        'name4'                           => 'Student Fourth Name (Arabic)',
        'name1_ar'                           => 'Student First Name (Arabic)',
        'name2_ar'                           => 'Student Second Name (Arabic)',
        'name3_ar'                           => 'Student Third Name (Arabic)',
        'name4_ar'                           => 'Student Fourth Name (Arabic)',
        'name1_en'                        => 'Student First Name (English)',
        'name2_en'                        => 'Student Second Name (English)',
        'name3_en'                        => 'Student Third Name (English)',
        'name4_en'                        => 'Student Fourth Name (English)',
        'certificate_date'                => 'Certificate Date',
        'certificate_type'                => 'Certificate Type',
        'religion'                         => 'Religion',
        'university_id'                   => 'University ID',
        'phone'                           => 'Phone Number',
        'national_number'                 => 'National ID Number',
        'nationality'                     => 'Nationality',
        'address'                         => 'Address',
        'photo'                           => 'Student Photo',
        'workplace'                       => 'Parent\'s Occupation',
        'father_name'                     => 'Parent\'s Full Name',
        'father_phone1'                   => 'Parent\'s Phone Number 1',
        'father_phone2'                   => 'Parent\'s Phone Number 2',
        'registration'                    => 'Registration Data',
        'tuition_fees'                    => 'Tuition Fees',
        'required_fees'                   => 'Required Fees',
        'acceptance_year'                 => 'Year of Admission',
        'my_profile'                      => 'Student Profile',
        'freeze'                          => 'Suspend',
        'dismiss'                         => 'Dismissal',
        'resignation'                       => 'Resignation',
        'gender'                               => 'Gender',
        'male'                               => 'Male',
        'female'                           => 'Female',

        'personal_info' => 'Personal information',
        'parent_info' => 'Parent information',
        'admission_info' => 'Admission information',
        'congratulations' => 'Congratulations',

        'study_year_id' => 'Study year ID',
        'currency_id' => 'Currency ID',
        'register_fees' => 'Registration fees',
        'phone_number' => 'Phone number',
        'admission_type_id' => 'Admission type ID',

        'filter_title' => 'Quick filter',
        'filter_all' => 'All students',
        'filter_registered' => 'Registered students',
        'filter_unregistered' => 'Unregistered students',
        'filter_freezed' => 'Suspended students',

    ),

    'create_student' => array(
        'form_tip' => 'Contains all necessary information to add / update student in the system easily and quickly.',
        'phone_number_tip' => 'Write student\s phone number',
        'nationality_tip' => 'Student nationality',
        'national_number_tip' => 'Student national ID / passport',
        'religion_tip' => 'Choose student religion',

        'important_notes_title' => 'Important notes',
        'important_notes_subtitle' => 'These notes help you use the system',

        'required_fields_note' => 'Fields with :star are required.',
        'information_accuracy_note' => 'Make sure the <span class="tx-info">provided data</span> is accurate.',
        'automatic_payment_fields_note' => 'Payment fees fields is calculated <span class="tx-orange">automaticly</span> by the system  .',

        'gender_tip' => 'Choose student gender',

        'father_name_tip' => 'Write the full parent name',
        'father_workplace_tip' => 'Write the parent occupation',
        'father_phone1_tip' => 'Write the parent first phone number',
        'father_phone2_tip' => 'Write the parent second phone number',

        'certificate_type_tip' => 'Choose the certificate type.',
        'certificate_date_tip' => 'Write student certificate date.',
        'university_id_tip' => 'Write student University ID.',
        'admission_type_tip' => 'Choose student admission type.',

        'acceptance_year_tip' => 'Write the admission year .',
        'study_date_tip' => 'Choose the study date.',

        'department_tip' => 'The academic department.',
        'study_year_tip' => 'Choose the student study year.',
        'batch_tip' => 'Choose the student batch number.',
        'currency_tip' => 'Choose student payment\'s currency.',
        'automatic' => 'Automatic',
        'address_placeholder' => 'State - city - Neighbourhood - Street number.',

        'student_created' => 'Student : <span class="tx-bold">:name</span> has been created successfully.',
        'student_updated' => 'Student : <span class="tx-bold">:name</span> has been updated successfully.',

        'proceed_academic_operations' => 'You can proceed the academic and payment operations now.',

        'navigate_to_student_profile' => 'Click to navigate to student profile.',

    ),

    'registrations' => array(
        'registrations' => 'Registrations',
        'status' => 'Registration status',
        'register_fees' => 'Registration Fees',
        'tuition_fees' => 'Tuition Fees',
        'registered' => 'Registered',
        'unregistered' => 'Unregistered',
        'freezed' => 'Suspended',
        'quit' => 'Quit',
        'dismissed' => 'Dismissed',
    ),

    'student_profile' => array(
        'student_profile' => 'Student Profile',
        'status' => 'Status',
        'register_fees' => 'Registration Fees',
        'tuition_fees' => 'Tuition Fees',
        'financial_receipts' => 'Financial Receipts',
        'admission' => 'Admission',
        'personal_info' => 'Personal information',

        'can_not_freeze_profile_after_marks_are_entered' => 'Student profile can not be suspended after grades are entered to the system.',
        'student_has_suspension_payment_order' => 'Student already has suspension payment order.',
        'student_is_already_suspended' => 'Student is already suspended',
        'unsuspend_student' => 'Reinstate student',
        'student_has_been_unsuspended' => 'Student has been reinstated',

        'cancel_payment_order' => 'Cancel payment order.',

        'payment_order_issued' => 'Payment order issued.',

        'payment_order_canceled' => 'Payment order has been canceled.',
        'student_has_dismiss_payment_order' => 'Student already have active dismiss payment order.',

        'discount_created' => 'Discount has been successfully created',
        'confirm_delete_discount' => 'Are you sure?',

        'disabled_create_discount_button_hint' => 'You can not create discount for suspended/dismissed student'
    ),

    'type_discounts' => array(
        'type_discounts' => 'Type Discounts',
        'type' => 'Type',
        'register_fees' => 'Registration Fees',
        'tuition_fees' => 'Tuition Fees',
    ),

    'discounts' => array(
        'discounts' => 'Discounts',
        'discount' => 'Discount',
        'status' => 'Status',
        'register_fees' => 'Registration Fees',
        'tuition_fees' => 'Tuition Fees',
        'amount' => 'Discount amount',
        'type' => 'Discount type',
    ),

    'reports' => array(
        'reports' => 'Reports',
        'registrar_reports' => 'Registrar reports',
        'accountant_reports' => 'Accountant reports',
        'registered_students' => 'Registered Students',
        'registered_students2' => 'Registered',
        'unregistered_students' => 'Unregistered Students',
        'completed_students' => 'No remaining fees Students',
        'payment_fees' => 'Payment Fees',
        'departments_statistics' => 'Departments Statistics',
        'payment_reports' => 'Payment Reports',

        'total_registrations' => 'Total students',
        'registered_students_count' => 'Registered students count ',
        'registration_percentage' => 'Registration percentage',

        'payments_report' => 'Payments report',
        'daily_payments_report' => 'Daily payments report',
        'department_payments_report' => 'Department payments report',

    ),

    'reports_recorder' => array(
        'reports_recorder' => 'Recorder Reports',
    ),

    'reports_accountant' => array(
        'reports_accountant' => 'Accountant Reports',
    ),

    'courses' => array(
        'course' => 'Course',
        'hours' => 'Hours',
        'name' => 'Course Name in Arabic',
        'name_en' => 'Course Name in English',
        'courses' => 'Courses',
        'code' => 'Code',
        'min_degree' => 'Passing Grade',
        'courses_count' => 'Courses Count',
        'hours_count' => 'Hours Count',

        'course_has_practical'                => 'Does the course has a practical part?',
    ),
    'semesters' => array(
        'semesters' => 'Semesters',
        'semester' => 'Semester',
    ),

    'results' => array(
        'results' => 'Academic results',
        'result' => 'Academic result',
        'min' => 'Passing grade',
        'degree_code' => 'Grade',
        'is_pass' => 'Status',
        'succeeded' => 'Passed',
        'failed' => 'Failed',


        'enter_grades' => 'Enter grades',
        'colors_guide' => 'Colors guide',

        'success' => 'Success',
        'absence' => 'Absence',
        'excused_absence' => 'Absence with excuse',
        'cheat' => 'Cheat',

        'assessment' => 'Academic assessment',
        'phase' => 'Phase',
        'show_statistics' => 'Show statistics',

        'first_phase' => 'First phase',
        'final_phase' => 'Final phase',

        'grades_total_should_be_less_than_hundred' => 'Grades total should be less than hundred',

        'practical' => 'Practical',
        'theory' => 'Theory',

        'enter_first_exam_grades' => 'Enter first exam grades',
        'enter_final_exam_grades' => 'Enter final exam grades',

        'calculate_result' => 'Calculate result',
        'no_results_found' => 'No results were found.',
        'allow_enter_grades' => 'Allow teachers to enter students grades',

        'first_phase_grades' => 'First phase grades',
        'final_phase_grades' => 'Final phase grades',

        'not_allowed_to_enter_grades' => 'You are not allowed to update the grades',

        'grades' => 'Grades',

        'ATTENDED' => 'Attended',
        'EXCUSED_ABSENCE' => 'Absence with excuse',
        'ABSENCE' => 'Absence without excuse',
        'CHEATED' => 'Cheated',
    ),


    'currencies' => array(
        'currencies' => 'Currencies',
        'currency' => 'Currency',
        'name' => 'Currency name',
        'code' => 'Code',
        'code_hint' => 'Enter three-letter alphabetic code like : USD , SDG',
    ),

    'study_plans' => array(
        'study_plan' => 'Study plan',
        'study_plans' => 'General study plans',
        'general_study_plan' => 'General study plan',
    ),

    'active_study_plans' => array(
        'active_study_plan' => 'Current study plan',
        'confirm_remove_course' => 'Do you want to remove the selected course?',
        'confirm_remove_course_has_grades' => 'Grades have already been entered for some students in this course. Deleting the course will permanently remove all entered grades for all students.',

        'confirm_remove_course_has_no_grades' => 'This course has no grades entered yet.',
    ),
    'active_study_plan' => array(
        'active_study_plan' => 'Current study plan',
    ),

    'teachers' => array(
        'teachers' => 'Teachers',
        'teacher' => 'Teacher',
        'name' => 'Teacher name',
        'phone' => 'Phone number',
    ),

    'elearning' => array(
        'elearning' => 'E-learning',
    ),

    'students_module' => array(
        'students_module' => 'Home - Students',

        'foreign_students' => 'Foreign students admission',
        'general_admission' => 'General admission',
        'private_admission' => 'Private admission',

        'registration_summery' => 'Registration summery',
        'registration_summery_description' => 'Percentage of registered students in the study date.',

        'navigate_to_registered_students' => 'To view registered students ',

        'freezed_students' => 'Suspended students',
        'dismissed_students' => 'Dismissed students',
        'dropped_out_students' => 'Dropped out students',

        'registrations_count_summery' => 'Count of registered students is :registered  of :total total for this year.',
        'registrations_count_summery_description' => 'Count of registered students for this year.',

        'for_previous_year' => 'For the previous year',

        'admission_summery' => 'Admission summery',
        'no_remaining_seats' => 'No remaining seats.'
    ),

    'elearning_module' => array(
        'elearning_module' => 'Home - E-learning',
    ),

    'results_module' => array(
        'results_module' => 'Home - Results',
    ),

    'payments_module' => array(
        'payments_module' => 'Home - Financial transactions',

        'payments_percentage' => ':currency payments percentage',

        'paid_from_total' => 'Paid fees :paid of expected :total',

        'view_latest_payments' => 'To view latest payments ',

        'fees_payments' => 'Fees payments',
        'departments_payments' => 'Fees payments by department',

        'this_month' => 'This month',
        'this_week' => 'This week',
        'today' => 'Today',
    ),

    'settings_module' => array(
        'settings_module' => 'Home - Settings',
    ),

    'study_plan_module' => array(
        'study_plan_module' => 'Home - Study',
    ),

    'import_students' => array(
        'row' => 'Row number',
        'attribute' => 'Attribute',
        'value' => 'Wrong value',
        'error' => 'There are invalid attributes',
        'errors' => 'Errors',

        'id_note' => 'You can get the ID of a currency from the <a href=":href" target="_blank" class="tx-danger text-underline">currencies page</a>.',
        'optional_arabic_names_tip' => 'Arabic names are optional.',
    ),

    'import' => array(
        'row' => 'Row number',
        'attribute' => 'Attribute',
        'value' => 'Wrong value',
        'error' => 'There are invalid attributes',
        'errors' => 'Errors',
    ),

    'import_marks' => array(
        'university_id' => 'University ID',
        'active_study_plan_id' => 'Active study plan ID',
        'theory' => 'Theory degree',
        'practical' => 'Practical degree',
        'attendance_status' => 'Attendance status',
        'status_tip' => 'Status column value should be according to the table:',
        'status_name' => 'Status name',
        'status_value' => 'Value in excel sheet file',

        'student_does_not_have_this_active_study_plan' => 'Student does not have an active study plan with the ID : :active_study_plan_id.
        Check student active study plans from the student profile.',


        'active_study_plan_id_tip' => 'active_study_plan_id column values can be obtained from the ',
        'active_study_plan_id_tip' => 'To get the IDs of your active study plans, visit the <a href=":href" target="_blank" class="tx-danger text-underline">Active study plans page</a>',
    ),

    'import_active_study_plans' => array(
        'semester_id' => 'Semester ID',
        'course_code' => 'Course code',
        'hours' => 'Hours',
        'archived_study_dates_note' => 'Only active study plans from past study dates can be imported',

        'add_active_study_plans_for_current_study_date' => 'To update active study plans for the current study date <a href=":href" target="_blank" class="tx-info">click here</a>',
    ),

    'import_payments' => array(
        'university_id' => 'University ID',
        'payment_method_id' => 'Payment method ID',
        'amount' => 'Paid amount',
        'payment_type' => 'Payment type',
        'payment_type_tip' => 'Payment type column value should be according to the following table:',
        'payment_type_name' => 'Payment type name',
        'payment_type_value' => 'Value in excel sheet file',
    ),
    'payment_types' => array(
        'payment_types' => 'Payment methods',
        'payment_type' => 'Payment methods',
    ),
);

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/View/Components/Spinner.php

      
-----------------------------------------------


      <?php

namespace App\View\Components;

use Illuminate\View\Component;

class Spinner extends Component
{
    /**
     * Create a new component instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the view / contents that represent the component.
     *
     * @return \Illuminate\Contracts\View\View|\Closure|string
     */
    public function render()
    {
        return view('components.spinner');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/View/Components/RegistrationsStatistics.php

      
-----------------------------------------------


      <?php

namespace App\View\Components;

use Illuminate\View\Component;

class RegistrationsStatistics extends Component

{
    public $isFirstRound;
    /**
     * Create a new component instance.
     *
     * @return void
     */
    public function __construct($isFirstRound = 44)
    {
        $this->isFirstRound = $isFirstRound;
    }

    /**
     * Get the view / contents that represent the component.
     *
     * @return \Illuminate\Contracts\View\View|\Closure|string
     */
    public function render()
    {
        return view('components.registrations-statistics');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/TestStatus.php

      
-----------------------------------------------


      <?php
namespace App\Models\Elearning;


use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Elearning\TestStatus
 *
 * @property int $id
 * @property int $lecture_id
 * @property string|null $status
 * @property string|null $time
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus query()
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus whereLectureId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus whereTime($value)
 * @method static \Illuminate\Database\Eloquent\Builder|TestStatus whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class TestStatus extends Model
{
    use HasFactory;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/StudentTest.php

      
-----------------------------------------------


      <?php
namespace App\Models\Elearning;


use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Elearning\StudentTest
 *
 * @property int $id
 * @property int $student_id
 * @property int $lecture_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $mark
 * @property-read \App\Models\Elearning\Lecture $lecture
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest whereLectureId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest whereMark($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentTest whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class StudentTest extends Model
{
    use HasFactory;

    protected $fillable = ['student_id', 'lecture_id','mark'];

    public function student() {
        return $this->belongsTo(Student::class);
    }

    public function lecture() {
        return $this->belongsTo(Lecture::class);
    }
    
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/StudentAssignment.php

      
-----------------------------------------------


      <?php

namespace App\Models\Elearning;

use App\Models\Student;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * App\Models\Elearning\StudentAssignment
 *
 * @property int $id
 * @property int $student_id
 * @property int $lecture_id
 * @property string|null $path
 * @property string|null $mark
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int $assignment_id
 * @property-read \App\Models\Elearning\Assignment $assignment
 * @property-read Student $student
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment query()
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment whereAssignmentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment whereLectureId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment whereMark($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment wherePath($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StudentAssignment whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class StudentAssignment extends Model
{
    use HasFactory;

    protected $fillable = [
       'student_id',
       'assignment_id',
       'mark',
       'path',
    ];

    public function student() :BelongsTo
    {
        return $this->belongsTo(Student::class);
    }

    public function assignment() :BelongsTo
    {
        return $this->belongsTo(Assignment::class);
    }
} 

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/QuestionAnswer.php

      
-----------------------------------------------


      <?php

namespace App\Models\Elearning;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Elearning\QuestionAnswer
 *
 * @property int $id
 * @property int $question_id
 * @property int $student_id
 * @property string $answer
 * @property int $is_correct
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $mark
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer query()
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereAnswer($value)
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereIsCorrect($value)
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereMark($value)
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereQuestionId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|QuestionAnswer whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class QuestionAnswer extends Model
{
    use HasFactory;

    protected $fillable = [
        'question_id',
        'student_id',
        'answer',
        'mark',
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/Question.php

      
-----------------------------------------------


      <?php

namespace App\Models\Elearning;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasOne;

/**
 * App\Models\Elearning\Question
 *
 * @property int $id
 * @property int|null $lecture_id
 * @property string|null $question
 * @property array|null $options
 * @property string|null $type
 * @property string|null $answer
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $mark
 * @property-read \App\Models\Elearning\QuestionAnswer|null $answers
 * @property-read \App\Models\Elearning\Lecture|null $lecture
 * @method static \Illuminate\Database\Eloquent\Builder|Question newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Question newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Question query()
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereAnswer($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereLectureId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereMark($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereOptions($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereQuestion($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Question whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Question extends Model
{
    use HasFactory;

    protected $fillable = [
        'question',
        'options',
        'type',
        'answer',
        'lecture_id',
        'mark',
    ];

    protected $casts = [
        'options' => 'array',
    ];

    const TYPE_MULTIPLE_CHOICE = 1;

    public function lecture()
    {
        return $this->belongsTo(Lecture::class);
    }

    public function answers() {
        return $this->hasOne(QuestionAnswer::class);
    }

    public function currentStudentAnswers() :HasOne
    {
        return $this->hasOne(Question::class)->where('student_id', auth('student')->user()->student_id);
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/LectureAttendance.php

      
-----------------------------------------------


      <?php

namespace App\Models\Elearning;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Elearning\LectureAttendance
 *
 * @property int $id
 * @property int $lecture_id
 * @property int $student_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance query()
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance whereLectureId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance whereStudentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|LectureAttendance whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class LectureAttendance extends Model
{
    use HasFactory;

    protected $fillable = ['student_id','lecture_id'];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/Lecture.php

      
-----------------------------------------------


      <?php

namespace App\Models\Elearning;

use Carbon\Carbon;
use App\Models\Course;
use Spatie\MediaLibrary\HasMedia;
use App\Models\Elearning\Question;
use App\Models\Elearning\Assignment;
use App\Models\Elearning\Attachment;
use App\Models\Elearning\StudentTest;
use Illuminate\Database\Eloquent\Model;
use App\Models\Elearning\LectureAttendance;
use DateTime;
use Spatie\MediaLibrary\InteractsWithMedia;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\Date;

/**
 * App\Models\Elearning\Lecture
 *
 * @property int $id
 * @property int $course_id
 * @property string|null $title
 * @property string|null $type
 * @property string|null $full_mark
 * @property int|null $order
 * @property int|null $teaching_datetime
 * @property string|null $live_link
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $description
 * @property string|null $test_status
 * @property string|null $test_time
 * @property-read Assignment|null $assignment
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Attachment> $attachments
 * @property-read int|null $attachments_count
 * @property-read Course $course
 * @property-read mixed $icon
 * @property-read mixed $text_color
 * @property-read \Illuminate\Database\Eloquent\Collection<int, LectureAttendance> $lectureAttendances
 * @property-read int|null $lecture_attendances_count
 * @property-read \Spatie\MediaLibrary\MediaCollections\Models\Collections\MediaCollection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
 * @property-read int|null $media_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Question> $questions
 * @property-read int|null $questions_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, StudentTest> $studentTests
 * @property-read int|null $student_tests_count
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture query()
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereCourseId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereFullMark($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereLiveLink($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereOrder($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereTeachingDatetime($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereTestStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereTestTime($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Lecture whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Lecture extends Model implements HasMedia
{
    use HasFactory;
    use InteractsWithMedia;

    protected $fillable = [
        'title',
        'type',
        'description',
        'course_id',
        'live_link',
        'full_mark',
        'description',
        'teaching_datetime',
        'test_status',
        'test_time',
    ];

    const TYPE_LECTURE = 1;
    const TYPE_LIVE_LECTURE = 2;
    const TYPE_OFFLINE_TEST = 3;
    const TYPE_ONLINE_TEST = 4;
    const TYPE_PRACTICAL_EXAM = 5;

    const LECTURE_TYPES = [
        self::TYPE_LECTURE => 'Lecture',
        self::TYPE_LIVE_LECTURE => 'Live Lecture',
        self::TYPE_OFFLINE_TEST => 'Offline Test',
        self::TYPE_ONLINE_TEST => 'Online Test',
        self::TYPE_PRACTICAL_EXAM => 'Practical Exam',
    ];

    const TEST_STATUS_NOT_STARTED = 'notStarted';
    const TEST_STATUS_STARTED = 'started';
    const TEST_STATUS_PAUSED = 'paused';
    const TEST_STATUS_RESUMED = 'resumed';
    const TEST_STATUS_ENDED = 'ended';


    public function getTeachingDatetimeAttribute($value)
    {
        return Carbon::parse($value)->format('Y-m-d\TH:i');
    }

    public function course(): BelongsTo
    {
        return $this->belongsTo(Course::class);
    }

    public function attachments(): HasMany
    {
        return $this->hasMany(Attachment::class);
    }

    public function assignment(): HasOne
    {
        return $this->hasOne(Assignment::class);
    }

    public function studentTests(): HasMany
    {
        return $this->hasMany(StudentTest::class);
    }

    public function lectureAttendances(): HasMany
    {
        return $this->hasMany(LectureAttendance::class);
    }

    public function questions(): HasMany
    {
        return $this->hasMany(Question::class);
    }

    public function getTextColorAttribute()
    {
        switch ($this->type) {
            case self::TYPE_LECTURE:
                return 'text-blue';
            case self::TYPE_LIVE_LECTURE:
                return 'text-blue';
            case self::TYPE_OFFLINE_TEST:
                return 'text-yallow';
            case self::TYPE_ONLINE_TEST:
                return 'text-yallow';
            case self::TYPE_PRACTICAL_EXAM:
                return 'text-yallow';
        }
    }

    public function getIconAttribute()
    {
        switch ($this->type) {
            case self::TYPE_LECTURE:
                return 'bi bi-book';
            case self::TYPE_LIVE_LECTURE:
                return 'bi bi-book';
            case self::TYPE_OFFLINE_TEST:
                return 'bi bi-receipt-cutoff';
            case self::TYPE_ONLINE_TEST:
                return 'bi bi-receipt-cutoff';
            case self::TYPE_PRACTICAL_EXAM:
                return 'bi bi-receipt-cutoff';
        }
    }

public function getCreatedAtAttribute($value) {
        return (new DateTime($value))->format('Y-m-d');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/Attachment.php

      
-----------------------------------------------


      <?php

namespace App\Models\Elearning;

use Illuminate\Support\Str;
use FFMpeg\Coordinate\TimeCode;
use FFMpeg\Coordinate\Dimension;
use Spatie\MediaLibrary\HasMedia;
use Illuminate\Database\Eloquent\Model;
use Spatie\MediaLibrary\InteractsWithMedia;
use ProtoneMedia\LaravelFFMpeg\FFMpeg\FFProbe;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * App\Models\Elearning\Attachment
 *
 * @property int $id
 * @property string|null $path
 * @property string|null $type
 * @property int|null $lecture_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $title
 * @property string|null $duration
 * @property string|null $thumbnail
 * @property-read mixed $downloadable_path
 * @property-read \Spatie\MediaLibrary\MediaCollections\Models\Collections\MediaCollection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
 * @property-read int|null $media_count
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment query()
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereDuration($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereLectureId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment wherePath($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereThumbnail($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Attachment whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Attachment extends Model implements HasMedia
{
    use HasFactory;
    use InteractsWithMedia;

    protected $fillable = [
        'type',
        'lecture_id', 'title',
        'path', 'thumbnail',
        'duration',
    ];

    const ATTACHMENT_TYPE_VIDEO = 1;
    const ATTACHMENT_TYPE_FILE = 2;

    const ATTACHMENT_TYPES = [
        self::ATTACHMENT_TYPE_VIDEO => 'video',
        self::ATTACHMENT_TYPE_FILE => 'File',
    ];

    public function getPathAttribute($value)
    {
        return asset('storage/' . $value);
    }

    public function getThumbnailAttribute($value)
    {
        return asset('storage/' . $value);
    }

    public function getDownloadablePathAttribute($attachment) {
        return $this->getRawOriginal('path');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Models/Elearning/Assignment.php

      
-----------------------------------------------


      <?php

namespace App\Models\Elearning;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasMany;

/**
 * App\Models\Elearning\Assignment
 *
 * @property int $id
 * @property int $lecture_id
 * @property string|null $title
 * @property string|null $description
 * @property string|null $full_mark
 * @property string|null $deadline
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read mixed $is_past
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Elearning\StudentAssignment> $studentAssignments
 * @property-read int|null $student_assignments_count
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment query()
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereDeadline($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereFullMark($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereLectureId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Assignment whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Assignment extends Model
{
    use HasFactory;

    protected $fillable = ['title', 'description','full_mark','deadline' , 'lecture_id'];

    public function studentAssignments() :HasMany
     {
        return $this->hasMany(StudentAssignment::class);
    }

    public function getDeadlineAttribute($value)
    {
        return Carbon::parse($value)->format('Y-m-d\TH:i');
    }

    public function getIsPastAttribute() {
        return Carbon::parse($this->deadline)->isPast();
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Resources/StudentPaymentResource.php

      
-----------------------------------------------


      <?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class StudentPaymentResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array|\Illuminate\Contracts\Support\Arrayable|\JsonSerializable
     */
    public function toArray($request)
    {
        $data = [
            'study_date' => $this->registration?->studyDate?->name,
            'fees' => $this->registration->DiscountedTotal,
            'paid' => (int)$this->registration->Payment,
            'remainder' => $this->registration->DiscountedTotal - $this->registration->payment,
            'currency' => $this->registration->currency,
            'payments' => PaymentCollection::collection($this->registration->payments)
        ];
        return $data;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Resources/StudentCourses.php

      
-----------------------------------------------


      <?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class StudentCourses extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array|\Illuminate\Contracts\Support\Arrayable|\JsonSerializable
     */
    public function toArray($request)
    {
        return [
            'course_name' => $this->course->name,
            'hours' => $this->course->hours,
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Resources/SemesterResource.php

      
-----------------------------------------------


      <?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class SemesterResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array|\Illuminate\Contracts\Support\Arrayable|\JsonSerializable
     */
    public function toArray($request)
    {
        return [
            'semester_name' => $this->first()->semester_name,
            'pass_all' => (boolean) !$this->where('is_pass',false)->count() > 0 ,
            'courses' => CourseDegreeResource::collection($this),
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Resources/ResultResource.php

      
-----------------------------------------------


      <?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class ResultResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array|\Illuminate\Contracts\Support\Arrayable|\JsonSerializable
     */
    public function toArray($request)
    {

        return [
            'cgpa' => round($this->first()?->first()?->cgpa, 2),
            'semesters' => SemesterResource::collection($this),
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Resources/PaymentCollection.php

      
-----------------------------------------------


      <?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class PaymentCollection extends JsonResource
{
    /**
     * Transform the resource collection into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array|\Illuminate\Contracts\Support\Arrayable|\JsonSerializable
     */
    public function toArray($request)
    {
        //dd($this->payment);
        $data = [
            'esal' => $this->id,
            'date' => $this->created_at->format('d-m-Y'),
            'amount' => $this->amount,
            'currency' => $this->currency,
            'payment_type' => $this->paymentType->type,
            'description' => $this->description,
        ];
        return $data;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Resources/CourseDegreeResource.php

      
-----------------------------------------------


      <?php

namespace App\Http\Resources;

use App\Models\CourseStudentDegree;
use Illuminate\Http\Resources\Json\JsonResource;

class CourseDegreeResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array|\Illuminate\Contracts\Support\Arrayable|\JsonSerializable
     */
    public function toArray($request)
    {
        $code = $this->degree_code;

        if($this->attendance_status != CourseStudentDegree::STATUS_ATTENDED) {
            $code = CourseStudentDegree::ABS;
        }
        return [
            'name' => $this->name_en,
            'degree_code' => $code,
            'is_pass' => (boolean)$this->is_pass,
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/storeResultCoursesRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class storeResultCoursesRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'course_id' => 'required|array',
            'course_id.*' => 'required',
            'min' => 'required|array',
            'min.*' => 'required',
        ];
    }

    // public function attributes()
    // {
    //     return [
    //         'course_id.*'    => __('admin.courses.course'),
    //         'hours.*'    => __('admin.courses.hours'),
    //         'min.*'    => __('admin.results.min'),
    //     ];
    // }

    public function messages()
    {
        return [
            'course_id.*.*'    => 'يرجى اختيار جميع المواد المطلوبة',
            'hours.*.*'    => 'أحد حقول الساعات مفقود',
            'min.*.*'    => 'أحد حقول درجة النجاح مفقود',
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/UpdateStudyPlanRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class UpdateStudyPlanRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [

        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/UpdateSemesterRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class UpdateSemesterRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return false;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            //
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/UpdateCourseRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Validation\Rule;
use Illuminate\Foundation\Http\FormRequest;

class UpdateCourseRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'name' => 'required',
            'name_en' => 'required',
            'hours' => 'required|numeric',
            'religion' => 'required',
            'department_id' => 'required',
            'min_degree' => 'required',
            'code' => 'required|unique:courses,code,' . $this->course->id,
            'has_practical' => 'sometimes',
        ];
    }

    public function attributes()
    {
        return [
            'name'    => __('admin.courses.name'),
            'name_en'    => __('admin.courses.name_en'),
            'hours'    => __('admin.courses.hours'),
            'religion'    => __('admin.courses.religion'),
            'department_id'    => __('admin.courses.department_id'),
            'code'    => __('admin.courses.code'),
            'min_degree'    => __('admin.courses.min_degree'),
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/StudentProfile.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StudentProfile extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return false;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'phone',
            'address',
            'image',

        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/StoreStudyPlanRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreStudyPlanRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'department_id' => 'required',
            'semester_id' => 'required',
            'course_id' => 'required',
            'course_id.*' => 'required',
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/StoreSemesterRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreSemesterRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return false;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            //
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/StoreCourseRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use App\Models\Course;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreCourseRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'name' => 'required',
            'name_en' => 'required',
            'hours' => 'required|numeric',
            'religion' => 'required',
            'department_id' => 'required',
            'code' => 'required|unique:courses,code',
            'min_degree' => 'required',
            'has_practical' => 'sometimes',
        ];
    }

    public function attributes()
    {
        return [
            'name'    => __('admin.courses.name'),
            'name_en'    => __('admin.courses.name_en'),
            'hours'    => __('admin.courses.hours'),
            'religion'    => __('admin.courses.religion'),
            'department_id'    => __('admin.courses.department_id'),
            'code'    => __('admin.courses.code'),
            'code'    => __('admin.courses.min_degree'),
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/ResultRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class ResultRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'department_id' => 'required',
            'semester_id' => 'required',
            'study_date_id' => 'required',
            'batch_id' => 'required',
        ];
    }

    public function attributes()
    {
        return [
            'department_id'    => __('admin.departments.department'),
            'semester_id'    => __('admin.semesters.semester'),
            'study_date_id'    => __('admin.study_dates.study_dates'),
            'batch_id'    => __('admin.departments.batch_number'),
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/ResultIndex.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire;

use Livewire\Component;

class ResultIndex extends Component
{
    public function render()
    {
        return view('livewire.result-index');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/VerifyCsrfToken.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/TrustProxies.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies;

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers =
        Request::HEADER_X_FORWARDED_FOR |
        Request::HEADER_X_FORWARDED_HOST |
        Request::HEADER_X_FORWARDED_PORT |
        Request::HEADER_X_FORWARDED_PROTO |
        Request::HEADER_X_FORWARDED_AWS_ELB;
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/TrustHosts.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustHosts as Middleware;

class TrustHosts extends Middleware
{
    /**
     * Get the host patterns that should be trusted.
     *
     * @return array<int, string|null>
     */
    public function hosts()
    {
        return [
            $this->allSubdomainsOfApplicationUrl(),
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/TrimStrings.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/RedirectIfAuthenticated.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @param  string|null  ...$guards
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next, ...$guards)
    {
        dd(343);
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                if ($guard === 'admin') {
                    return redirect(RouteServiceProvider::ADMIN);
                }
                return redirect(RouteServiceProvider::HOME);
            }
        }

        return $next($request);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/PreventRequestsDuringMaintenance.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/ModulesMiddlewar.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Route;

class ModulesMiddlewar
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        if ($request->method() == 'GET') {
            // Get the route
            // if route starts with students :
            //      Set the module to students
            $path = $request->route()->uri();

            $path = Str::after($path, 'dashboard/admin/');
            $path = Str::before($path, '/');

            if($path == 'students') {
                session()->put('module' , 'students');
            }

            if($path == 'results') {
                session()->put('module' , 'results');
            }

            if($path == 'financial') {
                session()->put('module' , 'financial');
            }

            if($path == 'study') {
                session()->put('module' , 'study');
            }

            if($path == 'settings') {
                session()->put('module' , 'settings');
            }
        }


        return $next($request);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/HandleInertiaRequests.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Http\Request;
use Inertia\Middleware;

class HandleInertiaRequests extends Middleware
{
    /**
     * The root template that's loaded on the first page visit.
     *
     * @see https://inertiajs.com/server-side-setup#root-template
     * @var string
     */
    protected $rootView = 'vue/app';

    /**
     * Determines the current asset version.
     *
     * @see https://inertiajs.com/asset-versioning
     * @param  \Illuminate\Http\Request  $request
     * @return string|null
     */
    public function version(Request $request): ?string
    {
        return parent::version($request);
    }

    /**
     * Defines the props that are shared by default.
     *
     * @see https://inertiajs.com/shared-data
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function share(Request $request): array
    {
        return array_merge(parent::share($request), [
            'csrf' => csrf_token(),
        ]);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/EncryptCookies.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Middleware/Authenticate.php

      
-----------------------------------------------


      <?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return string|null
     */
    protected function redirectTo($request)
    {
        dd(3434);
        return route('login');
        if (!$request->expectsJson()) {

            if (in_array('auth:admin', $request->route()->middleware())) {
                return route('welcome');
                // return route('dashboard.admin.login.index');

            } //end of if

            return route('login');
        } //end of if

    } //end of redirectTo

    protected function unauthenticated($request, array $guards)
    {
        if ($request->expectsJson() == true) {

            abort(response()->json([
                'status' => 'false',
                'message' => 'Unauthenticated',
            ], 401));
        }

        return redirect()->route('dashboard.admin.login.index');
    }
}//end of class

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Controller.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;

class Controller extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Actions/StudentTestsHandlerAction.php

      
-----------------------------------------------


      <?php

namespace App\Http\Actions;

use App\Models\StudyPlanDate;
use App\Models\Elearning\Lecture;
use App\Models\Student;
use App\Models\StudentTest;

class StudentTestsHandlerAction
{

    public static function handle(Lecture $lecture, StudyPlanDate $studyPlanDate)
    {

        $students = Student::query()
            ->where('department_id', $studyPlanDate->department_id)
            ->where('study_year_id', $studyPlanDate->semester->study_year_id)
            ->whereHas('courses', fn($q) => $q->where('course_id', $lecture->course_id))
            ->whereHas('registration', fn($q) => $q->whereNull('last_status'))
            ->get();

        $students->each(function ($student) use ($lecture) {
            StudentTest::firstOrCreate([
                'student_id' => $student->id,
                'lecture_id' => $lecture->id,
            ]);
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Actions/CreateNextPaymentOrderAction.php

      
-----------------------------------------------


      <?php

namespace App\Http\Actions;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Models\PaymentOrder;

class CreateNextPaymentOrderAction {

    public static function handle(PaymentOrder $paymentOrder)
    {
        if ($paymentOrder->status == PaymentOrderStatus::STATUS_REGISTRATION || $paymentOrder->status == PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS) {
            $paymentOrder->registration->createRegistrationPaymentOrder();

            if ($paymentOrder->registration->status == RegistrationStatus::STATUS_UNREGISTERED) {
                $paymentOrder->registration->update([
                    'status' => RegistrationStatus::STATUS_REGISTERED
                ]);
            }
        }

        if ($paymentOrder->status == PaymentOrderStatus::STATUS_FREEZE) {
            $$paymentOrder->registration->suspendRegistrationAfterSuspensionPaymentOrderIsPaid();
        }

        //status resignation
        if ($paymentOrder->status == PaymentOrderStatus::STATUS_RESIGNATION) {
            $$paymentOrder->registration->dismissRegistrationAfterDismissalPaymentOrderIsPaid();
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/dashboard/admin/reports/recorder.php

      
-----------------------------------------------


      <?php

use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\CompletedFeesStudentsController;
use Illuminate\Support\Facades\Route;

use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\RegisteredStudentsController;
use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\UnRegisteredStudentsController;
use App\Http\Controllers\Dashboard\Admin\Reports\Recorder\DepartmentsStatistics;
use App\Http\Controllers\Dashboard\Admin\Reports\Recorder\PaymentReportController;

Route::group(
    [
        'prefix' => LaravelLocalization::setLocale(),
        'middleware' => ['localeSessionRedirect', 'localizationRedirect', 'localeViewPath']
    ], function(){

    Route::prefix('dashboard/admin/students/reports')->name('dashboard.admin.report.')->middleware(['auth:admin'])->group(function () {

        //registered students routes
        Route::controller(DepartmentsStatistics::class)->as('department-statistics.')->group(function () {
            Route::get('/department_statistics','index')->name('index');

        });
        Route::controller(RegisteredStudentsController::class)->group(function () {

            Route::get('/registered_students', 'index')->name('registered.students');
            Route::get('/registered_students/data', 'data')->name('registered.students.data');
            Route::get('/registered_students/print', 'print')->name('registered.students.print');

        });

        Route::controller(UnRegisteredStudentsController::class)->group(function () {

            Route::get('/unregistered_students', 'index')->name('unregistered.students');
            Route::get('/unregistered_students/data', 'data')->name('unregistered.students.data');
            Route::get('/unregistered_students/print', 'print')->name('unregistered.students.print');

        });

        Route::controller(CompletedFeesStudentsController::class)->group(function () {

            Route::get('/completed_fees_students', 'index')->name('completed.fees.students');
            Route::get('/completed_fees_students/data', 'data')->name('completed.fees.students.data');
            Route::get('/completed_fees_students/print', 'print')->name('completed.fees.students.print');

        });




    }); //end of dashboard routes

});//end of Route group

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/routes/dashboard/admin/reports/accountant.php

      
-----------------------------------------------


      <?php

use Illuminate\Support\Facades\Route;

use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\RegisteredStudentsController;
use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\UnRegisteredStudentsController;
use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\CompletedFeesStudentsController;
use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\PaymentFeesController;
use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\TotalDepartmentPaymentsController;
use App\Http\Controllers\Dashboard\Admin\Reports\Accountant\TotalPaymentsController;
use App\Http\Controllers\Dashboard\Admin\Reports\Recorder\PaymentReportController;

Route::group(
    [
        'prefix' => LaravelLocalization::setLocale(),
        'middleware' => ['localeSessionRedirect', 'localizationRedirect', 'localeViewPath']
    ], function(){

    Route::prefix('dashboard/admin/financial/reports')->name('dashboard.admin.report.')->middleware(['auth:admin'])->group(function () {

        //registered students routes

        Route::controller(PaymentFeesController::class)->group(function () {

            Route::get('/payment_fees', 'index')->name('payment_fees.students');
            Route::get('/payment_fees/data', 'data')->name('payment_fees.students.data');
            Route::get('/payment_fees/print', 'print')->name('payment_fees.students.print');

        });

        Route::controller(TotalPaymentsController::class)->group(function () {

            Route::get('/total_payments', 'index')->name('total_payments.students');
            Route::get('/total_payments/data', 'data')->name('total_payments.students.data');
            Route::get('/total_payments/print', 'print')->name('total_payments.students.print');

        });

        Route::controller(TotalDepartmentPaymentsController::class)->group(function () {

            Route::get('/total_department_payments', 'index')->name('total_department_payments.students');
            Route::get('/total_department_payments/data', 'data')->name('total_department_payments.students.data');
            Route::get('/total_department_payments/print', 'print')->name('total_department_payments.students.print');

        });

        Route::controller(PaymentReportController::class)->group(function () {

            Route::get('/payment_reports', 'index')->name('payment_reports.students');
            Route::get('/payment_reports/data', 'data')->name('payment_reports.students.data');
            Route::get('/payment_reports/print', 'print')->name('payment_reports.students.print');

        });
    }); //end of dashboard routes

});//end of Route group

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/views/dashboard/admin/home-design.balde.php

      
-----------------------------------------------


      <div class="br-mainpanel">
    <div class="br-pageheader">
        <nav class="breadcrumb pd-0 mg-0 tx-12">
            <span class="breadcrumb-item active">@lang('site.home')</span>
            {{-- <a class="breadcrumb-item" href="#">اﻹعدادات</a> --}}
            {{-- <a class="breadcrumb-item" href="index.html">الرئيسية</a> --}}
        </nav>
    </div>
    <!-- br-pageheader -->
    <div class="br-pagetitle">
        <i class="icon ion-ios-gear-outline"></i>
        <div>
            <h4>@lang('site.home')</h4>
        </div>
    </div>
    <div class="blue">
        <div class="row row-sm">
            <div class="col-6 text-white p-4 bg-blue">
                <div class="">
                    <h4 class="text-left mb-4">Number of students</h4>
                    <div class="d-flex justify-content-between">
                        <p>icon</p>
                        <i class="fa fa-user fa-2x" aria-hidden="true"></i>
                    </div>
                    <div class="d-flex justify-content-between mt-4">
                        <p>555</p>
                        <div>
                            <select class="form-select" aria-label="Default select example">
                                <option selected>Open this select menu</option>
                                <option value="1">One</option>
                                <option value="2">Two</option>
                                <option value="3">Three</option>
                              </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6 bg-danger">h</div>
            <div class="col-6 bg-danger">h</div>
            <div class="col-6 bg-danger">h</div>
            {{-- <div class="col-sm-6 col-xl-3 h-6 ht-50">
                <div class="bg-info rounded overflow-hidden oneth-icon">
                    <div class="pd-x-20 pd-t-20 d-flex align-items-center">
                        <div class="mg-r-20">
                            <h1 class="tx-12 h1 tx-spacing-1 tx-mont tx-uppercase tx-white-8 mg-b-10 iconstext">@lang('site.number_of_students')
                            </h1>
                            <p class="tx-24 tx-white tx-lato tx-bold mg-b-0 lh-1">{{$students_count ?? ''}}</p>
                            <span class="tx-11 tx-roboto tx-white-8 iconstext2">طالب</span>
                        </div>
                    </div>
                    <div id="ch3" class="ht-50 tr-y-1"></div>
                </div>
            </div> --}}
            {{-- <div class="col-sm-6 col-xl-3 mg-t-20 mg-sm-t-0">
                <div class="bg-purple rounded overflow-hidden twoth-icon">
                    <div class="pd-x-20 pd-t-20 d-flex align-items-center">
                        <img src="{{ asset('img/class.png') }}">
                        <div class="mg-r-20">
                            <p class="tx-10 tx-spacing-1 tx-mont tx-medium tx-uppercase tx-white-8 mg-b-10 iconstext">
                                البرامج
                            </p>
                            <p class="tx-24 tx-white tx-lato tx-bold mg-b-0 lh-1">12</p>
                            <span class="tx-11 tx-roboto tx-white-8 iconstext2">حلقة</span>
                        </div>
                    </div>
                    <div id="ch3" class="ht-50 tr-y-1"></div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3 mg-t-20 mg-xl-t-0">
                <div class="bg-teal rounded overflow-hidden threeth-icon">
                    <div class="pd-x-20 pd-t-20 d-flex align-items-center">
                        <img src="{{ asset('img/section.png') }}">
                        <div class="mg-r-20">
                            <p class="tx-10 tx-spacing-1 tx-mont tx-medium tx-uppercase tx-white-8 mg-b-10 iconstext">
                                الاعوام الدراسية
                            </p>
                            <p class="tx-24 tx-white tx-lato tx-bold mg-b-0 lh-1">245</p>
                            <span class="tx-11 tx-roboto tx-white-8 iconstext2">جزء</span>
                        </div>
                    </div>
                    <div id="ch2" class="ht-50 tr-y-1"></div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3 mg-t-20 mg-xl-t-0">
                <div class="bg-primary rounded overflow-hidden fourth-icon">
                    <div class="pd-x-20 pd-t-20 d-flex align-items-center">
                        <img src="{{ asset('img/attendance.png') }}" style="width: 40px">
                        <div class="mg-r-20">
                            <p class="tx-10 tx-spacing-1 tx-mont tx-medium tx-uppercase tx-white-8 mg-b-10 iconstext">الحضور والانصراف
                            </p>
                            <p class="tx-24 tx-white tx-lato tx-bold mg-b-0 lh-1">65%</p>
                            <span class="tx-11 tx-roboto tx-white-8 iconstext2" style="visibility: hidden;">65.45% on average time</span>
                        </div>
                    </div>
                    <div id="ch4" class="ht-50 tr-y-1"></div>
                </div>
            </div> --}}
        </div>

        <div class="row row-sm mg-t-20">
            <div class="col-lg-8">
                <div class="card bd-0 shadow-base" style="display: none;">
                    <div class="d-md-flex justify-content-between pd-25">
                        <div>
                            <h6 class="tx-13 tx-uppercase tx-inverse tx-semibold tx-spacing-1">How Engaged Our Users Daily</h6>
                            <p>Past 30 Days — Last Updated Oct 14, 2017</p>
                        </div>
                        <div class="d-sm-flex">
                            <div>
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Bounce Rate</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">23.32%</h4>
                                <span class="tx-12 tx-success tx-roboto">2.7% increased</span>
                            </div>
                            <div class="bd-sm-r pd-sm-r-20 mg-sm-r-20 mg-t-20 mg-sm-t-0">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Page Views</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">38.20%</h4>
                                <span class="tx-12 tx-danger tx-roboto">4.65% decreased</span>
                            </div>
                            <div class="bd-sm-r pd-sm-r-20 mg-sm-r-20 mg-t-20 mg-sm-t-0">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Time On Site</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">12:30</h4>
                                <span class="tx-12 tx-success tx-roboto">1.22% increased</span>
                            </div>
                        </div><!-- d-flex -->
                    </div><!-- d-flex -->

                    <div class="pd-r-25 pd-l-15 pd-b-25">
                        <div id="ch5" class="ht-250 ht-sm-300"></div>
                    </div>
                </div><!-- card -->

                <div class="card bd-0 shadow-base pd-25">
                    <div class="d-md-flex justify-content-between">
                        <div>
                            <h6 class="tx-13 tx-uppercase tx-inverse tx-semibold tx-spacing-1">How Engaged Our Users Daily</h6>
                            <p>Past 30 Days — Last Updated Oct 14, 2017</p>
                        </div>
                        <div class="wd-200">
                            <select class="form-control select2" data-placeholder="Choose location">
                                <option label="Choose one"></option>
                                <option value="1" selected>New York</option>
                                <option value="2">San Francisco</option>
                                <option value="3">Los Angeles</option>
                                <option value="4">Chicago</option>
                                <option value="5">Seattle</option>
                            </select>
                        </div><!-- wd-200 -->
                    </div><!-- d-flex -->
                    <div class="row mg-t-20">
                        <div class="col-sm-9">
                            <div id="ch12" class="ht-250 ht-sm-300"></div>
                        </div><!-- col-9 -->
                        <div class="col-sm-3 mg-t-40 mg-sm-t-0">
                            <div>
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Bounce Rate</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">23.32%</h4>
                                <span class="tx-12 tx-success tx-roboto">2.7% increased</span>
                            </div>
                            <div class="mg-t-20 pd-t-20 bd-t">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Page Views</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">38.20%</h4>
                                <span class="tx-12 tx-danger tx-roboto">4.65% decreased</span>
                            </div>
                            <div class="mg-t-20 pd-t-20 bd-t">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Time On Site</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">12:30</h4>
                                <span class="tx-12 tx-success tx-roboto">1.22% increased</span>
                            </div>
                        </div><!-- col-3 -->
                    </div><!-- row -->
                </div><!-- card -->

                <div class="card shadow-base bd-0 pd-25 mg-t-20" style="display: none;">
                    <div class="d-md-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="tx-13 tx-uppercase tx-inverse tx-semibold tx-spacing-1">Delivery Overview</h6>
                            <p class="mg-b-0">Past 30 Days — Last Updated Oct 20, 2017</p>
                        </div>
                        <div class="wd-200 mg-t-20 mg-md-t-0">
                            <select class="form-control select2" data-placeholder="Choose location">
                                <option label="Choose one"></option>
                                <option value="1" selected>New York</option>
                                <option value="2">San Francisco</option>
                                <option value="3">Los Angeles</option>
                                <option value="4">Chicago</option>
                                <option value="5">Seattle</option>
                            </select>
                        </div><!-- wd-200 -->
                    </div><!-- d-flex -->

                    <div id="mapShiftWorker" class="ht-300 ht-sm-400 mg-t-25"></div>

                    <div class="row row-xs mg-t-25">
                        <div class="col-sm-4">
                            <div class="tx-center pd-y-15 bd">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">New Deliveries</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">12,344</h4>
                                <span class="tx-12 tx-danger tx-roboto">2.7% increased</span>
                            </div>
                        </div><!-- col-4 -->
                        <div class="col-sm-4 mg-t-20 mg-sm-t-0">
                            <div class="tx-center pd-y-15 bd">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Delivered</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">24,333</h4>
                                <span class="tx-12 tx-danger tx-roboto">2.7% decreased</span>
                            </div>
                        </div><!-- col-4 -->
                        <div class="col-sm-4 mg-t-20 mg-sm-t-0">
                            <div class="tx-center pd-y-15 bd">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium">Returned</p>
                                <h4 class="tx-lato tx-inverse tx-bold mg-b-0">432</h4>
                                <span class="tx-12 tx-success tx-roboto">2.7% decreased</span>
                            </div>
                        </div><!-- col-4 -->
                    </div><!-- row -->

                </div><!-- card -->


            </div><!-- col-8 -->
            <div class="col-lg-4 mg-t-20 mg-lg-t-0">

                <div class="card shadow-base bd-0 overflow-hidden">
                    <div class="pd-x-25 pd-t-25">
                        <h6 class="tx-13 tx-uppercase tx-inverse tx-semibold tx-spacing-1 mg-b-20">Storage Overview</h6>
                        <p class="tx-10 tx-spacing-1 tx-mont tx-medium tx-uppercase mg-b-0">As of Today</p>
                        <h1 class="tx-56 tx-light tx-inverse mg-b-0">755<span class="tx-teal tx-24">gb</span></h1>
                        <p><span class="tx-primary">80%</span> of free space remaining</p>
                    </div><!-- pd-x-25 -->
                    <div id="ch6" class="ht-115 mg-r--1"></div>
                    <div class="bg-teal pd-x-25 pd-b-25 d-flex justify-content-between" style="padding-bottom: 90px;">
                        <div class="tx-center">
                            <h3 class="tx-lato tx-white mg-b-5">989<span class="tx-light op-8 tx-20">gb</span></h3>
                            <p class="tx-10 tx-spacing-1 tx-mont tx-medium tx-uppercase mg-b-0 tx-white-8">Total Space</p>
                        </div>
                        <div class="tx-center">
                            <h3 class="tx-lato tx-white mg-b-5">234<span class="tx-light op-8 tx-20">gb</span></h3>
                            <p class="tx-10 tx-spacing-1 tx-mont tx-medium tx-uppercase mg-b-0 tx-white-8">Used Space</p>
                        </div>
                        <div class="tx-center">
                            <h3 class="tx-lato tx-white mg-b-5">80<span class="tx-light op-8 tx-20">%</span></h3>
                            <p class="tx-10 tx-spacing-1 tx-mont tx-medium tx-uppercase mg-b-0 tx-white-8">Free Space</p>
                        </div>
                    </div>
                </div><!-- card -->

                <div class="card shadow-base bd-0 mg-t-20" style="display: none;">
                    <div id="carousel3" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            <li data-target="#carousel3" data-slide-to="0" class="active"></li>
                            <li data-target="#carousel3" data-slide-to="1"></li>
                        </ol>
                        <div class="carousel-inner" role="listbox">
                            <div class="carousel-item active">
                                <div class="bg-white ht-300 pos-relative overflow-hidden d-flex flex-column align-items-start rounded">
                                    <div class="pos-absolute t-15 r-25">
                                        <a href="" class="tx-gray-500 hover-info mg-l-7"><i class="icon ion-more tx-20"></i></a>
                                    </div>
                                    <div class="pd-x-30 pd-t-30 mg-b-auto">
                                        <p class="tx-info tx-uppercase tx-11 tx-medium tx-mont mg-b-5">Product Item #1</p>
                                        <h5 class="tx-inverse mg-b-20">Samsung Galaxy S8</h5>
                                        <p class="tx-uppercase tx-11 tx-medium tx-mont mg-b-0">Purchases</p>
                                        <h2 class="tx-inverse tx-lato tx-bold mg-b-0">2366</h2>
                                        <span>53.86 purchases/month</span>
                                    </div>
                                    <div id="ch10" class="ht-100 tr-y-1"></div>
                                </div><!-- d-flex -->
                            </div>
                            <div class="carousel-item">
                                <div class="bg-white ht-300 pos-relative overflow-hidden d-flex flex-column align-items-start rounded">
                                    <div class="pos-absolute t-15 r-25">
                                        <a href="" class="tx-gray-500 hover-info mg-l-7"><i class="icon ion-more tx-20"></i></a>
                                    </div>
                                    <div class="pd-x-30 pd-t-30 mg-b-auto">
                                        <p class="tx-info tx-uppercase tx-11 tx-medium tx-mont mg-b-5">Product Item #2</p>
                                        <h5 class="tx-inverse mg-b-20">Apple iPhone 8 Plus</h5>
                                        <p class="tx-uppercase tx-11 tx-medium tx-mont mg-b-0">Purchases</p>
                                        <h2 class="tx-inverse tx-lato tx-bold mg-b-0">5632</h2>
                                        <span>120.44 purchases/month</span>
                                    </div>
                                    <div id="ch11" class="ht-100 tr-y-1"></div>
                                </div><!-- d-flex -->
                            </div><!-- cardousel-item -->
                        </div><!-- carousel-inner -->
                    </div><!-- carousel -->
                </div><!-- card -->

                <div class="card card-body bd-0 pd-25 bg-primary mg-t-20" style="display: none;">
                    <div class="d-xs-flex justify-content-between align-items-center tx-white mg-b-20">
                        <h6 class="tx-13 tx-uppercase tx-semibold tx-spacing-1 mg-b-0">Server Status</h6>
                        <span class="tx-12 tx-uppercase">Oct 2017</span>
                    </div>
                    <p class="tx-sm tx-white tx-medium mg-b-0">Hardware Monitoring</p>
                    <p class="tx-12 tx-white-7">Intel Dothraki G125H 2.5GHz</p>
                    <div class="progress bg-white-3 rounded-0 mg-b-0">
                        <div class="progress-bar bg-success wd-50p lh-3" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">50%</div>
                    </div><!-- progress -->
                    <p class="tx-11 mg-b-0 mg-t-15 tx-white-7">Notice: Lorem ipsum dolor sit amet.</p>
                </div><!-- card -->

                <div class="card bd-0 mg-t-20" style="display: none;">
                    <div id="carousel12" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            <li data-target="#carousel12" data-slide-to="0" class="active"></li>
                            <li data-target="#carousel12" data-slide-to="1"></li>
                            <li data-target="#carousel12" data-slide-to="2"></li>
                        </ol>
                        <div class="carousel-inner" role="listbox">
                            <div class="carousel-item active">
                                <div class="bg-br-primary pd-30 ht-300 pos-relative d-flex align-items-center rounded">
                                    <div class="pos-absolute t-20 r-20">
                                        <a href="" class="tx-white-5 hover-info"><i class="icon ion-edit tx-16"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-stats-bars tx-20"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-gear-a tx-20"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-more tx-20"></i></a>
                                    </div>
                                    <div class="tx-white">
                                        <p class="tx-uppercase tx-11 tx-medium tx-mont tx-spacing-2 tx-white-5">Recent Article</p>
                                        <h5 class="lh-5 mg-b-20">20 Best Travel Tips After 5 Years Of Traveling The World</h5>
                                        <nav class="nav flex-row tx-13">
                                            <a href="" class="tx-white-8 hover-white pd-l-0 pd-r-5">12K+ Views</a>
                                            <a href="" class="tx-white-8 hover-white pd-x-5">234 Shares</a>
                                            <a href="" class="tx-white-8 hover-white pd-x-5">43 Comments</a>
                                        </nav>
                                    </div>
                                </div><!-- d-flex -->
                            </div>
                            <div class="carousel-item">
                                <div class="bg-info pd-30 ht-300 pos-relative d-flex align-items-center rounded">
                                    <div class="pos-absolute t-20 r-20">
                                        <a href="" class="tx-white-5 hover-info"><i class="icon ion-edit tx-16"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-stats-bars tx-20"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-gear-a tx-20"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-more tx-20"></i></a>
                                    </div>
                                    <div class="tx-white">
                                        <p class="tx-uppercase tx-11 tx-medium tx-mont tx-spacing-2 tx-white-5">Recent Article</p>
                                        <h5 class="lh-5 mg-b-20">How I Flew Around the World in Business Class for $1,340</h5>
                                        <nav class="nav flex-row tx-13">
                                            <a href="" class="tx-white-8 hover-white pd-l-0 pd-r-5">Edit</a>
                                            <a href="" class="tx-white-8 hover-white pd-x-5">Unpublish</a>
                                            <a href="" class="tx-white-8 hover-white pd-x-5">Delete</a>
                                        </nav>
                                    </div>
                                </div><!-- d-flex -->
                            </div>
                            <div class="carousel-item">
                                <div class="bg-purple pd-30 ht-300 d-flex pos-relative align-items-center rounded">
                                    <div class="pos-absolute t-20 r-20">
                                        <a href="" class="tx-white-5 hover-info"><i class="icon ion-edit tx-16"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-stats-bars tx-20"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-gear-a tx-20"></i></a>
                                        <a href="" class="tx-white-5 hover-info mg-l-7"><i class="icon ion-more tx-20"></i></a>
                                    </div>
                                    <div class="tx-white">
                                        <p class="tx-uppercase tx-11 tx-medium tx-mont tx-spacing-2 tx-white-5">Recent Article</p>
                                        <h5 class="lh-5 mg-b-20">10 Reasons Why Travel Makes You a Happier Person</h5>
                                        <nav class="nav flex-row tx-13">
                                            <a href="" class="tx-white-8 hover-white pd-l-0 pd-r-5">Edit</a>
                                            <a href="" class="tx-white-8 hover-white pd-x-5">Unpublish</a>
                                            <a href="" class="tx-white-8 hover-white pd-x-5">Delete</a>
                                        </nav>
                                    </div>
                                </div><!-- d-flex -->
                            </div>
                        </div><!-- carousel-inner -->
                    </div><!-- carousel -->
                </div><!-- card -->

                <div class="card bg-danger bd-0 mg-t-20" style="display: none;">
                    <div class="pd-x-25 pd-t-25">
                        <h6 class="tx-13 tx-uppercase tx-white tx-medium tx-spacing-1 mg-b-10">Monthly Statistics</h6>
                        <p class="mg-b-20 tx-white-6">Past 30 Days — Last Updated Oct 14, 2017</p>
                        <div class="row row-sm mg-t-20">
                            <div class="col">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium tx-white-6">Bounce Rate</p>
                                <h4 class="tx-lato tx-white tx-bold tx-normal mg-b-0">23.32%</h4>
                                <span class="tx-12 tx-white-6 tx-roboto">2.7% increased</span>
                            </div><!-- col -->
                            <div class="col">
                                <p class="mg-b-5 tx-uppercase tx-10 tx-mont tx-medium tx-white-6">Page Views</p>
                                <h4 class="tx-lato tx-white tx-normal mg-b-0">42.58%</h4>
                                <span class="tx-12 tx-white-6 tx-roboto">1.5% decreased</span>
                            </div><!-- col -->
                        </div><!-- row -->
                        <div id="ch13" class="ht-160"></div>
                    </div><!-- pd-x-25 -->
                </div><!-- card -->

            </div><!-- col-4 -->
        </div><!-- row -->

    </div><!-- br-pagebody -->
    <!-- d-flex -->

    <!-- br-mainpanel -->
</div>

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Student/StudentProfile.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Student;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use id;
use App\Models\Student;
use Livewire\Component;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyYear;
use Illuminate\Support\Str;
use App\Models\PaymentOrder;
use App\Models\Registration;
use App\Models\CourseStudent;
use Livewire\WithFileUploads;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;
use App\Models\Currency;
use App\Models\Discount;
use App\Models\TypeDiscount;
use Intervention\Image\Facades\Image;
use PhpParser\Node\Expr\Cast\Object_;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;

class StudentProfile extends Component
{
    use WithFileUploads;
    use LivewireAlert;

    protected $listeners = [
        'dismissCanceled',
        'freezeCanceled',
        'deleteDiscount',
        'unsuspendStudent',

    ];
    public $student;
    public $activeTab = 'courses';

    public $semesterId;

    public $studyYearId;
    public $degrees;

    public $freezeModalIsVisible = false;

    public $activeStudyDate;

    public $dismissModalIsVisible = false;

    public $readyToDeleteDiscount;

    public $dismissData = [
        'amount' => 0,
        'file' => null,
        'description' => '',
    ];

    public $freezeData = [
        'amount' => 0,
        'file' => null,
        'description' => '',
    ];

    public $discountData = [
        'amount' => 0,
        'type_discount_id' => null,
        'file' => null,
        'description' => '',
    ];

    #[Computed]
    public function semesters()
    {
        return Semester::where('study_year_id', $this->student->study_year_id)->get();
    }

    #[Computed]
    public function studyYears()
    {
        return StudyYear::where('number', '<=', $this->student->study_year_id)->get();
    }

    #[Computed]
    public function currencies()
    {
        return Currency::all();
    }

    #[Computed]
    public function courses()
    {

        return CourseStudent::with('course')
            ->where('student_id', $this->student->id)
            ->where('semester_id', $this->semesterId)
            ->get();
    }

    #[Computed]
    public function paymentOrders()
    {
        return PaymentOrder::with('currency')
            ->where('student_id', $this->student->registration?->id)
            ->get();
    }

    #[Computed]
    public function typeDiscounts()
    {
        return TypeDiscount::all();
    }

    public function mount(Student $student)
    {
        $this->student = $student->load('studyYear', 'department', 'currency', 'discounts.typeDiscount',  'discounts.currency');

        $this->semesterId = $this->semesters->first()?->id;

        $this->studyYearId = $this->studyYears->first()?->id;

        if ($student->currency_id) {
            $this->dismissData['currency_id'] = $student->currency_id;
            $this->freezeData['currency_id'] = $student->currency_id;
        }

        $this->loadDegrees();

        $this->activeStudyDate = StudyDate::getActiveStudyDate();

        $this->discountData['type_discount_id'] = $this->typeDiscounts->first()?->id;
    }

    public function render()
    {
        return view('livewire.dashboard.student.student-profile');
    }

    public function setActiveTab($tab)
    {
        $this->activeTab = $tab;
    }

    public function loadDegrees()
    {
        $this->degrees = DB::table('course_students')
            ->select(
                'courses.name_en as course_name',
                'course_student_degrees.degree_code',
                'course_student_degrees.is_pass',
                'student_study_years.cgpa',
            )
            ->join('course_student_degrees', 'course_student_degrees.id', 'course_students.course_student_degree_id')
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->join('student_study_years', function ($q) {
                $q
                    ->on('student_study_years.student_id', 'course_students.student_id')
                    ->on('student_study_years.study_year_id', 'course_students.study_year_id');
            })
            ->where('course_students.student_id', $this->student->id)
            ->where('course_students.study_year_id', (int)$this->studyYearId)
            ->get()
            ->map(fn ($degree) => (array)$degree);
    }

    public function showFreezeModal()
    {
        $hasAnyExams = $this->hasAnyExams();

        if ($hasAnyExams) {
            return $this->alert('error',  __('admin.student_profile.can_not_freeze_profile_after_marks_are_entered'), [
                'position' => 'center',
                'timer' => 3000,

            ]);
        }

        $hasActiveFreezePaymentOrder = $this->student
            ->registration
            ->paymentOrders()
            ->where('status', PaymentOrderStatus::STATUS_FREEZE)
            ->where('archive', 0)
            ->exists();

        if ($hasActiveFreezePaymentOrder) {
            return $this->alert('error', __('site.error'), [
                'text' => __('admin.student_profile.student_has_suspension_payment_order'),
                'position' => 'center',
                'showConfirmButton' => true,
                'confirmButtonText' => __('site.ok'),
                'showDenyButton' => true,
                'denyButtonText' => __('admin.student_profile.cancel_payment_order'),
                'onDenied' => 'freezeCanceled',
            ]);
        }

        $studentIsAlreadyFreezed = $this->student->registration->status = RegistrationStatus::STATUS_FREEZED;

        if ($studentIsAlreadyFreezed) {
            return $this->alert('error', __('site.error'), [
                'text' => __('admin.student_profile.student_is_already_suspended'),
                'position' => 'center',
                'showConfirmButton' => true,
                'confirmButtonText' => __('site.ok'),
                'showDenyButton' => true,
                'denyButtonText' => __('admin.student_profile.unsuspend_student'),
                'onDenied' => 'unsuspendStudent',
            ]);
        }
        $this->dispatch('modalOpened', 'freeze-student-modal');
    }

    public function unsuspendStudent() {

        $this->student->registration->createRegistrationPaymentOrderToReinstateStudent();

        $this->student->refresh('registration');

        $this->alert('success', __('admin.student_profile.student_has_been_unsuspended'), [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
        ]);
    }

    public function freezeStudent()
    {
        $this->validate([
            'freezeData.amount' => 'required|numeric',
            'freezeData.currency_id' => 'required|exists:currencies,id',
            'freezeData.file' => 'nullable|image',
            'freezeData.description' => 'nullable|string|max:255',
        ], [], [
            'freezeData.amount' => __('admin.payments.amount'),
            'freezeData.currency_id' => __('admin.currency.currency'),
        ]);

        $registration = $this->student->registration;

        $paymentOrder = $registration->createSuspensionPaymentOrder(
            $this->freezeData['amount'],
            $this->freezeData['description'] ?? null
        );

        if ($this->freezeData['file'] ?? null) {
            $paymentOrder->addMedia(Image::make($this->freezeData['file'])->basePath())
                ->usingName(Str::uuid())
                ->toMediaCollection('freezes');
        }

        $this->alert('success', __('admin.student_profile.payment_order_issued'), [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
        ]);

        $this->dispatch('modalClosed', 'freeze-student-modal');
    }

    public function freezeCanceled()
    {
        $this->student
            ->registration
            ->cancelSuspensionPaymentOrder();

        return $this->alert('success', __('admin.student_profile.payment_order_canceled'), [
            'position' => 'center',
        ]);
    }

    protected function hasAnyExams()
    {

        $degreesExists = CourseStudentDegree::query()
            ->where('student_id', $this->student->id)
            ->where('study_date_id', $this->activeStudyDate->id)
            ->exists();
        return $degreesExists;
    }

    public function showDismissModal()
    {
        $hasDismissPaymentOrders = $this->student
            ->registration
            ->paymentOrders()
            ->where('status', PaymentOrderStatus::STATUS_DISMISSION)
            ->where('archive', 0)
            ->exists();


        if ($hasDismissPaymentOrders) {
            return $this->alert('error', __('site.error'), [
                'text' => __('admin.student_profile.student_has_dismiss_payment_order'),
                'position' => 'center',
                'timer' => false,
                'showConfirmButton' => true,
                'confirmButtonText' => __('site.ok'),
                'showDenyButton' => true,
                'denyButtonText' => __('admin.student_profile.cancel_payment_order'),
                'onDenied' => 'dismissCanceled',
            ]);
        }

        $studentIsAlreadyDismissed = $this->student->registration->status == RegistrationStatus::STATUS_DISMISSED;

        if ($studentIsAlreadyDismissed) {
            return $this->alert('error', __('admin.student_profile.student_profile_already_dismissed'), [
                'position' => 'center',
                'timer' => 3000,
            ]);
        }

        $this->dispatch('modalOpened', 'dismiss-student-modal');

        $this->dismissModalIsVisible = true;
    }

    public function dismissCanceled()
    {
        $this->student
            ->registration
            ->cancelDismissalPaymentOrders();

        return $this->alert('success', __('admin.student_profile.payment_order_canceled'), [
            'position' => 'center',
        ]);
    }

    public function dismissStudent()
    {
        $this->validate([
            'dismissData.amount' => 'required|numeric',
            'dismissData.currency_id' => 'required|exists:currencies,id',
            'dismissData.file' => 'nullable|image',
            'dismissData.description' => 'nullable|string|max:255',
        ]);

        $registration = $this->student->registration;

        $paymentOrder = $registration->createDismissalPaymentOrder(
            $this->dismissData['amount'],
            $this->dismissData['description'] ?? null,
        );

        if ($this->dismissData['file'] ?? null) {

            $paymentOrder->addMedia(Image::make($this->dismissData['file'])->basePath())
                ->usingName(Str::uuid())
                ->toMediaCollection('freezes');
        }


        $this->alert('success', __('admin.student_profile.payment_order_issued'), [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
        ]);

        $this->dispatch('modalClosed', 'dismiss-student-modal');
    }

    public function showCreateDiscountModal()
    {
        if (!$this->student->registration->canCreateDiscount) {

            return $this->alert('error', __('site.error'), [
                'text' => __('admin.student_profile.disabled_create_discount_button_hint'),
                'position' => 'center',
                'timer' => false,
                'showConfirmButton' => true,
                'confirmButtonText' => __('site.ok'),
            ]);
        }

        $this->dispatch('modalOpened', 'create-discount-modal');
    }

    public function createDiscount()
    {
        $this->validate([
            'discountData.amount' => 'required|numeric|max:' . $this->student->registration->reminder,
            'discountData.type_discount_id' => 'required|exists:type_discounts,id',
            'discountData.file' => 'nullable|image',
            'discountData.description' => 'nullable|string|max:255',
        ]);

        return DB::transaction(function () {


            Discount::create([
                'amount' => $this->discountData['amount'],
                'description' => $this->discountData['description'],
                'type_discount_id' => $this->discountData['type_discount_id'],
                'status' => true,
                'registration_id' => $this->student->registration->id,
                'currency_id' => $this->student->currency_id,
                'department_id' => $this->student->department_id,
            ]);


            if (!is_null($this->discountData['file'] ?? null)) {

                $this->student->registration->addMedia(Image::make($this->discountData['file'])->basePath())
                    ->usingName(Str::uuid())
                    ->toMediaCollection('discounts');
            }

            $this->student->registration->refreshRegistrationPaymentOrderAfterStudentDiscountsIsUpdated();

            $this->student->refresh('discounts');

            $this->alert('success', __('admin.student_profile.discount_created'), [
                'position' => 'center',
                'timer' => 3000,
                'toast' => true,
            ]);

            $this->dispatch('modalClosed', 'create-discount-modal');
        });
    }

    public function confirmDeleteDiscount($id)
    {
        $this->readyToDeleteDiscount = $id;
        return $this->alert('warning', __('site.warning'), [
            'text' => __('admin.student_profile.confirm_delete_discount'),
            'position' => 'center',
            'timer' => false,
            'showConfirmButton' => true,
            'confirmButtonText' => __('site.ok'),
            'showDenyButton' => true,
            'denyButtonText' => __('site.cancel'),
            'onConfirmed' => 'deleteDiscount',
            'inputAttributes' => [
                'value' => $id
            ],
        ]);
    }

    public function deleteDiscount()
    {

        return DB::transaction(function () {

            Discount::where('id', $this->readyToDeleteDiscount)->delete();

            $this->readyToDeleteDiscount = null;

            $this->student->registration->refreshRegistrationPaymentOrderAfterStudentDiscountsIsUpdated();

            $this->student->refresh('discounts');

            $this->alert('success', __('site.deleted_successfully'), [
                'position' => 'center',
                'timer' => 3000,
                'toast' => true,
            ]);
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Student/CreateStudent.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Student;

use App\Enums\RegistrationStatus;
use App\Models\Batch;
use App\Models\Student;
use Livewire\Component;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use Illuminate\Support\Str;
use App\Models\Registration;
use Illuminate\Http\Request;
use App\Models\AdmissionType;
use App\Models\CourseStudent;
use App\Models\Currency;
use Livewire\WithFileUploads;
use App\Models\DepartmentPrice;
use App\Models\Nationality;
use App\Models\Semester;
use App\Services\RegistrationsCoursesService;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\DB;
use Livewire\TemporaryUploadedFile;
use Illuminate\Support\Facades\File;
use Intervention\Image\Facades\Image;
use Livewire\Attributes\Computed;

class CreateStudent extends Component
{
    use WithFileUploads;

    public $departmentsPrices;
    public $religions  = Student::RELIGIONS;
    public $certificate_types = Student::CERTIFICATE_TYPES;

    public $currentStep = 1;
    public $isLoading = false;
    public Student $student;
    public $registration;
    public $photo;
    public $name;
    public $activeStudyDate;
    public $isCreatePage = false;

    #[Computed]
    public function departments()
    {
        return Department::all();
    }

    #[Computed]
    public function studyYears()
    {
        return StudyYear::all();
    }

    #[Computed]
    public function admissionTypes()
    {
        return AdmissionType::all();
    }

    #[Computed]
    public function batches()
    {
        return Batch::all();
    }

    #[Computed]
    public function currencies()
    {
        return Currency::all();
    }

    #[Computed]
    public function nationalities()
    {
        return Nationality::all();
    }

    public function mount(Student $student = null)
    {
        $this->activeStudyDate = StudyDate::getActiveStudyDate();

        $this->departmentsPrices = collect(DepartmentPrice::where('study_date_id', $this->activeStudyDate->id)->get());

        $this->student =  $student ?? new Student();

        if(!$student->exists) {
            $this->student->currency_id = $this->currencies?->first()->id;
            $this->student->department_id = $this->departments?->first()->id;
            $this->student->study_date_id = $this->activeStudyDate->id;

            $this->isCreatePage = true;
        }


        $this->registration = $student->registration ?? new Registration();

    }

    public function render()
    {
        return view('livewire.dashboard.student.create-student');
    }

    protected function  rules()
    {

        return [
            'student.name1'             => ['required', 'min:2', 'max:255'],
            'student.name2'             => ['required', 'min:2', 'max:255'],
            'student.name3'             => ['required', 'min:2', 'max:255'],
            'student.name4'             => ['required', 'min:2', 'max:255'],
            'student.name1_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.name2_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.name3_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.name4_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.religion'          => ['required', Rule::in(array_keys(Student::RELIGIONS))],
            'student.university_id'     => ['required', 'numeric'],
            'student.phone'             => ['required', 'integer', 'digits_between:10,12' , Rule::unique('students', 'phone')->ignore($this->student->id)],
            'student.national_number'   => ['required', 'numeric' ,  Rule::unique('students', 'phone')->ignore($this->student->id)],
            'student.nationality_id'       => ['required', 'exists:nationalities,id'],
            'student.address'           => ['nullable', 'min:2', 'max:255'],
            'student.gender'          => ['required'],
            'photo'          => ['nullable','image'],

            'student.father_name' => ['nullable', 'max:255', 'string'],
            'student.father_phone1' => ['nullable', 'integer', 'digits_between:10,12' ],
            'student.father_phone2' => ['nullable', 'integer', 'digits_between:10,12' ],
            'student.workplace' => ['nullable', 'max:255', 'string'],

            'student.study_date_id' => ['required', 'exists:study_dates,id'],
            'student.department_id' => ['required', 'exists:departments,id'],
            'student.study_year_id' => ['required', 'exists:study_years,id'],
            'student.admission_type_id' => ['required', 'exists:admission_types,id'],
            'student.currency_id' => ['required', 'exists:currencies,id'],
            'student.batch_id' => ['required', 'exists:batches,id'],
            'student.acceptance_year' => ['required', 'integer'],
            'registration.register_fees' => ['required', 'numeric'],
            'registration.tuition_fees' => ['required', 'numeric'],

            'student.university_id' => ['required', Rule::unique('students','university_id')->ignore($this->student->id)],
            'student.certificate_type' => ['required', 'in:' . implode(',', array_keys($this->certificate_types))],
            'student.certificate_date' => ['required', 'integer'],

        ];
    }

    public function submitStudentData()
    {

        $this->validate([
            'student.name1' => ['nullable', 'max:255'],
            'student.name2' => ['nullable', 'max:255'],
            'student.name3' => ['nullable', 'max:255'],
            'student.name4' => ['nullable', 'max:255'],

            'student.name1_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.name2_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.name3_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.name4_en'          => ['required', 'min:2', 'max:255' , 'alpha:ascii'],
            'student.gender' => ['required'],
            'student.phone' => ['required',  'integer', 'digits_between:10,12' ,  Rule::unique('students', 'phone')->ignore($this->student->id)],
            'student.nationality_id'       => ['required', 'exists:nationalities,id'],
            'student.national_number' => ['required', 'unique:students,national_number,' . $this->student->id],
            'student.address' => ['required'],
            'photo' => ['nullable', 'image'],

        ], [], [
            'student.name1'               => __('admin.students.name1'),
            'student.name2'             => __('admin.students.name2'),
            'student.name3'             => __('admin.students.name3'),
            'student.name4'             => __('admin.students.name4'),
            'student.name1_en'          => __('admin.students.name1_en'),
            'student.name2_en'          => __('admin.students.name2_en'),
            'student.name3_en'          => __('admin.students.name3_en'),
            'student.name4_en'          => __('admin.students.name4_en'),
            'student.religion'          => __('admin.students.religion'),
            'student.national_number'   => __('admin.students.national_number'),
            'student.nationality'         => __('admin.students.nationality'),
            'student.address'             => __('admin.students.address'),
            'student.gender'             => __('admin.students.gender'),
            'student.phone'             => __('admin.students.phone'),
            'photo'                     => __('admin.students.photo'),
        ]);

        $this->currentStep = 2;
    }

    public function submitParentData()
    {

        $this->validate([
            'student.father_name' => ['nullable', 'max:255', 'string'],
            'student.father_phone1' => ['nullable',  'integer', 'digits_between:10,12'],
            'student.father_phone2' => ['nullable',  'integer', 'digits_between:10,12'],
            'student.workplace' => ['nullable', 'max:255', 'string'],
        ], [], [
            'student.father_name'         => __('admin.students.father_name'),
            'student.father_phone1'     => __('admin.students.father_phone1'),
            'student.father_phone2'     => __('admin.students.father_phone2'),
            'student.workplace'         => __('admin.students.workplace'),
        ]);

        $this->currentStep = 3;

        $this->setFinancialFields();
    }

    public function submitAcceptanceData()
    {

        $this->validate([
            'student.study_date_id' => ['required', 'exists:study_dates,id'],
            'student.department_id' => ['required', 'exists:departments,id'],
            'student.study_year_id' => ['required', 'exists:study_years,id'],
            'student.admission_type_id' => ['required', 'exists:admission_types,id'],
            'student.currency_id' => ['required', 'exists:currencies,id'],
            'student.batch_id' => ['required', 'exists:batches,id'],
            'student.acceptance_year' => ['required', 'integer'],
            'registration.register_fees' => ['required', 'numeric'],
            'registration.tuition_fees' => ['required', 'numeric'],

            'student.university_id' => ['required', Rule::unique('students', 'university_id')->ignore($this->student->id)],
            'student.certificate_type' => ['required', 'in:' . implode(',', array_keys($this->certificate_types))],
            'student.certificate_date' => ['required', 'integer'],

        ], [], [
            'student.currency_id'          => __('admin.currency.currency'),
            'student.acceptance_year'          => __('admin.students.acceptance_year'),
            'student.study_date_id'     => __('admin.study_dates.study_dates'),
            'student.department_id'     => __('admin.departments.departments'),
            'student.study_year_id'     => __('admin.study_years.study_year'),
            'student.admission_type_id' => __('admin.admission_types.admission_types'),

            'registration.register_fees'     => __('admin.registrations.register_fees'),
            'registration.tuition_fees'      => __('admin.registrations.tuition_fees'),

            'student.certificate_date'      => __('admin.students.certificate_date'),
            'student.certificate_type'      => __('admin.students.certificate_type'),
            'student.university_id'      => __('admin.students.university_id'),

        ]);

        return DB::transaction(function () {

            $this->registration->currency_id = $this->student->currency_id;
            $this->student->save();

            $this->registration->student_id = $this->student->id;
            $this->registration->study_date_id = $this->student->study_date_id;
            $this->registration->study_year_id = $this->student->study_year_id;
            $this->registration->status = RegistrationStatus::STATUS_UNREGISTERED;

            $this->registration->save();

            $this->registration->createRegistrationPaymentOrder();

            $this->student->setRelation('registration', $this->registration);

            $studentHasCourses = CourseStudent::where('student_id' , $this->student->id)
                ->where('study_year_id', $this->student->study_year_id)
                ->exists();

            if(!$studentHasCourses) {
                RegistrationsCoursesService::syncStudentCourses($this->student);
            }

            $this->currentStep = 4;


            if ($this->photo) {

                $this->student->clearMediaCollection(Student::STUDENT_PHOTO_MEDIA_COLLECTION);

                $this->student->addMedia(Image::make($this->photo)->basePath())
                    ->usingName(Str::uuid())
                    ->toMediaCollection(Student::STUDENT_PHOTO_MEDIA_COLLECTION);
            }
        });
    }


    public function back()
    {
        if ($this->currentStep > 1) {
            $this->currentStep = $this->currentStep - 1;
        }
    }

    public function directToCorrectStep()
    {
        switch ($this->currentStep) {
            case 1:
                $this->submitStudentData();
                break;

            case 2:
                $this->submitParentData();
                break;

            case 3:
                $this->submitAcceptanceData();
                break;

            default:
        }
    }

    public function setFinancialFields()
    {
        // Register fees
        $this->registration->register_fees = $this->activeStudyDate->register_fees[$this->student->currency_id];

        // Tuition fees
        $departmentPrices = $this->departmentsPrices->firstWhere('department_id', $this->student->department_id);
         $this->registration->tuition_fees = $departmentPrices->tuition_fees[$this->student->currency_id];

    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Elearning/TeacherLectureController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Elearning;

use App\Models\Course;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\CourseStudent;
use App\Models\StudyDate;
use App\Models\StudyPlanDate;
use App\Models\StudyPlanDateTeacher;
use Illuminate\Support\Facades\DB;
use SebastianBergmann\CodeUnit\FunctionUnit;

class TeacherLectureController extends Controller
{

    public function index()
    {
        $teacher = auth('admin')->user()->teacher;
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $coursesCount = DB::table('study_plan_date_teachers')
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->count();

        $studentsCount = DB::table('study_plan_date_teachers')
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('course_students', 'course_students.course_id', 'study_plan_dates.course_id')
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->groupBy('course_students.student_id')
            ->count();

        $departmentsCount = DB::table('study_plan_date_teachers')
            ->select('study_plan_dates.department_id')
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->groupBy('study_plan_dates.department_id')
            ->get()
            ->count();

        $coursesStatistics = DB::table('study_plan_date_teachers')
            ->select('courses.name_en','courses.id')
            // ->selectRaw('COUNT(students.id) as students')
            ->selectRaw('COUNT(attachments.id) as attachments')
            ->selectRaw('COUNT(assignments.id) as assignments')
            ->selectRaw('COUNT(lectures.id) as lectures')
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->leftJoin('lectures', 'lectures.course_id', 'courses.id')
            ->leftJoin('attachments', 'attachments.lecture_id', 'lectures.id')
            ->leftJoin('assignments', 'assignments.lecture_id', 'lectures.id')
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->groupBy('study_plan_dates.course_id')
            ->get();



        $studentsStatistics = DB::table('study_plan_date_teachers')
        ->select('courses.name_en','courses.id',DB::raw('COUNT(students.id) as students'))
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('courses','courses.id','study_plan_dates.course_id')
            ->join('semesters','semesters.id','study_plan_dates.semester_id')
            ->join('students',function($q) {
                $q
                ->on('students.department_id','study_plan_dates.department_id')
                ->on('students.study_year_id','semesters.study_year_id');
            })
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->groupBy('study_plan_dates.course_id')
            ->get()
            ->groupBy('id')
            ;
            // dd($studentsStatistics);

        // dd($coursesStatistics);

        // dd($coursesCompletionPercentage->pluck('name_en',));
        return view('elearning.teacher.dashboard', compact('coursesCount', 'studentsCount', 'departmentsCount', 'coursesStatistics','studentsStatistics'));
    }

    public function charts()
    {
        $teacher = auth('admin')->user()->teacher;
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $coursesCompletionPercentage = DB::table('study_plan_date_teachers')
            ->select('courses.name_en', DB::raw('COUNT(lectures.id) / 12 * 100 as lectures_count'))
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->leftJoin('lectures', 'lectures.course_id', 'courses.id')
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->groupBy('study_plan_dates.id')
            ->get();

        return response(['coursesCompletionPercentage' => $coursesCompletionPercentage]);
    }

    public function coursesDashboard() {
        return view('elearning.teacher.courses-dashboard');
    }

    public function reports()
    {
        return view('elearning.teacher.reports-dashboard');
    }

    public function courses()
    {
        $teacher = auth('admin')->user()->teacher;
        $teacher->load('studyPlanDateTeacher.studyPlanDate.course');
        return view('elearning.teacher.index', compact('teacher'));
    }

    public function course(Course $course)
    {
        $course->load('lectures.attachments', 'lectures.assignment.studentAssignments.student:id,name1_en');
        $studyPlanDate = request()->studyPlanDate;
        return view('elearning.teacher.courses.index', compact('course', 'studyPlanDate'));
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Elearning/StudentController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Elearning;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class StudentController extends Controller
{
    public function index() {
            return view('elearning.student.courses.index');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Elearning/StudentAuthController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Elearning;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class StudentAuthController extends Controller
{
    public function index()
    {
        return view('elearning.student.auth.login');
    }

    public function login(Request $request)
    {
        $credentials = $this->validate($request, [
            'name' => ['required', 'exists:users,name'],
            'password' => ['required'],
        ],[],[
            'name' => ' الرقم الجامعي',
        ]);

        if (auth('student')->attempt($credentials)) {
            request()->session()->regenerate();
            return redirect(route('elearning.student.courses.index'));
        }

        return back()->withErrors([
            'email' => 'The provided credentials do not match our records.',
        ]);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/VueElearning/ElearningHomeController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\VueElearning;

use App\Http\Controllers\Controller;
use App\Models\Student;
use App\Models\Course;
use Illuminate\Http\Request;
use Inertia\Inertia;

class ElearningHomeController extends Controller
{
    //
    public function index()  {

        $student = Student::with('registration:id,student_id,last_status')->find(auth('student')->user()->student_id);
        $courses = Course::query()
            ->whereHas('courseStudents', function ($q) use ($student) {
                $q
                    ->where('student_id', $student->id)
                    // ->where('study_year_id', $student->student->study_year_id ?? 1)
                    ->when($student->registration->last_status != null, function ($q) use($student) {
                        $q
                            ->whereHas('carryOutCourse', fn ($q) => $q->where('student_id', $student->student_id));
                    });
            })
            ->with('lectures.attachments', 'lectures.assignment')
            ->get();
        // dd($courses , $student);
        return Inertia::render('Student/Home/Home' , [
            'student' => $student,
            'courses' => $courses,
        ]);
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/VueElearning/AuthController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\VueElearning;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class AuthController extends Controller
{
    //
    public function login(Request $request) {
        // dd($request->all());
                $credentials = $this->validate($request, [
            'name' => ['required'],
            'password' => ['required'],
        ],[],[
            'name' => ' الرقم الجامعي',
        ]);
        if (auth('student')->attempt($credentials)) {
            request()->session()->regenerate();
            // return redirect(route('elearning.student.courses.index'));
            // dd('passed');
            return to_route('vue-elearning.student.home');
        }

        return back()->withErrors([
            'name' => 'The provided credentials do not match our records.',
        ]);

    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Api/StudentController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Api;

use App\Models\Student;
use App\Models\StudyDate;
// use App\Http\Resources\PaymentCollection;
use Illuminate\Http\Request;
use App\Models\CourseStudent;
use App\Models\StudentResult;
use App\Models\StudentStudyYear;
// use App\Models\Student;
use Illuminate\Support\Facades\DB;
// use App\Models\User;
use App\Models\CourseStudentDegree;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use App\Http\Resources\ResultResource;
use App\Http\Resources\StudentCourses;
use App\Http\Resources\StudentPaymentResource;

class StudentController extends Controller
{
    public $successStatus = 200;
    /**
     * profile api
     *
     * @return \Illuminate\Http\Response
     */
    public function profile(Request $r)
    {
        if ($r->get('id', null)) {
            $user = Student::find($r->get('id'));
        } else {
            $user = Auth::user()->student;
        }

        $data = [
            'university_id' =>  $user->university_id,
            'name' =>  $user->name1 . ' ' .  $user->name2 . ' ' . $user->name3,
            'image' => $user->getFirstMediaUrl('student_photo'),
            'batch' =>  $user->batch,
            'phone' =>  $user->phone,
            'address' =>  $user->address,
            'father_name' =>  $user->father_name,
            'father_phone1' =>  $user->father_phone1,
            'father_phone2' =>  $user->father_phone2,
            'workplace' =>  $user->workplace,
            'department' =>  $user->department->name,
            'national_number' =>  $user->national_number,
            'acceptance_year' => $user->acceptance_year,
            'study_year' => $user->registration->studyYear->name,
        ];
        return response()->json(['status' => true, 'data' => $data], $this->successStatus);
    }

    public function setProfile(Request $r)
    {
        $r->validate([
            'phone' => 'required',
            'address' => 'string',
            'image' => 'file|image: png'
        ]);

        $student = Auth::user()->student;

        $student->phone = $r->phone;
        $student->address = $r->address;
        $student->save();
        if ($r->hasFile('image') && $r->file('image')->isValid()) {
            $student->addMediaFromRequest('image')
                ->toMediaCollection('student_photo');
        }

        return response()->json(['status' => true]);
    }

    public function payment(Request $r)
    {
        if ($r->get('id', null)) {
            $user = Student::find($r->get('id'));
        } else {
            $user = Auth::user()->student;
        }
        return new StudentPaymentResource($user);
    }

    public function courses(Request $r)
    {
        if ($r->get('id', null)) {
            $courses = CourseStudent::query()
                ->where('student_id', $r->get('id'))
                ->where('study_year_id', Auth::user()->student->study_year_id)
                ->get();
        } else {
            $courses = CourseStudent::query()
                ->where('student_id', Auth::user()->student->id)
                ->where('study_year_id', Auth::user()->student->study_year_id)
                ->get();
        }

        $re = StudentCourses::collection($courses);
        return $re;
    }

    public function result(Request $request)
    {
        $student_id = $request->student_id ?? Auth::user()->student_id;
        // dd($request->student_id);
        $activeStudyDate = StudyDate::getActiveStudyDate();
        $result = DB::table('student_study_years')
            ->select(
                'student_study_years.cgpa',
                'courses.name_en',
                'student_study_years.degree_code',
                'semesters.name as semester_name',
                'course_student_degrees.attendance_status',
                'course_student_degrees.is_pass',
            )
            ->join('students', function ($q) {
                $q
                    ->on('students.id', 'student_study_years.student_id')
                    ->on('students.study_year_id', 'student_study_years.study_year_id');
            })
            ->join('course_students', function ($q) use ($activeStudyDate) {
                $q
                    ->on('course_students.student_id', 'student_study_years.student_id')
                    ->on('course_students.study_year_id', 'students.study_year_id');
            })
            ->join('course_student_degrees', function ($q) use ($activeStudyDate) {
                $q
                    ->on('course_student_degrees.id', 'course_students.course_student_degree_id')
                    ->where('course_student_degrees.study_date_id', $activeStudyDate->id);
            })
            ->join('semesters', 'semesters.id', 'course_students.semester_id')
            ->join('courses', 'courses.id', 'course_student_degrees.course_id')
            ->where('student_study_years.student_id', $student_id)
            ->get()
            ->groupBy('semester_name')
            ;
        return ResultResource::make($result);

    }

    public function img(Request $r){
        $destinationPath = '';
        $h = '';
        $data = json_encode($r->all());
        try {
            //code...
            if($r->file('file') != null){
                $myimage = $r->file('file')->getClientOriginalName();
                $r->file('file')->move(public_path($destinationPath), $myimage);
                $h = 'uploaded';
            }
        } catch (\Throwable $th) {
            //throw $th;
            $h = 'error';
        }

        //DB::insert('insert into title_ignored (title, lang_id,data) values (?, ?,?)', [$h, 1,$data]);

        return ['status' => 200,'content' => $h];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Api/StudentAuthController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Api;

use App\Models\User;
use App\Models\Student;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Validator;

class StudentAuthController extends Controller
{

    public $successStatus = 200;

    /**
     * login api
     *
     * @return \Illuminate\Http\Response
     */
    public function login(){
        if(Auth::attempt(['name' => request('name'), 'password' => request('password')])){

            $user = Auth::user();
            $user->tokens()->delete();
            $success['token'] =  $user->createToken('api')->accessToken;

            return response()->json(['success' => $success, 'action' => 'home'], $this-> successStatus);
        }
        else{
            return response()->json(['error'=>'Unauthorized'], 401);
        }
    }

    /**
     * Register api
     *
     * @return \Illuminate\Http\Response
     */
    public function register(Request $request)
    {

        $validator = Validator::make($request->all(), [
            'name' => 'required|exists:students,university_id',
            //'name' => 'required|unique:users,name|exists:students,university_id',
        ], [
            'name.required' => 'أدخل الرقم الجامعي',
            // 'name.unique' => 'الحساب موجود',
            'name.exists' => 'الرقم الجامعي غير صحيح'
        ]);

        if ($validator->fails()) {
             return response()->json(['error'=>$validator->errors()], 401);
        }

        $student = Student::where(['university_id' =>  $request->name])
        //->where('is_verification', '<', 3)
        //->where('ver_date', '=', null)
        ->limit(1)->first();



        //if(isset($student->registration->status_id) && in_array($student->registration->status_id,[1,2])){

            //$student->ver_date = date('Y-m-d');

            $ver_code = rand(1000,9999);

            if(!isset($student->user->id) && $student->is_verification <= 3){
                $student->is_verification += 1;

                $student->save();

                $user = User::create([
                    'name' => $request->name,
                    'password' => bcrypt($ver_code),
                    'student_id' => $student->id,
                    'email' => 'default@default.com',
                ]);

                $response = Http::get('http://sms.nilogy.com/app/gateway/gateway.php',[
                    'sendmessage' => 1,
                    'username' => 'عاصم الطيب',
                    'password' => 'E-learning123',
                    'sender' => 'UNISOFT',
                    'numbers' => "$student->phone",
                    'text' => "Your code is ".$ver_code
                ]);

                return response()->json(['success'=>true, 'action' => 'verification'], $this->successStatus);

            }else{

                //$student->user->password = bcrypt($ver_code);
                //$student->user->save();
                return response()->json(['success'=>true, 'action' => 'login'], $this->successStatus);
            }



            //return response()->json(['success'=>true], $this->successStatus);
        //}

        //return response()->json(['error'=>false], $this->successStatus);

    }

    /**
     * Register api
     *
     * @return \Illuminate\Http\Response
     */
    // public function verification(Request $r){

    //     $v = validator($r->all(),['code' => 'required','name' => 'required|exists:students,university_id']);
    //     if($v->fails()){
    //         return response()->json(['error'=>$v->errors()], 401);
    //     }

    //     $student = Student::where(['university_id' =>  $r->name, 'ver_code' => $r->code])
    //     //->where('is_verification', '<=', 3)
    //     ->where('ver_date', date('Y-m-d'))
    //     ->limit(1)->first();

    //     //if(isset($student->registration->status_id) && in_array($student->registration->status_id,[1,2])){

    //         $student->save();


    //         $user = User::create([
    //             'name' => $r->name,
    //             'password' => bcrypt('123456'),
    //             'student_id' => $student->id,
    //             'email' => 'default@default.com',
    //         ]);
    //         // git branch --set-upstream-to=https://github.com/mohammedMubark/UniSoftLaravel.git/main master
    //         $success['token'] =  $user->createToken('api')->accessToken;
    //         $success['university_id'] =  $user->name;
    //         return response()->json(['success'=>$success], $this->successStatus);
    //     //}

    //     //return response()->json(['error'=>false], $this->successStatus);

    // }

    public function reSendVer(Request $r){

        $v = validator($r->all(),[
            'name' => 'required|exists:students,university_id'
        ]);
        if($v->fails()){
            return response()->json(['error'=>$v->errors()], 401);
        }

        $student = Student::where(['university_id' =>  $r->name])
        ->where('is_verification', '<=', 3)
        ->where('ver_date','=', null)
        ->limit(1)->first();

        if(isset($student->registration->status_id) && in_array($student->registration->status_id,[1,2])){

            $student->ver_code = rand(1000,9999);
            $student->is_verification += 1;
            $student->save();

            User::where('name',$r->name)->update(['password'=>bcrypt($student->ver_code)]);

            $response = Http::get('http://sms.nilogy.com/app/gateway/gateway.php',[
                'sendmessage' => 1,
                'username' => 'عاصم الطيب',
                'password' => 'E-learning123',
                'sender' => 'UNISOFT',
                'numbers' => "$student->phone",
                'text' => "Your code is ".$student->ver_code
            ]);

            return response()->json(['success'=>true, 'code' => $student->ver_code], $this->successStatus);
        }

        return response()->json(['error'=>false], $this->successStatus);

    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Api/ParentAuthController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Api;

use App\Models\User;
use App\Models\Student;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Validator;

class ParentAuthController extends Controller
{

    public $successStatus = 200;

    /**
     * login api
     *
     * @return \Illuminate\Http\Response
     */
    public function login(){
        if(Auth::attempt(['name' => request('name'), 'password' => request('password')])){
            $user = Auth::user();
            $user->tokens()->delete();
            $success['token'] =  $user->createToken('api')->accessToken;

            return response()->json(['success' => $success, 'action' => 'home'], $this-> successStatus);
        }
        else{
            return response()->json(['error'=>'Unauthorized'], 401);
        }
    }

    /**
     * Register api
     *
     * @return \Illuminate\Http\Response
     */
    public function register(Request $request)
    {

        $validator = Validator::make($request->all(), [
            'name' => 'required|exists:students,father_phone1',
        ], [
            'name.required' => 'أدخل  رقم الجوال',
            'name.exists' => 'رقم الجوال غير صحيح'
        ]);

        if ($validator->fails()) {
             return response()->json(['error'=>$validator->errors()], 401);
        }

        $student = Student::where(['father_phone1' =>  $request->name])
        ->limit(1)->first();

        $user = User::where('name', $request->name)->limit(1)->first();

        $ver_code = rand(1000,9999);
        if(!isset($user->id)){
            $user = User::create([
                'name' => $request->name,
                'password' => bcrypt($ver_code),
                'email' => "$ver_code@default.com",
            ]);

            $response = Http::get('http://sms.nilogy.com/app/gateway/gateway.php',[
                'sendmessage' => 1,
                'username' => 'عاصم الطيب',
                'password' => 'E-learning123',
                'sender' => 'UNISOFT',
                'numbers' => "$user->name",
                'text' => "Your code is ".$ver_code
            ]);

            return response()->json(['success'=>true, 'action' => 'verification'], $this->successStatus);
        }
        // else{
        //     $user->password = bcrypt($ver_code);
        //     $user->save();
        // }

        return response()->json(['success'=>true, 'action' => 'login'], $this->successStatus);

    }

    public function reSendVer(Request $r){

        $v = validator($r->all(),[
            'name' => 'required|exists:users,name'
        ]);
        if($v->fails()){
            return response()->json(['error'=>$v->errors()], 401);
        }

        $p = User::firstWhere(['name' =>  $r->name]);

        if(isset($p->id)){

            $ver_code = rand(1000,9999);
            $response = Http::get('http://sms.nilogy.com/app/gateway/gateway.php',[
                'sendmessage' => 1,
                'username' => 'عاصم الطيب',
                'password' => 'E-learning123',
                'sender' => 'UNISOFT',
                'numbers' => "$p->name",
                'text' => "Your code is ".$ver_code
            ]);
            $p->password = bcrypt($ver_code);
            $p->save();
            return response()->json(['success'=>true], 200);
        }

        return response()->json(['error'=>false], 401);

    }

    public function students(){

        $phone = Auth::user()->name;

        $students = Student::where('father_phone1', $phone)->get();
        $data = [];

        foreach($students as $s){
            $data[] = [
                'id' => $s->id,
                'name' => $s->FullName,
                'image' => $s->getFirstMediaUrl('student_photo'),
            ];
        }

        return response()->json($data);
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Student/StudentsArchiveIndex.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Student;

use Livewire\Component;
use App\Models\Student;
use App\Models\StudyYear;
use App\Models\Department;
use App\Models\StudyDate;
use Livewire\Attributes\Computed;
use Livewire\WithPagination;

class StudentsArchiveIndex extends Component
{
    use WithPagination;

    public $search;

    protected $paginationTheme = 'bootstrap';

    public $filterIsOpen = false;

    public $departmentId;
    public $studyYearId;
    public $studyDateId;

    public $registrationFilter = 'all';

    #[Computed]
    public function departments()
    {
        return Department::all();
    }

    #[Computed]
    public function studyYears()
    {
        return StudyYear::all();
    }

    #[Computed]
    public function studyDates()
    {
        return StudyDate::all();
    }

    public function render()
    {
        $search = $this->search;

        $students = Student::with('batch', 'department')
            ->whenSearch($search)
            ->whenDepartmentId($this->departmentId)
            ->whenStudyYearId($this->studyYearId)
            ->withWhereHas('filteredRegistration', function ($q) {
                return $q
                    ->with('studyYear')
                    ->where('study_date_id', $this->studyDateId);
            })
            ->when(in_array($this->registrationFilter, [1, 2, 4]),  function ($query) {
                return $query->whereHas('registration', function ($query) {
                    return $query->where('status', $this->registrationFilter);
                });
            })
            ->latest()
            ->paginate(10);
        return view('livewire.dashboard.admin.student.students-archive-index', compact('students'));
    }

    public function mount()
    {
        $this->studyDateId = $this->studyDates->firstWhere('archived')?->id;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Student/ShowStudentTable.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Student;

use App\Models\Student;
use Livewire\Component;
use Livewire\WithPagination;

class ShowStudentTable extends Component
{
    use WithPagination;

    public $search;

    protected $paginationTheme = 'bootstrap';

    public function render()
    {

        $students = Student::whenSearch($this->search)->latest()->paginate(2);

        return view('livewire.dashboard.admin.student.show-student-table', compact('students'));

    }//end of render

}//end of component

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Student/ShowStudentPayment.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Student;

use Livewire\Component;

class ShowStudentPayment extends Component
{
    public $paymentOrder;

    public function render()
    {
        $paymentOrder = $this->paymentOrder;

        return view('livewire.dashboard.admin.student.show-student-payment', compact('paymentOrder'));

    }//end of fun

}//end of Component
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Student/ShowStudent.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Student;

use App\Models\Student;
use Livewire\Component;
use App\Models\StudyYear;
use App\Models\Department;
use App\Models\StudyDate;
use Livewire\Attributes\Computed;
use Livewire\WithPagination;

class ShowStudent extends Component
{
    use WithPagination;

    public $search;

    protected $paginationTheme = 'bootstrap';

    public $filterIsOpen = false;

    public $departmentId;
    public $studyYearId;

    public $registrationFilter = 'all';

    #[Computed]
    public function departments() {
        return Department::all();
    }

    #[Computed]
    public function studyYears() {
        return StudyYear::all();
    }

    #[Computed]
    public function studyDates() {
        return StudyDate::all();
    }

    public function render()
    {
        $search = $this->search;

        $students = Student::whenSearch($search)
        ->whenDepartmentId($this->departmentId)
        ->whenStudyYearId($this->studyYearId)
            ->withCount('registration')
            ->having('registration_count', '>', 0)
            ->with('batch', 'department', 'studyYear')
            ->when(in_array($this->registrationFilter,[1,2,4]),  function ($query) {
                return $query->whereHas('registration', function ($query) {
                    return $query->where('status', $this->registrationFilter );
                });
            })
            ->latest()
            ->paginate(10);

        return view('livewire.dashboard.admin.student.show-student', compact('students'));

    } //end of render

    public function toggleFilter()
    {
        $this->filterIsOpen = (boolean) !$this->filterIsOpen;
    }

} //end of component

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Student/ImportStudentsViaExcel.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Student;

use App\Imports\StudentImport;
use App\Models\Department;
use App\Models\StudyDate;
use App\Models\StudyYear;
use Illuminate\Support\Facades\Storage;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;
use Livewire\Component;
use Livewire\WithFileUploads;
use Maatwebsite\Excel\Facades\Excel;

class ImportStudentsViaExcel extends Component
{
    use WithFileUploads;
    use LivewireAlert;
    public $selectedDepartmentId;
    public $selectedStudyDateId;
    public $excelFile;
    public $filePath;
    public $pathToDelete;

    public $columns = [
        'name1_ar', 'name2_ar', 'name3_ar', 'name4_ar',
        'name1_en', 'name2_en', 'name3_en', 'name4_en',
        'university_id', 'study_year_id', 'register_fees',
        'tuition_fees', 'currency_id', 'phone_number',
        'acceptance_year', 'admission_type_id',
    ];

    public $sheetColumns = [];

    public $importInputs = [] ;

    public  $excelError = [];

    #[Computed()]
    public function departments()
    {
        return Department::all();
    }

    #[Computed()]
    public function studyDates()
    {
        return StudyDate::all();
    }

    public function render()
    {
        return view('livewire.dashboard.admin.student.import-students-via-excel');
    }

    public function submit()
    {
        $this->validate([
            'excelFile' => 'required|file|mimes:xlsx',
            'selectedDepartmentId' => 'required',
            'selectedStudyDateId' => 'required',
        ] , [] , [
            'excelFile' => __('site.file'),
            'selectedDepartmentId' => __('admin.departments.department'),
            'selectedStudyDateId' => __('admin.study_dates.study_date'),
        ]);

        $path = $this->excelFile->storePublicly('temp_excel');
        $this->pathToDelete = $path;
        $this->filePath = public_path('storage/' . $path);

        $this->sheetColumns = collect(Excel::toCollection(collect() , $this->filePath)->first()->first());




        foreach($this->columns as $column) {
            $this->importInputs[$column] = $this->sheetColumns->contains(fn($value) => $value == $column) ? $column : null ;
        }

        $this->dispatch('modalOpened', 'verify-headings');
    }

    public function import() {
        $this->validate([
            'importInputs' => 'required|array',
            'importInputs.*' => 'required',
        ] , [] , [
            'importInputs.name1_ar' => __('admin.students.name1_ar'),
            'importInputs.name2_ar' => __('admin.students.name1_ar'),
            'importInputs.name3_ar' => __('admin.students.name1_ar'),
            'importInputs.name4_ar' => __('admin.students.name1_ar'),
            'importInputs.name1_en' => __('admin.students.name1_ar'),
            'importInputs.name2_en' => __('admin.students.name2_en'),
            'importInputs.name3_en' => __('admin.students.name3_en'),
            'importInputs.name4_en' => __('admin.students.name4_en'),
            'importInputs.university_id' => __('admin.students.university_id'),
            'importInputs.phone_number' => __('admin.students.phone_number'),
            'importInputs.currency_id' => __('admin.students.currency_id'),
            'importInputs.acceptance_year' => __('admin.students.acceptance_year'),
            'importInputs.admission_type_id' => __('admin.students.admission_type_id'),
            'importInputs.register_fees' => __('admin.students.register_fees'),
            'importInputs.tuition_fees' => __('admin.students.tuition_fees'),
            'importInputs.study_year_id' => __('admin.students.study_year_id'),
        ]);


        try {
        Excel::import(new StudentImport($this->selectedStudyDateId , $this->selectedDepartmentId , $this->importInputs),$this->filePath);
        } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            $this->excelError = collect([
                'row' => $e->failures()[0]->row(),
                'attribute' => $e->failures()[0]->attribute(),
                'messages' => $e->failures()[0]->errors(),
            ]);

            return;
        }

        $this->excelError = [];

        Storage::delete($this->pathToDelete);

        $this->alert('success', __('site.imported_successfully'));
        $this->dispatch('modalClosed', 'verify-headings');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Student/ArchivedStudentProfile.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Student;

use App\Models\PaymentOrder;
use App\Models\CourseStudent;
use Livewire\Attributes\Computed;
use App\Models\Currency;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Student;
use Illuminate\Support\Facades\DB;
use Livewire\Component;

class ArchivedStudentProfile extends Component
{

    public $student;
    public $activeTab = 'courses';

    public $semesterId;

    public $studyYearId;
    public $degrees;

    public $studyDateId;

    #[Computed]
    public function semesters()
    {
        return Semester::where('study_year_id', $this->filteredRegistration->study_year_id)->get();
    }

    #[Computed(true)]
    public function studyYears()
    {
        return StudyYear::where('number', '<=', $this->student->study_year_id)->get();
    }

    #[Computed(true)]
    public function currencies()
    {
        return Currency::all();
    }

    #[Computed]
    public function courses()
    {

        return CourseStudent::with('course')
            ->where('student_id', $this->student->id)
            ->where('semester_id', $this->semesterId)
            ->get();
    }

    #[Computed]
    public function paymentOrders()
    {
        return PaymentOrder::with('currency')
            ->whereHas('registration', function ($q) {
                $q->where('study_date_id', $this->studyDateId);
            })
            ->get();
    }

    #[Computed(true)]
    public function studyDates()
    {
        return StudyDate::query()
            ->whereHas('registrations', function ($q) {
                $q->where('student_id', $this->student->id);
            })->get();
    }

    #[Computed]
    public function filteredRegistration() {
        return $this->student->filteredRegistration()->with('studyYear')->firstWhere('study_date_id' , $this->studyDateId);
    }

    public function render()
    {
        return view('livewire.dashboard.admin.student.archived-student-profile');
    }

    public function mount(Student $student)
    {

        $this->studyDateId = $this->studyDates->first()?->id;

        $this->student = $student->load([ 'department', 'currency', 'discounts.typeDiscount',  'discounts.currency']);

        $this->semesterId = $this->semesters->first()?->id;

        $this->studyYearId = $this->studyYears->first()?->id;

        $this->loadDegrees();
    }

    public function loadDegrees()
    {
        $this->degrees = DB::table('course_students')
            ->select(
                'courses.name_en as course_name',
                'course_student_degrees.degree_code',
                'course_student_degrees.is_pass',
                'student_study_years.cgpa',
            )
            ->join('course_student_degrees', 'course_student_degrees.id', 'course_students.course_student_degree_id')
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->join('student_study_years', function ($q) {
                $q
                    ->on('student_study_years.student_id', 'course_students.student_id')
                    ->on('student_study_years.study_year_id', 'course_students.study_year_id');
            })
            ->where('course_students.student_id', $this->student->id)
            ->where('course_students.study_year_id', (int)$this->studyYearId)
            ->get()
            ->map(fn ($degree) => (array)$degree);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Result/ShowStudentsResult.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Result;

use App\Models\Course;
use App\Models\Department;
use App\Models\Semester;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Services\FirstRoundResultService;
use App\Services\SecondRoundResultService;
use Illuminate\Support\Facades\DB;
use Livewire\Attributes\Computed;
use Livewire\Component;
use Spatie\Browsershot\Browsershot;

class ShowStudentsResult extends Component
{
    public $rounds = [
        true => 'first_phase',
        false => 'final_phase',

    ];
    public $selectedStudyDateId;
    public $selectedDepartmentId, $selectedStudyYearId, $isFirstRound;

    #[Computed]
    public function studyDates()
    {
        return StudyDate::all('id', 'name');
    }
    #[Computed]
    public function departments()
    {
        return Department::all('id', 'name');
    }

    #[Computed]
    public function studyYears()
    {
        return StudyYear::all('id', 'name');
    }

    #[Computed]
    public function students()
    {
        return Student::withResults(
            study_date_id: $this->selectedStudyDateId,
            study_year_id: $this->selectedStudyYearId,
            is_first_exam: $this->isFirstRound,
        )
            ->where('course_students.study_year_id', $this->selectedStudyYearId)
            ->where('students.department_id', $this->selectedDepartmentId)
            ->get()

            ->groupBy('university_id');
    }

    #[Computed]
    public function courses()
    {
        return Course::whereHas('studyPlanDate', function ($q) {
            $q
                ->where('department_id', $this->selectedDepartmentId)
                ->whereIn('semester_id', Semester::where('study_year_id', $this->selectedStudyYearId)->pluck('id')->toArray())
                ->where('study_date_id', $this->selectedStudyDateId);
        })
            ->get();
    }

    public function mount()
    {
        $this->selectedStudyDateId = $this->studyDates->first()?->id;

        $this->selectedDepartmentId = $this->departments->first()?->id;
        $this->selectedStudyYearId = $this->studyYears->first()?->id;
        $this->isFirstRound = true;
    }

    public function render()
    {
        return view('livewire.dashboard.admin.result.show-students-result');
    }

    public function print()
    {
    }

    public function calculate()
    {
        return DB::transaction(function () {
            if ($this->isFirstRound) {
                (new FirstRoundResultService($this->selectedStudyDateId, $this->selectedStudyYearId, $this->selectedDepartmentId))->calculateResult();
            } else {

                (new SecondRoundResultService($this->selectedStudyDateId, $this->selectedStudyYearId, $this->selectedDepartmentId))->calculateSecondRoundResult();
            }
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Result/EnterSecondRoundResult.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Result;

use Livewire\Component;
use App\Helpers\FirstRoundResultCalculationHelper;
use App\Models\Course;
use App\Models\CourseStudent;
use App\Models\CourseStudentDegree;
use App\Models\LevelDegree;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyPlanDate;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;
use Livewire\Attributes\Validate;
class EnterSecondRoundResult extends Component

{
use LivewireAlert;

    public  $studyPlanDate ;
    public $selectedCourse ;
    public $activeStudyDate;
    public $STATUS_ATTENDED = LevelDegree::STATUS_ATTENDED;
    public $marks = [] ;
    public $allowEnterGrades = true ;

    #[Validate]
    public $temporaryMarks = [] ;


    #[Computed]
    public function courses() {
        return Course::whereHas('studyPlanDate', function ($q)  {
                $q
                    ->where('department_id', $this->studyPlanDate->department_id)
                    ->where('semester_id', $this->studyPlanDate->semester_id)
                    ->where('study_date_id', $this->studyPlanDate->study_date_id);
            })->get();
    }


    #[Computed]
    public function students() {
        return $this->getStudents();
    }

    #[Computed]
    public function levelDegrees() {
        return LevelDegree::all('min_degree', 'max_degree', 'level_code');
    }

    #[Computed]
    public function attendanceStatuses() {
        return LevelDegree::STATUSES;
    }


    public function mount($studyPlanDateId) {

        $this->studyPlanDate = StudyPlanDate::find($studyPlanDateId);

        $this->activeStudyDate = StudyDate::getActiveStudyDate();

        $this->selectedCourse = $this->courses->first()?->id;

        $this->fillStudentMarks();

        if(auth()->user()->teacher()->exists()) {
            $this->allowEnterGrades = Cache::get('settings')['allow_enter_grades'] ?? false;
        }
    }

    public function render()
    {
        return view('livewire.dashboard.admin.result.enter-second-round-result');
    }

    public function rules()
    {
        return [
            'temporaryMarks' => ['required' , 'array' ],
            'temporaryMarks.*' => ['required'  , 'array'],
            'temporaryMarks.*.*' => ['required'  , 'array'],
            'temporaryMarks.*.*.practical' => ['required' , 'integer' , 'between:0,100'],
            'temporaryMarks.*.*.theory' => ['required' , 'integer' , 'between:0,100'],
        ];
    }

    public function validationAttributes()
    {
        return [
            'temporaryMarks.*.*.practical' => __('admin.results.practical'),
            'temporaryMarks.*.*.theory' =>__('admin.results.theory'),
        ];
    }

    public function getFullDegree($student_id) {
        return (int)$this->marks[$this->selectedCourse][$student_id]['practical'] + (int)$this->marks[$this->selectedCourse][$student_id]['theory'];
    }

    public function getDegreeCode($practical , $theory) {
        return FirstRoundResultCalculationHelper::getCourseDegreeCode($this->levelDegrees ,$practical + $theory );
    }

    public function updatedTemporaryMarks($value , $property) {
        if(!$this->allowEnterGrades) {
            $this->alert('error', __('admin.results.not_allowed_to_enter_grades'));
        }

        $this->validate();

         [$course_id , $student_id , $type ] = explode('.' , $property);

         $this->marks[$course_id][$student_id][$type] = $value;

         $fullDegree = $this->marks[$course_id][$student_id]['practical'] + $this->marks[$course_id][$student_id]['theory']   ;

         if($fullDegree < 0 || $fullDegree > 100) {
            $this->addError("temporaryMarks.$course_id.$student_id.$type", __('admin.results.grades_total_should_be_less_than_hundred'));
         }
    }

    public function updatedSelectedCourse() {
        $this->fillStudentMarks();
    }

    public function fillStudentMarks() {
        foreach($this->students as $student) {
            $this->temporaryMarks[$this->selectedCourse][$student->id]['practical'] = (int) $student->practical_degree;
            $this->temporaryMarks[$this->selectedCourse][$student->id]['theory'] = (int) $student->theory_degree;
            $this->temporaryMarks[$this->selectedCourse][$student->id]['status'] = $student->attendance_status ?? LevelDegree::STATUS_ATTENDED;

            $this->marks[$this->selectedCourse][$student->id]['practical'] = (int) $student->practical_degree;
            $this->marks[$this->selectedCourse][$student->id]['theory'] = (int) $student->theory_degree;
            $this->marks[$this->selectedCourse][$student->id]['status'] = $student->attendance_status ?? LevelDegree::STATUS_ATTENDED;
        }
    }

    public function updateMarks() {
        if(!$this->allowEnterGrades) {
            $this->alert('error', __('admin.results.not_allowed_to_enter_grades'));
        }

        $this->validate();

        return DB::transaction(function ()  {


            foreach ($this->students as $student) {


                $studentMarks = $this->deriveStudentMarks($student->id);
                $course = $this->courses->firstWhere('id' , $this->selectedCourse);

                $courseStudentDegree = CourseStudentDegree::updateOrCreate(
                    [
                        'student_id' => $student->id,
                        'course_id' => $this->selectedCourse,
                        'study_date_id' => $this->activeStudyDate->id,
                        'is_first_exam' => false
                    ],
                    [
                        'theory_degree' =>   $studentMarks['status'] == LevelDegree::STATUS_ATTENDED ? $studentMarks['theory'] : 0,
                        'practical_degree' => $studentMarks['status'] == LevelDegree::STATUS_ATTENDED ? $studentMarks['practical'] : 0,
                        'attendance_status' => $studentMarks['status'],
                        'point' => ((int)$studentMarks['practical'] + (int)$studentMarks['theory']) / 25,
                        'is_pass' => FirstRoundResultCalculationHelper::calculateIsPass($course, (int) $studentMarks['theory'], (int) $studentMarks['practical']),
                        'degree_code' => FirstRoundResultCalculationHelper::getCourseDegreeCode($this->levelDegrees, (int)$studentMarks['practical'] + (int)$studentMarks['theory'])
                    ]
                );

                CourseStudent::where('student_id', $student->id)
                    ->where('course_id', $this->selectedCourse)
                    ->where('semester_id', $this->studyPlanDate->semester_id)
                    ->update(['second_round_course_student_degree_id' => $courseStudentDegree->id]);
            }

            $this->alert('success', __('site.updated_successfully'));
        });
    }

    protected function deriveStudentMarks($student_id) {
        return $this->marks[$this->selectedCourse][$student_id];

    }

    protected function getStudents() {

        return  Student::withSecondRoundStudents(
            study_date_id : $this->activeStudyDate->id,
            course_id : $this->selectedCourse,
            semester_id : $this->studyPlanDate->semester_id,
        )
            ->get()
        ;
   }


}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Result/EnterFirstRoundResult.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Result;

use App\Helpers\FirstRoundResultCalculationHelper;
use App\Models\Course;
use App\Models\CourseStudent;
use App\Models\CourseStudentDegree;
use App\Models\LevelDegree;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyPlanDate;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;
use Livewire\Component;
use Livewire\Attributes\Validate;

class EnterFirstRoundResult extends Component
{
    use LivewireAlert;

    public  $studyPlanDate ;
    public $selectedCourse ;
    public $activeStudyDate;
    public $STATUS_ATTENDED = LevelDegree::STATUS_ATTENDED;
    public $marks = [] ;
    public $allowEnterGrades = true ;

    #[Validate]
    public $temporaryMarks = [] ;


    #[Computed]
    public function courses() {
        return Course::whereHas('studyPlanDate', function ($q)  {
                $q
                    ->where('department_id', $this->studyPlanDate->department_id)
                    ->where('semester_id', $this->studyPlanDate->semester_id)
                    ->where('study_date_id', $this->studyPlanDate->study_date_id);
            })->get();
    }


    #[Computed]
    public function students() {
        return $this->getStudents();
    }

    #[Computed]
    public function levelDegrees() {
        return LevelDegree::all('min_degree', 'max_degree', 'level_code');
    }

    #[Computed]
    public function attendanceStatuses() {
        return LevelDegree::STATUSES;
    }


    public function mount($studyPlanDateId) {

        $this->studyPlanDate = StudyPlanDate::find($studyPlanDateId);

        $this->activeStudyDate = StudyDate::getActiveStudyDate();

        $this->selectedCourse = $this->courses->first()?->id;

        $this->fillStudentMarks();

        if(auth()->user()->teacher()->exists()) {
            $this->allowEnterGrades = Cache::get('settings')['allow_enter_grades'] ?? false;
        }
    }

    public function render()
    {
        return view('livewire.dashboard.admin.result.enter-first-round-result');
    }

    public function rules()
    {
        return [
            'temporaryMarks' => ['required' , 'array' ],
            'temporaryMarks.*' => ['required'  , 'array'],
            'temporaryMarks.*.*' => ['required'  , 'array'],
            'temporaryMarks.*.*.practical' => ['required' , 'integer' , 'between:0,100'],
            'temporaryMarks.*.*.theory' => ['required' , 'integer' , 'between:0,100'],
        ];
    }

    public function validationAttributes()
    {
        return [
            'temporaryMarks.*.*.practical' => __('admin.results.practical'),
            'temporaryMarks.*.*.theory' =>__('admin.results.theory'),
        ];
    }

    public function getFullDegree($student_id) {
        return (int)$this->marks[$this->selectedCourse][$student_id]['practical'] + (int)$this->marks[$this->selectedCourse][$student_id]['theory'];
    }

    public function getDegreeCode($practical , $theory) {
        return FirstRoundResultCalculationHelper::getCourseDegreeCode($this->levelDegrees ,$practical + $theory );
    }

    public function updatedTemporaryMarks($value , $property) {
        if(!$this->allowEnterGrades) {
            $this->alert('error', __('admin.results.not_allowed_to_enter_grades'));
        }
        $this->validate();

         [$course_id , $student_id , $type ] = explode('.' , $property);

         $this->marks[$course_id][$student_id][$type] = $value;

         $fullDegree = $this->marks[$course_id][$student_id]['practical'] + $this->marks[$course_id][$student_id]['theory']   ;

         if($fullDegree < 0 || $fullDegree > 100) {
            $this->addError("temporaryMarks.$course_id.$student_id.$type", __('admin.results.grades_total_should_be_less_than_hundred'));
         }
    }

    public function updatedSelectedCourse() {
        $this->fillStudentMarks();
    }

    public function fillStudentMarks() {
        foreach($this->students as $student) {
            $this->temporaryMarks[$this->selectedCourse][$student->id]['practical'] = (int) $student->practical_degree;
            $this->temporaryMarks[$this->selectedCourse][$student->id]['theory'] = (int) $student->theory_degree;
            $this->temporaryMarks[$this->selectedCourse][$student->id]['status'] = $student->attendance_status ?? LevelDegree::STATUS_ATTENDED;

            $this->marks[$this->selectedCourse][$student->id]['practical'] = (int) $student->practical_degree;
            $this->marks[$this->selectedCourse][$student->id]['theory'] = (int) $student->theory_degree;
            $this->marks[$this->selectedCourse][$student->id]['status'] = $student->attendance_status ?? LevelDegree::STATUS_ATTENDED;
        }
    }

    public function updateMarks() {

        if(!$this->allowEnterGrades) {
            $this->alert('error', __('admin.results.not_allowed_to_enter_grades'));
        }

        $this->validate();

        return DB::transaction(function ()  {


            foreach ($this->students as $student) {

                $seconRoundDegree = CourseStudentDegree::query()
                    ->where('student_id', $student->id)
                    ->where('course_id', $this->selectedCourse)
                    ->where('is_first_exam', false)
                    ->exists();

                if ($seconRoundDegree) {
                    continue;
                }

                $studentMarks = $this->deriveStudentMarks($student->id);
                $course = $this->courses->firstWhere('id' , $this->selectedCourse);

                $courseStudentDegree = CourseStudentDegree::updateOrCreate(
                    [
                        'student_id' => $student->id,
                        'course_id' => $this->selectedCourse,
                        'study_date_id' => $this->activeStudyDate->id,
                        'is_first_exam' => true
                    ],
                    [
                        'theory_degree' =>   $studentMarks['status'] == LevelDegree::STATUS_ATTENDED ? $studentMarks['theory'] : 0,
                        'practical_degree' => $studentMarks['status'] == LevelDegree::STATUS_ATTENDED ? $studentMarks['practical'] : 0,
                        'attendance_status' => $studentMarks['status'],
                        'point' => ((int)$studentMarks['practical'] + (int)$studentMarks['theory']) / 25,
                        'is_pass' => FirstRoundResultCalculationHelper::calculateIsPass($course, (int) $studentMarks['theory'], (int) $studentMarks['practical']),
                        'degree_code' => FirstRoundResultCalculationHelper::getCourseDegreeCode($this->levelDegrees, (int)$studentMarks['practical'] + (int)$studentMarks['theory'])
                    ]
                );

                CourseStudent::where('student_id', $student->id)
                    ->where('course_id', $this->selectedCourse)
                    ->where('semester_id', $this->studyPlanDate->semester_id)
                    ->update(['course_student_degree_id' => $courseStudentDegree->id]);
            }

            $this->alert('success', __('site.updated_successfully'));
        });
    }

    protected function deriveStudentMarks($student_id) {
        return $this->marks[$this->selectedCourse][$student_id];

    }

    protected function getStudents() {

        return  Student::withFirstRoundStudents(
            study_date_id : $this->activeStudyDate->id,
            course_id : $this->selectedCourse,
            semester_id : $this->studyPlanDate->semester_id,
        )
                // ->union($this->generateReturnedStudentsUnion($activeStudyDate, $request->course_id, $request->semester_id))
            ->get()
        ;
   }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/PaymentOrder/ShowPaymentOrder.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\PaymentOrder;

use App\Http\Actions\CreateNextPaymentOrderAction;
use App\Models\Payment;
use Livewire\Component;
use Livewire\WithPagination;
use App\Models\PaymentOrder;
use App\Models\PaymentType;
use DB;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;

class ShowPaymentOrder extends Component
{
    use WithPagination;
    use LivewireAlert;


    protected $paginationTheme = 'bootstrap';

    public $search;

    public $modalPaymentOrder;

    public $payData = [
        'amount' => 0,
        'payment_type_id' => null,
        'description' => '',
    ];

    #[Computed(true)]
    public function paymentTypes()
    {
        return PaymentType::all();
    }

    public function mount()
    {
        $this->modalPaymentOrder = new PaymentOrder();
    }

    public function render()
    {
        $paymentOrders = PaymentOrder::WhenArchiveOn()
            ->withCurrentStudyDate()
            ->with('student.department', 'currency')
            ->when($this->search, function ($q) {
                $q->whereHas('student', fn ($q) => $q->whenSearch($this->search));
            })
            ->withCount('registration')
            ->having('registration_count', '>', 0)
            ->latest()
            ->paginate(10);

        return view('livewire.dashboard.admin.payment-order.show-payment-order', compact('paymentOrders'));
    } //end of render

    public function rules()
    {
        return [
            'payData.amount'           => ['required', 'integer'],
            'payData.payment_type_id'  => ['required',  'exists:payment_types,id'],
            'payData.description'      => ['nullable', 'string'],
        ];
    }

    public function validationAttributes()
    {
        return [
            'payData.amount' => __('admin.payment_orders.amount'),
            'payData.payment_type_id' => __('admin.payment_types.payment_type'),
            'payData.description' => __('admin.payment_orders.description'),
        ];
    }

    public function showPayModal(PaymentOrder $paymentOrder)
    {
        $this->payData['amount'] = $paymentOrder->amount;
        $this->dispatch('modalOpened', 'pay');

        $this->modalPaymentOrder = $paymentOrder;
    }

    public function pay()
    {
        $this->validate();

        return DB::transaction(function () {


            if (!auth('admin')->user()?->hasPermissionTo('update-payment_orders')) {
                $this->payData['amount'] = $this->modalPaymentOrder->amount;
            }


            $this->payData['currency_id'] = $this->modalPaymentOrder->currency_id;

            $this->modalPaymentOrder->payments()->create([
                'amount' => $this->payData['amount'],
                'payment_type_id' => $this->payData['payment_type_id'],
                'description' => $this->payData['description'],
                'student_id' => $this->modalPaymentOrder->student_id,
                'status' => 1,
            ]);

            $this->modalPaymentOrder->update([
                'archive' => 1
            ]);

            CreateNextPaymentOrderAction::handle($this->modalPaymentOrder);

            $this->dispatch('modalClosed', 'pay');

            return $this->alert('success', __('site.paid_successfully'), [
                'text' => __('admin.payment_orders.invoice_paid_successfully'),
                'position' => 'center',
                'timer' => false,
                'showConfirmButton' => true,
                'confirmButtonText' => __('site.ok'),
                // 'showDenyButton' => true,
                // 'denyButtonText' => __('admin.student_profile.cancel_payment_order'),
                // 'onDenied' => 'dismissCanceled',
            ]);
        });
    }
} //end of component

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Payment/ShowPayment.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Payment;

use App\Models\Department;
use App\Models\Payment;
use App\Models\StudyDate;
use App\Models\StudyYear;
use Livewire\Attributes\Computed;
use Livewire\Component;
use Livewire\WithPagination;

class ShowPayment extends Component
{
    use WithPagination;

    public $search;
    public $departmentId;
    public $studyDateId;
    public $studyYearId;

    protected $paginationTheme = 'bootstrap';

    #[Computed]
    public function studyDates()
    {
        return StudyDate::all();
    }

    #[Computed]
    public function departments()
    {
        return Department::all();
    }

    #[Computed]
    public function studyYears()
    {
        return StudyYear::all();
    }

    public function render()
    {
        $payments = Payment::query()
            ->with('student.department', 'paymentOrder.studyDate', 'paymentType', 'currency')
            ->when($this->departmentId || $this->studyYearId || $this->studyDateId, function ($q) {
                $q->whereHas('student', function ($q) {
                    $q
                        ->whereHas('registrations', function ($q) {
                            $q->where('study_date_id', $this->studyDateId);
                        })
                        ->whenSearch($this->search)
                        ->when($this->studyYearId, fn ($q) => $q->where('study_year_id', $this->studyYearId))
                        ->when($this->departmentId, fn ($q) => $q->where('department_id', $this->departmentId));
                });
            })
            ->latest()
        ->paginate(10)
            // ->dd()
        ;


        return view('livewire.dashboard.admin.payment.show-payment', compact('payments'));
    } //end of render

    public function mount() {
        $this->studyDateId = $this->studyDates->firstWhere('archive',0)?->id;
    }

}//end of component

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Payment/ImportArchivedPayments.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Payment;

use App\Enums\PaymentOrderStatus;
use App\Exports\PaymentExport;
use App\Imports\PaymentImport;
use App\Models\StudyDate;
use Illuminate\Validation\Rule;
use Livewire\Attributes\Computed;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Component;
use Maatwebsite\Excel\Facades\Excel;
use Livewire\WithFileUploads;
use Storage;

class ImportArchivedPayments extends Component
{
    use WithFileUploads;
    use LivewireAlert;

    public $headerColumns;

    public $sheetColumns = [];

    public $excelFile;
    public $filePath;
    public $pathToDelete;

    public $importInputs = [];

    public  $excelError = [];

    public $studyDateId;

    #[Computed()]
    public function studyDates()
    {
        return StudyDate::query()
            ->where('archived', 0)
            ->get();
    }

    public function render()
    {
        return view('livewire.dashboard.admin.payment.import-archived-payments');
    }

    public function mount() {
        $this->headerColumns = PaymentExport::$headerColumns;

        $this->studyDateId = $this->studyDates->first()?->id;
    }


    public function submit()
    {

        $this->validate([
            'excelFile' => 'required|file|mimes:xlsx',
            'studyDateId' => ['required' , Rule::exists(StudyDate::class , 'id')->where('archived' , 0)],
        ] , [] , [
            'excelFile' => __('site.file'),
            'studyDateId' => __('admin.study_dates.study_date'),
        ]);

        $path = $this->excelFile->storePublicly('temp_excel');
        $this->pathToDelete = $path;
        $this->filePath = public_path('storage/' . $path);

        $this->sheetColumns = collect(Excel::toCollection(collect(), $this->filePath)->first()->first());

        foreach ($this->headerColumns as $column) {
            $this->importInputs[$column] = $this->sheetColumns->contains(fn ($value) => $value == $column) ? $column : null;
        }

        $this->dispatch('modalOpened', 'verify-headings');
    }

    public function import() {
        $this->excelError = [];
        $this->validate([
            'importInputs' => 'required|array',
            'importInputs.*' => 'required',
        ] , [] , [
            'importInputs.university_id' => __('admin.import_payments.university_id'),
            'importInputs.amount' => __('admin.import_payments.amount'),
            'importInputs.payment_type' => __('admin.import_payments.payment_type'),
            'importInputs.payment_method_id' => __('admin.import_payments.payment_method_id'),
        ]);

        try {
        Excel::import(new PaymentImport($this->studyDateId , $this->importInputs ),$this->filePath);
        } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            $this->excelError = collect([
                'row' => $e->failures()[0]->row(),
                'attribute' => $e->failures()[0]->attribute(),
                'messages' => $e->failures()[0]->errors(),
            ]);

            return;
        }

        $this->excelError = [];

        Storage::delete($this->pathToDelete);

        $this->alert('success', __('site.imported_successfully'));
        $this->dispatch('modalClosed', 'verify-headings');

    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/Mark/ImportMarksViaExcel.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\Mark;

use App\Exports\MarkExport;
use App\Imports\MarkImport;
use App\Models\Department;
use App\Models\StudyDate;
use Illuminate\Support\Facades\Storage;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;
use Livewire\Component;
use Livewire\WithFileUploads;
use Maatwebsite\Excel\Facades\Excel;

class ImportMarksViaExcel extends Component
{
    use WithFileUploads;
    use LivewireAlert;

    public $headerColumns ;

    public $studyDateId , $isFirstExam;

    public $excelFile;
    public $filePath;
    public $pathToDelete;

    public $sheetColumns = [];

    public $importInputs = [];

    public  $excelError = [];

    #[Computed()]
    public function studyDates()
    {
        return StudyDate::all();
    }

    public function mount() {

        $this->headerColumns = MarkExport::$headerColumns;

        $this->isFirstExam = true;
    }

    public function render()
    {
        return view('livewire.dashboard.admin.mark.import-marks-via-excel');
    }

    public function submit()
    {

        $this->validate([
            'excelFile' => 'required|file|mimes:xlsx',
            'studyDateId' => 'required|exists:study_dates,id',
            'isFirstExam' => 'required',
        ] , [] , [
            'excelFile' => __('site.file'),
            'studyDateId' => __('admin.study_dates.study_date'),
            'isFirstExam' => __('admin.results.phase'),
        ]);

        $path = $this->excelFile->storePublicly('temp_excel');
        $this->pathToDelete = $path;
        $this->filePath = public_path('storage/' . $path);

        $this->sheetColumns = collect(Excel::toCollection(collect(), $this->filePath)->first()->first());

        foreach ($this->headerColumns as $column) {
            $this->importInputs[$column] = $this->sheetColumns->contains(fn ($value) => $value == $column) ? $column : null;
        }

        $this->dispatch('modalOpened', 'verify-headings');
    }

    public function import() {
        $this->excelError = [];
        $this->validate([
            'importInputs' => 'required|array',
            'importInputs.*' => 'required',
        ] , [] , [
            'importInputs.university_id' => __('admin.import_marks.university_id'),
            'importInputs.course_code' => __('admin.import_marks.course_code'),
            'importInputs.theory' => __('admin.import_marks.theory'),
            'importInputs.practical' => __('admin.import_marks.practical'),
            'importInputs.attendance_status' => __('admin.import_marks.attendance_status'),
        ]);

        try {
        Excel::import(new MarkImport($this->studyDateId ,$this->isFirstExam, $this->importInputs ),$this->filePath);
        } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            $this->excelError = collect([
                'row' => $e->failures()[0]->row(),
                'attribute' => $e->failures()[0]->attribute(),
                'messages' => $e->failures()[0]->errors(),
            ]);

            return;
        }

        $this->excelError = [];

        Storage::delete($this->pathToDelete);

        $this->alert('success', __('site.imported_successfully'));
        $this->dispatch('modalClosed', 'verify-headings');
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/ActiveStudyPlan/Show.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\ActiveStudyPlan;

use App\Models\StudyPlanDate;
use App\Models\StudyPlanDateTeacher;
use App\Models\Teacher;
use Livewire\Component;

class Show extends Component
{
    public $studyPlanDate;
    public $courses;
    public $search = '';
    public $searchTeachers;
    public $courseTeachers;
    public $course;

    public function mount($studyPlanDate) {

        $this->studyPlanDate = $studyPlanDate;
        $this->courses = StudyPlanDate::with('course')->where('semester_id',$studyPlanDate->semester_id)
        ->where('department_id',$studyPlanDate->department_id)
        ->where('study_date_id',$studyPlanDate->study_date_id)
        ->get()
        ;

        $this->courseTeachers = StudyPlanDateTeacher::with('teacher')
        ->where('study_plan_date_id',$this->studyPlanDate->id)
        ->get()->pluck('teacher');

    }

    public function render()
    {
        return view('livewire.dashboard.admin.active-study-plan.show');
    }


    public function searchForTeachers() {
        $this->searchTeachers = Teacher::where('name' , 'LIKE' , "%{$this->search}%")
        ->whereNotIn('id',$this->courseTeachers->pluck('id'))
        ->get();
    }

    public function addTeacher(Teacher $teacher) {
        $this->courseTeachers->prepend($teacher);

        $this->searchTeachers = collect([]);
        $this->search = '';
    }

    public function removeTeacher($id) {
        $this->courseTeachers = $this->courseTeachers->filter(function($teacher) use($id) {
            return $teacher['id']!= $id;
        });

    }

    public function getCourseTeachers() {
        $this->studyPlanDate = StudyPlanDate::with('studyPlanDateTeacher.teacher')
        ->where('semester_id',$this->studyPlanDate->semester_id)
        ->where('department_id',$this->studyPlanDate->department_id)
        ->where('course_id',$this->course)
        ->first();

        $this->courseTeachers = $this->studyPlanDate->studyPlanDateTeacher->pluck('teacher');
    }

    public function storeTeachers() {
        StudyPlanDateTeacher::where('study_plan_date_id',$this->studyPlanDate->id)->delete();


        foreach(collect($this->courseTeachers) as $teacher) {
            StudyPlanDateTeacher::create([
               'study_plan_date_id' => $this->studyPlanDate->id,
                'teacher_id' => $teacher['id']
            ]);
        }
        session()->flash('success', __('site.updated_successfully'));
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/ActiveStudyPlan/ImportActiveStudyPlans.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\ActiveStudyPlan;

use App\Exports\ActiveStudyPlanExport;
use App\Imports\ActiveStudyPlanImport;
use App\Models\Department;
use App\Models\StudyDate;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;
use Livewire\Component;
use Livewire\WithFileUploads;
use Maatwebsite\Excel\Facades\Excel;

class ImportActiveStudyPlans extends Component
{
    use WithFileUploads;
    use LivewireAlert;

    public $headerColumns ;

    public $sheetColumns = [];

    public $excelFile;
    public $filePath;
    public $pathToDelete;

    public $importInputs = [];

    public  $excelError = [];

    public $studyDateId , $departmentId;


    #[Computed()]
    public function studyDates()
    {
        return StudyDate::query()
            ->where('archived' , 0)
        ->get()
            ;
    }

    #[Computed()]
    public function departments()
    {
        return Department::all();
    }

    public function render()
    {
        return view('livewire.dashboard.admin.active-study-plan.import-active-study-plans');
    }

    public function mount() {

        $this->headerColumns = ActiveStudyPlanExport::$headerColumns;

        $this->studyDateId = $this->studyDates->first()?->id;
        $this->departmentId = $this->departments->first()?->id;
    }

    public function submit()
    {

        $this->validate([
            'excelFile' => 'required|file|mimes:xlsx',
            'departmentId' => 'required|exists:departments,id',
            'studyDateId' => ['required' , Rule::exists(StudyDate::class , 'id')->where('archived' , 0)],
        ] , [] , [
            'excelFile' => __('site.file'),
            'studyDateId' => __('admin.study_dates.study_date'),
            'departmentId' => __('admin.departments.department'),
        ]);

        $path = $this->excelFile->storePublicly('temp_excel');
        $this->pathToDelete = $path;
        $this->filePath = public_path('storage/' . $path);

        $this->sheetColumns = collect(Excel::toCollection(collect(), $this->filePath)->first()->first());

        foreach ($this->headerColumns as $column) {
            $this->importInputs[$column] = $this->sheetColumns->contains(fn ($value) => $value == $column) ? $column : null;
        }

        $this->dispatch('modalOpened', 'verify-headings');
    }

    public function import() {
        $this->excelError = [];
        $this->validate([
            'importInputs' => 'required|array',
            'importInputs.*' => 'required',
        ] , [] , [
            'importInputs.semester_id' => __('admin.import_active_study_plans.semester_id'),
            'importInputs.course_code' => __('admin.import_active_study_plans.course_code'),
            'importInputs.hours' => __('admin.import_active_study_plans.hours'),
        ]);

        try {
        Excel::import(new ActiveStudyPlanImport($this->studyDateId ,$this->departmentId, $this->importInputs ),$this->filePath);
        } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            $this->excelError = collect([
                'row' => $e->failures()[0]->row(),
                'attribute' => $e->failures()[0]->attribute(),
                'messages' => $e->failures()[0]->errors(),
            ]);

            return;
        }

        $this->excelError = [];

        Storage::delete($this->pathToDelete);

        $this->alert('success', __('site.imported_successfully'));
        $this->dispatch('modalClosed', 'verify-headings');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/ActiveStudyPlan/ActiveStudyPlansArchive.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\ActiveStudyPlan;

use App\Models\Department;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyPlanDate;
use App\Models\StudyPlanDateTeacher;
use Livewire\Attributes\Computed;
use Livewire\Component;

class ActiveStudyPlansArchive extends Component
{

    public $departmentId;

    public $semesterId;

    public $studyDateId;

    #[Computed]
    public function studyPlanDates(array $ids = [])
    {
        return  StudyPlanDate::query()
            ->select(
                'study_plan_dates.id',
                'study_plan_dates.course_id',
                'departments.name as department_name',
                'semesters.name as semester_name',
                'courses.name_en',
                'courses.hours',
                'courses.code',
            )
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->join('departments', 'departments.id', 'study_plan_dates.department_id')
            ->join('semesters', 'semesters.id', 'study_plan_dates.semester_id')
            ->where('study_date_id', $this->studyDateId)
            ->where('study_plan_dates.department_id', $this->departmentId)
            ->where('study_plan_dates.semester_id', $this->semesterId)
            ->when($ids, fn ($q) => $q->whereIn('study_plan_dates.id', $ids))
            ->get()
        ;
    }

    #[Computed]
    public function studyPlanDatesTeachers()
    {
        return   StudyPlanDateTeacher::with('teacher')
            ->whereIn('study_plan_date_id', $this->studyPlanDates->pluck('id')->toArray())
            ->get();
    }

    #[Computed]
    public function studyPlanDatesInfo()
    {
        return   StudyPlanDate::query()
            ->selectRaw('COUNT(*) as courses_count')
            ->selectRaw('SUM(hours) as hours_count')
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->where('study_date_id', $this->studyDateId)
            ->where('study_plan_dates.department_id', $this->departmentId)
            ->where('study_plan_dates.semester_id', $this->semesterId)
            ->groupBy('study_plan_dates.semester_id', 'study_plan_dates.department_id')
            ->get();
    }

    #[Computed]
    public function studyDates()
    {
        return StudyDate::all();
    }
    #[Computed]
    public function departments()
    {
        return Department::all();
    }

    #[Computed]
    public function semesters()
    {
        return Semester::query()
            ->whereHas('studyYear' , function($q) {
                $q->whereHas('departments'  , function($q) {
                    $q->where('department_id',$this->departmentId);
                });
            })
            ->get()
            ;
    }

    public function render()
    {
        return view('livewire.dashboard.admin.active-study-plan.active-study-plans-archive');
    }

    public function mount() {
        $this->studyDateId = $this->studyDates->first()->id;
        $this->departmentId = $this->departments->first()->id;

        $this->semesterId = $this->semesters->first()->id;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Livewire/Dashboard/Admin/ActiveStudyPlan/ActiveStudyPlanIndex.php

      
-----------------------------------------------


      <?php

namespace App\Livewire\Dashboard\Admin\ActiveStudyPlan;

use App\Models\CourseStudent;
use App\Models\Teacher;
use Livewire\Component;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyPlan;
use App\Models\Department;
use App\Models\Student;
use App\Models\StudyPlanDate;
use Illuminate\Support\Facades\DB;
use App\Models\StudyPlanDateTeacher;
use Illuminate\Support\Collection;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Attributes\Computed;
use Livewire\WithPagination;

class ActiveStudyPlanIndex extends Component
{
    use LivewireAlert;
    use WithPagination;
    protected $paginationTheme = 'bootstrap';

    protected $listeners = [
        'confirmDeleteCourse'
    ];

    public $departmentId;

    public $semesterId;

    public $activeStudyDate;

    public $search;

    public $modalIsVisible = false;

    public Collection $selectedCourses;

    public Collection $selectedTeachers;

    public $readyToDeleteStudyPlanDate;

    public $teachersModalIsVisible = false;

    public $activeTeachersModalStudyPlanDate;

    public $searchTeacher;

    public $studyPlanDates;

    public $addCoursesSemesterId;
    public $localCourses;

    public $selectAll = false;

    public function getStudyPlanDates(array $ids = [])
    {
        return  DB::table('study_plan_dates')
            ->select(
                'study_plan_dates.id',
                'study_plan_dates.course_id',
                'departments.name as department_name',
                'semesters.name as semester_name',
                'courses.name_en',
                'courses.hours',
                'courses.code',
            )
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->join('departments', 'departments.id', 'study_plan_dates.department_id')
            ->join('semesters', 'semesters.id', 'study_plan_dates.semester_id')
            ->where('study_date_id', $this->activeStudyDate->id)
            ->where('study_plan_dates.department_id', $this->departmentId)
            ->where('study_plan_dates.semester_id', $this->semesterId)
            ->when($ids, fn ($q) => $q->whereIn('study_plan_dates.id', $ids))
            ->get();
    }

    #[Computed]
    public function studyPlanDatesTeachers()
    {
        return   StudyPlanDateTeacher::with('teacher')
            ->whereIn('study_plan_date_id', $this->studyPlanDates->pluck('id')->toArray())
            ->get();
    }

    #[Computed]
    public function studyPlanDatesInfo()
    {
        return   DB::table('study_plan_dates')
            ->selectRaw('COUNT(*) as courses_count')
            ->selectRaw('SUM(hours) as hours_count')
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->where('study_date_id', $this->activeStudyDate->id)
            ->where('study_plan_dates.department_id', $this->departmentId)
            ->where('study_plan_dates.semester_id', $this->semesterId)
            ->groupBy('study_plan_dates.semester_id', 'study_plan_dates.department_id')
            ->get();
    }

    #[Computed]
    public function departments()
    {
        return Department::all();
    }

    #[Computed]
    public function semesters()
    {
        return Semester::query()
            ->whereHas('studyYear', function ($q) {
                $q->whereHas('departments', function ($q) {
                    $q->where('department_id', $this->departmentId);
                });
            })
            ->get();
    }

    public function toggleTeachersSelection($id)
    {

        $exists = $this->selectedTeachers->contains($id);
        if (!$exists) {
            $this->selectedTeachers->push($id);
        } else {
            $this->selectedTeachers = $this->selectedTeachers->filter(fn ($value) => $value != $id);
        }
    }

    public function render()
    {
        $this->studyPlanDates = $this->getStudyPlanDates();

        $courses =  StudyPlan::with(['semester'])
            ->where('department_id', $this->departmentId)
            ->when($this->addCoursesSemesterId, fn ($q) => $q->where('semester_id', $this->addCoursesSemesterId))
            ->whereNotIn('id', collect($this->studyPlanDates)->pluck('id')->toArray())
            ->withWhereHas('course', function ($q) {
                $q->whereNotIn('id', collect($this->studyPlanDates)->pluck('course_id')->toArray())
                    ->when($this->search, function ($q) {
                        $q->where('name_en', 'like', '%' . $this->search . '%')
                            ->orWhere('name', 'like', '%' . $this->search . '%')
                            ->orWhere('code', 'like', '%' . $this->search . '%');
                    });
            })
            ->orderBy('semester_id', 'asc')
            ->groupBy('course_id')
            ->paginate(5);

        $this->localCourses = $courses->items();


        $teachers =  Teacher::withCount('studyPlanDates')
            ->when($this->searchTeacher, function ($query) {
                $query->where('name', 'like', '%' . $this->searchTeacher . '%')
                    ->orWhere('phone', 'like', '%' . $this->searchTeacher . '%');
            })
            ->paginate(12);

        return view('livewire.dashboard.admin.active-study-plan.active-study-plan-index', [
            'courses' => $courses,
            'teachers' => $teachers,

        ]);
    }

    public function mount()
    {
        $this->selectedCourses = collect();
        $this->activeStudyDate = StudyDate::getActiveStudyDate();


        $this->departmentId = $this->departments->first()->id;

        $this->semesterId = $this->semesters->first()->id;

        $this->selectedTeachers = collect();
    }

    public function addCourses()
    {
        $courses = $this->selectedCourses->filter(fn ($value) => !!$value);
        if($courses->count() < 1) {
            return;
        }

        $addedStudyPlanDates = collect();

        foreach ($courses as $course_id => $boolean) {
            $studyPlanDate = StudyPlanDate::firstOrCreate([
                'department_id' => $this->departmentId,
                'semester_id' => $this->semesterId,
                'course_id' => $course_id,
                'study_date_id' => $this->activeStudyDate->id
            ]);

            $addedStudyPlanDates->push($studyPlanDate);
        }

        $this->syncStudentsCourses($addedStudyPlanDates);

        $this->studyPlanDates->push($this->getStudyPlanDates($addedStudyPlanDates->pluck('id')->toArray()));

        $this->selectedCourses = collect([]);

        $this->modalIsVisible = false;
        $this->dispatch('modalClosed', 'add-course-modal');
        $this->alert('success', __('site.added_successfully'));
    }

    public function syncStudentsCourses($studyPlanDates)
    {
        $students = Student::select('id', 'study_year_id')
            ->where('department_id', $studyPlanDates->first()->department_id)
            ->where('study_year_id', $studyPlanDates->first()->semester->study_year_id)
            ->get();

        foreach ($studyPlanDates as $studyPlanDate) {
            $course = $studyPlanDate->course;
            foreach ($students as $student) {
                CourseStudent::updateOrCreate([
                    'student_id' => $student->id,
                    'course_id' => $studyPlanDate->course_id,
                    'semester_id' => $studyPlanDate->semester_id,
                    'study_year_id' => $student->study_year_id,
                ], [
                    'hours' => $course->hours,
                ]);
            }
        }
    }
    public function deleteCourse($id)
    {
        $studyPlanDate = StudyPlanDate::query()->with('courseStudents', function ($q) {
            $q->whereNotNull('course_student_degree_id')
                ->orWhereNotNull('second_round_course_student_degree_id');
        })
            ->find($id);

        $options = [
            'onConfirmed' => 'confirmDeleteCourse',
            'confirmButtonText' => __('site.remove'),
            'confirmButtonColor' => '#0A2F47',
            'cancelButtonText' => __('site.cancel'),
        ];

        $options['text'] =  $studyPlanDate->courseStudents->count() > 0 ?  __('admin.active_study_plans.confirm_remove_course_has_grades') : __('admin.active_study_plans.confirm_remove_course_has_no_grades');

        $this->confirm(__('admin.active_study_plans.confirm_remove_course'), $options);

        $this->readyToDeleteStudyPlanDate = $id;
    }

    public function confirmDeleteCourse()
    {
        $studyPlanDate = StudyPlanDate::find($this->readyToDeleteStudyPlanDate);
        $studyPlanDate->delete();
        $this->studyPlanDates = $this->studyPlanDates->filter(fn ($studyPlanDate) => $studyPlanDate->id != $this->readyToDeleteStudyPlanDate);

        $this->unsyncStudentsCourses($studyPlanDate);

        $this->alert('success', __('site.deleted_successfully'));
    }

    public function unsyncStudentsCourses($studyPlanDate)
    {
        CourseStudent::query()
            ->where('semester_id', $studyPlanDate->semester_id)
            ->where('course_id', $studyPlanDate->course_id)
            ->whereHas('student', function ($q) use ($studyPlanDate) {
                $q->where('department_id', $studyPlanDate->department_id)
                    ->has('registration');
            })
            ->has('student.registration')
            ->delete();
    }


    public function openTeachersModal($studyPlanDateId)
    {
        $this->activeTeachersModalStudyPlanDate = $studyPlanDateId;

        $this->selectedTeachers = collect();

        $this->selectedTeachers = $this->studyPlanDatesTeachers?->where('study_plan_date_id', $studyPlanDateId)->pluck('teacher_id');

        $this->teachersModalIsVisible = true;
    }

    public function updateTeachers()
    {
        $teachers = $this->selectedTeachers;

        $studyPlanDate = StudyPlanDate::find($this->activeTeachersModalStudyPlanDate);

        $studyPlanDate->teachers()->sync($teachers->toArray());

        $this->selectedTeachers = collect();

        $this->teachersModalIsVisible = false;

        $this->dispatch('modalClosed', 'edit-teachers-modal');

        $this->alert('success', __('site.updated_successfully'));
    }

    public function updatedSelectAll($value)
    {
        if ($value) {
            foreach ($this->localCourses as $studyPlan) {
                $this->selectedCourses[$studyPlan->course_id] = true;
            }
        } else {
            $this->selectedCourses = collect();
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/TypeDiscountRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class TypeDiscountRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        if (in_array($this->method(), ['PUT', 'PATCH'])) {
            
            $typeDiscount = $this->route()->parameter('type_discount');

            $rules['type'] = ['required','min:2','max:255', Rule::unique('type_discounts')->ignore($typeDiscount->id)];

        } else {

            $rules['type'] = ['required','unique:type_discounts','min:2','max:255'];

        } //end of if

        return $rules;

    }//end of rules

}//end of request
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/StudyYearRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StudyYearRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        if (in_array($this->method(), ['PUT', 'PATCH'])) {
            
            $yearStudy = $this->route()->parameter('study_year');

            $rules['name'] = ['required','min:2','max:255', Rule::unique('study_years')->ignore($yearStudy->id)];

        } else {

            $rules['name'] = ['required','unique:study_years','min:2','max:255'];

        } //end of if

        return $rules;

    }//end of rules

}//end of request
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/StudyDateRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StudyDateRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $rules = [
            'start_reg'         => ['required','date'],
            'end_reg'           => ['required','date'],
            'archived'          => ['required','boolean'],
            'export_students'   => ['sometimes'],
            'register_fees' => ['required', 'array'],
            'register_fees.*' => ['required' , 'numeric'],

            'tuition_fees' => ['required', 'array'],
            'tuition_fees.*' => ['required' ,'array'],
            'tuition_fees.*.*' => ['required' , 'numeric'],
            // 'batch.*'           => ['required', 'numeric'],
        ];

        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $studyDate = $this->route()->parameter('study_date');

            $rules['name'] = ['nullable','min:2','max:255', Rule::unique('year_studies')->ignore($studyDate->id)];

        } else {

            $rules['name'] = ['nullable','unique:year_studies','min:2','max:255'];

        } //end of if

        return $rules;

    }//end of rules

    public function messages()
    {
        $rulesMessages = [
            'usd.*.required'    => __('admin.study_dates.usd_price'),
            'sdg.*.required'    => __('admin.study_dates.sdg_price'),
            'batch.*.required'  => __('admin.study_dates.batch'),
        ];

        return $rulesMessages;

    }//end of messages

    public function attributes()
    {
        return [
            'register_fees_sdg' => __('admin.study_dates.register_fees_sdg'),
            'register_fees_usd' => __('admin.study_dates.register_fees_usd'),
        ];

    }//end of attributes

    protected function prepareForValidation()
    {
        return $this->merge([
            'archived' => request()->has('archived') ?? 0,
        ]);

    }//end of prepare for validation

}//end of request

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/StudentRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use App\Models\Student;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;
use App\Models\StudyDate;

class StudentRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $rules = [
            'name1'             => ['required','min:2','max:255'],
            'name2'             => ['required','min:2','max:255'],
            'name3'             => ['required','min:2','max:255'],
            'name4'             => ['required','min:2','max:255'],
            'name1_en'          => ['required','min:2','max:255'],
            'name2_en'          => ['required','min:2','max:255'],
            'name3_en'          => ['required','min:2','max:255'],
            'name4_en'          => ['required','min:2','max:255'],
            'certificate_date'  => ['required'],
            'certificate_type'  => ['required',Rule::in(array_keys(Student::CERTIFICATE_TYPES))],
            'religion'          => ['required',Rule::in(array_keys(Student::RELIGIONS))],
            'university_id'     => ['required','numeric'],
            'phone' 		    => ['required','numeric','starts_with:249','digits:12'],
            'national_number'   => ['required','numeric'],
            'nationality'       => ['required' ,'in:' . implode(',',array_keys(Student::NATIONALITIES))],
            'address'           => ['nullable','min:2','max:255'],
            'study_date_id'     => ['required','exists:study_dates,id'],
            'department_id'     => ['required','exists:departments,id'],
            'study_year_id'     => ['required','exists:study_years,id'],
            'admission_type_id' => ['required','exists:admission_types,id'],
            'payment_status_id' => ['required','exists:admission_types,id'],
            'workplace'         => ['nullable','min:2','max:255'],
            'currency'          => ['required','in:usd,sdg'],
            'gender'          => ['required'],

            'father_name'    => ['nullable','min:2','max:255'],
            'father_phone1'  => ['nullable','numeric','starts_with:249','digits:12'],
            'father_phone2'  => ['nullable','numeric','starts_with:249','digits:12'],

            // registertion modle
            'batch_id' => ['required'],
            'acceptance_year' => ['required'],
            'register_fees'  => ['required','numeric'],
            'tuition_fees'   => ['required','numeric'],
        ];

        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $student = $this->route()->parameter('student');

            $rules['university_id'] = ['required','numeric', Rule::unique('students')->ignore($student->id)];

            $rules['photo'] = ['nullable','image'];

        } else {

            $rules['university_id'] = ['required','numeric','unique:students'];

            $rules['photo'] = ['nullable','image'];

        } //end of if

        return $rules;

    }//end of rules

    public function attributes()
	{
	    return [
	        'name1'       	    => __('admin.students.full_name'),
            'name2'             => __('admin.students.full_name'),
            'name3'             => __('admin.students.full_name'),
            'name4'             => __('admin.students.full_name'),
            'name1_en'          => __('admin.students.full_name'),
            'name2_en'          => __('admin.students.full_name'),
            'name3_en'          => __('admin.students.full_name'),
            'name4_en'          => __('admin.students.full_name'),
	        'certificate_date'  => __('admin.students.certificate_date'),
	        'certificate_type'  => __('admin.students.certificate_type'),
	        'religion'          => __('admin.students.religion'),
	        'university_id'     => __('admin.students.university_id'),
	        'national_number'   => __('admin.students.national_number'),
	        'nationality' 	    => __('admin.students.nationality'),
	        'address' 		    => __('admin.students.address'),
	        'photo' 		    => __('admin.students.photo'),
	        'father_name' 	    => __('admin.students.father_name'),
	        'father_phone1'     => __('admin.students.father_phone1'),
	        'father_phone2'     => __('admin.students.father_phone2'),
	        'workplace' 	    => __('admin.students.workplace'),

	        'study_date_id'     => __('admin.study_dates.study_dates'),
	        'department_id'     => __('admin.departments.departments'),
	        'study_year_id'     => __('admin.study_years.study_years'),
            'admission_type_id' => __('admin.admission_types.admission_types'),

            // registertion modle
            'register_fees'     => __('admin.registrations.register_fees'),
            'tuition_fees'      => __('admin.registrations.tuition_fees'),
	    ];

	}//end of attributes

	protected function prepareForValidation()
    {
        return $this->merge([
            'study_date_id'     => StudyDate::where('archived', 1)->first()->id,
            'payment_status_id' => 1,
        ]);

    }//end of prepare for validation

}//end of request

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/RolRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class RolRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $rules = [
            'guard_name'  => ['required','min:2','max:255'],
            'permissions' => ['required','min:1'],
        ];
        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $role = $this->route()->parameter('role');

            $rules['name'] = ['required','min:2','max:255', Rule::unique('roles')->ignore($role->id)];

        } else {

            $rules['name'] = ['required','unique:roles','min:2','max:255'];

        } //end of if

        return $rules;

    }//end of rules

    protected function prepareForValidation()
    {
        return $this->merge([
            'guard_name' => 'admin'
        ]);

    }//end of prepare for validation

}//end of request
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/PaymentStatusRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class PaymentStatusRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $paymentStatus = $this->route()->parameter('payment_status');

            $rules['name'] = ['required','min:2','max:255', Rule::unique('payment_statuses')->ignore($paymentStatus->id)];

        } else {

            $rules['name'] = ['required','unique:payment_statuses','min:2','max:255'];

        } //end of if

        return $rules;

    }//end of rules

    protected function prepareForValidation()
    {
        return $this->merge([
            'guard_name' => 'admin'
        ]);

    }//end of prepare for validation

}//end of request
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/PaymentRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;

class PaymentRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $rules = [
            'amount'           => ['required','numeric'],
            'rate'             => ['nullable','numeric'],
            'payment_order_id' => ['required','numeric'],
            'payment_type_id'  => ['required','numeric'],
            'student_id'       => ['required','numeric'],
            'currency'         => ['nullable','in:usd,sdg'],
            'description'      => ['nullable','string'],
        ];

        return $rules;

    }//end of rules

    protected function prepareForValidation()
    {
        return $this->merge([
            'rate' => request()->rate <= 0 ? 1 : request()->rate,
        ]);

    }//end of prepare for validation

}//end of request
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/DiscountRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class DiscountRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $rules = [
            'department_id'   => ['required','numeric'],
            'student_id'      => ['required','numeric'],
            'study_date_id'   => ['required','numeric'],
            'type_discount_id'=> ['required','numeric'],
            'currency'        => ['required','in:sdg,usd'],
            'amount'          => ['required','numeric'],
            'description'     => ['nullable','string'],
        ];

        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $rules['image'] = ['nullable'];

        } else {

//            $rules['image'] = ['required'];

        } //end of if

        return $rules;

    }//end of rules

    protected function prepareForValidation()
    {
        return $this->merge([
            'status' => 1,
        ]);

    }//end of prepare for validation

    public function attributes()
    {
        return [
            'student_id'    => __('admin.students.students'),
            'department_id' => __('admin.departments.departments'),
            'study_date_id' => __('admin.study_dates.study_dates'),
            'type_discounts'=> __('admin.type_discounts.type_discounts'),
            'currency'      => __('admin.currency.currency'),
            'amount'        => __('admin.payments.amount'),
            'description'   => __('admin.payment_orders.description'),
        ];

    }//end of attributes

}//end of request

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/DepartmentRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class DepartmentRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {

        $rules = [
            'study_year_id' => ['required','array'],
            'study_year_id.*' => ['required'],
            'batch_number'  => ['required','numeric'],
        ];

        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $department = $this->route()->parameter('department');

            $rules['name'] = ['required','min:2','max:255', Rule::unique('departments')->withoutTrashed()->ignore($department->id)];

        } else {

            $rules['name'] = ['required','min:2','max:255', Rule::unique('departments')->withoutTrashed()];

        } //end of if

        return $rules;

    }//end of rules

    public function attributes()
    {
        return [
            'batch_number'    => __('admin.departments.last_batch_number'),
        ];

    }//end of attributes

}//end of request

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/AdmissionTypeRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class AdmissionTypeRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $admissionType = $this->route()->parameter('admission_type');

            $rules['type'] = ['required','min:2','max:255', Rule::unique('admission_types')->ignore($admissionType->id)];

        } else {

            $rules['type'] = ['required','unique:admission_types','min:2','max:255'];

        } //end of if

        return $rules;

    }//end of rules

}//end of request
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/AdminRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class AdminRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $rules = [
            'name'     => ['required','min:2','max:255' ,  'alpha:ascii'],
            'full_name'     => ['required','min:2','max:255' ],
            'role'     => ['nullable'],
        ];

        if (in_array($this->method(), ['PUT', 'PATCH'])) {

            $admin = $this->route()->parameter('admin');

            $rules['email'] = ['required','email','min:2','max:255', Rule::unique('admins')->ignore($admin->id)];

        } else {

            $rules['email']    = ['required','email','unique:admins','min:2','max:255'];
            $rules['password'] = ['required','confirmed'];

        } //end of if

        return $rules;

    }//end of rules

    public function attributes()
    {
        return [
            'role'    => __('admin.roles.roles'),
            'name'    => __('admin.admins.name'),
            'full_name'    => __('admin.admins.full_name'),
        ];

    }//end of attributes

}//end of request

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/TeacherIndex.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher;

use Livewire\Component;

class TeacherIndex extends Component
{
    public function mount() {
    }

    public function render()
    {
        return view('livewire.elearning.teacher.teacher-index');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/CoursesDashboard.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher;

use App\Models\College;
use App\Models\Course;
use App\Models\Elearning\Attachment;
use Livewire\Component;
use App\Models\StudyDate;
use App\Models\StudyPlanDate;
use App\Models\StudyPlanDateTeacher;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use PhpParser\ErrorHandler\Collecting;

class CoursesDashboard extends Component
{

    public $studentsCount;
    public $lecturesCount;
    public $studentSearch;
    public $students;
    public $courses;
    public $course_id;
    public function render()
    {
        return view('livewire.elearning.teacher.courses-dashboard');
    }

    public function mount()
    {
        $this->courses = Course::whereHas('studyPlanDates', function ($q) {
            $q->whereHas('studyPlanDateTeachers', function ($q) {
                $q->where('teacher_id', auth('admin')->user()->teacher->id);
            });
        })->get();

        $this->course_id = $this->courses?->first()->id;

        $this->fetch();

        $this->students = collect();
    }

    public function updatedCourseId()
    {
        $this->fetch();
        $this->students = collect();
        $this->studentSearch = null;
    }

    public function fetch()
    {

        $teacher = auth('admin')->user()->teacher;
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $this->studentsCount = DB::table('study_plan_date_teachers')
            ->selectRaw('COUNT(students.id) as students')
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('course_students', function ($q) {
                $q
                    ->on('course_students.course_id', 'study_plan_dates.course_id')
                    ->on('course_students.semester_id', 'study_plan_dates.semester_id')
                    ->where('course_students.course_id', $this->course_id);
            })
            ->join('students', function ($q) {
                $q
                    ->on('students.id', 'course_students.student_id')
                    ->on('students.department_id', 'study_plan_dates.department_id');
            })
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->where('study_plan_dates.course_id', $this->course_id)
            ->count();

        $this->lecturesCount = DB::table('study_plan_date_teachers')
            ->selectRaw('COUNT(lectures.id) as lectures')
            ->selectRaw('COUNT(assignments.id) as assignments')
            ->selectRaw('COUNT(CASE WHEN attachments.type = ? THEN 1 END) as videos', [Attachment::ATTACHMENT_TYPE_VIDEO])
            ->selectRaw('COUNT(CASE WHEN attachments.type = ? THEN 1 END) as files', [Attachment::ATTACHMENT_TYPE_FILE])
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->leftJoin('lectures', 'lectures.course_id', 'courses.id')
            ->leftJoin('attachments', 'attachments.lecture_id', 'lectures.id')
            ->leftJoin('assignments', 'assignments.lecture_id', 'lectures.id')
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->where('study_plan_dates.course_id', $this->course_id)
            ->get();

        $completedStudentsAssignmentsPercentage = DB::table('study_plan_date_teachers')
        ->selectRaw('COUNT(course_students.student_id) * COUNT(student_assignments.id) as total_assignments')
            ->selectRaw('COUNT(student_assignments.id) as student_assignments')

            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('semesters', 'semesters.id', 'study_plan_dates.semester_id')
            ->join('course_students', function ($q) {
                $q
                    ->on('course_students.semester_id', 'study_plan_dates.semester_id')
                    ->on('course_students.course_id', 'study_plan_dates.course_id');
            })
            ->join('lectures', 'lectures.course_id', 'study_plan_dates.course_id')
            ->join('assignments', 'assignments.lecture_id', 'lectures.id')
            ->leftJoin('student_assignments', function ($q) {
                $q
                    ->on('student_assignments.assignment_id', 'assignments.id')
                    // ->on('student_assignments.student_id', 'course_students.student_id')
                    ;
            })
            // ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->where('study_plan_dates.course_id', 1)
            ->get();

        // dd($completedStudentsAssignmentsPercentage);
    }

    public function search()
    {
        $activeStudyDate = StudyDate::getActiveStudyDate();
        $teacher = auth('admin')->user()->teacher;

        $students = DB::table('study_plan_date_teachers')
            ->select('students.university_id')
            ->selectRaw('CONCAT(students.name1_en, " ", students.name2_en, " ", students.name3_en, " ", students.name4_en) as full_name')
            ->selectRaw('COUNT(student_assignments.id) as student_assignments')
            ->join('study_plan_dates', function ($q) use ($activeStudyDate) {
                $q
                    ->on('study_plan_dates.id', 'study_plan_date_teachers.study_plan_date_id')
                    ->where('study_plan_dates.study_date_id', $activeStudyDate->id);
            })
            ->join('course_students', function ($q) {
                $q
                    ->on('course_students.course_id', 'study_plan_dates.course_id')
                    ->on('course_students.semester_id', 'study_plan_dates.semester_id')
                    ->where('course_students.course_id', $this->course_id);
            })
            ->join('students', function ($q) {
                $q
                    ->on('students.id', 'course_students.student_id')
                    ->on('students.department_id', 'study_plan_dates.department_id')
                    ->where('students.name1_en', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.name2_en', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.name3_en', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.name4_en', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.name1', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.name2', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.name3', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.name4', 'like', '%' . $this->studentSearch . '%')
                    ->orWhere('students.university_id', 'like', '%' . $this->studentSearch . '%');
            })
            ->join('lectures', 'lectures.course_id', 'course_students.course_id')
            ->join('assignments', 'assignments.lecture_id', 'lectures.id')
            ->join('student_assignments', function ($q) {
                $q
                    ->on('student_assignments.assignment_id', 'assignments.id')
                    ->on('student_assignments.student_id', 'students.id');
            })
            ->where('study_plan_date_teachers.teacher_id', $teacher->id)
            ->where('study_plan_dates.course_id', $this->course_id)
            ->get()
            ->whereNotNull('university_id')
            ;
            dd($students);
        $this->students = collect($students);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Dashboard/Student/m2.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Product;

class Wizard extends Component
{
    public $currentStep = 1;
    public $name, $amount, $description, $status = 1, $stock;
    public $successMessage = '';

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function render()
    {
        return view('livewire.wizard');
    }

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function firstStepSubmit()
    {
        $validatedData = $this->validate([
            'name' => 'required|unique:products',
            'amount' => 'required|numeric',
            'description' => 'required',
        ]);

        $this->currentStep = 2;
    }

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function secondStepSubmit()
    {
        $validatedData = $this->validate([
            'stock' => 'required',
            'status' => 'required',
        ]);

        $this->currentStep = 3;
    }

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function submitForm()
    {
        Product::create([
            'name' => $this->name,
            'amount' => $this->amount,
            'description' => $this->description,
            'stock' => $this->stock,
            'status' => $this->status,
        ]);

        $this->successMessage = 'Product Created Successfully.';

        $this->clearForm();

        $this->currentStep = 1;
    }

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function back($step)
    {
        $this->currentStep = $step;
    }

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function clearForm()
    {
        $this->name = '';
        $this->amount = '';
        $this->description = '';
        $this->stock = '';
        $this->status = 1;
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/VueElearning/Teacher/ElearningTeacherController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\VueElearning\Teacher;

use App\Http\Controllers\Controller;
use App\Models\Elearning\Assignment;
use App\Models\Elearning\Attachment;
use App\Models\Elearning\Lecture;
use App\Models\Student;
use App\Services\AttachmentService;
use Illuminate\Auth\Events\Validated;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Inertia\Inertia;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use PhpOffice\PhpSpreadsheet\Worksheet\Validations;

class ElearningTeacherController extends Controller
{
    //
    public function index()  {
        // dd(auth()->check());
        if(!auth()->check()) {
            return redirect()->route('dashboard.admin.login.index');
        }
        // $teacher = auth('admin')->user()->teacher->load('studyPlanDateTeacher.studyPlanDate.course.assignments.studentAssignments.student');
        $teacher = auth('admin')->user()->teacher->load('studyPlanDateTeacher.studyPlanDate.course.lectures.assignment',
         'studyPlanDateTeacher.studyPlanDate.course.lectures.attachments'
        );

        return Inertia::render('Teacher/Home' , [
            'teacher' => $teacher,
        ]);
    }

    public function createLecture(Request $request) {

        $validator = Validator::make($request->all(), [
            'title' => ['required', 'max:255', 'string'],
            'type' => ['required', Rule::in(array_keys(Lecture::LECTURE_TYPES))],
            'live_link' => [ Rule::requiredIf($request->type == Lecture::TYPE_LIVE_LECTURE), ],
            'full_mark' => [Rule::excludeIf(fn() => in_array($request->type , [Lecture::TYPE_LECTURE , Lecture::TYPE_LIVE_LECTURE])),  'numeric' ],
            'description' => ['nullable', 'max:255'],
            'teaching_datetime' => ['required', 'after:' . now()],
            'course_id' => ['required' , 'exists:courses,id']
            //'name' => 'required|unique:users,name|exists:students,university_id',
        ], [
        ]);

        if ($validator->fails()) {
             return response()->json(['errors'=>$validator->errors()], 422);
        }

        return DB::transaction(function () use($request) {
            //Error in validation
            $lecture = Lecture::create([
                'title' => $request->title,
                'description' => $request->description,
                'type' => $request->type,
                'teaching_datetime' => $request->teaching_datetime,
                'full_mark' => $request->full_mark,
                'live_link' => $request->live_link,
                'course_id' => $request->course_id
            ]);

            // if (in_array($this->lecture['type'], [Lecture::TYPE_OFFLINE_TEST, Lecture::TYPE_ONLINE_TEST])) {
            //     StudentTestsHandlerAction::handle($this->lecture, $this->studyPlanDate);
            // }
            return response($lecture->toArray() , 201);
        });
    }

    function updateLecture(Request $request , Lecture $lecture) {

        $validator = Validator::make($request->all(), [
            'title' => ['required', 'max:255', 'string'],
            'type' => ['required', Rule::in(array_keys(Lecture::LECTURE_TYPES))],
            'live_link' => [
                Rule::requiredIf($request->type == Lecture::TYPE_LIVE_LECTURE),
            ],
            'full_mark' => [Rule::excludeIf(fn() => in_array($request->type , [Lecture::TYPE_LECTURE , Lecture::TYPE_LIVE_LECTURE])),  'numeric' ],
            'description' => ['nullable', 'max:255'],
            'teaching_datetime' => ['required'],
            'course_id' => ['required' , 'exists:courses,id']
        ], [
        ]);

        if ($validator->fails()) {
             return response()->json(['errors'=>$validator->errors()], 422);
        }

        return DB::transaction(function () use($validator , $lecture) {
            //Error in validation
            $lecture->update($validator->validated());

            // if (in_array($this->lecture['type'], [Lecture::TYPE_OFFLINE_TEST, Lecture::TYPE_ONLINE_TEST])) {
            //     StudentTestsHandlerAction::handle($this->lecture, $this->studyPlanDate);
            // }

            return response($lecture->toArray() , 201);
        });
    }

    function deleteLecture(Lecture $lecture) {
        // $lecture->delete();

        return response('');
    }

    function uploadVideo(Request $request , Lecture $lecture) {

        // dd($request->all());
        //
        $request->validate([
            'video' => 'required|file|mimes:mp4',
            'lecture_id' => 'required|exists:lectures,id'
        ]);

        return DB::transaction(function () use($request , $lecture) {
            $filename = Str::uuid()  . '.' . $request->video->getClientOriginalExtension();


            $path = Storage::disk('public')->put('vue-elearning/videos', $request->video);

            $duration = AttachmentService::getVideoDuration($path);
            $thumbnail =  AttachmentService::getVideoThumbnail($path);

            Attachment::create([
                'type' => Attachment::ATTACHMENT_TYPE_VIDEO,
                'lecture_id' => $lecture->id,
                'title' => $request->video->getClientOriginalName(),
                'path' => $path,
                'thumbnail' => $thumbnail,
                'duration' => $duration,
            ]);

            session()->flash('success', __('site.updated_successfully'));
        });
    }

    function uploadAttachment(Request $request) {
        dd($request->all());
        $request->validate([
            'attachment' => 'required|file',
            'lecture_id' => 'required|exists:lectures,id'
        ]);

        return DB::transaction(function () use($request){

            $path = Storage::disk('public')->put('vue-elearning/attachments', $request->attachment);

            $attachment = Attachment::create([
                'type' => Attachment::ATTACHMENT_TYPE_FILE,
                'lecture_id' => $request->lecture_id,
                'title' => $request->attachment->getClientOriginalName(),
                'path' => $path,
            ]);

            session()->flash('success', __('site.updated_successfully'));
        });
    }

    function deleteAttachment(Request $request  , Lecture $lecture , Attachment $attachment) {

        return DB::transaction(function () use($request , $attachment){
                // $attachment->delete();
        });
    }

    function downloadAttachment(Request $request  , Lecture $lecture , Attachment $attachment) {
        return response()->download($attachment->path);
        Storage::download('public/a.txt' , 'sdfjdkfj.txt');
        // Storage::download('public/storage/' . $attachment->getRawOriginal('path'));
    }


    public function saveAssignment(Request $request , Lecture $lecture) {
        $request->validate([
            'title' => ['required', 'max:255'],
            'description' => ['nullable'],
            'full_mark' => ['required', 'integer'],
            'deadline' => ['required'],
        ]);
        Assignment::updateOrCreate(
            [
                'lecture_id' => $lecture->id,
            ],
            [
            'title' => $request->title,
            'description' => $request->description,
            'full_mark' => $request->full_mark,
            'deadline' => $request->deadline,
        ]);
    }

    public function getAttendance(Request $request , Lecture $lecture) {
        $students = Student::query()
        ->select('id','university_id','name1_en','name2_en','name3_en','name4_en')
        ->with(['courses' => function($q) use($request) {
            $q->where('course_id',$request->course_id)
            ->where('semester_id',$request->semester_id)
            ;

        }])
        ->has('registration')
        ->where('department_id',$request->department_id)
        ->get();

        // $lecture = Lecture::with('lectureAttendances')->find($request->lecture_id);

    $absentStudents = $lecture->lectureAttendances()->get();

    return response([
        'students' => $students,
        'absentStudents' => $absentStudents,
    ]);
    }

    function setAttendance(Request $request , Lecture $lecture) {
        if ($request->is_absent) {
            $lecture->lectureAttendances()->updateOrCreate([
                'student_id' => $request->student_id,
            ]);
        } else {
            $lecture->lectureAttendances()->where('student_id', $request->student_id)->delete();
        }

        return response('');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/TypeDiscountController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\TypeDiscountRequest;
use App\Models\TypeDiscount;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;

class TypeDiscountController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-type_discounts'])->only('index','data');
        $this->middleware(['permission:create-type_discounts'])->only('create','store');
        $this->middleware(['permission:update-type_discounts'])->only('update','edit');
        $this->middleware(['permission:delete-type_discounts'])->only('destroy','bulkDelete');

    }// end of __construct

    public function index()
    {
        return view('dashboard.admin.type_discounts.index');

    }// end of index

    public function data()
    {
        $typeDiscounts = TypeDiscount::query();

        return DataTables::of($typeDiscounts)
            ->addColumn('record_select', 'dashboard.admin.type_discounts.data_table.record_select')
            ->editColumn('created_at', function (TypeDiscount $typeDiscount) {
                return $typeDiscount->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.type_discounts.data_table.actions')
            ->rawColumns(['record_select', 'actions'])
            ->addIndexColumn()
            ->toJson();

    }// end of data

    public function create()
    {
        return view('dashboard.admin.type_discounts.create');

    }// end of create

    public function store(TypeDiscountRequest $request)
    {
        TypeDiscount::create($request->validated());

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.type_discounts.index');

    }// end of store

    public function show(TypeDiscount $typeDiscount)
    {
        return $typeDiscount;

    }// end of edit

    public function edit(TypeDiscount $typeDiscount)
    {
        return view('dashboard.admin.type_discounts.edit', compact('typeDiscount'));

    }// end of edit

    public function update(TypeDiscountRequest $request, TypeDiscount $typeDiscount)
    {
        $typeDiscount->update($request->validated());

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.type_discounts.index');

    }// end of update

    public function destroy(TypeDiscount $typeDiscount)
    {
        $typeDiscount->delete();
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.type_discounts.index');

    }// end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $typeDiscount = TypeDiscount::FindOrFail($recordId);
            $this->delete($typeDiscount);

        }//end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of bulkDelete

    private function delete(TypeDiscount $typeDiscount)
    {
        $typeDiscount->delete();

    }// end of delete

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/TeacherController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Models\Teacher;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Admin;
use App\Models\Department;
use App\Models\Student;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Yajra\DataTables\Facades\DataTables;

class TeacherController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('dashboard.admin.teachers.index');
    }

    public function data()
    {
        $teachers = Teacher::query()->with('department');

        return DataTables::of($teachers)
            ->addColumn('record_select', 'dashboard.admin.study_years.data_table.record_select')
            ->addColumn('department_name', function (Teacher $teacher) {
                return $teacher->department->name ?? 'لا يوجد';
            })
            ->editColumn('created_at', function (Teacher $teacher) {
                return $teacher->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.teachers.data_table.actions')
            ->rawColumns(['record_select', 'roles', 'actions'])
            ->addIndexColumn()
            ->toJson();
    } // end of data

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $departments = Department::all('id', 'name');

        return view('dashboard.admin.teachers.create', compact('departments'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $data = $this->validate($request, [
            'name' => 'required|string|max:255',
            'username' => 'required|string|max:255|unique:admins,name',
            'department_id' => 'nullable|exists:departments,id',
            'phone' => 'nullable|unique:teachers,phone',
            'email' => 'nullable|unique:teachers,email',
            'password' => 'required|confirmed',
        ]);
        $admin = Admin::create(collect($data)
            ->except('phone', 'department_id' , 'name','username')
            ->put('name', $data['username'])
            ->put('password', Hash::make($data['password']))
            ->toArray());

        $admin->assignRole('teacher');

        Teacher::create(collect($data)
        ->except('password','username')
        ->put('admin_id', $admin->id)->toArray());


        session()->flash('success', __('site.added_successfully'));

        return view('dashboard.admin.teachers.index');
    }

    public function show(Teacher $teacher)
    {
        $teacher->load(['department', 'studyPlanDateTeacher.studyPlanDate' => fn ($q) => $q->with('course', 'department', 'semester')]);

        return view('dashboard.admin.teachers.show', compact('teacher'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Teacher  $teacher
     * @return \Illuminate\Http\Response
     */
    public function edit(Teacher $teacher)
    {
        $departments = Department::all('id', 'name');

        return view('dashboard.admin.teachers.edit', compact('teacher', 'departments'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Teacher  $teacher
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Teacher $teacher)
    {
        $data = $this->validate($request, [
            'name' => 'nullable|string|max:255',
            'username' => 'required|string|max:255|unique:admins,name,' . $teacher->admin->id,
            'department_id' => 'nullable|exists:departments,id',
            'phone' => 'nullable|unique:teachers,phone,' . $teacher->id,
            'email' => 'nullable|unique:teachers,email,' . $teacher->id,
            'password' => 'nullable|confirmed',
        ]);

        $teacher->update(collect($data)->except('password','username')->toArray());

        $teacher->admin()->update([
            'name' => $request->username,
            'email' => $request->email,
        ]);

        if ($request->password) {
            $teacher->admin()->update(['password' => Hash::make($request->password)]);
        }

        session()->flash('success', __('site.updated_successfully'));

        return redirect()->route('dashboard.admin.teachers.index');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Teacher  $teacher
     * @return \Illuminate\Http\Response
     */
    public function destroy(Teacher $teacher)
    {
        $teacher->delete();

        session()->flash('success', __('site.deleted_successfully'));

        return redirect()->route('dashboard.admin.teachers.index');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/StudyYearController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\StudyYearRequest;
use App\Models\StudyYear;
use App\Models\Department;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;

class StudyYearController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-study_years'])->only('index','data');
        $this->middleware(['permission:create-study_years'])->only('create','store');
        $this->middleware(['permission:update-study_years'])->only('update','edit');
        $this->middleware(['permission:delete-study_years'])->only('destroy','bulkDelete');
        
    }// end of __construct

    public function index()
    {
        return view('dashboard.admin.study_years.index');

    }// end of index

    public function data()
    {
        $studyYear = StudyYear::query();

        return DataTables::of($studyYear)
            ->addColumn('record_select', 'dashboard.admin.study_years.data_table.record_select')
            ->editColumn('created_at', function (StudyYear $studyYear) {
                return $studyYear->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.study_years.data_table.actions')
            ->rawColumns(['record_select', 'roles', 'actions'])
            ->addIndexColumn()
            ->toJson();

    }// end of data

    public function create()
    {
        return view('dashboard.admin.study_years.create');

    }// end of create

    public function store(StudyYearRequest $request)
    {
        $validated = $request->safe()->except(['departments']);

        $yearStudy = StudyYear::create($validated);

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.study_years.index');

    }// end of store

    public function show(studyYear $studyYear)
    {
        return $studyYear;

    }// end of edit

    public function edit(studyYear $studyYear)
    {
        return view('dashboard.admin.study_years.edit', compact('studyYear'));

    }// end of edit

    public function update(StudyYearRequest $request, StudyYear $studyYear)
    {
        $validated = $request->safe()->except(['departments']);

        $studyYear->update($validated);

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.study_years.index');

    }// end of update

    public function destroy(StudyYear $studyYear)
    {
        $this->delete($studyYear);
        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $studyYear = StudyYear::FindOrFail($recordId);
            $this->delete($studyYear);

        }//end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of bulkDelete

    private function delete(StudyYear $studyYear)
    {
        $studyYear->delete();

    }// end of delete

}//end of controller
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/StudyPlanDateController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Models\Course;
use App\Models\Semester;
use App\Models\StudyPlan;
use App\Models\Department;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Yajra\DataTables\Facades\DataTables;
use App\Http\Requests\UpdateStudyPlanRequest;

class StudyPlanDateController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $departments = Department::all();
        $semesters = Semester::all();
        $courses = Course::all();
        return view('dashboard.admin.study_plan_dates.index',compact('departments','semesters','courses'));
    }

    public function data()
    {
        $studyPlans = StudyPlan::query()
        ->whenDepartmentId(request()->department_id)
        ->whenSemesterId(request()->semester_id)
        ->whenCourseId(request()->course_id)
        ;

        return DataTables::of($studyPlans)
            ->editColumn('created_at', function (StudyPlan $studyPlan) {
                return $studyPlan->created_at->format('Y-m-d');
            })
            ->addColumn('department', function (StudyPlan $studyPlan) {
                return $studyPlan->department->name;
            })
            ->addColumn('semester', function (StudyPlan $studyPlan) {
                return $studyPlan->semester->name;
            })
            ->addColumn('course', function (StudyPlan $studyPlan) {
                return $studyPlan->course->name;
            })
            ->addColumn('actions', 'dashboard.admin.study_plans.data_table.actions')
            ->rawColumns(['actions'])
            ->addIndexColumn()
            ->toJson();

    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $departments = Department::all();
        $semesters = Semester::all();
        return view('dashboard.admin.study_plans.create',compact('departments','semesters'));
    }

    public function getDepartments() {
        return response(Department::all());
    }

    public function getSemesters() {
        return response(Semester::all());
    }


    public function getDepartmentCourses(Request $request) {
        $courses = Course::where('department_id',$request->id)->get();

        return response($courses);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\StoreStudyPlanRequest  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        foreach ($request->items as $item) {
            StudyPlan::updateOrCreate([
                'department_id' => $item['department'],
                'semester_id' => $item['semester'],
                'course_id' => $item['course']['id'],
            ]);
        }

        session()->flash('success', __('site.added_successfully'));
        return response('success');
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Http\Response
     */
    public function show(StudyPlan $studyPlan)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Http\Response
     */
    public function edit(StudyPlan $studyPlan)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\UpdateStudyPlanRequest  $request
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Http\Response
     */
    public function update(UpdateStudyPlanRequest $request, StudyPlan $studyPlan)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Http\Response
     */
    public function destroy(StudyPlan $studyPlan)
    {
        //
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/StudyPlanController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Models\Course;
use App\Models\Student;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyPlan;
use App\Models\StudyYear;
use App\Models\Department;
use Illuminate\Http\Request;
use App\Models\CourseStudent;
use App\Models\StudyPlanDate;
use App\Models\StudyPlanCourse;
use Yajra\DataTables\DataTables;
use App\Models\RegistrationCourse;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\StudyPlanExport;
use App\Http\Requests\StoreStudyPlanRequest;
use App\Http\Requests\UpdateStudyPlanRequest;
use App\Imports\StudyPlanImport;
use App\Services\RegistrationsCoursesService;
use Illuminate\Support\Facades\Hash;

class StudyPlanController extends Controller
{

    public function __construct()
    {
        $this->middleware(['permission:read-study_plans'])->only('index', 'data');
        $this->middleware(['permission:create-study_plans'])->only('create', 'store');
        $this->middleware(['permission:update-study_plans'])->only('update', 'edit');
        $this->middleware(['permission:delete-study_plans'])->only('destroy', 'bulkDelete');
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $departments = Department::all();
        $semesters = Semester::all();
        $courses = Course::all();
        return view('dashboard.admin.study_plans.index', compact('departments', 'semesters', 'courses'));
    }

    public function data()
    {
        $studyPlans = StudyPlan::query()
        ->select('*')
        ->selectRaw('COUNT(course_id) as courses_count')
            ->with('department', 'semester')
            ->whenDepartmentId(request()->department_id)
            ->whenSemesterId(request()->semester_id)
            ->groupBy('department_id','semester_id');


        return DataTables::of($studyPlans)
            ->editColumn('created_at', function (StudyPlan $studyPlan) {
                return $studyPlan->created_at->format('Y-m-d');
            })
            ->addColumn('department', function (StudyPlan $studyPlan) {
                return $studyPlan->department->name;
            })
            ->addColumn('semester', function (StudyPlan $studyPlan) {
                return $studyPlan->semester->name;
            })
            ->addColumn('actions', 'dashboard.admin.study_plans.data_table.actions')
            ->rawColumns(['actions'])
            ->addIndexColumn()
            ->toJson();
    }

    public function createViaExcel()
    {
        $departments = Department::all();
        $studyYears = StudyYear::all();

        return view('dashboard.admin.study_plans.import-excel', compact('departments', 'studyYears'));
    }

    public function storeViaExcel(Request $request)
    {
        $this->validate($request, [
            'department_id' => 'required|exists:departments,id',
            'excel' => 'required|mimes:xlsx',
            // 'insert_courses' => 'sometimes',
        ]);


        try {
            Excel::import(new StudyPlanImport($request->department_id), $request->excel);
        } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            dd($e);
            $errors = $e->failures();
            $messages = $errors[0]->errors();
            return back()->with('excel_error', $messages[0])->withInput();
        }
        catch (\Illuminate\Validation\ValidationException $errors) {
            return back()->withErrors($errors->errors())->withInput();
        }

        return back()->with('success', __('site.exported_successfully'));
    }

    public function exportEmptyExcelSample()
    {
        return  Excel::download(new StudyPlanExport, 'study_plan_sample.xlsx');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $departments = Department::all();
        $semesters = Semester::all();
        return view('dashboard.admin.study_plans.create', compact('departments', 'semesters'));
    }

    public function getDepartments()
    {
        return response(Department::all());
    }

    public function getSemesters()
    {
        return response(Semester::all());
    }


    public function getDepartmentCourses(Request $request)
    {
        $courses = Course::where('department_id', $request->id)->get();

        return response($courses);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\StoreStudyPlanRequest  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        return DB::transaction(function () use ($request) {

            $study_date = StudyDate::where('archived', 1)->first();

            foreach ($request->items as $course) {

                $studyPlan = StudyPlan::updateOrCreate([
                    'department_id' => $course['department'],
                    'semester_id' => $course['semester'],
                    'course_id' => $course['course']['id'],
                    //'study_date_id' => $study_date->id,
                ]);

                $this->syncStudents($studyPlan);
            }

            session()->flash('success', __('site.added_successfully'));
            return response('success');
        });
    }

    public function syncStudents(StudyPlan $studyPlan)
    {
        $semester = Semester::find($studyPlan->semester_id);

        $students = Student::select('id')
            ->where('department_id', $studyPlan->department_id)
            ->where('study_year_id', $studyPlan->semester->study_year_id)
            ->get();

        foreach ($students as $student) {
            CourseStudent::create([
                'student_id' => $student->id,
                'course_id' => $studyPlan->course_id,
                'semester_id' => $studyPlan->semester_id,
                'study_year_id' => $semester->study_year_id,
            ]);
        }
    }

    public function getStudyPlanCourses()
    {
        
        $studyPlans = StudyPlan::where('department_id',request()->department_id)
        ->where('semester_id',request()->semester_id)
        ->get();


        $courses = Course::all();


        return DataTables::of($courses)
            ->addColumn('is_selected', function ($course) use ($studyPlans) {
                return in_array($course->id, $studyPlans->pluck('course_id')->toArray());
            })
            ->addIndexColumn()
            ->toJson();
    }

    public function show()
    {
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Http\Response
     */
    public function edit(StudyPlan $studyPlan)
    {
        $studyPlan->load('department', 'semester');

        $courses = Course::all();


        return view('dashboard.admin.study_plans.edit', compact('studyPlan', 'courses'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\UpdateStudyPlanRequest  $request
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, StudyPlan $studyPlan)
    {
        StudyPlan::where('department_id',$request->department_id)
        ->where('semester_id',$request->semester_id)
        ->delete()
        ;

        foreach ($request->course_id as $course_id) {
            StudyPlan::create([
                'course_id' => $course_id,
                'department_id' => $request->department_id,
                'semester_id' => $request->semester_id,
            ]);

        }
        session()->flash('success', __('site.updated_successfully'));

        return response()->noContent();
    }

    public function editRegistrations(StudyPlan $studyPlan)
    {
        return view('dashboard.admin.active_study_plan.edit-registrations', compact('studyPlan'));
    }

    public function getStudyPlanRegistrations()
    {
        $studyPlan = StudyPlan::find(request()->id);

        // $activeStudyDate = StudyDate::where('archived',1)->first();

        $courseStudents =  CourseStudent::with('student:id,university_id,name1,name2,name3,name4')
            ->where('semester_id', $studyPlan->department_id)
            ->where('course_id', $studyPlan->course_id)
            // ->where('study_date_id', $activeStudyDate)
            ->get();

        return DataTables::of($courseStudents)
            ->addColumn('full_name', function (CourseStudent $courseStudent) {
                return $courseStudent->student->full_name;
            })
            ->addColumn('university_id', function (CourseStudent $courseStudent) {
                return $courseStudent->student->university_id;
            })
            ->addIndexColumn()
            ->toJson();
    }

    public function updateRegistrations(StudyPlanDate $studyPlanDate, Request $request)
    {
        return DB::transaction(function ()  use ($studyPlanDate, $request) {
            // dd();
            $studyPlanDate->registrationCourses()->delete();

            if ($request->registration_id) {

                foreach ($studyPlanDate->studyPlan->studyPlanCourses as $studyPlanCourse) {

                    foreach ($request->registration_id as $registration_id) {
                        RegistrationCourse::create([
                            'registration_id' => $registration_id,
                            'course_id' => $studyPlanCourse->course_id,
                            'study_plan_date_id' => $studyPlanDate->id,
                        ]);
                    }
                }
            }

            session()->flash('success', __('site.added_successfully'));
            return response('success');
        });
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\StudyPlan  $studyPlan
     * @return \Illuminate\Http\Response
     */
    public function destroy(StudyPlan $studyPlan)
    {
        $studyPlan->delete();

        // CourseStudent::where('course_id',$studyPlan->course_id)
        // ->where('department_id',$studyPlan->department_id)
        // ->delete()
        // ;

        session()->flash('success', __('site.deleted_successfully'));
        return back();
    }
}
     // if($request->is_general) {
        //     $generalStudyPlan = StudyPlan::where('is_general',true)->first();

        //     if(!$generalStudyPlan) {
        //         return response('يجب الغاء اعتماد الخطط  الدراسية العامة السابقة',422);
        //     }
        // }

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/StudyDateController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\StudyDateRequest;
use App\Models\Currency;
use App\Models\DepartmentPrice;
use App\Models\StudyDate;
use App\Models\Department;
use App\Models\Price;
use App\Models\StudyYear;
use App\Services\ExportStudentsService;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Yajra\DataTables\DataTables;

class StudyDateController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-study_dates'])->only('index', 'data');
        $this->middleware(['permission:create-study_dates'])->only('create', 'store');
        $this->middleware(['permission:update-study_dates'])->only('update', 'edit');
        $this->middleware(['permission:delete-study_dates'])->only('destroy', 'bulkDelete');
    } // end of __construct

    public function index()
    {
        return view('dashboard.admin.study_dates.index');
    } // end of index

    public function data()
    {
        $studyDate = StudyDate::query();

        return DataTables::of($studyDate)
            ->addColumn('record_select', 'dashboard.admin.study_dates.data_table.record_select')
            ->editColumn('created_at', function (StudyDate $studyDate) {
                return $studyDate->created_at->format('Y-m-d');
            })
            ->editColumn('archived', function (StudyDate $studyDate) {
                return view('dashboard.admin.study_dates.data_table._archived', compact('studyDate'));
            })
            ->addColumn('actions', 'dashboard.admin.study_dates.data_table.actions')
            ->rawColumns(['record_select', 'roles', 'actions'])
            ->addIndexColumn()
            ->toJson();
    } // end of data

    public function create()
    {
        $departments = Department::all();

        $currencies = Currency::all();

        return view('dashboard.admin.study_dates.create', compact('departments' , 'currencies'));
    } // end of create

    public function store(StudyDateRequest $request)
    {
        return DB::transaction(function () use ($request) {
            // dd($request->all());
            if ($request->archived && !$this->isPreviousStudyDateArchived()) {
                // return back()->withErrors(['archived' => __('admin.study_dates.previous_study_date_not_archived')])->withInput();
            }

            $validated = $request->safe()->except(['usd' , 'tuition_fees', 'sdg', 'batch', 'export_students']);

            $previousStudyDate = StudyDate::getActiveStudyDate();


            $studyDate = StudyDate::create($validated);

            if ($request->archived = 1) {

                $this->archived($studyDate);

                $studyDate->update(['archived' => true]);

                (new ActiveStudyPlanController())->establishStudyPlan();


            } //end of if


            $departments = Department::all();

            foreach ($departments as $department) {

                DepartmentPrice::create([
                    'department_id' => $department->id,
                    'study_date_id' => $studyDate->id,
                    'batch'         => $department->batch + 1,
                    'tuition_fees' => $request->tuition_fees[$department->id]
                    // 'batch'         => $request->batch[$department->id],
                ]);
            } //end of for each

            if ($request->export_students) {
                (new ExportStudentsService())->export($previousStudyDate);
            }

            session()->flash('success', __('site.added_successfully'));
            return redirect()->route('dashboard.admin.study_dates.index');
        });
    } // end of store

    public function edit(StudyDate $studyDate)
    {
        $departments = Department::with(['studyDatePrices' => fn($q) => $q->whereBelongsTo($studyDate)])->get();
        // dd($departments->first()->studyDatePrices->tuition_fees);

        $currencies = Currency::all();

        return view('dashboard.admin.study_dates.edit', compact('studyDate', 'departments' , 'currencies'));
    } // end of edit

    public function update(StudyDateRequest $request, StudyDate $studyDate)
    {
        // dd($request->validated());
        if ($request->archived && !$this->isPreviousStudyDateArchived($studyDate->id)) {
            return back()->withErrors(['archived' => __('admin.study_dates.previous_study_date_not_archived')])->withInput();
        }

        $validated = $request->safe()->except(['tuition_fees','usd', 'sdg', 'batch','archived']);

        // $validated['register_fees'] = json_encode($validated['register_fees']);

        $studyDate->update($validated);

        // if ($request->archived = 1) {

        //     $this->archived($studyDate);
        // } //end of if

        $departments = Department::all();

        foreach ($departments as $index => $department) {

            DepartmentPrice::UpdateOrCreate([
                'department_id' => $department->id,
                'study_date_id' => $studyDate->id,
            ], [
                'tuition_fees' => $request->tuition_fees[$department->id]
            ]);
        } //end of for each

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.study_dates.index');
    } // end of update

    public function destroy(StudyDate $studyDate)
    {
        $studyDate->delete();
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.study_dates.index');
    } // end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $studyDate = StudyYear::FindOrFail($recordId);
            $this->delete($studyDate);
        } //end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));
    } // end of bulkDelete

    private function delete(StudyDate $studyDate)
    {
        $studyDate->delete();

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));
    } // end of delete

    private function archived(StudyDate $studyDate)
    {
        StudyDate::where('id', '!=', $studyDate->id)?->update(['archived' => 0]);
    } //end of archived


    public function isPreviousStudyDateArchived($id = null)
    {
        if ($id) {

            $studyDate = StudyDate::where('archived', 1)->whereId('!=', $id)->first();
        } else {
            $studyDate = StudyDate::where('archived', 1)->first();
        }

        return !$studyDate?->exists();
    }
}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/StudentController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Exports\StudentExport;
use helper;
use App\Models\Payment;
use App\Models\Student;
use App\Helpers\helpers;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use Illuminate\Support\Str;
use App\Models\PaymentOrder;
use App\Models\Registration;
use Illuminate\Http\Request;
use App\Models\AdmissionType;
use Yajra\DataTables\DataTables;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\StudentRequest;
use App\Http\Resources\StudentCourses;
use App\Imports\StudentImport;
use App\Models\Batch;
use App\Models\CourseStudent;
use App\Models\RegistrationCourse;
use App\Models\Semester;
use App\Models\StudyPlan;
use App\Models\StudyPlanDate;
use App\Models\StudyplanStudent;
use Maatwebsite\Excel\Facades\Excel;

class StudentController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-students'])->only('index', 'data');
        $this->middleware(['permission:create-students'])->only('create', 'store');
        $this->middleware(['permission:update-students'])->only('update', 'edit');
        $this->middleware(['permission:delete-students'])->only('destroy', 'bulkDelete');
    } // end of __construct

    public function index()
    {
        return view('dashboard.admin.students.index');
    } // end of index

    public function table()
    {
        return view('dashboard.admin.students.table');
    } //end of table

    public function data()
    {
        $students = Student::query()
            // ->withRegistration()
            ->withCount('registration')
            ->with('batch')
            ->having('registration_count', '>', 0)
            ->get();

        return DataTables::of($students)
            ->addColumn('record_select', 'dashboard.admin.students.data_table.record_select')
            ->editColumn('created_at', function (Student $student) {
                return $student->created_at->format('Y-m-d');
            })
            ->addColumn('department', function (Student $student) {
                return $student->department->name;
            })
            ->addColumn('study_years', function (Student $student) {
                return $student->studyYear->name;
            })
            ->addColumn('study_dates', function (Student $student) {
                return $student->studyDate->name;
            })
            ->addColumn('actions', 'dashboard.admin.students.data_table.actions')
            ->rawColumns(['record_select', 'roles', 'actions'])
            ->addIndexColumn()
            ->toJson();
    } // end of data

    public function create()
    {
        $departments    = Department::all();
        $studyYears     = StudyYear::all();
        $studydates     = StudyDate::all();
        $admissionTypes = AdmissionType::all();
        $nationalities = Student::NATIONALITIES;
        $religions = Student::RELIGIONS;
        $certificate_types = Student::CERTIFICATE_TYPES;
        $batches = Batch::all();

        return view('dashboard.admin.students.create', compact('departments', 'studyYears', 'studydates', 'admissionTypes', 'nationalities', 'religions', 'certificate_types', 'batches'));
    } // end of create

    public function store(StudentRequest $request)
    {
        return DB::transaction(function () use ($request) {

            $validated = $request->safe()->except(['status', 'register_fees', 'tuition_fees', 'payment_status_id', 'photo']);

            $student = Student::create($validated);


            if ($request->hasFile('photo')) {
                $student->addMediaFromRequest('photo')->usingName(Str::uuid())->toMediaCollection('student_photo');
            }

            $validatedRegister = $request->safe()->only(['study_date_id', 'register_fees', 'tuition_fees', 'currency', 'study_year_id']);

            $validatedRegister['student_id'] = $student->id;

            $registration = Registration::create($validatedRegister);

            $registration->createRegistrationPaymentOrder();


            $this->syncCourses($student);

            session()->flash('success', __('site.added_successfully'));
            return redirect()->route('dashboard.admin.students.index');
        });
    } // end of store

    public function syncCourses(Student $student)
    {
        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $courses = StudyPlanDate::where('department_id', $student->department_id)
            ->whereIn('semester_id', Semester::select('id')->where('study_year_id', $student->study_year_id)->get()->pluck('id')->toArray())
            ->where('study_date_id',$activeStudyDate->id)
            ->get();

            foreach($courses as $course) {
                CourseStudent::updateOrCreate([
                    'student_id' => $student->id,
                    'course_id' => $course->course_id,
                    'semester_id' => $course->semester_id,
                    'study_year_id' => $student->study_year_id,
                ]);

                // StudyplanStudent::create([
                //     'student_id' =>  $student->id,
                //     'study_plan_date_id' =>  $student->id,
                // ]);
            }
    }

    public function show(Student $student)
    {

        $departments    = Department::all();
        $studyYears     = StudyYear::all();
        $studydates     = StudyDate::all();
        $admissionTypes = AdmissionType::all();
        $nationalities = Student::NATIONALITIES;
        $religions = Student::RELIGIONS;
        // $registrationCourses = $student->registration->registrationCourses->load('course');
        // $studyPlanDates = DB::table('registration_courses')
        //     ->select('semesters.name as semester_name', 'courses.name_en as course_name', 'courses.code', 'courses.hours')
        //     ->join('study_plan_dates', 'study_plan_dates.id', 'registration_courses.study_plan_date_id')
        //     ->join('semesters', 'semesters.id', 'study_plan_dates.semester_id')
        //     ->join('courses', 'registration_courses.course_id', 'courses.id')
        //     ->where('registration_id', $student->registration->id)
        //     ->get()
        //     ->groupBy('semester_name');
        // $courses = DB::table('course_students')
        // ->select('semesters.name as semester_name','courses.name_en as course_name','courses.code','courses.hours')
        // ->join('semesters','semesters.id','course_students.semester_id')
        // ->join('courses','courses.id','course_students.course_id')
        // ->where('course_students.study_year_id',$student->study_year_id)
        // ->where('course_students.student_id',$student->id)
        // ->get()
        // ->groupBy('semester_name')
        // ;

        // $degrees = DB::table('course_students')
        // ->select('courses.name_en as course_name','course_student_degrees.degree_code','course_student_degrees.is_pass','semesters.name as semester_name')
        // ->join('course_student_degrees','course_student_degrees.id','course_students.course_student_degree_id')
        // ->join('courses','courses.id','course_students.course_id')
        // ->join('semesters','semesters.id','course_students.semester_id')
        // ->where('course_students.student_id',$student->id)
        // ->where('course_students.study_year_id',$student->study_year_id)
        // ->get()
        // ->groupBy('semester_name')
        // ;

        return view('dashboard.admin.students.show', compact('student'));
        // return view('dashboard.admin.students.show', compact('student', 'departments', 'studyYears', 'studydates', 'admissionTypes', 'nationalities', 'religions', 'courses','degrees'));
    } //end of show

    public function edit(Student $student)
    {
        $departments    = Department::all();
        $studyYears     = StudyYear::all();
        $studydates     = StudyDate::all();
        $admissionTypes = AdmissionType::all();
        $nationalities = Student::NATIONALITIES;
        $religions = Student::RELIGIONS;
        $certificate_types = Student::CERTIFICATE_TYPES;
        $batches = Batch::all();

        return view('dashboard.admin.students.edit', compact('student', 'departments', 'studyYears', 'studydates', 'admissionTypes', 'nationalities', 'religions', 'certificate_types', 'batches'));
    } // end of edit

    public function update(studentRequest $request, Student $student)
    {
        $validated = $request->safe()->except(['status', 'register_fees', 'tuition_fees', 'payment_status_id', 'photo']);

        $student->update($validated);

        if ($request->hasFile('photo')) {
            $student->getFirstMedia('student_photo')?->delete();
            $student->addMediaFromRequest('photo')->usingName(Str::uuid())->toMediaCollection('student_photo');
        }

        $this->syncCourses($student);

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.students.index');
    } // end of update

    public function destroy(Student $student)
    {
        $this->delete($student);

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));
    } // end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $student = Student::FindOrFail($recordId);
            $this->delete($student);
        } //end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));
    } // end of bulkDelete

    private function delete(Student $student)
    {

        $student->payments()->delete();
        $student->PaymentArchived()->delete();
        $student->delete();

    } // end of delete

    public function ShowStudentPayment(Student $student)
    {
        return view('dashboard.admin.students.student_payment', compact('student'));
    } //end of fun

    public function getDepartmentYears(Department $department)
    {
        $studyYears = $department->studyYears->toArray();

        return response($studyYears);
    } //end of fun

    public function createViaExcel()
    {
        return view('dashboard.admin.students.import-excel' );
    }

    public function storeViaExcel(Request $request)
    {
        $this->validate($request, [
            'excel' => 'required|file|mimes:xlsx',
            'department_id' => 'required',
        ]);

        try {
            // Excel::import(new StudentImport($request->department_id), $request->excel);
        } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            $errors = $e->failures();
            $messages = $errors[0]->errors();
            return back()->with('excel_error', $messages[0])->withInput();
        }

        return back()->with('success', __('site.exported_successfully'));
    }

    public function exportEmptyExcelSample()
    {
        return Excel::download(new StudentExport, 'student_sample.xlsx');
    }

    public function archiveIndex() {
        return view('dashboard.admin.students.archive.index');
    }

    public function archiveShow(Student $student) {
        return view('dashboard.admin.students.archive.show' , compact('student'));
    }
}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/SettingController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class SettingController extends Controller
{
    public function mainPage()
    {
        $coleage = College::first();

        return view('dashboard.admin.settings.main', compact('coleage'));

    }//end of fun

    public function store(Request $request)
    {

    }//end of fun

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/SemesterController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreSemesterRequest;
use App\Http\Requests\UpdateSemesterRequest;
use App\Models\Semester;

class SemesterController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\StoreSemesterRequest  $request
     * @return \Illuminate\Http\Response
     */
    public function store(StoreSemesterRequest $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Semester  $semester
     * @return \Illuminate\Http\Response
     */
    public function show(Semester $semester)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Semester  $semester
     * @return \Illuminate\Http\Response
     */
    public function edit(Semester $semester)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\UpdateSemesterRequest  $request
     * @param  \App\Models\Semester  $semester
     * @return \Illuminate\Http\Response
     */
    public function update(UpdateSemesterRequest $request, Semester $semester)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Semester  $semester
     * @return \Illuminate\Http\Response
     */
    public function destroy(Semester $semester)
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/RolController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Models\Rol;
use Yajra\DataTables\DataTables;
// use App\Models\Rol;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Role;
use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\RolRequest;

class RolController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-roles'])->only('index', 'data');
        $this->middleware(['permission:create-roles'])->only('create', 'store');
        $this->middleware(['permission:update-roles'])->only('update', 'edit');
        $this->middleware(['permission:delete-roles'])->only('destroy', 'bulkDelete');
    } // end of __construct

    public function index()
    {
        return view('dashboard.admin.roles.index');
    } // end of index

    public function data()
    {
        $roles = Rol::query()->whereNotIn('name', ['super_admin']);

        return DataTables::of($roles)
            ->addColumn('record_select', 'dashboard.admin.roles.data_table.record_select')
            ->editColumn('created_at', function (Rol $role) {
                return $role->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.roles.data_table.actions')
            ->rawColumns(['record_select', 'roles', 'actions'])
            ->addIndexColumn()
            ->toJson();
    } // end of data

    public function create()
    {
        return view('dashboard.admin.roles.create');
    } // end of create

    public function store(RolRequest $request)
    {
        $validated = $request->safe()->except(['permissions']);
        $roles     = Role::create($validated);
        $roles->syncPermissions($request->permissions);

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.roles.index');
    } // end of store

    public function show(Rol $role)
    {
        return $role;
    } // end of edit

    public function edit(Rol $role)
    {

        //    dd($role->permissions->pluck('name'));
        return view('dashboard.admin.roles.edit', compact('role'));
    } // end of edit

    public function update(RolRequest $request, Role $role)
    {

        $validated = $request->safe()->except(['permissions']);

        $role->update($validated);

        $role->syncPermissions($request->permissions);

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.roles.index');
    } // end of update

    public function destroy(Rol $role)
    {
        $role->delete();
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.roles.index');
    } // end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $role = Rol::FindOrFail($recordId);
            $this->delete($role);
        } //end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));
    } // end of bulkDelete

    private function delete(Rol $role)
    {
        $role->delete();
    } // end of delete

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/ResultStatisticsController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Enums\RegistrationStatus;
use App\Models\StudyDate;
use App\Models\Registration;
use Illuminate\Http\Request;
use App\Models\StudentStudyYear;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;
use App\Http\Controllers\Controller;
use App\Models\StudentResult;

class ResultStatisticsController extends Controller
{
    public function getGeneralStatistics(Request $request)
    {
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $studyPlanDate = DB::table('study_plan_dates')
            ->select('study_plan_dates.id')
            ->selectRaw('COUNT(*) as courses_count')
            ->where('study_date_id', $request->study_date_id)
            ->where('department_id', $request->department_id)
            ->whereIn('semester_id', [1, 2])
            ->first();

        $disAttendedStudents = DB::table('course_students')
            ->selectRaw('COUNT(course_students.student_id) as students')
            ->join('course_student_degrees', function ($q) use ($request) {
                $q
                    ->on('course_student_degrees.student_id', 'course_students.student_id')
                    ->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->where('study_date_id', $request->study_date_id)
                    ->where('course_student_degrees.is_first_exam', true)
                    ->whereIn('course_student_degrees.attendance_status', [CourseStudentDegree::STATUS_EXCUSED_ABSENCE, CourseStudentDegree::STATUS_ABSENCE, CourseStudentDegree::STATUS_FREEZEED]);
            })
            ->groupBy('course_students.student_id')
            ->having('students', $studyPlanDate->courses_count)
            ->get();

        $registeredStudents = DB::table('students')
            ->selectRaw('COUNT(CASE WHEN registrations.status in (? ,?) then 1 end) as registered' , [RegistrationStatus::STATUS_REGISTERED , RegistrationStatus::STATUS_UNREGISTERED])
            ->selectRaw('COUNT(CASE WHEN registrations.status = 4 then 1 end) as freezed' , [RegistrationStatus::STATUS_FREEZED])
            ->join('registrations', function ($q) use ($request) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $request->study_date_id);
            })
            ->where('students.department_id', $request->department_id)
            ->first();

        $totalStudents = DB::table('student_results')
            ->selectRaw('COUNT(*) as students')
            ->selectRaw('COUNT(CASE WHEN status = ? THEN 1 END) as succeeded_students', [StudentResult::STATUS_SUCCEEDED])
            ->selectRaw('COUNT(CASE WHEN status = ? THEN 1 END ) as dismissed_students', [StudentResult::STATUS_DISMISSED])
            ->selectRaw('COUNT(CASE WHEN degree_code = "A+" THEN 1 END ) as a_plus_students')
            ->selectRaw('COUNT(CASE WHEN degree_code = "A" THEN 1 END ) as a_students')
            ->selectRaw('COUNT(CASE WHEN degree_code = "B+" THEN 1 END ) as b_plus_students')
            ->selectRaw('COUNT(CASE WHEN degree_code = "B "THEN 1 END ) as b_students')
            ->selectRaw('COUNT(CASE WHEN degree_code = "C "THEN 1 END ) as c_students')
            ->selectRaw('COUNT(CASE WHEN degree_code = "D" THEN 1 END ) as d_students')
            ->selectRaw('COUNT(CASE WHEN degree_code = "F" THEN 1 END ) as f_students')
            ->where('study_year_id', $request->study_year_id)
            ->where('department_id', $request->department_id)
            ->where('study_date_id', $request->study_date_id)
            ->where('is_first_exam', true)
            ->first();

        $attendedStudents = $totalStudents->students - $disAttendedStudents->count();

        return [
            'totalStudents' => $totalStudents->students,
            'attendedStudents' => $attendedStudents,
            'registeredStuednts' => $registeredStudents->registered,
            'freezedStuednts' => $registeredStudents->freezed,
            'dismissedStudents' => $totalStudents->dismissed_students,
            'succeedPercentage' => $totalStudents->succeeded_students / ($attendedStudents > 0 ? $attendedStudents : 1) * 100,
            'degrees' => $totalStudents,
        ];
        /**
         * Get all students
         * attended = All students - disattended
         * registered and freezed = registrations
         * dismissed = from result status
         */
    }

    public function getCoursesStatistics(Request $request)
    {
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $degrees = DB::table('course_student_degrees')
            ->select(
                'courses.name',
            )
            ->selectRaw('COUNT(*) as total_students')
            ->selectRaw('COUNT(CASE WHEN attendance_status in (?,?) THEN 1 END) as attended_students', [CourseStudentDegree::STATUS_ATTENDED, CourseStudentDegree::STATUS_CHEATED])
            ->selectRaw('COUNT(CASE WHEN attendance_status in (?,?) THEN 1 END) as disattended_students', [CourseStudentDegree::STATUS_EXCUSED_ABSENCE, CourseStudentDegree::STATUS_ABSENCE])
            ->selectRaw('COUNT(CASE WHEN is_pass = true THEN 1 END) as succeed_students')
            ->selectRaw( 'COUNT(CASE WHEN is_pass = true THEN 1 END) * 100 / (COUNT(CASE WHEN attendance_status in (?,?) THEN 1 END)) as succeed_percentage',[CourseStudentDegree::STATUS_ATTENDED, CourseStudentDegree::STATUS_CHEATED])
            ->selectRaw('COUNT(CASE WHEN attendance_status in (?,?) THEN 1 END) - COUNT(CASE WHEN is_pass = true THEN 1 END) as failed_students',[CourseStudentDegree::STATUS_ATTENDED, CourseStudentDegree::STATUS_CHEATED])
            ->selectRaw('(COUNT(CASE WHEN attendance_status in (?,?) THEN 1 END) - COUNT(CASE WHEN is_pass = true THEN 1 END)) * 100 / COUNT(CASE WHEN attendance_status in (?,?) THEN 1 END) as failed_percentage', [CourseStudentDegree::STATUS_ATTENDED, CourseStudentDegree::STATUS_CHEATED,CourseStudentDegree::STATUS_ATTENDED, CourseStudentDegree::STATUS_CHEATED])
            ->selectRaw('AVG(CASE WHEN attendance_status in (?,?) THEN theory_degree + practical_degree END) as degree_avg', [CourseStudentDegree::STATUS_ATTENDED, CourseStudentDegree::STATUS_CHEATED])
            ->join('courses', 'courses.id', 'course_student_degrees.course_id')
            ->join('student_results', function ($q) use ($request) {
                $q
                    ->on('student_results.student_id', 'course_student_degrees.student_id')
                    ->where('student_results.study_date_id', $request->study_date_id)
                    ->where('student_results.department_id', $request->department_id);
            })
            ->groupBy('name')
            ->get();

        return $degrees;

        /**
         * Succeede students = where is pass is true
         * failed students = attended students - succeeded students
         */
    }

    public function statistics(Request $request)
    {
        $generalStatistics = $this->getGeneralStatistics($request);
        $coursesStatistics = $this->getcoursesStatistics($request);

        return response([
            'generalStatistics' => view('dashboard.admin.results._include.statistics.percentage', compact('generalStatistics'))->render(),
            'coursesStatistics' => view('dashboard.admin.results._include.statistics.courses', compact('coursesStatistics'))->render(),
        ]);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/ResultDashboardController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;
use App\Http\Controllers\Controller;

class ResultDashboardController extends Controller
{
    public function index()
    {
        $studyDates = StudyDate::all('id', 'name');
        $departments = Department::all('id', 'name');
        $studyYears = StudyYear::all('id', 'name');
        $rounds = [
            true => 'الدور الأول',
            false => 'الدور الثاني',
        ];

        $activeStudyDate = StudyDate::getActiveStudyDate();

        return view('dashboard.admin.results.dashboard', compact('studyDates', 'departments', 'studyYears', 'rounds'));
    }

    public function data(Request $request)
    {
        $students = $this->topCgpaStudents($request);
        $cgpaStatistics = $this->cgpaStatistics($request);
        $coursesChart = $this->coursesChart($request);

        return [
            'topCgpaStudents' => view('dashboard.admin.results._include.statistics.top-students-cgpa',compact('students'))->render(),
            'cgpaStatistics' => $cgpaStatistics,
            'coursesChart' => $coursesChart,
        ];
    }
    public function coursesChart(Request $request)
    {

        return DB::table('course_student_degrees')
            ->select('courses.name')
            ->selectRaw('COUNT(CASE WHEN is_pass = true THEN 1 END) * 100 / (COUNT(CASE WHEN attendance_status in (?,?) THEN 1 END)) as succeed_percentage', [CourseStudentDegree::STATUS_ATTENDED, CourseStudentDegree::STATUS_CHEATED])
            ->join('courses', 'courses.id', 'course_student_degrees.course_id')
            ->join('student_results', function ($q) use ($request) {
                $q
                    ->on('student_results.student_id', 'course_student_degrees.student_id')
                    ->where('student_results.department_id', $request->department_id)
                    ->where('student_results.study_year_id', $request->study_year_id)
                    ->where('student_results.study_date_id', $request->study_date_id);
            })
            ->where('course_student_degrees.is_first_exam', $request->is_first_exam)
            ->groupBy('name')
            ->get();
    }

    public function cgpaStatistics(Request $request)
    {
        return DB::table('student_study_years')
            ->select('study_years.name')
            ->selectRaw('AVG(CASE WHEN student_study_years.cgpa > 0 then student_study_years.cgpa end ) as cgpa_avg')
            ->join('student_results', function ($q) use ($request) {
                $q
                    ->on('student_results.student_id', 'student_study_years.student_id')
                    ->where('student_results.department_id', $request->department_id)
                    ->where('student_results.study_year_id', $request->study_year_id)
                    ->where('student_results.study_date_id', $request->study_date_id);
            })
            ->join('study_years', 'study_years.id', 'student_results.study_year_id')
            ->groupBy('name')
            ->get();
    }

    public function topCgpaStudents(Request $request)
    {
        return DB::table('student_results')
            ->select('students.name1 as full_name', 'cgpa')
            ->join('students', 'students.id', 'student_results.student_id')
            ->where('student_results.department_id', $request->department_id)
            ->where('student_results.study_year_id', $request->study_year_id)
            ->where('student_results.study_date_id', $request->study_date_id)
            ->where('student_results.is_first_exam', $request->is_first_exam)
            ->orderByDesc('cgpa')
            ->limit(5)
            ->get();
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/ResultController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Enums\RegistrationStatus;
use App\Models\Batch;
use Monolog\Registry;
use App\Models\Course;
use App\Models\Result;
use App\Models\Student;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyPlan;
use App\Models\StudyYear;
// use Illuminate\Http\Request;

use App\Models\Department;
use App\Models\LevelDegree;
use App\Models\SecondRound;
use App\Models\Registration;
use Illuminate\Http\Request;
use App\Models\CourseStudent;
use App\Models\StudentResult;
use App\Models\StudyPlanDate;
use App\Models\StudentStudyYear;
use Yajra\DataTables\DataTables;
use App\Models\RegistrationResult;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;
use App\Http\Controllers\Controller;
use App\Models\RegistrationCourseDegree;
use App\Services\FirstRoundResultService;
use App\Services\SecondRoundResultService;
use SebastianBergmann\CodeUnit\FunctionUnit;
use App\Http\Requests\storeResultCoursesRequest;

class ResultController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {

        return view('dashboard.admin.results.index');
    }

    public function getStudentsResult(Request $request)
    {
        $activeStudyDate = StudyDate::getActiveStudyDate();

        if ($activeStudyDate->id == $request->study_date_id) {
            $this->calculateResult($request->study_date_id, $request->study_year_id, $request->is_first_exam, $request->department_id);
        }

        $students = DB::table('course_students')
            ->select(
                'students.id',
                'students.university_id',
                'students.name1',
                'students.name2',
                'students.name3',
                'students.name4',
                'courses.min_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.practical_degree',
                'course_student_degrees.degree_code',
                'course_student_degrees.attendance_status',
                'student_results.cgpa',
                'student_results.description',
            )
            ->join('students', 'students.id', 'course_students.student_id')
            ->join('registrations', function ($q) use ($request) {
                $q->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $request->study_date_id)
                    ->where('registrations.study_year_id', $request->study_year_id)
                ;
            })
            ->join('student_results', function ($q) use ($request) {
                $q->on('student_results.student_id', 'students.id')
                    ->where('registrations.study_date_id', $request->study_date_id)
                    ->where('is_first_exam', $request->is_first_exam);
            })
            ->leftJoin('course_student_degrees', function ($q) use ($request) {
                $q
                    // ->on('course_student_degrees.student_id', 'students.id')
                    // ->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.id', 'course_students.course_student_degree_id')
                    ->where('course_student_degrees.study_date_id', $request->study_date_id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->where('course_students.study_year_id', $request->study_year_id)
            ->where('students.department_id', $request->department_id)
            ->get()
            ->groupBy('university_id');

        $semesters = Semester::where('study_year_id', $request->study_year_id)->pluck('id')->toArray();


        $courses = Course::whereHas('studyPlanDate', function ($q) use ($request) {
            $q
                ->where('department_id', $request->department_id)
                ->whereIn('semester_id', Semester::where('study_year_id', $request->study_year_id)->pluck('id')->toArray())
                ->where('study_date_id', $request->study_date_id);
        })
            ->get();

        $degreeType = $request->degree_type;

        $statusFreezed = CourseStudentDegree::STATUS_FREEZEED;
        $statusAbsence = [CourseStudentDegree::STATUS_EXCUSED_ABSENCE, CourseStudentDegree::STATUS_ABSENCE];

        return response([
            'view' => view('dashboard.admin.results._include.print._students-reusult-table', compact('students', 'degreeType', 'statusFreezed', 'statusAbsence'))->render(),
            'courses' => view('dashboard.admin.results._include.print._students-result-thead', compact('courses'))->render(),
        ]);
    }

    public function calculateResult($study_date_id, $study_year_id, $is_first_exam, $department_id)
    {
        return DB::transaction(function () use ($is_first_exam, $study_date_id, $study_year_id, $department_id) {
            if ($is_first_exam) {
                (new FirstRoundResultService($study_date_id, $study_year_id, $department_id))->calculateResult();
            } else {
                (new SecondRoundResultService($study_date_id, $study_year_id, $department_id))->calculateSecondRoundResult();
            }
        });
    }


    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {

        return view('dashboard.admin.results.first-round.create-students-result', )->with([
            'studyPlanDateId' => request()->id
        ]);
    }

    public function createSecondRoundResult()
    {
        return view('dashboard.admin.results.second-round.create-students-result' )
            ->with('studyPlanDateId' , request()->id);
    }

    public function getCourseRegistrations(Request $request)
    {
        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $students = DB::table('students')
            ->select(
                DB::raw('CONCAT(name1_en, " ", name2_en , " " , name3_en, " ", name4_en ) as full_name'),
                'registrations.id as registration_id',
                'students.id as student_id',
                'courses.min_degree',
                'courses.hours',
                'courses.has_practical',
                'students.university_id',
                'course_student_degrees.practical_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.attendance_status',
                'course_students.study_year_id',
                'second_round_degree.id as second_round_degree_id'
            )
            ->join('registrations', function ($q) use ($activeStudyDate) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $activeStudyDate->id)
                    // ->where('last_status', '!=', StudentResult::STATUS_RETURNED_WITH_SOME_COURSES);
                ;
            })
            ->join('course_students', function ($q) use ($request) {
                $q->on('course_students.student_id', 'registrations.student_id')
                    ->on('course_students.study_year_id', 'registrations.study_year_id')
                    // ->where('course_students.study_date_id', $request->study_date_id)
                    ->where('course_id', $request->course_id)
                    ->where('semester_id', $request->semester_id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->leftJoin('course_student_degrees', function ($q) use ($activeStudyDate) {
                $q->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.student_id', 'students.id')
                    ->where('course_student_degrees.study_date_id', $activeStudyDate->id)
                    ->where('course_student_degrees.is_first_exam', true);
            })
            ->leftJoin('course_student_degrees as second_round_degree', function ($q) use ($activeStudyDate) {
                $q->on('second_round_degree.course_id', 'course_students.course_id')
                    ->on('second_round_degree.student_id', 'students.id')
                    ->where('second_round_degree.study_date_id', $activeStudyDate->id)
                    ->where('second_round_degree.is_first_exam', false);
            })
            ->union($this->generateReturnedStudentsUnion($activeStudyDate, $request->course_id, $request->semester_id))
            ->get()
            ->groupBy('university_id');

        $course = Course::find(request()->course_id);

        $statuses = CourseStudentDegree::STATUSES;

        $degrees = LevelDegree::all();

        $view  = view(
            'dashboard.admin.results._include.create._students-table',
            ['students' => $students, 'course' => $course, 'statuses' => $statuses, 'is_first_exam' => true]
        )->render();

        return response(['view' => $view, 'degrees' => $degrees]);
    }

    public function generateReturnedStudentsUnion($activeStudyDate, $course_id, $semester_id)
    {
        return  DB::table('students')
            ->select(
                'name1',
                'registrations.id as registration_id',
                'students.id as student_id',
                'courses.min_degree',
                'courses.hours',
                'courses.has_practical',
                'students.university_id',
                'course_student_degrees.practical_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.attendance_status',
                'course_students.study_year_id',
                'second_round_degree.id as second_round_degree_id'
            )
            ->join('registrations', function ($q) use ($activeStudyDate) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $activeStudyDate->id)
                    // ->where('last_status', StudentResult::STATUS_RETURNED_WITH_SOME_COURSES)
                ;
            })
            ->join('course_students', function ($q) use ($course_id, $semester_id) {
                $q->on('course_students.student_id', 'registrations.student_id')
                    ->on('course_students.study_year_id', 'registrations.study_year_id')
                    ->where('course_id', $course_id)
                    ->where('semester_id', $semester_id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->join('carry_out_courses', function ($q) use ($course_id) {
                $q->on('carry_out_courses.student_id', 'students.id')
                    ->where('carry_out_courses.course_id', $course_id);
            })
            ->leftJoin('course_student_degrees', function ($q) use ($activeStudyDate) {
                $q->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.student_id', 'students.id')
                    ->where('course_student_degrees.study_date_id', $activeStudyDate->id)
                    ->where('is_first_exam', true);
            })
            ->leftJoin('course_student_degrees as second_round_degree', function ($q) use ($activeStudyDate) {
                $q->on('second_round_degree.course_id', 'course_students.course_id')
                    ->on('second_round_degree.student_id', 'students.id')
                    ->where('second_round_degree.study_date_id', $activeStudyDate->id)
                    ->where('second_round_degree.is_first_exam', false);
            });
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {

        return DB::transaction(function () use ($request) {
            $course = Course::find($request->course_id);

            $activeStudyDate = StudyDate::where('archived', 1)->first();

            $levelDegrees = LevelDegree::all('min_degree', 'max_degree', 'level_code');

            foreach ($request->registrations as $student) {

                $seconRoundDegree = CourseStudentDegree::query()
                    ->where('student_id', $student['student_id'])
                    ->where('course_id', $course->id)
                    ->where('is_first_exam', false)
                    ->exists();

                if ($seconRoundDegree) {
                    continue;
                }

                $courseStudentDegree = CourseStudentDegree::updateOrCreate(
                    [
                        'student_id' => $student['student_id'],
                        'course_id' => $course->id,
                        'study_date_id' => $activeStudyDate->id,
                        'is_first_exam' => true
                    ],
                    [
                        'theory_degree' =>   $student['status'] == LevelDegree::STATUS_ATTENDED ? $student['theory'] : NULL,
                        'practical_degree' => $student['status'] == LevelDegree::STATUS_ATTENDED ? $student['practical'] : NULL,
                        'attendance_status' => $student['status'],
                        'point' => ((int)$student['practical'] + (int)$student['theory']) / 25,
                        'is_pass' => $this->calculateIsPass($course, $student['theory'], $student['practical']),
                        'degree_code' => $this->getCourseDegreeCode($levelDegrees, (int)$student['practical'] + (int)$student['theory'])
                    ]
                );

                CourseStudent::where('student_id', $student['student_id'])
                    ->where('course_id', $course->id)
                    ->where('semester_id', $request->semester_id)
                    ->update(['course_student_degree_id' => $courseStudentDegree->id]);
            }

            return response()->noContent();
        });
    }

    public function getCourseDegreeCode($levelDegrees, $degree)
    {

        foreach ($levelDegrees as $levelDegree) {
            if ($degree >= $levelDegree->min_degree && $degree <= $levelDegree->max_degree) {
                return $levelDegree->level_code;
                break;
            }
        }
        return '--';
    }

    public function getCourseRegistrationsInSecondRound(Request $request)
    {
        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $students = DB::table('students')
            ->select(
                // DB::raw('SELECT EXISTS(SELECT id from course_student_degrees WHERE is_first_exam = false)'),
                'name1',
                'registrations.id as registration_id',
                'students.id as student_id',
                'courses.min_degree',
                'courses.hours',
                'courses.has_practical',
                'students.university_id',
                'course_student_degrees.practical_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.attendance_status',
                'course_students.study_year_id',
            )
            ->join('registrations', function ($q) use ($activeStudyDate) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $activeStudyDate->id);
            })
            ->join('course_students', function ($q) use ($request) {
                $q->on('course_students.student_id', 'registrations.student_id')
                    ->on('course_students.study_year_id', 'registrations.study_year_id')
                    ->where('course_id', $request->course_id)
                    ->where('semester_id', $request->semester_id);
            })
            ->join('second_rounds', function ($q) use ($activeStudyDate) {
                $q->on('second_rounds.student_id', 'course_students.student_id')
                    ->on('second_rounds.course_id', 'course_students.course_id')
                    ->where('second_rounds.study_date_id', $activeStudyDate->id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->leftJoin('course_student_degrees', function ($q) {
                $q->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.student_id', 'students.id')
                    ->where('is_first_exam', false);
            })
            ->get()
            ->groupBy('university_id');

        $course = Course::find(request()->course_id);

        $statuses = CourseStudentDegree::STATUSES;

        unset($statuses[CourseStudentDegree::STATUS_EXCUSED_ABSENCE]);

        $degrees = LevelDegree::all();

        $view  = view(
            'dashboard.admin.results._include.create._students-table',
            ['students' => $students, 'course' => $course, 'statuses' => $statuses, 'is_first_exam' => false]
        )->render();

        return response(['view' => $view, 'degrees' => $degrees]);
    }

    public function storeRoundTwo(Request $request)
    {
        return DB::transaction(function () use ($request) {
            $activeStudyDate = StudyDate::where('archived', 1)->first();

            $course = Course::find($request->course_id);

            $registrations = Registration::select('status', 'student_id')
                ->where('study_date_id', $activeStudyDate->id)
                ->whereIn('student_id', collect($request->students)->pluck('student_id')->toArray())
                ->get();

            $levelDegrees = LevelDegree::all('min_degree', 'max_degree', 'level_code');

            foreach ($request->students as $student) {

                $registrationStatus = $registrations->firstWhere('student_id', $student['student_id'])->status;

                if (!in_array($registrationStatus, [RegistrationStatus::STATUS_REGISTERED, RegistrationStatus::STATUS_UNREGISTERED])) {
                    continue;
                }

                $courseStudentDegree = CourseStudentDegree::updateOrCreate(

                    [
                        'student_id' => $student['student_id'],
                        'course_id' => $course->id,
                        'study_date_id' => $activeStudyDate->id,
                        'is_first_exam' => false
                    ],
                    [
                        'theory_degree' =>   $student['status'] == LevelDegree::STATUS_ATTENDED ? $student['theory'] : NULL,
                        'practical_degree' => $student['status'] == LevelDegree::STATUS_ATTENDED ? $student['practical'] : NULL,
                        'attendance_status' => $student['status'],
                        'point' => ((int)$student['practical'] + (int)$student['theory']) / 25,
                        'is_pass' => $this->calculateIsPass($course, $student['theory'], $student['practical']),
                        'degree_code' => $this->getCourseDegreeCode($levelDegrees, (int)$student['practical'] + (int)$student['theory'])
                    ]
                );

                CourseStudent::where('student_id', $student['student_id'])
                    ->where('course_id', $course->id)
                    ->where('semester_id', $request->semester_id)
                    ?->update(['course_student_degree_id' => $courseStudentDegree->id]);
            }

            return response()->noContent();
        });
    }

    public function calculateIsPass(Course $course, $theory_degree, $practical_degree)
    {
        return (int)$theory_degree + (int)$practical_degree >= $course->min_degree;
    }

    public function getCoursesData(Request $request)
    {
        $courses = Course::when(request()->search, function ($q) use ($request) {
            $q->where('name', 'LIKE', "%$request->search%")
                ->orWhere('name_en', 'LIKE', "%$request->search%")
                ->orWhere('code', 'LIKE', "$request->search%");
        })
            ->get();
        return response($courses);
    }

    public function createResultCourses()
    {
        return view('dashboard.admin.results.create-course-result');
    }

    public function storeResultCourses(storeResultCoursesRequest $request)
    {
        session()->put('result_courses', $request->validated());

        return redirect()->route('dashboard.admin.results.create-students-result');
    }

    public function createStudentsResult()
    {

        $courses = Course::all();

        return view('dashboard.admin.results.create-course-result', compact('courses'));
    }

    public function storeStudentsResult(Request $request)
    {
        $courses = Course::all();

        return view('dashboard.admin.results.create-course-result', compact('courses'));
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/PaymentTypeController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Models\PaymentType;
use Illuminate\Http\Request;
use Yajra\DataTables\Facades\DataTables;

class PaymentTypeController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('dashboard.admin.payment_types.index');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    public function data()
    {
        $paymentTypes = PaymentType::query();

        return DataTables::of($paymentTypes)
            ->addColumn('actions', 'dashboard.admin.payment_types.data_table.actions')
            ->rawColumns(['actions'])
            ->addIndexColumn()
            ->toJson();
    }
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\PaymentType  $paymentType
     * @return \Illuminate\Http\Response
     */
    public function show(PaymentType $paymentType)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\PaymentType  $paymentType
     * @return \Illuminate\Http\Response
     */
    public function edit(PaymentType $paymentType)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\PaymentType  $paymentType
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, PaymentType $paymentType)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\PaymentType  $paymentType
     * @return \Illuminate\Http\Response
     */
    public function destroy(PaymentType $paymentType)
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/PaymentStatusController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\PaymentStatusRequest;
use App\Models\PaymentStatus;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;

class PaymentStatusController extends Controller
{

    public function __construct()
    {
        $this->middleware(['permission:read-payment_status'])->only('index','data');
        $this->middleware(['permission:create-payment_status'])->only('create','store');
        $this->middleware(['permission:update-payment_status'])->only('update','edit');
        $this->middleware(['permission:delete-payment_status'])->only('destroy','bulkDelete');

    }// end of __construct

    public function index()
    {
        return view('dashboard.admin.payment_status.index');

    }// end of index

    public function data()
    {
        $paymentStatus = PaymentStatus::query();

        return DataTables::of($paymentStatus)
            ->addColumn('record_select', 'dashboard.admin.payment_status.data_table.record_select')
            ->editColumn('created_at', function (PaymentStatus $paymentStatus) {
                return $paymentStatus->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.payment_status.data_table.actions')
            ->rawColumns(['record_select', 'payment_status', 'actions'])
            ->addIndexColumn()
            ->toJson();

    }// end of data

    public function create()
    {
        return view('dashboard.admin.payment_status.create');

    }// end of create

    public function store(PaymentStatusRequest $request)
    {
        PaymentStatus::create($request->validated());

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.payment_status.index');

    }// end of store

    public function show(PaymentStatus $paymentStatus)
    {
        return $paymentStatus;

    }// end of edit

    public function edit(PaymentStatus $paymentStatus)
    {
        return view('dashboard.admin.payment_status.edit', compact('paymentStatus'));

    }// end of edit

    public function update(PaymentStatusRequest $request, PaymentStatus $paymentStatus)
    {
        $paymentStatus->update($request->validated());

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.payment_status.index');

    }// end of update

    public function destroy(PaymentStatus $paymentStatus)
    {
        $this->delete($paymentStatus);
        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $role = PaymentStatus::FindOrFail($recordId);
            $this->delete($role);

        }//end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of bulkDelete

    private function delete(PaymentStatus $paymentStatus)
    {
        $paymentStatus->delete();

    }// end of delete

}//end of controller
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/PaymentOrderController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Models\PaymentOrder;
use Illuminate\Http\Request;

class PaymentOrderController extends Controller
{

    public function __construct()
    {
        $this->middleware(['permission:read-payment_orders'])->only('index','data');
        $this->middleware(['permission:create-payment_orders'])->only('create','store');
        $this->middleware(['permission:update-payment_orders'])->only('update','edit');
        $this->middleware(['permission:delete-payment_orders'])->only('destroy','bulkDelete');

    }// end of __construct

    public function index()
    {
        return view('dashboard.admin.payment_orders.index');

    }// end of index


    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\PaymentOrder  $paymentOrder
     * @return \Illuminate\Http\Response
     */
    public function show(PaymentOrder $paymentOrder)
    {
        return view('dashboard.admin.students.student_payment', compact('paymentOrder'));

    }//end of show

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\PaymentOrder  $paymentOrder
     * @return \Illuminate\Http\Response
     */
    public function edit(PaymentOrder $paymentOrder)
    {
        $paymentOrder->load('currency');
        $data = view('dashboard.admin.payments.includes._edit-invoice', compact('paymentOrder'));
        return $data;
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\PaymentOrder  $paymentOrder
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, PaymentOrder $paymentOrder)
    {
        $request->validate(['amount' => 'lte:'.$paymentOrder->registration->justTotal], ['amount.*' => 'يجب أن يكون المبلغ المدخل أقل من المبلغ الكلي للطالب']);

        $paymentOrder->update(['amount' => $request->amount]);

        // session()->flash('success', __('site.updated_successfully'));

        return redirect(route('dashboard.admin.payment_orders.index'))->with('success', __('site.updated_successfully'));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\PaymentOrder  $paymentOrder
     * @return \Illuminate\Http\Response
     */
    public function destroy(PaymentOrder $paymentOrder)
    {
        //
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/PaymentController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Exports\PaymentExport;
use App\Helpers\helpers;
use App\Helpers\PrintHelper;
use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\PaymentRequest;
use App\Models\Payment;
use App\Models\PaymentOrder;
use App\Models\PaymentType;
use App\Models\Registration;
use App\Models\Student;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Facades\Excel;
use Spatie\Browsershot\Browsershot;

class PaymentController extends Controller
{

    public function __construct()
    {
        $this->middleware(['permission:read-payments'])->only('index', 'data');
        $this->middleware(['permission:create-payments'])->only('create', 'store');
        $this->middleware(['permission:update-payments'])->only('update', 'edit');
        $this->middleware(['permission:delete-payments'])->only('destroy', 'bulkDelete');
    } // end of __construct

    public function index()
    {
        return view('dashboard.admin.payments.index');
    } // end of index


    public function create()
    {
        //
    }


    public function store(PaymentRequest $request)
    {
    } //end of fun


    public function invoice(PaymentOrder $paymentOrder)
    {
        $paymentTypes = PaymentType::all();
        $paymentOrder->load('currency');
        $data = view('dashboard.admin.payments.includes._invoice', compact('paymentOrder', 'paymentTypes'));

        return $data;
    } //end of fun

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Payment  $payment
     * @return \Illuminate\Http\Response
     */
    public function destroy(Payment $payment)
    {
        $paymentOrder = PaymentOrder::find($payment->payment_order_id);



        //status registration
        if ($paymentOrder->status == PaymentOrderStatus::STATUS_REGISTRATION || $paymentOrder->status == PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS) {
            return $this->PaymentOrderDeleteRegistration($payment, $paymentOrder);
        }
        //status freeze
        if ($paymentOrder->status == PaymentOrderStatus::STATUS_FREEZE) {
            //            $this->PaymentOrderStoreFreeze($request, $paymentOrder);
        }
        //status resignation
        if ($paymentOrder->status == PaymentOrderStatus::STATUS_RESIGNATION) {
            //            $this->PaymentOrderStoreResignation($request, $paymentOrder);
        }

        $this->delete($payment);
        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));
    } // end of destroy

    private function delete(Payment $payment)
    {
        $payment->delete();
    } // end of delete

    public function printInvoice(Payment $payment)
    {
        $data['student_name'] = $payment->student->full_name;
        $data['id'] = $payment->id;
        $data['amount'] =   number_format($payment->amount, 2) . ' ' . strtoupper($payment->currency?->code);
        $data['date'] = $payment->created_at;
        $data['user'] = auth('admin')->user()->name;
        $data['department'] = $payment->student->department->name;
        $data['study_date'] = $payment->student->studyDate->name;
        $data['university_name'] = Cache::get('settings')['name'];

        // return Browsershot::html(view('prints.payment-invoice', compact('data'))->render())
        //       ->setChromePath("/usr/bin/chromium")
        //     ->save('example.pdf');

        return view('prints.payment-invoice', compact('data'));

        // return PrintHelper::printInvoice($data);
    }

    public function createViaExcel()
    {
        return view('dashboard.admin.payments.archive.add_via_excel');
    }

    public function exportEmptyExcelSample()
    {
        return  Excel::download(new PaymentExport, 'archived_payments_sample.xlsx');
    }
}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/NationalityController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Models\Nationality;
use Illuminate\Http\Request;
use Yajra\DataTables\Facades\DataTables;

class NationalityController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('dashboard.admin.nationalities.index');
    }

    public function data()
    {
        $nationalities = Nationality::query();

        return DataTables::of($nationalities)
            ->addColumn('record_select', 'dashboard.admin.courses.data_table.record_select')
            ->addColumn('actions', 'dashboard.admin.nationalities.data_table.actions')
            ->rawColumns(['record_select', 'actions'])
            ->addIndexColumn()
            ->toJson();
    }
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('dashboard.admin.nationalities.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $data = $request->validate([
            'name' => ['required' , 'string' , 'unique:nationalities,name'],
        ]);

        Nationality::create($data);

        session()->flash('success', __('site.added_successfully'));
        return view('dashboard.admin.nationalities.index');
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Nationality  $nationality
     * @return \Illuminate\Http\Response
     */
    public function show(Nationality $nationality)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Nationality  $nationality
     * @return \Illuminate\Http\Response
     */
    public function edit(Nationality $nationality)
    {
        return view('dashboard.admin.nationalities.edit' ,compact('nationality') );
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Nationality  $nationality
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Nationality $nationality)
    {
        $data = $request->validate([
            'name' => ['required' , 'string' , 'unique:nationalities,name,' . $nationality->id],
        ]);

        $nationality->update($data);

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.nationalities.index');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Nationality  $nationality
     * @return \Illuminate\Http\Response
     */
    public function destroy(Nationality $nationality)
    {
        $nationality->delete();
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.nationalities.index');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/MarkController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Exports\MarkExport;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\Department;
use Illuminate\Http\Request;
use App\Models\StudyPlanDate;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use App\Models\Teacher;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Facades\Excel;
use Yajra\DataTables\Facades\DataTables;

class MarkController extends Controller
{
    public $isTeacher;
    public $teacherUser;

    public function index()
    {
        $this->isTeacher = Teacher::where('admin_id', auth('admin')->id())->exists();

        if($this->isTeacher) {
            $this->teacherUser = auth('admin')->user()->load('teacher.studyPlanDates');
        }

        if ($this->isTeacher) {
            $departments = Department::whereIn('id', $this->teacherUser->teacher->studyPlanDates->pluck('department_id')->toArray())
                ->get();
        } else {
            $departments = Department::all();
        }

        $semesters = Semester::all();

        $activeStudyDate = StudyDate::getActiveStudyDate();

        return view('dashboard.admin.marks.index', compact('departments', 'semesters',));
    }

    public function data()
    {
        $this->isTeacher = Teacher::where('admin_id', auth('admin')->id())->exists();

        if($this->isTeacher) {
            $this->teacherUser = auth('admin')->user()->load('teacher.studyPlanDates');
        }

        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $studyPlanDates = StudyPlanDate::select(
            DB::raw('COUNT(*) as courses_count'),
            DB::raw('SUM(hours) as hours_count'),
            'study_plan_dates.id',
            'departments.name as department_name',
            'semesters.name as semester_name',
        )
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->join('departments',function($q) {
                $q->on('departments.id', 'study_plan_dates.department_id')
                  ->when($this->isTeacher, function($q) {
                      $q->whereIn('departments.id', $this->teacherUser->teacher->studyPlanDates->pluck('department_id')->toArray());
                  });
            })
            ->join('semesters', 'semesters.id', 'study_plan_dates.semester_id')
            ->where('study_date_id', $activeStudyDate->id)
            ->when(request()->department_id, function ($q) {
                $q->where('study_plan_dates.department_id', request()->department_id);
            })
            ->when(request()->semester_id, function ($q) {
                $q->where('study_plan_dates.semester_id', request()->semester_id);
            })
            ->groupBy('study_plan_dates.semester_id', 'study_plan_dates.department_id')
            ->get();

        return DataTables::of($studyPlanDates)
            ->addColumn('actions', 'dashboard.admin.marks.data_table.actions')
            ->rawColumns(['actions'])
            ->addIndexColumn()
            ->toJson();
    }

    public function createViaExcel() {
        return view('dashboard.admin.marks.add_via_excel');
    }

    public function exportEmptyExcelSample()
    {
        return Excel::download(new MarkExport, 'grades_sample.xlsx');
    }
}


      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/HomeController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Enums\RegistrationStatus;
use App\Models\Payment;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\Department;
use App\Models\PaymentOrder;
use App\Models\Registration;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use App\Models\PaymentType;
use Illuminate\Support\Facades\Auth;

class HomeController extends Controller
{
    public function index()
    {

        // if (Auth::user()->hasRole('المسجل - register')) {
        //     return $this->generateAdminDashboard();
        // }
        // return $this->generateAccountantDashboard();
    } //end of index

    public function paymentsModuleDashboard()
    {
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $paymentsByCurrency = DB::table('payment_orders')
            ->select('payment_orders.currency_id', 'currencies.name as currency_name', 'currencies.code as currency_code')
            ->selectRaw('SUM(payment_orders.amount) as paid')
            ->selectRaw('SUM(register_fees * tuition_fees) as expected')
            ->join('currencies', 'currencies.id', 'payment_orders.currency_id')
            ->join('payments', 'payments.payment_order_id', 'payment_orders.id')
            ->join('payment_types', 'payment_types.id', 'payments.payment_type_id')
            ->leftJoin('students', 'students.id', 'payment_orders.student_id')
            ->leftJoin('registrations', function ($q) use ($activeStudyDate) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $activeStudyDate->id);
            })
            ->where('payment_orders.study_date_id', $activeStudyDate->id)
            ->groupBy('currencies.id')
            ->get();

        $paymentsByType = PaymentType::select('payment_types.type', 'payment_orders.currency_id' , 'currencies.code as currency_code')
            ->selectRaw('COUNT(students.id) as students')
            ->selectRaw('SUM(payments.amount) as paid')
            ->leftJoin('payments', 'payments.payment_type_id', 'payment_types.id')
            ->leftJoin('payment_orders', function ($q) use ($activeStudyDate) {
                $q
                    ->on('payment_orders.id', 'payments.payment_order_id')
                    ->where('payment_orders.study_date_id', $activeStudyDate->id);
            })
            ->leftJoin('students', 'students.id', 'payments.student_id')
            ->leftJoin('currencies', 'currencies.id', 'payments.currency_id')
            ->groupBy('payment_types.id')
            ->groupBy('payments.currency_id')
            ->get()
            ->groupBy('type');

        return view('dashboard.admin.modules_dashboards.payments-module-dashboard', compact('paymentsByCurrency', 'paymentsByType'));
    }

    public function studentsModuleDashboard()
    {
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $students = DB::table('admission_types')
            ->select('admission_types.type')
            ->selectRaw('COUNT(students.id) as total_students')
            ->selectRaw("COUNT(CASE WHEN status = ? THEN 1 END) as unregistered_students", [RegistrationStatus::STATUS_UNREGISTERED])
            ->selectRaw('COUNT(CASE WHEN status = ? THEN 1 END) as registered_students',  [RegistrationStatus::STATUS_REGISTERED])
            ->selectRaw('COUNT(CASE WHEN registrations.status = ? THEN 1 END) * 100 / COUNT(*) as registration_percentage', [RegistrationStatus::STATUS_REGISTERED])
            ->selectRaw('COUNT(CASE WHEN registrations.status = ? THEN 1 END) as freezed_students', [RegistrationStatus::STATUS_FREEZED])
            ->selectRaw('COUNT(CASE WHEN registrations.status = ? THEN 1 END) as dropped_out_students', [RegistrationStatus::STATUS_QUIT])
            ->selectRaw('COUNT(CASE WHEN registrations.status = ? THEN 1 END) as dismissed_students', [RegistrationStatus::STATUS_DISMISSED])
            ->leftJoin('students', 'admission_types.id', 'students.admission_type_id')
            ->leftJoin('registrations', function ($q) use ($activeStudyDate) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $activeStudyDate->id);
            });

        $departments = DB::table('departments')
            ->select('departments.name')
            ->selectRaw('COUNT(students.id) as total_students')
            ->selectRaw('COUNT(CASE WHEN status = 2 THEN 1 END) as registered_students')
            ->leftJoin('students', 'students.department_id', 'departments.id')
            ->leftJoin('registrations', function ($q) use ($activeStudyDate) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $activeStudyDate->id);
            })
            ->groupBy('departments.id')
            ->get();

        $studentsByAdmissionType = (clone $students)->groupBy('type')->get();

        $students = $students->first();

        return view('dashboard.admin.modules_dashboards.students-module-dashboard', compact('students', 'studentsByAdmissionType', 'departments'));
    }

    public function redirectToModule()
    {
        session()->put('module', request('module'));
        return redirect()->route(request('route'));
    }
}//end of fun

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/DiscountController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Models\Student;
use App\Helpers\helpers;
use App\Models\Discount;
use App\Models\StudyDate;
use App\Models\Department;
use Illuminate\Support\Str;
use App\Models\PaymentOrder;
use App\Models\Registration;
use App\Models\TypeDiscount;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\DiscountRequest;
use Illuminate\Support\Facades\DB;

class DiscountController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-discounts'])->only('index', 'data');
        $this->middleware(['permission:create-discounts'])->only('create', 'store');
        $this->middleware(['permission:update-discounts'])->only('update', 'edit');
        $this->middleware(['permission:delete-discounts'])->only('destroy', 'bulkDelete');
    } // end of __construct

    public function index()
    {
        return view('dashboard.admin.discounts.index');
    } // end of index

    public function data()
    {
        $discounts = Discount::query();

        return DataTables::of($discounts)
            ->addColumn('record_select', 'dashboard.admin.discounts.data_table.record_select')
            ->editColumn('created_at', function (Discount $discount) {

                return $discount->created_at->format('m-d-Y');
            })
            ->editColumn('amount', function (Discount $discount) {

                return number_format($discount->amount, 2);
            })
            ->addColumn('department', function (Discount $discount) {
                return $discount->department->name;
            })
            ->addColumn('student', function (Discount $discount) {
                return $discount->registration->student->full_name;
            })
            ->addColumn('study_date', function (Discount $discount) {

                return $discount->registration->studyDate->name;
            })
            ->addColumn('type_discount', function (Discount $discount) {
                return $discount->typeDiscount->type;
            })
            ->addColumn('actions', 'dashboard.admin.discounts.data_table.actions')
            ->rawColumns(['record_select', 'actions'])
            ->addIndexColumn()
            ->toJson();
    } // end of data

    public function create()
    {
        $hasStudent    = Student::find(request()->student_id);
        $students      = Student::all();
        $studydates    = StudyDate::all();
        $departments   = Department::all();
        $typeDiscounts = TypeDiscount::all();

        return view('dashboard.admin.discounts.create', compact('students', 'studydates', 'departments', 'typeDiscounts', 'hasStudent'));
    } // end of create

    public function store(DiscountRequest $request)
    {
        return DB::transaction(function () use ($request) {

            $student = Student::find($request->student_id);

            $registration = Registration::where('student_id', $request->student_id)->latest()->first();

            $validated = $request->safe()->except(['image', 'student_id', 'study_date_id']);

            $total   = $student->payment_fees_get - intval($request->amount);
            if ($total < 0) {
                return redirect()->back()->with(['amount' => __('admin.payments.Incorrect_amount')])->withInput();
            } //end of if

            $validated['registration_id'] = $registration->id;

            $discount = Discount::create($validated);

            if ($request->hasFile('image')) {
                // dd($request->image);
                $discount->addMediaFromRequest('image')
                    ->usingName(Str::uuid())
                    ->toMediaCollection('discounts');
                    // dd($discount->getFirstMedia());
            }

            // $this->discountStoreRegistration($request, $discount);
            $student->registration->rebuildPaymentOrder();

            session()->flash('success', __('site.added_successfully'));
            return redirect()->route('dashboard.admin.students.show', $student);
            // return redirect()->route('dashboard.admin.discounts.index');
        });
    } // end of store

    public function show(Discount $discount)
    {
        return $discount;
    } // end of edit

    public function edit(Discount $discount)
    {
        // dd($discount);
        // $hasStudent    = Student::find($discount->student_id);
        $students      = Student::all();
        $studydates    = StudyDate::all();
        $departments   = Department::all();
        $typeDiscounts = TypeDiscount::all();

        return view('dashboard.admin.discounts.edit', compact('discount', 'students', 'studydates', 'departments', 'typeDiscounts'));
    } // end of edit

    public function update(Request $request, Discount $discount)
    {
        $total   = $discount->registration->justTotal - intval($request->amount);
        if ($total < 0) {
            return redirect()->back()->with(['amount' => __('admin.payments.Incorrect_amount')])->withInput();
        } //end of if

        if ($request->hasFile('image')) {
            $discount->getFirstMedia('discounts')?->delete();
            $discount->addMediaFromRequest('image')->usingName(Str::uuid())->toMediaCollection('discounts');
        }

        $discount->update(['amount' => $request->amount]);

        $discount->registration->rebuildPaymentOrder();

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.students.show', $discount->registration->student);

        // return redirect()->route('dashboard.admin.discounts.index');

    } // end of update

    public function destroy(Discount $discount)
    {
        //check total amount
        // $student = Student::find($discount->student_id);
        $total   = $discount->registration->justTotal - intval($discount->amount);
        // $total   = $student->payment_fees_get + intval($discount->amount);
        if ($total < 0) {
            session()->flash('success', __('admin.payments.Incorrect_amount'));
            return response(__('admin.payments.Incorrect_amount'));
        } //end of if
        // $this->discountDeleteRegistration($discount);

        $discount->registration->rebuildPaymentOrder();

        $this->delete($discount);

        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.students.show', $discount->registration->student);
        // return redirect()->route('dashboard.admin.discounts.index');

        // return response(__('site.deleted_successfully'));

    } // end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $discount = Discount::FindOrFail($recordId);
            $this->delete($discount);
        } //end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));
    } // end of bulkDelete

    private function delete(Discount $discount)
    {
        $discount->delete();
    } // end of delete

    private function discountStoreRegistration(DiscountRequest $request, $discount)
    {
        //step 1
        $studyDates   = StudyDate::where('archived', 1)->first();
        $registration = Registration::where([
            'student_id'    => $request->student_id,
            'study_date_id' => $studyDates->id,
        ])->latest()->first();

        //step 2
        if ($registration) {
            //step 3
            $registration->update([
                'discount_id'  => $discount->id,
            ]);
            //step 4 part 1
            $paymentOrder = PaymentOrder::where([
                'student_id'      => $request->student_id,
                'registration_id' => $registration->id,
                'archive'         => 1,
            ])->whereIn('status', [PaymentOrderStatus::STATUS_REGISTRATION , PaymentOrderStatus::STATUS_FREEZE , PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS])
              ->latest()
              ->first();
            //step 4 part 2
            if ($paymentOrder) {

                $totalAmount = $paymentOrder->total_amount > 0 ? $paymentOrder->total_amount - $request->amount : 0;
                $paymentOrder->update([
                    'amount'       => $paymentOrder->amount - $request->amount,
                    'total_amount' => $totalAmount,
                ]);

                $paymentOrder->registration->update(['status' => RegistrationStatus::STATUS_REGISTERED]);
            } //end of if check paymentOrder

        } //end of if check registration
    } //end if fun

    private function discountUpdateRegistration(DiscountRequest $request, $discount)
    {
        //step 1
        $studyDates   = StudyDate::where('archived', 1)->first();
        $registration = Registration::where([
            'student_id'    => $request->student_id,
            'study_date_id' => $studyDates->id,
        ])->latest()->first();

        //step 2
        if ($registration) {
            //step 3
            $registration->update([
                'discount_id'  => $discount->id,
            ]);
            //step 4 part 1
            $paymentOrder = PaymentOrder::where([
                'student_id'      => $request->student_id,
                'registration_id' => $registration->id,
                'archive'         => 1,
            ])->whereIn('status', [
                PaymentOrderStatus::STATUS_REGISTRATION,
                PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS,
            ])->latest()->first();
            //step 4 part 2
            if ($paymentOrder) {

                $totalAmount = $paymentOrder->total_amount > 0 ? $paymentOrder->total_amount + $discount->amount - $request->amount : 0;
                $paymentOrder->update([
                    'amount'       => $paymentOrder->amount + $discount->amount - $request->amount,
                    'total_amount' => $totalAmount,
                ]);

                $paymentOrder->registration->update(['status' => RegistrationStatus::STATUS_REGISTERED]);
            } //end of if check paymentOrder

        } //end of if check registration
    } //end if fun

    private function discountDeleteRegistration($discount)
    {
        //step 1
        $studyDates   = StudyDate::where('archived', 1)->first();
        $registration = Registration::where([
            'student_id'    => $discount->student_id,
            'study_date_id' => $studyDates->id,
        ])->latest()->first();

        //step 2
        if ($registration) {
            //step 3
            $registration->update([
                'discount_id'  => $discount->id,
            ]);
            //step 4 part 1
            $paymentOrder = PaymentOrder::where([
                'student_id'      => $discount->student_id,
                'registration_id' => $registration->id,
            ])->whereIn('status', [
                PaymentOrderStatus::STATUS_REGISTRATION,
                PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS,
            ])->latest()->first();

            //step 4 part 2
            if ($paymentOrder) {
                $totalAmount = $paymentOrder->total_amount > 0 ? $paymentOrder->total_amount + $discount->amount : 0;
                $paymentOrder->update([
                    'amount'       => $paymentOrder->amount + $discount->amount,
                    'total_amount' => $totalAmount,
                    'archive'      => 1,
                ]);

                $paymentOrder->registration->update(['status' => RegistrationStatus::STATUS_REGISTERED]);
            } //end of if check paymentOrder

        } //end of if check registration
    } //end if fun

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/DepartmentController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\DepartmentRequest;
use App\Models\Department;
use App\Models\DepartmentPrice;
use App\Models\DepartmentStudyYear;
use App\Models\StudyYear;
use App\Models\StudyDate;
use App\Models\price;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;

class DepartmentController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-departments'])->only('index','data');
        $this->middleware(['permission:create-departments'])->only('create','store');
        $this->middleware(['permission:update-departments'])->only('update','edit');
        $this->middleware(['permission:delete-departments'])->only('destroy','bulkDelete');

    }// end of __construct

    public function index()
    {
        return view('dashboard.admin.departments.index');

    }// end of index

    public function data()
    {
        $departments = Department::query();

        return DataTables::of($departments)
            ->addColumn('record_select', 'dashboard.admin.departments.data_table.record_select')
            ->editColumn('created_at', function (department $department) {
                return $department->created_at->format('Y-m-d');
            })
            ->editColumn('study_year', function (department $department) {
                $departments = $department->studyYears->count();
                return $departments;
            })
            ->addColumn('actions', 'dashboard.admin.departments.data_table.actions')
            ->rawColumns(['record_select', 'actions'])
            ->addIndexColumn()
            ->toJson();

    }// end of data

    public function create()
    {
        $studyYears = StudyYear::all();

        return view('dashboard.admin.departments.create', compact('studyYears'));

    }// end of create

    public function store(DepartmentRequest $request)
    {
        $validated = $request->safe()->except(['study_year_id']);

        $validated['college_id'] = 1;
        $department = Department::create($validated);

        $department->studyYears()->sync($request->study_year_id);

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.departments.index');

    }// end of store

    public function show(Department $department)
    {
        $studyDate = StudyDate::where('archived', 1)->first();

        $price = DepartmentPrice::where([
            'study_date_id' => $studyDate->id,
            'department_id' => $department->id,
        ])->first();

        return response()->json([
            'price'      => $price,
            'study_date' => $studyDate,
        ]);

    }// end of edit

    public function edit(Department $department)
    {
        $studyYears = StudyYear::all();

        return view('dashboard.admin.departments.edit', compact('department', 'studyYears'));

    }// end of edit

    public function update(DepartmentRequest $request, department $department)
    {
        $validated =  $request->safe()->except(['study_year_id']);
        $department->update($validated);

        $department->studyYears()->sync($request->study_year_id);

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.departments.index');

    }// end of update

    public function destroy(department $department)
    {
        $department->delete();
        // $this->delete($department);
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.departments.index');

    }// end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $department = department::FindOrFail($recordId);
            $this->delete($department);

        }//end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of bulkDelete

    private function delete(department $department)
    {
        $department->delete();

    }// end of delete

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/CurrencyController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Models\Currency;
use Illuminate\Http\Request;
use Yajra\DataTables\Facades\DataTables;

class CurrencyController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-currencies'])->only('index', 'data');
        $this->middleware(['permission:create-currencies'])->only('create', 'store');
        $this->middleware(['permission:update-currencies'])->only('update', 'edit');
        $this->middleware(['permission:delete-currencies'])->only('destroy', 'bulkDelete');
    } // end of __construct
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('dashboard.admin.currencies.index');
    }

    public function data()
    {
        $currencies = Currency::query();

        return DataTables::of($currencies)
            ->addColumn('record_select', 'dashboard.admin.courses.data_table.record_select')
            ->addColumn('actions', 'dashboard.admin.currencies.data_table.actions')
            ->rawColumns(['record_select', 'actions'])
            ->addIndexColumn()
            ->toJson();
    }
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('dashboard.admin.currencies.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $data = $request->validate([
            'name' => ['required' , 'unique:currencies,name' , 'string'],
            'code' => ['required' , 'unique:currencies,code' , 'string'],
        ]);

        Currency::create($data);

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.currencies.index');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit(Currency $currency)
    {
        return view('dashboard.admin.currencies.edit', compact('currency'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Currency $currency)
    {
        $data = $request->validate([
            'name' => ['required' , 'unique:currencies,name,' . $currency->id , 'string'],
            'code' => ['required' , 'unique:currencies,code,' . $currency->id , 'string'],
        ]);

        $currency->update($data);

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.currencies.index');
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Currency $currency)
    {
        // Check if there's no related students
        $currency->delete();
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.currencies.index');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/CourseController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Exports\CourseExport;
use App\Models\Course;
use App\Models\Semester;
use App\Models\StudyYear;
use App\Models\Department;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use App\Http\Controllers\Controller;
use Maatwebsite\Excel\Facades\Excel;
use App\Http\Requests\StoreCourseRequest;
use App\Http\Requests\UpdateCourseRequest;
use App\Imports\CourseImport;

class CourseController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $departments = Department::all();
        $religions = Course::RELIGIONS;

        return view('dashboard.admin.courses.index', compact('religions','departments'));
    }

    public function data()
    {
        $courses = Course::query()
            ->WhenDepartmentId(request()->department_id);

        return DataTables::of($courses)
            ->addColumn('record_select', 'dashboard.admin.courses.data_table.record_select')
            ->editColumn('created_at', function (Course $course) {
                return $course->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.courses.data_table.actions')
            ->rawColumns(['record_select', 'actions'])
            ->addIndexColumn()
            ->toJson();
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $religions = Course::RELIGIONS;
        $departments = Department::all();
        return view('dashboard.admin.courses.create', compact('religions', 'departments'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\StoreCourseRequest  $request
     * @return \Illuminate\Http\Response
     */
    public function store(StoreCourseRequest $request)
    {
        Course::create($request->validated());

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.courses.index');
    }

    public function createViaExcel() {
        $departments = Department::all();
        return view('dashboard.admin.courses.import-excel' , compact('departments'));;
    }

    public function storeViaExcel(Request $request) {

        $this->validate($request,[
            'excel' => 'required|mimes:xlsx',
            'department_id' => 'required|exists:departments,id',
        ]);

        try {
            Excel::import(new CourseImport($request->department_id), $request->excel);
        } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            $errors = $e->failures();
            $messages = $errors[0]->errors();
            return back()->with('excel_error', $messages[0])->withInput();
        }

        return back()->with('success', __('site.exported_successfully'));
    }

    public function exportEmptyExcelSample() {
        return Excel::download(new CourseExport,'courses_sample.xlsx');
    }
    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Http\Response
     */
    public function edit(Course $course)
    {
        $religions = Course::RELIGIONS;
        $departments = Department::all();

        return view('dashboard.admin.courses.edit', compact('course', 'religions','departments'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\UpdateCourseRequest  $request
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Http\Response
     */
    public function update(UpdateCourseRequest $request, Course $course)
    {
        $course->update($request->validated());

        if(!$request->has('has_practical')) {
            $course->update(['has_practical' => false]);
        }

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.courses.index');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Course  $course
     * @return \Illuminate\Http\Response
     */
    public function destroy(Course $course)
    {
        $course->studyPlanDates()->delete();
        $course->studyPlan()->delete();

        $course->delete();

        session()->flash('success', __('site.deleted_successfully'));

        return redirect()->route('dashboard.admin.courses.index');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/AjaxController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Models\Department;
use Illuminate\Http\Request;

class AjaxController extends Controller
{
    public function getStudents(Department $department)
    {
        $students = $department->students;

        return response()->json($students);

    }//end of fun

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/AdmissionTypeController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\AdmissionTypeRequest;
use App\Models\AdmissionType;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;

class AdmissionTypeController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-admission_types'])->only('index','data');
        $this->middleware(['permission:create-admission_types'])->only('create','store');
        $this->middleware(['permission:update-admission_types'])->only('update','edit');
        $this->middleware(['permission:delete-admission_types'])->only('destroy','bulkDelete');

    }// end of __construct

    public function index()
    {
        return view('dashboard.admin.admission_types.index');

    }//end of index

    public function data()
    {
        $admissionType = AdmissionType::query();

        return DataTables::of($admissionType)
            ->addColumn('record_select', 'dashboard.admin.admission_types.data_table.record_select')
            ->editColumn('created_at', function (AdmissionType $admissionType) {
                return $admissionType->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.admission_types.data_table.actions')
            ->rawColumns(['record_select', 'actions'])
            ->addIndexColumn()
            ->toJson();

    }// end of data


    public function create()
    {
        return view('dashboard.admin.admission_types.create');

    }//end of create


    public function store(AdmissionTypeRequest $request)
    {
        AdmissionType::create($request->validated());

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.admission_types.index');

    }// end of store


    public function edit(AdmissionType $admissionType)
    {
        return view('dashboard.admin.admission_types.edit', compact('admissionType'));

    }//end of edit


    public function update(AdmissionTypeRequest $request, AdmissionType $admissionType)
    {
        $admissionType->update($request->validated());

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.admission_types.index');

    }// end of store

    public function destroy(AdmissionType $admissionType)
    {
        $admissionType->delete();
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.admission_types.index');

    }// end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $admissionType = $admissionType::FindOrFail($recordId);
            $this->delete($admissionType);

        }//end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of bulkDelete

    private function delete(AdmissionType $admissionType)
    {
        $admissionType->delete();

    }// end of delete

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/AdminController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\AdminRequest;
use App\Models\Admin;
use App\Models\Rol;
use Yajra\DataTables\DataTables;

class AdminController extends Controller
{
    public function __construct()
    {
        $this->middleware(['permission:read-admins'])->only('index','data');
        $this->middleware(['permission:create-admins'])->only('create','store');
        $this->middleware(['permission:update-admins'])->only('update','edit');
        $this->middleware(['permission:delete-admins'])->only('destroy','bulkDelete');

    }// end of __construct

    public function index()
    {
        return view('dashboard.admin.admins.index');

    }// end of index

    public function data()
    {
        $admins = Admin::query();

        return DataTables::of($admins)
            ->addColumn('roles', function (Admin $admin) {
                return view('dashboard.admin.admins.data_table.roles', compact('admin'));
            })
            ->editColumn('created_at', function (Admin $admin) {
                return $admin->created_at->format('Y-m-d');
            })
            ->addColumn('actions', 'dashboard.admin.admins.data_table.actions')
            ->rawColumns([ 'roles', 'actions'])
            ->addIndexColumn()
            ->toJson();

    }// end of data

    public function create()
    {
        $roles = Rol::whereNotIn('name', ['super_admin'])->get();
        return view('dashboard.admin.admins.create', compact('roles'));

    }// end of create

    public function store(AdminRequest $request)
    {
        $requestData = $request->safe()->except(['role','password']);
        $requestData['password'] = bcrypt($request->password);

        $admin = Admin::create($requestData);
        $admin->assignRole($request->role);

        session()->flash('success', __('site.added_successfully'));
        return redirect()->route('dashboard.admin.admins.index');

    }// end of store

    public function edit(Admin $admin)
    {
        $roles = Rol::whereNotIn('name', ['super_admin'])->get();

        return view('dashboard.admin.admins.edit', compact('admin', 'roles'));

    }// end of edit

    public function update(AdminRequest $request, Admin $admin)
    {
        $requestData = $request->safe()->except(['role','password']);
        if ($request->password) {
            $requestData['password'] = bcrypt($request->password);
        }

        $admin->update($requestData);
        $admin->syncRoles($request->role);

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->route('dashboard.admin.admins.index');

    }// end of update

    public function destroy(Admin $admin)
    {
        $admin->delete();
        session()->flash('success', __('site.deleted_successfully'));
        return redirect()->route('dashboard.admin.admins.index');

    }// end of destroy

    public function bulkDelete()
    {
        foreach (json_decode(request()->record_ids) as $recordId) {

            $admin = Admin::FindOrFail($recordId);
            $this->delete($admin);

        }//end of for each

        session()->flash('success', __('site.deleted_successfully'));
        return response(__('site.deleted_successfully'));

    }// end of bulkDelete

    private function delete(Admin $admin)
    {
        $admin->delete();

    }// end of delete

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/ActiveStudyPlanController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Models\Course;
use App\Models\Student;
use App\Models\Semester;
use App\Models\StudyDate;
use App\Models\StudyPlan;
use App\Models\Department;
use App\Models\Registration;
use Illuminate\Http\Request;
use App\Models\CourseStudent;
use App\Models\StudyPlanDate;
use App\Models\StudyPlanCourse;
use Yajra\DataTables\DataTables;
use App\Models\RegistrationCourse;
use Illuminate\Support\Facades\DB;

use App\Http\Controllers\Controller;
use function GuzzleHttp\Promise\all;

class ActiveStudyPlanController extends Controller
{

    public function __construct()
    {
        $this->middleware(['permission:read-active_study_plan'])->only('index', 'data', 'getStudyPlanRegistrations', 'getStudyPlanCourses');
        $this->middleware(['permission:create-active_study_plan'])->only('create', 'store');
        $this->middleware(['permission:update-active_study_plan'])->only('update', 'edit', 'editRegistrations', 'updateRegistrations');
        $this->middleware(['permission:delete-active_study_plan'])->only('destroy', 'bulkDelete');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $departments = Department::all();
        $semesters = Semester::all();

        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $isActiveStudyPlanEstablishd = StudyPlanDate::where('study_date_id', $activeStudyDate->id)->exists();

        return view('dashboard.admin.active_study_plan.index', compact('departments', 'semesters', 'isActiveStudyPlanEstablishd'));
    }

    public function data()
    {
        $activeStudyDate = StudyDate::where('archived', 1)->first();

        $studyPlanDates = DB::table('study_plan_dates')
            ->select(
                'study_plan_dates.id',
                'departments.name as department_name',
                'semesters.name as semester_name',
                'courses.hours',
            )
            ->selectRaw('COUNT(*) as courses_count')
            ->selectRaw('SUM(hours) as hours_count')
            ->selectRaw('SUM(hours) as hours_count')
            ->join('courses', 'courses.id', 'study_plan_dates.course_id')
            ->join('departments', 'departments.id', 'study_plan_dates.department_id')
            ->join('semesters', 'semesters.id', 'study_plan_dates.semester_id')
            ->where('study_date_id', $activeStudyDate->id)
            ->when(request()->department_id,function($q) {
                $q->where('study_plan_dates.department_id',request()->department_id);
            })
            ->when(request()->semester_id,function($q) {
                $q->where('study_plan_dates.semester_id',request()->semester_id);
            })
            // ->whereStudyDateId($activeStudyDate->id)
            ->groupBy('study_plan_dates.semester_id', 'study_plan_dates.department_id')
            ->get();


        return DataTables::of($studyPlanDates)
            ->addColumn('actions', 'dashboard.admin.active_study_plan.data_table.actions')
            ->rawColumns(['actions'])
            ->addIndexColumn()
            ->toJson();
    }

    public function establishStudyPlan()
    {
        return DB::transaction(function () {
            $activeStudyDate = StudyDate::where('archived', 1)->first();

            foreach (StudyPlan::all() as $studyPlan) {
                $studyPlanDate = StudyPlanDate::updateOrCreate(
                    [
                        'department_id' => $studyPlan->department_id,
                        'semester_id' => $studyPlan->semester_id,
                        'course_id' => $studyPlan->course_id,
                        'study_date_id' => $activeStudyDate->id,
                    ]
                );

                $this->syncStudentsCourses($studyPlanDate);
            }

            // session()->flash('success', __('site.added_successfully'));
            // return back();
        });
    }

    public function syncStudentsCourses($studyPlanDate)
    {
        $students = Student::select('id', 'study_year_id')
            ->where('department_id', $studyPlanDate->department_id)
            ->where('study_year_id', $studyPlanDate->semester->study_year_id)
            ->get();

        $course = $studyPlanDate->course;

        foreach ($students as $student) {
            CourseStudent::updateOrCreate([
                'student_id' => $student->id,
                'course_id' => $studyPlanDate->course_id,
                'semester_id' => $studyPlanDate->semester_id,
                'study_year_id' => $student->study_year_id,
            ], [
                'hours' => $course->hours,
            ]);
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $departments = Department::all();
        $semesters = Semester::all();
        return view('dashboard.admin.active_study_plan.create', compact('departments', 'semesters'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $array = collect($request->items);
        $departments = $array->groupBy('department');

        foreach ($departments as $key => $group) {
            $departments[$key] = $group->groupBy('semester');
        }

        $departments = $departments->first();

        $study_date = StudyDate::where('archived', 1)->first();

        foreach ($departments as $department) {
            $study_plan_id = 0;
            foreach ($department as $semester) {
                if ($study_plan_id == 0) {
                    $study_plan = StudyPlan::create([
                        'is_general' => false,
                    ]);

                    $study_plan_id = $study_plan->id;

                    StudyPlanDate::updateOrCreate([
                        'department_id' => $semester['department'],
                        'semester_id' => $semester['semester'],
                        'study_plan_id' => $study_plan_id,
                        'study_date_id' => $study_date->id,
                    ]);
                }

                StudyPlanCourse::create([
                    'study_plan_id' => $study_plan_id,
                    'course_id' => $semester['course']['id'],
                ]);
            }
        }

        session()->flash('success', __('site.added_successfully'));
        return response('success');
    }


    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(StudyPlanDate $studyPlanDate)
    {
        $studyPlanDate->load('course');
        return view('dashboard.admin.active_study_plan.show',compact('studyPlanDate'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit(StudyPlanDate $studyPlanDate)
    {
        $studyPlanDate->load('department', 'semester');

        return view('dashboard.admin.active_study_plan.edit', compact('studyPlanDate'));
    }

    public function getStudyPlanCourses()
    {
        $activeStudyDate = StudyDate::where('archived', 1)->first();
        // dd(request()->all());
        $studyPlanDates = StudyPlanDate::with('course')
            ->where('semester_id', request()->semester_id)
            ->where('department_id', request()->department_id)
            ->where('study_date_id', $activeStudyDate->id)
            ->get();

        $courses = Course::all();

        return DataTables::of($courses)
            ->addColumn('is_selected', function ($course) use ($studyPlanDates) {
                // dd($studyPlanDates->pluck('course_id')->toArray());
                return in_array($course->id, $studyPlanDates->pluck('course_id')->toArray());
            })
            ->addIndexColumn()
            ->toJson();
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, StudyPlanDate $studyPlanDate)
    {
        return DB::transaction(function () use ($request, $studyPlanDate) {

            // TODO: get studnets within the current study plan date
            $activeStudyDate = StudyDate::where('archived', 1)->first();

            StudyPlanDate::where('department_id', $request->department_id)
                ->where('semester_id', $request->semester_id)
                ->where('study_date_id', $activeStudyDate->id)
                ->delete();

            foreach ($request->course_id as $course_id) {
                StudyPlanDate::create([
                    'semester_id' => $request->semester_id,
                    'department_id' => $request->department_id,
                    'course_id' => $course_id,
                    'study_date_id' => $activeStudyDate->id
                ]);
            }

            // TODO: sync studnets within the current study plan date

            session()->flash('success', __('site.added_successfully'));
            return response('success');
        });
    }

    public function editRegistrations(StudyPlanDate $studyPlanDate)
    {

        return view('dashboard.admin.active_study_plan.edit-registrations', compact('studyPlanDate'));
    }

    public function getStudyPlanRegistrations(StudyPlanDate $studyPlanDate)
    {

        $students = Student::where('department_id', $studyPlanDate->department_id)
            ->where('study_year_id', $studyPlanDate->semester->study_year_id)
            ->get();
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(StudyPlanDate $studyPlanDate)
    {
        return DB::transaction(function () use ($studyPlanDate) {

            $studyPlanDate->studyPlan()->delete();

            session()->flash('success', __('site.deleted_successfully'));
            return redirect(route('dashboard.admin.active_study_plan.index'));
        });
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/ActiveStudyPlanArchiveController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin;

use App\Exports\ActiveStudyPlanExport;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Maatwebsite\Excel\Facades\Excel;

class ActiveStudyPlanArchiveController extends Controller
{
    public function index() {
        return view('dashboard.admin.active_study_plan.archive.index');
    }

    public function createViaExcel() {
        return view('dashboard.admin.active_study_plan.archive.add_via_excel');
    }

    public function exportEmptyExcelSample()
    {
        return Excel::download(new ActiveStudyPlanExport, 'archived_active_study_plans_sample.xlsx');
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/public/admin_assets/plugins/ckeditor/samples/old/sample_posteddata.php

      
-----------------------------------------------


      <?php /* <body><pre>

-------------------------------------------------------------------------------------------
  CKEditor - Posted Data

  We are sorry, but your Web server does not support the PHP language used in this script.

  Please note that CKEditor can be used with any other server-side language than just PHP.
  To save the content created with CKEditor you need to read the POST data on the server
  side and write it to a file or the database.

  Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.
  For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
-------------------------------------------------------------------------------------------

</pre><div style="display:none"></body> */ include "assets/posteddata.php"; ?>

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Traits/Dashboard/Admin/Results/ShowStudentsResultTrait.php

      
-----------------------------------------------


      <?php

namespace App\Http\Traits\Dashboard\Admin\Results;

use App\Models\Student;
use Illuminate\Support\Facades\DB;

trait ShowStudentsResultTrait
{
    public function scopeWithResults($query, $study_date_id, $study_year_id, $is_first_exam)
    {
        return
            $query
            ->withStudentsResultDetails()
            ->join('course_students',function($q) use($study_year_id) {
                $q->on('course_students.student_id' , 'students.id')
                    ->where('course_students.study_year_id' ,$study_year_id)
                ;
            })
            ->withResultRegestrations(study_date_id: $study_date_id, study_year_id: $study_year_id)
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->withStudentResults(study_date_id: $study_date_id, is_first_exam: $is_first_exam)
            ->withResultCourseStudentDegree($study_date_id , $is_first_exam);
    }

    public function scopeWithResultRegestrations($q, $study_date_id, $study_year_id)
    {
        return $q->join('registrations', function ($q) use ($study_date_id, $study_year_id) {
            $q->on('registrations.student_id', 'students.id')
                ->where('registrations.study_date_id', $study_date_id)
                ->where('registrations.study_year_id', $study_year_id)
            ;
        });
    }

    public function scopeWithStudentResults($q, $study_date_id, $is_first_exam)
    {
        return $q->join('student_results', function ($q) use ($study_date_id, $is_first_exam) {
            $q->on('student_results.student_id', 'students.id')
                ->where('registrations.study_date_id', $study_date_id)
                ->where('is_first_exam', $is_first_exam);
        });
    }

    public function scopeWithResultCourseStudentDegree($q, $study_date_id , $is_first_exam)
    {
        return $q
            ->leftJoin('course_student_degrees', function ($q) use ($study_date_id , $is_first_exam) {
                $q
                    // ->on('course_student_degrees.student_id', 'students.id')
                    // ->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->when($is_first_exam == true , fn($q) => $q->on('course_student_degrees.id', 'course_students.course_student_degree_id'))
                    ->when($is_first_exam == false , fn($q) => $q->on('course_student_degrees.id', 'course_students.second_round_course_student_degree_id'))
                    ->where('course_student_degrees.study_date_id', $study_date_id);
            });
    }


    public function scopeWithStudentsResultDetails($q)
    {
        return $q->addSelect(
            'students.id',
            'students.university_id',
            'students.name1',
            'students.name2',
            'students.name3',
            'students.name4',
            'courses.min_degree',
            'course_student_degrees.theory_degree',
            'course_student_degrees.practical_degree',
            'course_student_degrees.degree_code',
            'course_student_degrees.attendance_status',
            'student_results.cgpa',
            'student_results.description',
        );
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Traits/Dashboard/Admin/Results/EnterSecondRoundResultTrait.php

      
-----------------------------------------------


      <?php

namespace App\Http\Traits\Dashboard\Admin\Results;

use App\Models\Student;
use Illuminate\Support\Facades\DB;

trait EnterSecondRoundResultTrait
{
    public function scopeWithSecondRoundStudents($query, $semester_id, $study_date_id, $course_id)
    {
        return

            $query
            ->withSecondRoundStudentsDetails()
            ->withSecondRoundRegestrations(study_date_id: $study_date_id)
            ->withSecondRoundCourseStudent(course_id: $course_id, semester_id: $semester_id)
            ->withSecondRound($study_date_id)
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->withSecondRoundCourseStudentDegree($study_date_id);
    }

    public function scopeWithSecondRoundRegestrations($q, $study_date_id)
    {

        return $q->join('registrations', function ($q) use ($study_date_id) {
            $q
                ->on('registrations.student_id', 'students.id')
                ->where('registrations.study_date_id', $study_date_id);
        });
    }

    public function scopeWithSecondRoundCourseStudent($q, $course_id, $semester_id)
    {
        return $q->join('course_students', function ($q) use ($course_id, $semester_id) {
            $q->on('course_students.student_id', 'registrations.student_id')
                ->on('course_students.study_year_id', 'registrations.study_year_id')
                ->where('course_id', $course_id)
                ->where('semester_id', $semester_id);
        });
    }
    public function scopeWithSecondRoundCourseStudentDegree($q)
    {
        return $q
            ->leftJoin('course_student_degrees', function ($q) {
                $q->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.student_id', 'students.id')
                    ->where('is_first_exam', false);
            });
    }

    public function scopeWithSecondRound($q, $study_date_id)
    {
        return $q
            ->join('second_rounds', function ($q) use ($study_date_id) {
                $q->on('second_rounds.student_id', 'course_students.student_id')
                    ->on('second_rounds.course_id', 'course_students.course_id')
                    ->where('second_rounds.study_date_id', $study_date_id);
            });
    }


    public function scopeWithSecondRoundStudentsDetails($q)
    {

        return $q->addSelect(
            DB::raw('CONCAT(name1_en, " ", name2_en , " " , name3_en, " ", name4_en ) as name'),
            'registrations.id as registration_id',
            'students.id',
            'courses.min_degree',
            'courses.hours',
            'courses.has_practical',
            'students.university_id',
            'course_student_degrees.practical_degree',
            'course_student_degrees.theory_degree',
            'course_student_degrees.attendance_status',
            'course_students.study_year_id',
        );
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Traits/Dashboard/Admin/Results/EnterFirstRoundResultTrait.php

      
-----------------------------------------------


      <?php

namespace App\Http\Traits\Dashboard\Admin\Results;

use App\Models\Student;
use Illuminate\Support\Facades\DB;

trait EnterFirstRoundResultTrait
{
    public function scopeWithFirstRoundStudents($query, $semester_id, $study_date_id, $course_id)
    {
        return
            $query
            ->withStudentsDetails()
            ->withRegestrations(study_date_id: $study_date_id)
            ->withCourseStudent(course_id: $course_id, semester_id: $semester_id)
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->withCourseStudentDegree($study_date_id)
            ->withSecondRoundDegree($study_date_id);
    }

    public function scopeWithRegestrations($q, $study_date_id)
    {
        return $q->join('registrations', function ($q) use ($study_date_id) {
            $q
                ->on('registrations.student_id', 'students.id')
                ->where('registrations.study_date_id', $study_date_id)
                // ->where('last_status', '!=', StudentResult::STATUS_RETURNED_WITH_SOME_COURSES);
            ;
        });
    }

    public function scopeWithCourseStudent($q, $course_id, $semester_id)
    {
        return $q->join('course_students', function ($q) use ($course_id, $semester_id) {
            $q->on('course_students.student_id', 'registrations.student_id')
                ->on('course_students.study_year_id', 'registrations.study_year_id')
                ->where('course_id', $course_id)
                ->where('semester_id', $semester_id);
        });
    }
    public function scopeWithCourseStudentDegree($q, $study_date_id)
    {
        return $q
            ->leftJoin('course_student_degrees', function ($q) use ($study_date_id) {
                $q->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.student_id', 'students.id')
                    ->where('course_student_degrees.study_date_id', $study_date_id)
                    ->where('course_student_degrees.is_first_exam', true);
            });
    }

    public function scopeWithSecondRoundDegree($q, $study_date_id)
    {
        return $q
            ->leftJoin('course_student_degrees as second_round_degree', function ($q) use ($study_date_id) {
                $q->on('second_round_degree.course_id', 'course_students.course_id')
                    ->on('second_round_degree.student_id', 'students.id')
                    ->where('second_round_degree.study_date_id', $study_date_id)
                    ->where('second_round_degree.is_first_exam', false);
            });
    }


    public function scopeWithStudentsDetails($q)
    {
        return $q->addSelect(
            DB::raw('CONCAT(name1_en, " ", name2_en , " " , name3_en, " ", name4_en ) as name'),
            'registrations.id as registration_id',
            'students.id',
            'courses.min_degree',
            'courses.hours',
            'courses.has_practical',
            'students.university_id',
            'course_student_degrees.practical_degree',
            'course_student_degrees.theory_degree',
            'course_student_degrees.attendance_status',
            'course_students.study_year_id',
            'second_round_degree.id as second_round_degree_id'
        );
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Traits/Dashboard/Admin/PaymentOrders/HasSuspensionPaymentOrders.php

      
-----------------------------------------------


      <?php

namespace App\Http\Traits\Dashboard\Admin\PaymentOrders;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Models\Discount;
use App\Models\PaymentOrder;
use App\Models\Registration;

trait HasSuspensionPaymentOrders
{
    public function createSuspensionPaymentOrder($amount, $description = null)
    {

        $this->paymentOrders()
            ->where('archive', 0)
            ->delete();

        $order = new PaymentOrder();
        $order->student_id = $this->student_id;
        $order->study_date_id = $this->study_date_id;
        $order->registration_id = $this->id;
        $order->status = PaymentOrderStatus::STATUS_FREEZE;
        $order->amount = $amount;
        $order->total_amount = $this->justTotal;
        $order->archive = 0;
        $order->currency_id = $this->currency_id;
        $order->description = $description;
        $order->save();

        return $order;
    }

    public function createRegistrationPaymentOrderToReinstateStudent()
    {
        $this->paymentOrders()
            ->where('archive', 0)
            ->where('status', PaymentOrderStatus::STATUS_FREEZE)
            ->delete();

        $hasAnyRegistrationPayments = $this->paymentOrders()
            ->where('archive', 1)
            ->where('status', PaymentOrderStatus::STATUS_REGISTRATION)
            ->exists();

        $this->update([
            'status' => $hasAnyRegistrationPayments ? RegistrationStatus::STATUS_REGISTERED : RegistrationStatus::STATUS_UNREGISTERED
        ]);

        $this->createRegistrationPaymentOrder();
    }

    public function cancelSuspensionPaymentOrder()
    {
        $this->paymentOrders()
            ->where('archive', 0)
            ->where('status', PaymentOrderStatus::STATUS_FREEZE)
            ->delete();

        $this->createRegistrationPaymentOrder();
    }

    public function suspendRegistrationAfterSuspensionPaymentOrderIsPaid()
    {
        $this->update([
            'status' => RegistrationStatus::STATUS_FREEZED
        ]);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Traits/Dashboard/Admin/PaymentOrders/HasRegistrationPaymentOrders.php

      
-----------------------------------------------


      <?php

namespace App\Http\Traits\Dashboard\Admin\PaymentOrders;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Models\Discount;
use App\Models\PaymentOrder;
use App\Models\Registration;

trait HasRegistrationPaymentOrders
{
    public function createRegistrationPaymentOrder()
    {

        // Check if registration already has active payment order
        $hasActivePaymentOrder = $this->paymentOrders()
            ->where('archive', 0)
            ->whereIn('status', [PaymentOrderStatus::STATUS_REGISTRATION, PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS])
            ->exists();

        if ($hasActivePaymentOrder) {
            return;
        }

        $total = $this->justTotal;

        $discount = $this->getAvailableDiscount();

        $verifiedPayments = $this->getRegistrationPayments();

        $reminder = $total - $discount - $verifiedPayments;

        if ($reminder > 0) {
            $order = new PaymentOrder();
            $order->student_id = $this->student_id;
            $order->study_date_id = $this->study_date_id;
            $order->registration_id = $this->id;
            $order->status = $this->isFirstPayment() ? PaymentOrderStatus::STATUS_REGISTRATION : PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS;
            $order->amount = $this->isFirstPayment() ? round($reminder / 2, 0) : $reminder;
            $order->total_amount = $total;
            $order->archive = 0;
            $order->currency_id = $this->currency_id;
            $order->save();
        }
    }

    public function refreshRegistrationPaymentOrderAfterStudentDiscountsIsUpdated()
    {
        $this->paymentOrders()
            ->where('archive', 0)
            ->whereIn('status', [PaymentOrderStatus::STATUS_REGISTRATION, PaymentOrderStatus::STATUS_REMAINING_INSTALLMENTS])
            ->delete()
        ;

        $this->createRegistrationPaymentOrder();
    }

    public function getRegistrationPayments()
    {
        return $this->payments->sum('amount');
    }

    public function isFirstPayment(): bool
    {
        return $this->payments->isEmpty();
    }


    public function getAvailableDiscount(): int
    {
        $discounts = Discount::where([
            'registration_id' => $this->id,
            'status' => 1
        ])->sum('amount');

        return $discounts > 0 ? $discounts : 0;
    }

    public function handleRegistrationStatusId()
    {
        if ($this->status == RegistrationStatus::STATUS_UNREGISTERED) {
            $this->update(['status' => RegistrationStatus::STATUS_REGISTERED]);
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Traits/Dashboard/Admin/PaymentOrders/HasDismissalPaymentOrders.php

      
-----------------------------------------------


      <?php

namespace App\Http\Traits\Dashboard\Admin\PaymentOrders;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Models\Discount;
use App\Models\PaymentOrder;
use App\Models\Registration;

trait HasDismissalPaymentOrders
{
    public function createDismissalPaymentOrder($amount , $description = null)
    {

        $this->paymentOrders()
            ->where('archive', 0)
            ->delete();

        $order = new PaymentOrder();
        $order->student_id = $this->student_id;
        $order->study_date_id = $this->study_date_id;
        $order->registration_id = $this->id;
        $order->status = PaymentOrderStatus::STATUS_DISMISSION;
        $order->amount = $amount;
        $order->total_amount = $this->justTotal;
        $order->archive = 0;
        $order->currency_id = $this->currency_id;
        $order->description = $description;
        $order->save();
    }

    public function cancelDismissalPaymentOrders() {

        $this->paymentOrders()
            ->where('status', PaymentOrderStatus::STATUS_DISMISSION)
            ->where('archive', 0)
            ->delete();

        $this->createRegistrationPaymentOrder();
    }

    public function dismissRegistrationAfterDismissalPaymentOrderIsPaid() {
        $this->update([
            'status' => RegistrationStatus::STATUS_DISMISSED
        ]);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Traits/Dashboard/Admin/PaymentOrders/HasBasePaymentOrders.php

      
-----------------------------------------------


      <?php

namespace App\Http\Traits\Dashboard\Admin\PaymentOrders;

use App\Models\Registration;

trait HasBasePaymentOrders {

protected Registration $registration;

    public function __construct(Registration $registration)
    {
        $this->registration = $registration;
    }

    public function getRegistrationPayments()
    {
        return $this->registration->payments->sum('amount');
    }

    public function isFirstPayment(): bool
    {
        return $this->registration->payments->isEmpty();
    }

}


      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/Setting/UniversityRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin\Setting;

use Illuminate\Foundation\Http\FormRequest;

class UniversityRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return false;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            //
        ];
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Requests/Dashboard/Admin/Setting/MainRequest.php

      
-----------------------------------------------


      <?php

namespace App\Http\Requests\Dashboard\Admin\Setting;

use Illuminate\Foundation\Http\FormRequest;

class MainRequest extends FormRequest
{
    public $attributes = [
        'allow_enter_grades' => 0,
    ];
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'name' => ['required', 'min:2', 'max:255'],
            'allow_enter_grades' => ['sometimes'],
        ];
    } //end of rules

    protected function prepareForValidation()
    {
        $this->merge([
            'allow_enter_grades' => $this->allow_enter_grades == 'on' ? true : false,
        ]);
    }
}//end of request

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Student/Courses/Lecture/TestTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Student\Courses\Lecture;

use Livewire\Component;

class TestTab extends Component
{
    public function render()
    {
        return view('livewire.student.courses.lecture.test-tab');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/CoursesShow.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses;

use Livewire\Component;
use App\Models\StudyPlanDate;
use App\Models\Elearning\Lecture;
use Illuminate\Support\Facades\Storage;
use App\Models\Elearning\StudentAssignment;
use App\Models\Student;

class CoursesShow extends Component
{
    protected $listeners = ['lectureCreated'];

    public $course;
    public $formIsVisible = false;
    public $activeLecture;
    public $studyPlanDate;
    public $studentsTests;
    public $students;

    public function mount($course , StudyPlanDate $studyPlanDate)
    {
        $this->course = $course;
        $this->activeLecture = $course->lectures->first();
        $this->studyPlanDate = $studyPlanDate;

        $this->students = Student::query()
        ->select('id','university_id','name1_en','name2_en','name3_en','name4_en')
        ->with(['courses' => function($q) {
            $q->where('course_id',$this->course->id)
            ->where('semester_id',$this->studyPlanDate->semester_id)
            ;

        }])
        ->has('registration')
        ->where('department_id',$this->studyPlanDate->department_id)
        ->get();


    }
    public function render()
    {
        return view('livewire.elearning.teacher.courses.courses-show');
    }

    public function lectureCreated()
    {
        $this->course = $this->course->fresh('lectures');
    }

    public function showAddLectureForm()
    {
        $this->formIsVisible = true;
        $this->emit('cancelEditMode');
    }

    public function setActiveLecture(Lecture $lecture)
    {
        $this->formIsVisible = false;
        $this->activeLecture = $lecture;
        $this->emit('lectureChanged', $lecture);
        
    }

    public function deleteLecture(Lecture $lecture)
    {
        $lecture->delete();
        foreach ($lecture->attachments as $attachment) {
            Storage::delete($attachment->path);
        }

        $this->course = $this->course->fresh('lectures.attachments', 'lectures.assignment');
    }

    public function editLecture(Lecture $lecture)
    {
        $this->activeLecture = $lecture;
        $this->formIsVisible = true;
        $this->emit('editLecture', $lecture, $this->course);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/CoursesIndex.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses;

use App\Models\Course;
use App\Models\Teacher;
use Livewire\Component;
use App\Models\StudyDate;
use App\Models\StudentResult;
use App\Models\StudyPlanDate;
use App\Models\Elearning\Lecture;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use App\Models\CourseStudentDegree;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Validator;
use Jantinnerezo\LivewireAlert\LivewireAlert;

class CoursesIndex extends Component
{
    use LivewireAlert;

    public Teacher $teacher;
    public Course $activeCourse;
    public StudyPlanDate $studyPlanDate;
    public $activeTab = 'assignments';
    public $activeStudyDate;
    public $students;
    public $attendanceStatus = CourseStudentDegree::STATUSES;


    public function render()
    {
        return view('livewire.elearning.teacher.courses.courses-index');
    }

    public function mount()
    {
        $this->teacher = auth('admin')->user()->teacher;
        $this->teacher->load('studyPlanDateTeacher.studyPlanDate.course.assignments.studentAssignments.student');
        $this->activeCourse = $this->teacher->studyPlanDateTeacher->first()?->studyPlanDate->course;
        $this->studyPlanDate = $this->teacher->studyPlanDateTeacher->first()?->studyPlanDate;

        $this->activeStudyDate = StudyDate::getActiveStudyDate();

        $this->students = $this->getCourseStudents()->map(fn ($student) => (array) $student);
    }

    protected function rules()
    {
        return [
            'activeCourse' => [],
            'studyPlanDate.attendance_degree' => 'numeric',
            'studyPlanDate.assignments_degree' => 'numeric',
            'studyPlanDate.tests_degree' => 'numeric',

            'students.*.theory_degree' => 'numeric',
            'students.*.practical_degree' => 'numeric',
            'students.*.attendance_status' => 'numeric',

        ];
    }

    public function setActiveCourse(Course $course, StudyPlanDate $studyPlanDate)
    {
        $this->activeCourse = $course;
        $this->studyPlanDate = $studyPlanDate;

        $this->students = $this->getCourseStudents()->map(fn ($student) => (array) $student);

        $this->emit('courseChanged', $course, $studyPlanDate, $this->students);
    }

    public function setActiveTab($tab)
    {
        $this->activeTab = $tab;
    }

    public function updateStudyPlanDateMarks($field)
    {
        $this->withValidator(function (Validator $validator) use ($field) {
            $validator->after(function ($validator) use ($field) {
                $availableMarks = $this->studyPlanDate->attendance_degree + $this->studyPlanDate->assignments_degree + $this->studyPlanDate->tests_degree;

                if ($availableMarks != $this->studyPlanDate->practical_degree) {
                    $validator->errors()->add($field, 'Marks summation should be equal to ' . $this->studyPlanDate->practical_degree);
                }
            });
        })->validate();
        $this->studyPlanDate->save();

        session()->flash('success', __('site.updated_successfully'));
    }

    public function getCourseStudents()
    {

        return DB::table('students')
            ->select(
                'name1',
                'registrations.id as registration_id',
                'students.id as student_id',
                'courses.min_degree',
                'courses.hours',
                'courses.has_practical',
                'students.university_id',
                'course_student_degrees.practical_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.attendance_status',
                'course_students.study_year_id',
                'second_round_degree.id as second_round_degree_id'
            )
            ->join('registrations', function ($q) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $this->activeStudyDate->id)
                    // ->where('last_status', '!=', StudentResult::STATUS_RETURNED_WITH_SOME_COURSES);
                ;
            })
            ->join('course_students', function ($q) {
                $q->on('course_students.student_id', 'registrations.student_id')
                    ->on('course_students.study_year_id', 'registrations.study_year_id')
                    // ->where('course_students.study_date_id', $request->study_date_id)
                    ->where('course_id', $this->studyPlanDate->course_id)
                    ->where('semester_id', $this->studyPlanDate->semester_id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->leftJoin('course_student_degrees', function ($q) {
                $q->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.student_id', 'students.id')
                    ->where('course_student_degrees.study_date_id', $this->studyPlanDate->id)
                    ->where('course_student_degrees.is_first_exam', true);
            })
            ->leftJoin('course_student_degrees as second_round_degree', function ($q) {
                $q->on('second_round_degree.course_id', 'course_students.course_id')
                    ->on('second_round_degree.student_id', 'students.id')
                    ->where('second_round_degree.study_date_id', $this->studyPlanDate->id)
                    ->where('second_round_degree.is_first_exam', false);
            })
            ->union($this->generateReturnedStudentsUnion())
            ->get();
    }

    public function generateReturnedStudentsUnion()
    {
        return  DB::table('students')
            ->select(
                'name1',
                'registrations.id as registration_id',
                'students.id as student_id',
                'courses.min_degree',
                'courses.hours',
                'courses.has_practical',
                'students.university_id',
                'course_student_degrees.practical_degree',
                'course_student_degrees.theory_degree',
                'course_student_degrees.attendance_status',
                'course_students.study_year_id',
                'second_round_degree.id as second_round_degree_id'
            )
            ->join('registrations', function ($q) {
                $q
                    ->on('registrations.student_id', 'students.id')
                    ->where('registrations.study_date_id', $this->activeStudyDate->id)
                    // ->where('last_status', StudentResult::STATUS_RETURNED_WITH_SOME_COURSES)
                ;
            })
            ->join('course_students', function ($q) {
                $q->on('course_students.student_id', 'registrations.student_id')
                    ->on('course_students.study_year_id', 'registrations.study_year_id')
                    ->where('course_id', $this->activeCourse->id)
                    ->where('semester_id', $this->activeStudyDate->semester_id);
            })
            ->join('courses', 'courses.id', 'course_students.course_id')
            ->join('carry_out_courses', function ($q) {
                $q->on('carry_out_courses.student_id', 'students.id')
                    ->where('carry_out_courses.course_id', $this->activeCourse->id);
            })
            ->leftJoin('course_student_degrees', function ($q) {
                $q->on('course_student_degrees.course_id', 'course_students.course_id')
                    ->on('course_student_degrees.student_id', 'students.id')
                    ->where('course_student_degrees.study_date_id', $this->activeStudyDate->id)
                    ->where('is_first_exam', true);
            })
            ->leftJoin('course_student_degrees as second_round_degree', function ($q) {
                $q->on('second_round_degree.course_id', 'course_students.course_id')
                    ->on('second_round_degree.student_id', 'students.id')
                    ->where('second_round_degree.study_date_id', $this->activeStudyDate->id)
                    ->where('second_round_degree.is_first_exam', false);
            });
    }

    public function calculatePracticalDegrees()
    {
        /**
         * get the course 
         * foreach student
         * get assignments degree
         * get absents
         * get all tests degrees
         * sum assignments + absents + tests
         */

        $this->activeCourse->load('assignments.studentAssignments', 'lectures.lectureAttendances', 'lectures.studentTests');
        // dd($assignments);
        foreach ($this->students as $student) {
            $studentAssignmentsMark = 0;

            //assignments
            $this->activeCourse->assignments->each(function ($assignment) use ($student, $studentAssignmentsMark) {
                $studentAssignmentsMark += ($assignment->studentAssignments->firstWhere('student_id', $student['student_id'])?->mark ?? 0);
            });

            //absents

            $fullAttendanceMark = $this->studyPlanDate->attendance_degree;

            $absentMarkPerLecture = $fullAttendanceMark / ($this->activeCourse->lectures->count() > 0 ? $this->activeCourse->lectures->count() : 1);

            $absentLectures = 0;

            $this->activeCourse->lectures
                ->where('type', [Lecture::TYPE_LECTURE, Lecture::TYPE_LIVE_LECTURE])
                ->each(function ($lecture) use ($student, $absentLectures) {
                    $hasAbsent = $lecture->lectureAttendance->firstWhere('student_id', $student['student_id']);
                    if ($hasAbsent) {
                        ++$absentLectures;
                    }
                });

            $studentAttendanceMark =  $fullAttendanceMark -  ($absentLectures * $absentMarkPerLecture);

            //tests

            $studentTestsMarks = 0;

            $this->activeCourse->lectures
                ->where('type', [Lecture::TYPE_OFFLINE_TEST, Lecture::TYPE_ONLINE_TEST, Lecture::TYPE_PRACTICAL_EXAM])
                ->each(function ($lecture) use ($student, $studentTestsMarks) {
                    $studentTestsMarks += $lecture->studentTests->firstWhere('student_id', $student['student_id'])?->mark ?? 0;
                });

            $practicalDegree = $studentAssignmentsMark + $studentAttendanceMark + $studentTestsMarks;

            CourseStudentDegree::where('student_id', $student['student_id'])
                ->where('course_id', $this->activeCourse->id)
                ->where('study_date_id', $this->activeStudyDate->id)
                ->update([
                    'practical_degree' => $practicalDegree
                ]);
        }

        $this->students = $this->getCourseStudents();
        $this->students = $this->students->map(function ($student) {
            return (array)$student;
        });


        $this->alert('success', 'Updated successfully');
    }

    public function updateDegree($degreeType, int $key, $studentId)
    {

        $this->withValidator(function (Validator $validator) use ($degreeType, $studentId, $key) {
            $validator->after(function ($validator) use ($degreeType, $studentId, $key) {
                $student = $this->students->firstWhere('student_id', $studentId);
                if ($student['theory_degree'] + $student['practical_degree'] > 100) {
                    // dd('students.' .  $key . '.' .  $degreeType);
                    $validator->errors()->add('students.' .  (int)$key . '.' .  $degreeType, 'Marks should be equal or less than 100 ');
                }
            });
        })->validate();

        $student = $this->students->firstWhere('student_id', $studentId);

        $studentDegree = CourseStudentDegree::where('student_id', $studentId)
            ->where('course_id', $this->activeCourse->id)
            ->where('study_date_id', $this->activeStudyDate->id)
            ->update([
                $degreeType => $student[$degreeType]
            ]);

        $this->students = $this->getCourseStudents()->map(fn ($student) => (array) $student);

        // if($degreeType == 'theory_degree') {
        //     $studentDegree->update([
        //         'theory_degree' => $student[$degreeType]
        //     ]);
        // } else {
        //     $studentDegree->update([
        //         'practical_degree' => $student[$degreeType]
        //     ]);
        // }

        // if($studentDegree) {
        //     $studentDegree->update([
        //         $degreeType => $student[$degreeType]
        //     ]);
        // } else {
        //     CourseStudentDegree::create([
        //         'student_id' => $studentId,
        //         'course_id' => $this->activeCourse->id,
        //         'study_date_id' => $this->activeStudyDate->id,
        //         $degreeType => $student[$degreeType]
        //     ]);
        // }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/CourseMarksTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses;

use Livewire\Component;
use App\Models\CourseStudentDegree;
use Illuminate\Validation\Validator;
use Jantinnerezo\LivewireAlert\LivewireAlert;

class CourseMarksTab extends Component
{
    use LivewireAlert;

    public $student;
    public $attendanceStatus = CourseStudentDegree::STATUSES;
    public $activeCourse;
    public $activeStudyPlanDate;
    public $activeStudyDate;

    public function render()
    {
        return view('livewire.elearning.teacher.courses.course-marks-tab');
    }

    public function mount($student , $activeCourse , $activeStudyPlanDate , $activeStudyDate)
    {
        $this->student = $student;
        $this->activeCourse = $activeCourse;
        $this->activeStudyPlanDate = $activeStudyPlanDate;
        $this->activeStudyDate = $activeStudyDate;

        //dd() ;
        $this->student['theory_degree'] = $this->student['theory_degree'] ?? 0;
        $this->student['practical_degree'] = $this->student['practical_degree'] ?? 0;
    }

    protected  function rules() {
        return [
            'student.theory_degree' => 'numeric',
            'student.practical_degree' => 'numeric',
        ];
    }

    public function save($degreeType) {
        $this->withValidator(function (Validator $validator) use ($degreeType,) {
            $validator->after(function ($validator) use ($degreeType) {
                if($this->student['theory_degree'] + $this->student['practical_degree'] > 100) {

                    $validator->errors()->add('student.' . $degreeType, 'Total marks should be less than or equal to 100 ');

                }
            });
        })->validate();

        CourseStudentDegree::where('student_id',$this->student['student_id'])
        ->where('course_id',$this->activeCourse->id)
        ->where('study_date_id',$this->activeStudyDate->id)
        ->update([
            $degreeType => $this->student[$degreeType]
        ]);

        $this->alert('success', 'Updated successfully');

    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/AssignmentsItem.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses;

use App\Models\Elearning\Assignment;
use Livewire\Component;
use Illuminate\Support\Str;
use App\Models\Elearning\StudentAssignment;

class AssignmentsItem extends Component
{
    public $studentAssignments;
    public $assignments;


    public function mount($studentAssignments)
    {
        $this->studentAssignments = $studentAssignments;

        $studentAssignments->load('assignment');

        foreach ($this->studentAssignments as $studentAssignment) {
            $this->assignments[$studentAssignment->id] = $studentAssignment;
        }
    }
    // q: How to apply max rule to each item in array?
    // a: https://stackoverflow.com/a/64100000/10473124
    public function render()
    {
        return view('livewire.elearning.teacher.courses.assignments-item');
    }

    protected function rules()
    {
        return [
            'assignments.*.mark' => 'required|integer|lte:assignments.*.assignment.full_mark',
        ];
    }

    protected $messages = [
        'assignments.*.mark.numeric' => 'يجب أن تكون الدرجة رقما.',
        // 'assignments.*.mark.lte' => 'يجب أن تكون الدرجة أقل من أو تساوي الدرجة الكاملة.',
    ];

    protected $validationAttributes = [
        'assignments.*.mark' => 'الدرجة',
        'mark' => 'الدرجة',
    ];

    public function updatedAssignments($value, $key)
    {
        // dd(44);
        // $assignmentId = $this->studentAssignments->firstWhere('id',1)->assignment_id;

        // $full_mark = Assignment::find($assignmentId)?->full_mark;

        $this->validate();
        // $this->validate([
        //     'assignments.' . $key => 'required|numeric|lte:' . 10 ,
        // ]);

        // $this->validateOnly($value,[
        //     'assignments.' . $key => 'required|numeric|lte:' . 20 ,
        // ]);

        // dd($value);

        $index = Str::before($key, '.');

        StudentAssignment::find($index)?->update([
            'mark' => $value,
        ]);
    }

    public function getTotalProperty()
    {

        return collect($this->assignments)->sum('mark');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Student/Courses/CoursesIndex.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Student\Courses;

use Carbon\Carbon;
use App\Models\Course;
use App\Models\Student;
use Livewire\Component;
use Illuminate\Support\Str;
use App\Models\CourseStudent;
use Livewire\WithFileUploads;
use App\Models\Elearning\Lecture;
use Illuminate\Support\Facades\DB;
use App\Models\Elearning\Attachment;
use Illuminate\Support\Facades\Hash;
use App\Http\Resources\StudentCourses;
use Illuminate\Support\Facades\Storage;
use App\Models\Elearning\StudentAssignment;
use Psy\CodeCleaner\AssignThisVariablePass;
use Jantinnerezo\LivewireAlert\LivewireAlert;

class CoursesIndex extends Component
{
    use WithFileUploads;
    use LivewireAlert;

    public $courses;
    public $activeCourse;
    public $selectedCourse;
    public $activeLecture;
    public $activeTab = 'videos';
    public $attachment_type_video = Attachment::ATTACHMENT_TYPE_VIDEO;
    public $attachment_type_file = Attachment::ATTACHMENT_TYPE_FILE;
    public $activeVideo;
    public $studentAssignment;
    public $canUploadAssignment;

    public $lecture_type_lecture = Lecture::TYPE_LECTURE;
    public $lecture_type_live_lecture = Lecture::TYPE_LIVE_LECTURE;
    public $lecture_type_online_test = Lecture::TYPE_ONLINE_TEST;

    public $testStatus = 'notStarted';
    public $activeTest;

    protected $listeners = ['testStarted', 'testPaused', 'testResumed', 'testEnded', 'confirmed'];


    public function render()
    {
        return view('livewire.elearning.student.courses.courses-index');
    }

    public function mount()
    {
        $student = Student::with('registration:id,student_id,last_status')->find(auth('student')->user()->student_id);

        $courses = Course::query()
            ->whereHas('courseStudents', function ($q) use ($student) {
                $q
                    ->where('student_id', $student->id)
                    ->where('study_year_id', $student->student->study_year_id ?? 1)
                    ->when($student->registration->last_status != null, function ($q) use($student) {
                        $q
                            ->whereHas('carryOutCourse', fn ($q) => $q->where('student_id', $student->student_id));
                    });
            })
            ->with('lectures.attachments', 'lectures.assignment')
            ->get();

        $this->courses = $courses;
        $this->activeCourse = $courses->first();
        $this->selectedCourse = $courses->first();
        $this->activeLecture = $this->activeCourse?->lectures?->first();
        $this->activeVideo = $this->activeLecture?->attachments?->firstWhere('type', $this->attachment_type_video) ?? null;
        $this->canUploadAssignment =  !$this->activeLecture?->assignment?->isPast;
    }

    public function rules()
    {
        return [
            'activeCourse' => 'required',
            'activeLecture' => 'required',
            'selectedCourse' => 'required',
            'studentAssignment' => 'file'
        ];
    }

    public function setActiveLecture(Lecture $lecture)
    {
        $this->activeLecture = $lecture;
        $this->canUploadAssignment =  !$this->activeLecture->assignment?->isPast;
        $this->activeVideo = null;

        if ($lecture->type == $this->lecture_type_online_test) {
            $this->activeTab = '';
        }
    }

    public function setActiveTab($tab)
    {
        $this->activeTab = $tab;
    }

    public function updatedSelectedCourse()
    {
        $this->activeCourse = $this->courses->firstWhere('id', $this->selectedCourse);

        $this->activeLecture = $this->activeCourse->lectures->first() ?? new Lecture();
    }

    public  function setActiveVideo(Attachment $video)
    {
        $this->activeVideo = $video;
        $this->emit('videoSrcChanged', $video);
    }

    public function uploadAssignment()
    {
        return DB::transaction(function () {

            $assignment = StudentAssignment::where('student_id', auth('student')->user()->student_id)
                ->where($this->activeLecture->assignment->id)
                ->first();

            if ($assignment->exists()) {
                Storage::delete($assignment->path);
            }

            $path = $this->assignment->store('elearning/student/assignments');
            StudentAssignment::updateOrCreate([
                'student_id' => auth('student')->user()->student_id,
                'assignment_id' => $this->activeLecture->assignment->id,
            ], [
                'path' => $path,
            ]);

            session()->flash('success', __('site.updated_successfully'));
        });
    }

    public function testStarted(Lecture $lecture)
    {
        $this->activeTest = $lecture;
        $text = 'A teacher has started a test for ' . $lecture->course->name_en . ' course , click to join the test';
        $this->alert('question', 'A teacher has started a test', [
            'position' =>  'center',
            'timer' =>  null,
            'toast' =>  true,
            'text' =>  $text,
            'showCancelButton' =>  true,
            'cancelButtonText' => 'Ignore',
            'showConfirmButton' =>  true,
            'confirmButtonText' => 'Join Now!',
            'onConfirmed' => 'confirmed',
            'lecture' => $lecture,
            'width' =>  545,
        ]);
    }

    public function testPaused()
    {
    }

    public function testResumed()
    {
    }

    public function testEnded()
    {
    }

    public function confirmed()
    {
        $this->selectedCourse = $this->activeTest->course->id;
        $this->activeCourse = $this->activeTest->course;
        $this->activeLecture = $this->activeTest;
        $this->activeTab = '';
        $this->testStatus = 'started';
        $this->emit('teacherStartedATest', $this->activeTest);
    }


    public function downloadAttachment(Attachment $attachment)
    {
        $this->alert('success', 'downloaded successfully');

        return Storage::download(Str::after($attachment->path, 'storage/'), $attachment->title);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Student/StudentSettingStudentController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Student;

use App\Enums\PaymentOrderStatus;
use App\Enums\RegistrationStatus;
use App\Models\StudyDate;
use Illuminate\Support\Str;
use App\Models\PaymentOrder;
use App\Models\Registration;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\CourseStudentDegree;
use App\Models\Student;

class StudentSettingStudentController extends Controller
{

    public function freeze(Request $request)
    {
        // dd($request->all());
        if($this->hasAnyExams($request->student_id)) {
            return response('لا يمكن تجميد ملف الطالب بعد رصد درجاته',403);
        }

        $studyDate    = StudyDate::getActiveStudyDate();
        $registration = Registration::where(['student_id'=> $request->student_id,'study_date_id' => $studyDate->id])->latest()->first();

        //check has freeze
        $paymentOrder = PaymentOrder::where([
           'student_id'    => $request->student_id,
           'study_date_id' => $studyDate->id,
           'status'     => PaymentOrderStatus::STATUS_FREEZE,
        ])->first();

        $data = view('dashboard.admin.students.includes._freeze', compact('studyDate', 'registration', 'paymentOrder'));

        return $data;

    }///end if fun

    public function freezeStore(Request $request)
    {
        $registration = Registration::find($request->registration_id);

        $registration->cancelAllPaymentOrders();

        $paymentOrder = PaymentOrder::create($request->all());

        $paymentOrder->update(['archive' => 0]);

        // $paymentOrder->addMediaFromRequest('photo')->usingName(Str::uuid())->toMediaCollection('freezes');


        return response(__('site.added_successfully'));

    }//end of fun

    public function hasAnyExams($student_id) {
        $activeStudyDate = StudyDate::getActiveStudyDate();

        $degreesExists = CourseStudentDegree::query()
        ->where('student_id',$student_id)
        ->where('study_date_id',$activeStudyDate->id)
        ->exists()
        ;
        return $degreesExists;
    }

    public function resignation(Request $request)
    {
        $studyDate    = StudyDate::where('archived', 1)->first();
        $registration = Registration::where(['student_id'=> $request->student_id,'study_date_id' => $studyDate->id])->latest()->first();



         /**
          * Steps
         * Get registration
         * Cancell all previous payment orders
         * Create payment order with status 4
         *
         *
         * After student pays :
         * Make payment order archive
         * Create payment with status 5
         * change student status to 5
         */


        //check has resignation
        $paymentOrder = PaymentOrder::where([
            'student_id'    => $request->student_id,
            'study_date_id' => $studyDate->id,
            'status'     => PaymentOrderStatus::STATUS_RESIGNATION,
        ])->first();

        $data = view('dashboard.admin.students.includes._resignation', compact('studyDate', 'registration', 'paymentOrder'));

        return $data;

    }///end if fun

    public function resignationStore(Request $request)
    {
        $registration = Registration::find($request->registration_id);

        $registration->cancelAllPaymentOrders();

        $paymentOrder = PaymentOrder::create($request->all());

        $paymentOrder->update(['status' => PaymentOrderStatus::STATUS_RESIGNATION,'archive' => 0]);

        return response(__('site.added_successfully'));

    }//end of fun

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Setting/UniversityController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Setting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class UniversityController extends Controller
{
    //
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Setting/MainController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Setting;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\University;
use App\Http\Requests\Dashboard\Admin\Setting\MainRequest;
use App\Models\Settings;
use Illuminate\Support\Facades\Cache;

class MainController extends Controller
{
    public function index()
    {
        $universities = University::first();

        $settings = Settings::all();

        // dd($settings);

        return view('dashboard.admin.settings.main', compact('universities'  ,'settings'));

    }//end of fun

    public function update(MainRequest $request, University $university)
    {
        foreach($request->validated() as $key => $value) {
            Settings::where('key' , $key)->update(['value' => $value]);
        }

        Cache::forget('settings');

        session()->flash('success', __('site.updated_successfully'));
        return redirect()->back();

    }//end of fun

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Auth/ProfileController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Dashboard\Admin\AdminRequest;
use App\Models\Admin;
use Illuminate\Http\Request;

class ProfileController extends Controller
{
    public function index()
    {
        return view('dashboard.admin.profile.index');
    } //end of fun

    public function update(AdminRequest $request, Admin $admin)
    {

        $admin = Admin::find(auth('admin')->id());

        $requestData = $request->safe()->except(['password']);

        if ($request->password) {
            $requestData['password'] = bcrypt($request->password);
        }

        $admin->update($requestData);
        session()->flash('success', __('site.updated_successfully'));
        return redirect()->back();
    } //end of fun
}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Auth/AuthController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class AuthController extends Controller
{
    public function loginPage()
    {
        if (auth('admin')->check()) {
            return redirect()->route('dashboard.admin.home');
        }
        return view('dashboard.admin.auth.login');

    }//end of fun

    public function loginStore(Request $request)
    {
        $request->validate([
            'login'     => ['required'],
            'password'  => ['required'],
        ]);

        $login_type = filter_var($request->input('login'), FILTER_VALIDATE_EMAIL)
                        ? 'email'
                        : 'name';

        $request->merge([
            $login_type => $request->input('login')
        ]);

        $remember = true;

        $credentials = $request->only($login_type, 'password');

        if (auth('admin')->attempt($credentials, $remember)) {

            session()->flash('success', __('site.login_successfully'));

            return view('welcome');

        } else {
            return redirect()->back()->with(['login' => __('auth.no_data_found')])->withInput();

        }//end of if

    }//end of fun

    public function logout()
    {
        auth('admin')->logout();

        return redirect()->route('dashboard.admin.login.index');

    }//end of fun

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/resources/views/dashboard/admin/results/_include/statistics/courses-chart.vlade.php

      
-----------------------------------------------


      
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/public/admin_assets/plugins/ckeditor/samples/old/assets/posteddata.php

      
-----------------------------------------------


      <!DOCTYPE html>
<?php
/*
Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
*/
?>
<html>
<head>
	<meta charset="utf-8">
	<title>Sample &mdash; CKEditor</title>
	<link rel="stylesheet" href="sample.css">
</head>
<body>
	<h1 class="samples">
		CKEditor &mdash; Posted Data
	</h1>
	<table border="1" cellspacing="0" id="outputSample">
		<colgroup><col width="120"></colgroup>
		<thead>
			<tr>
				<th>Field&nbsp;Name</th>
				<th>Value</th>
			</tr>
		</thead>
<?php

if (!empty($_POST))
{
	foreach ( $_POST as $key => $value )
	{
		if ( ( !is_string($value) && !is_numeric($value) ) || !is_string($key) )
			continue;

		if ( get_magic_quotes_gpc() )
			$value = htmlspecialchars( stripslashes((string)$value) );
		else
			$value = htmlspecialchars( (string)$value );
?>
		<tr>
			<th style="vertical-align: top"><?php echo htmlspecialchars( (string)$key ); ?></th>
			<td><pre class="samples"><?php echo $value; ?></pre></td>
		</tr>
	<?php
	}
}
?>
	</table>
	<div id="footer">
		<hr>
		<p>
			CKEditor - The text editor for the Internet - <a class="samples" href="https://ckeditor.com/">https://ckeditor.com</a>
		</p>
		<p id="copy">
			Copyright &copy; 2003-2019, <a class="samples" href="https://cksource.com/">CKSource</a> - Frederico Knabben. All rights reserved.
		</p>
	</div>
</body>
</html>

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/TestMarkInput.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture;

use App\Models\StudentTest;
use Livewire\Component;

class TestMarkInput extends Component
{
    public StudentTest $studentTest;

    public function mount($studentTest)
    {
        $this->studentTest = $studentTest;
    }

    public function render()
    {
        return view('livewire.elearning.teacher.courses.lecture.test-mark-input');
    }

    protected $rules =  [
        'studentTest.mark' => 'required|integer',
    ];

    protected $validationAttributes = [
        'studentTest.mark' => 'الدرجة',
    ];
    
    public function updatedStudentTest()
    {
        $this->validate();
        $this->studentTest->save();
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/LectureAttachments.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture;

use Stringable;
use Livewire\Component;
use App\Events\TestEnded;
use Illuminate\Http\File;
use App\Events\TestPaused;
use App\Events\TestResumed;
use App\Events\TestStarted;
use App\Models\StudentTest;
use Illuminate\Support\Str;
use Livewire\WithFileUploads;
use App\Events\PodcastProcessed;
use App\Models\Elarning\TestStatus;
use App\Models\Elearning\Lecture;
use App\Models\Elearning\Question;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use App\Models\Elearning\Assignment;
use App\Models\Elearning\Attachment;
use Illuminate\Support\Facades\Storage;
use App\Models\Elearning\LectureAttendance;
use App\Models\Elearning\QuestionAnswer;
use Psy\CodeCleaner\AssignThisVariablePass;
use Spatie\MediaLibraryPro\Http\Livewire\Concerns\WithMedia;

class LectureAttachments extends Component
{
    use WithFileUploads;
    public $videoAttachment;
    public $fileAttachment;
    public $activeTab = 'videos';
    public $lecture;
    public Assignment $assignment;
    public $attachment_type_video = Attachment::ATTACHMENT_TYPE_VIDEO;
    public $attachment_type_file = Attachment::ATTACHMENT_TYPE_FILE;

    public $type_lecture = Lecture::TYPE_LECTURE;
    public $type_live_lecture = Lecture::TYPE_LIVE_LECTURE;
    public $type_online_test = Lecture::TYPE_ONLINE_TEST;


    public $studentTests = [];

    public $students;
    public $studentsChanges = [];

    public $questions;

    public $testStatus = 'notStarted';

    protected $listeners = ['lectureChanged'];

    public function mount(Lecture $lecture, $students)
    {
        $this->assignment = new Assignment();
        $this->lecture = $lecture;

        $this->students = $students;

        $absentStudents = $lecture->lectureAttendances()->get();
        $absentStudents->each(function ($student) {
            $this->studentsChanges[$student->student_id] = [
                'absent' => true,
            ];
        });

        $this->questions = collect();

        $this->testStatus = $this->lecture->test_status ?? Lecture::TEST_STATUS_NOT_STARTED;
    }

    public function render()
    {
        return view('livewire.elearning.teacher.courses.lecture.lecture-attachments');
    }

    public function rules()
    {
        return [
            'questions.*.question' => ['required', 'max:255'],
            'questions.*.mark' => ['required', 'max:255'],
            'questions.*.options.*.answer' => ['required', 'max:255'],

        ];
    }

    public function lectureChanged(Lecture $lecture)
    {
        $this->lecture = $lecture;

        $this->assignment = $lecture->assignment ?? new Assignment();

        if ($lecture->type == Lecture::TYPE_ONLINE_TEST) {

            $this->lecture->load('questions');

            $this->questions = collect($this->lecture->questions);

            $lecture->load('studentTests');

            $this->studentTests = $lecture->studentTests;

            $this->activeTab = 'marks';

            $this->testStatus = $this->lecture->test_status ?? Lecture::TEST_STATUS_NOT_STARTED;
            
        } elseif ($lecture->type == Lecture::TYPE_OFFLINE_TEST) {

            $this->lecture->load('studentTests');

            $this->studentTests = $lecture->studentTests;

            $lecture->load('studentTests');

            $this->activeTab = 'marks';
        } else {

            $this->activeTab = 'videos';
        }

        $this->studentsChanges = [];

        $absentStudents = $lecture->lectureAttendances()->get();

        $absentStudents->each(function ($student) {
            $this->studentsChanges[$student->student_id] = [
                'absent' => true,
            ];
        });
    }

    public function setActiveTab(string $activeTab)
    {
        $this->activeTab = $activeTab;
    }

    public function uploadFileAttachment()
    {
        return DB::transaction(function () {
            $attachment = Attachment::create([
                'type' => Attachment::ATTACHMENT_TYPE_FILE,
                'lecture_id' => $this->lecture->id,
                'title' => $this->fileAttachment->getClientOriginalName(),
            ]);

            $path = Storage::put('elearning/teacher/attachments/files', $this->fileAttachment);

            $attachment->update(['path' => $path]);

            $this->fileAttachment = null;

            session()->flash('success', __('site.updated_successfully'));
        });
    }

    public function addQuestion()
    {
        $question = collect([
            'question' => '',
            'options' => [
                [
                    'answer' => '',
                ],
                [
                    'answer' => '',
                ],
                [
                    'answer' => '',
                ],
                [
                    'answer' => '',
                ],
            ],
        ]);

        $this->questions->push($question);
    }

    public function removeQuestion($index)
    {
        $id = $this->questions[$index]['id'] ?? null;
        if ($id) {
            Question::find($id)->delete();
        }

        $this->questions->forget($index);
    }

    public function saveQuestions()
    {
        return DB::transaction(function () {

            $this->lecture->questions()->delete();

            $this->questions->each(function ($question) {
                $question = $this->lecture->questions()->create([
                    'question' => $question['question'],
                    'type' => Question::TYPE_MULTIPLE_CHOICE,
                    'options' => $question['options'],
                    'mark' => $question['mark'],
                ]);
            });
            session()->flash('success', __('site.updated_successfully'));
        });
    }

    public function calculateMarks()
    {

        $this->lecture->load('studentTests', 'questions');


        $this->students->each(function ($student) {

            $this->lecture->questions->each(function ($question) use ($student) {

                $correctAnswer = $question->options[0]['answer'];
                $studentAnswer = $student->answers->where('question_id', $question->id)?->first();

                if ($studentAnswer?->exists()) {

                    $studentAnswer->update([
                        'mark' => $correctAnswer == $studentAnswer->answer ? $question->mark : 0,
                    ]);
                } else {

                    QuestionAnswer::create([
                        'student_id' => $student->id,
                        'question_id' => $question->id,
                        'mark' =>  0,
                    ]);
                }
            });

            $student->tests->where('lecture_id', $this->lecture->id)->first()->update([
                'mark' => $student->answers->sum('mark'),
            ]);
        });

        $this->studentTests = $this->lecture->studentTests;
    }

    public function startTest()
    {
        event(new TestStarted($this->lecture->load('course')));

        $this->testStatus = 'started';

        $this->lecture->update([
            'test_status' => Lecture::TEST_STATUS_STARTED,
        ]);
    }

    public function pauseTest()
    {
        event(new TestPaused('Test paused'));

        $this->testStatus = 'paused';

        $this->lecture->update([
            'test_status' => Lecture::TEST_STATUS_PAUSED,
        ]);
    }

    public function endTest()
    {
        event(new TestEnded('Test Ended'));

        $this->testStatus = 'ended';

        $this->lecture->update([
            'test_status' => Lecture::TEST_STATUS_ENDED,
        ]);
    }

    public function resumeTest()
    {
        event(new TestResumed('Test Resumed'));

        $this->testStatus = 'started';

        $this->lecture->update([
            'test_status' => Lecture::TEST_STATUS_RESUMED,
        ]);
    }

    // public function saveAnswer() {

    // }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/CreateLecture.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture;

use App\Http\Actions\StudentTestsHandlerAction;
use App\Models\Course;
use Livewire\Component;
use Illuminate\Support\Str;
use Livewire\WithFileUploads;
use Illuminate\Validation\Rule;
use App\Models\Elearning\Lecture;
use App\Models\StudyPlanDate;
use Dotenv\Parser\Lexer;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\Route;

class CreateLecture extends Component
{
    use WithFileUploads;
    protected $listeners = ['editLecture', 'cancelEditMode'];
    public $editMode = false;
    public $types;
    public $course;
    public $lecture;

    public $type_lecture = Lecture::TYPE_LECTURE;
    public $type_live_lecture = Lecture::TYPE_LIVE_LECTURE;

    public $studyPlanDate;

    public function rules()
    {
        return [
            'lecture.title' => ['required', 'max:255', 'string'],
            'lecture.type' => ['required', Rule::in(array_keys(Lecture::LECTURE_TYPES))],
            'lecture.live_link' => [
                Rule::requiredIf($this->lecture['type'] == $this->type_live_lecture),
            ],
            'lecture.full_mark' => ["exclude_if:lecture.type,{$this->type_lecture},{$this->type_live_lecture}"  ,  'numeric' ],
            'lecture.description' => ['nullable', 'max:255'],
            'lecture.teaching_datetime' => ['required', 'after:' . now()],
        ];
    }

    public function mount($course, Lecture $lecture = null, StudyPlanDate $studyPlanDate)
    {
        $this->lecture = $lecture ?? new Lecture();
        
        $this->course = $course;
        $this->types = Lecture::LECTURE_TYPES;
        $this->studyPlanDate = $studyPlanDate;
        // $this->lecture->type = (int)$this->type_live_lecture;
            // dd($this->lecture->type);
            // $this->fill(['lecture.type' => 4]);
    }


    public function render()
    {
        if($this->lecture->type == null) {
            $this->lecture->type = $this->type_lecture;
        }

        return view('livewire.elearning.teacher.courses.lecture.create-lecture');
    }

    public function editLecture(Lecture $lecture, Course $course)
    {
        $this->editMode = true;
        $this->lecture = $lecture;
        $this->course = $course;
    }

    public function cancelEditMode()
    {
        $this->lecture = new Lecture();
    }

    public function saveLecture()
    {

        return DB::transaction(function () {
            //Error in validation
            $this->validate();


            $this->lecture->course_id = $this->course->id;

            $this->lecture->save();

            if (in_array($this->lecture['type'], [Lecture::TYPE_OFFLINE_TEST, Lecture::TYPE_ONLINE_TEST])) {
                StudentTestsHandlerAction::handle($this->lecture, $this->studyPlanDate);
            }

            $this->emit('lectureCreated');

            $this->lecture = new Lecture();


            session()->flash('success', __('site.updated_successfully'));
        });
    }

    public function getInitLectureType() {
        $this->lecture->type = '3';
        // dd($this->lecture->type);
        return 4;
        // return is_null($this->lecture->type) ? $this->type_live_lecture : $this->lecture->type;
    }
}
      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/AssignmentListItem.php

      
-----------------------------------------------


      <?php
namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture;


use App\Models\Elearning\StudentAssignment;
use Livewire\Component;

class AssignmentListItem extends Component
{
    public StudentAssignment $studentAssignment;

    public function mount(StudentAssignment $studentAssignment)
    {
        $this->studentAssignment = $studentAssignment;
    }

    public function render()
    {
        return view('livewire.elearning.teacher.courses.lecture.assignment-list-item');
    }

    public function rules() {
        return [
            'studentAssignment.mark' => ['numeric'],
        ];
    }

    public function updatedStudentAssignment() {
        $this->studentAssignment->update(['mark' => $this->studentAssignment->mark]);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Student/Courses/Lecture/TestTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Student\Courses\Lecture;

use Livewire\Component;
use App\Models\Elearning\Lecture;
use App\Models\Elearning\QuestionAnswer;

class TestTab extends Component
{
    public $testStatus = 'notStarted';
    public Lecture $lecture;
    public $questions;
    public $answers;

    protected $listeners = ['testStarted' , 'testPaused' , 'testResumed' , 'testEnded' , 'teacherStartedATest'];

    public function render()
    {
        return view('livewire.elearning.student.courses.lecture.test-tab');
    }

    public function mount(Lecture $lecture) {
        $this->lecture = $lecture;
        $this->lecture->load('questions.answers');
        $lecture->questions->map(function($question) {
            if($question->answers) {
                 $this->questions[$question->id] = $question->answers->answer;
            }
        });
        
        $this->testStatus = $this->lecture->test_status ?? Lecture::TEST_STATUS_NOT_STARTED;
    }

    public function testStarted()
    {
        $this->testStatus = Lecture::TEST_STATUS_STARTED;
    }

    public function testPaused() {
        $this->testStatus =  Lecture::TEST_STATUS_PAUSED;
    }

    public function testResumed() {
        $this->testStatus =  Lecture::TEST_STATUS_RESUMED;
    }

    public function testEnded() {
        $this->testStatus = Lecture::TEST_STATUS_ENDED;
    }

    public function teacherStartedATest() {
        $this->testStatus = Lecture::TEST_STATUS_STARTED;
    }

    public function saveAnswer($question_id) {
        QuestionAnswer::updateOrCreate([
            'question_id' => $question_id,
            'student_id' => auth('student')->user()->student_id,
        ], [
            'answer' => $this->questions[$question_id],
        ]);

    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Recorder/PaymentReportController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Recorder;

use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use App\Helpers\PrintHelper;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use App\Http\Controllers\Controller;
use App\Models\Payment;

class PaymentReportController extends Controller
{
    public function index()
    {
        $studyDates  = StudyDate::all();
        $studyYears  = StudyYear::all();
        $departments = Department::all();

        // $usd_total = Payment::where('currency','usd')->sum('amount') . ' ' . __('admin.currency.usd');
        // $sdg_total = Payment::where('currency','sdg')->sum('amount')  . ' ' . __('admin.currency.sdg');
        // $totalByCurrency = Payment::groupBy('currency_id')->sum('amount');

        return view('dashboard.admin.reports.recorder.payment_reports', compact('studyDates', 'departments', 'studyYears'));

    }//end of index

    public function queryData() {
        $payments = Payment::with('currency')
        ->when(request()->from,function($q) {
            $q->where('created_at','>',request()->from);
        })
        ->when(request()->to,function($q) {
            $q->where('created_at','<=',request()->to);
        })
        // ->when(request()->studyDate,function($q) {
        //     $q
        // })
        ->with(['student' => function($q) {
            $q->when(request()->studyDate,function($q) {
                    $q->with('registration')->where('study_date_id',request()->studyDate);
                });
        }])
        ->latest()
            ->get();
        return $payments;
    }

    public function data()
    {
        $payments = $this->queryData();

        return DataTables::of($payments)
        ->addColumn('name',function(Payment $payment) {
            // dd($payment->student);
            return $payment->student->full_name;
        })
        ->editColumn('currency',function(Payment $payment) {
            return  $payment->currency?->code;
        })
        ->editColumn('created_at',function(Payment $payment) {
            return  $payment->created_at->toDateString();
        })
        ->addIndexColumn()->toJson();

    }//end of data

    public function print() {
        return PrintHelper::printCompletedStudents($this->queryData());
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Recorder/DepartmentsStatistics.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Recorder;

use App\Models\Student;
use App\Models\StudyYear;
use App\Models\Department;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use App\Models\Registration;
use Illuminate\Support\Facades\Config;

class DepartmentsStatistics extends Controller
{
    public function index() {

        $studyYears = StudyYear::all();

        $departments = Department::query()
            ->with([
                'totalRegistrations' => fn($q) => $q->select('id','department_id','study_year_id'),
                'registerdRegistrations' => fn($q) => $q->select('id','department_id','study_year_id'),
            ])
        // }])
            ->get()
            ;

        $studyYears = StudyYear::where('id', '<=', 5)->get();

        return view('dashboard.admin.reports.recorder.department-statistics',compact('studyYears','departments'));
    }
}




      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Accountant/UnRegisteredStudentsController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Accountant;

use App\Helpers\PrintHelper;
use App\Http\Controllers\Controller;
use App\Models\Department;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use Yajra\DataTables\DataTables;

class UnRegisteredStudentsController extends Controller
{
    public function index()
    {
        $studyDates  = StudyDate::all();
        $studyYears  = StudyYear::all();
        $departments = Department::all();

        return view('dashboard.admin.reports.accountant.unregistered_students', compact('studyDates', 'departments', 'studyYears'));
    } //end of index

    public function queryData()
    {
        return Student::
            // withCount('registration')->having('registration_count', '>', 0)
            WhenStudyYearId(request()->study_year_id)
            ->WhenDepartmentId(request()->department_id)
            ->WhenStudyDateId(request()->study_date_id)
            ->withUnregistered()
            ->latest()
            ->get();
    }

    public function data()
    {
        $students = $this->queryData();

        return DataTables::of($students)->addIndexColumn()->toJson();
    } //end of data


    public function print()
    {
        return PrintHelper::printUnRegisteredStudents($this->queryData());
    }
}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Accountant/TotalPaymentsController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Accountant;

use App\Models\Payment;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use App\Helpers\PrintHelper;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;

class TotalPaymentsController extends Controller
{
    public function index()
    {
        $studyDates  = StudyDate::all();
        $studyYears  = StudyYear::all();
        $departments = Department::all();


        $total = Payment::with('currency')
            ->select('currency_id' , DB::raw('SUM(amount) as total'))
            ->groupBy('currency_id')
            ->get();

        return view('dashboard.admin.reports.accountant.total_payments',compact('studyDates', 'departments', 'studyYears' , 'total'));
    }

    public function queryData()
    {
        return Payment::with('currency')
        ->select(DB::raw('DATE(created_at) as date'), DB::raw("COUNT(*) as total") , 'currency_id' )
        ->groupBy('date')
        ->orderBy('date','desc')
        ->get();

    }

    public function data()
    {
        $payments = $this->queryData();
        // dd($payments);
        $datatables =  DataTables::of($payments)
            ->addColumn('currency' , function(Payment $payment) {
                return $payment->currency?->code;
            })
        ->addIndexColumn()->toJson();

    // foreach($pay)

    return $datatables;
    } //end of data


    public function print() {
        return PrintHelper::printUnRegisteredStudents($this->queryData());
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Accountant/TotalDepartmentPaymentsController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Accountant;

use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use App\Helpers\PrintHelper;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use App\Models\Currency;
use App\Models\Payment;

class TotalDepartmentPaymentsController extends Controller
{
    public function index()
    {
        $studyDates  = StudyDate::all();
        $studyYears  = StudyYear::all();
        $departments = Department::all();

        $currencies = Currency::all();

        $total = Payment::with('currency')
            ->select('currency_id', DB::raw('SUM(amount) as total'))
            ->groupBy('currency_id')
            ->get();
        return view('dashboard.admin.reports.accountant.total_department_payments', compact('studyDates', 'departments', 'studyYears', 'total' , 'currencies'));
    }

    public function queryData()
    {
        $selected_currency =  request()->currency;

        return Department::withCount(['registration' => fn ($q) => $q->where('registrations.currency_id', $selected_currency)])
            ->with(['activePrice', 'registration' => function ($q) use ($selected_currency) {
                $q->select('registrations.id', 'registrations.register_fees', 'registrations.tuition_fees')
                    ->where('registrations.currency_id', $selected_currency)
                    ->with(['payments' => fn ($query) => $query->where('payments.currency_id', $selected_currency)])
                    ->withSum(
                        [
                            'discounts' => fn ($query) => $query->where('currency_id', $selected_currency)
                        ],
                        'amount'
                    );
            }])
            ->get();
    }

    public function data()
    {
        $selected_currency = in_array(request()->currency, ['sdg', 'usd']) ? request()->currency : 'sdg';

        $payments = $this->queryData();
        return DataTables::of($payments)
            ->addColumn('name', function (Department $department) {
                return $department->name;
            })
            ->addColumn('total_fees', function (Department $department) use ($selected_currency) {
                // dd($department->activePrice->tuition_fees[$selected_currency]);
                return ($department->activePrice->tuition_fees[$selected_currency] ?? 0) * $department?->registration_count;
            })
            ->addColumn('total_discounts', function (Department $department) use ($selected_currency) {

                return $department?->registration?->sum('discounts_sum_amount');
            })
            ->addColumn('total_net_fees', function (Department $department) use ($selected_currency) {
                // return 66;

                // $price = DepartmentPrice::where('department_id',$department->id)->withActiveStudyDate()->first();
                $fees = ($department?->activePrice[$selected_currency] ?? 1) * $department?->registration_count;

                return $fees - $department?->registration?->sum('discounts_sum_amount') ?? 0;
            })
            ->addColumn('total_payments', function (Department $department) {
                $payments = 0;
                foreach ($department->registration as  $registration) {
                    // dd($registration->payments);
                    $payments += $registration->payment < $registration->tuition_fees ? $registration->payment : $registration->tuition_fees;
                    // dd($registration->payment);
                }

                $discounts = $department->registration->sum('discounts_sum_amount')  ?? 0;

                return $payments - $discounts  > 0 ? $payments - $discounts : 0;
            })
            ->addColumn('total_reminder', function (Department $department)  use ($selected_currency) {
                $reminder = 0;
                foreach ($department->registration as  $registration) {
                    $payments = $registration->tuition_fees - $registration->payment;
                    $reminder += $payments > 0 ? $payments  : 0;
                }
                $fees = ($department->activePrice[$selected_currency] ?? 1) * $department->registration_count ?? 0;

                return $fees -  $department->registration->sum('discounts_sum_amount') ?? 0;

                $discounts = $department->registration->sum('discounts_sum_amount');

                // return $reminder;
                return $reminder - $discounts > 0 ? $reminder - $discounts : 0;
            })
            ->addColumn('percentage', function (Department $department) use ($selected_currency) {
                $total = 0;
                $discounts = 0;
                foreach ($department->registration as  $registration) {
                    $discounts += $registration->discounts_sum_amount;
                }
                // $price = DepartmentPrice::where('department_id',$department->id)->withActiveStudyDate()->first();
                $price = $department->activePrice;

                $fees = ($price[$selected_currency] ?? 1) * $department->registration_count;

                $total = $fees - $discounts;

                $payments = 0;
                foreach ($department->registration as  $registration) {
                    $payments += $registration->payment < $registration->tuition_fees ? $registration->payment : $registration->tuition_fees;
                }
                $discounts = 0;

                foreach ($department->registration as  $registration) {
                    $discounts += $registration->discounts_sum_amount;
                }
                $payments = $payments - $discounts;

                $percentage = $payments * 100 / ($total > 0 ? $total : 1);

                return '%' . round($percentage > 0 ? $percentage : 0);
            })
            ->addIndexColumn()->toJson();
    } //end of data


    public function print()
    {
        return PrintHelper::printUnRegisteredStudents($this->queryData());
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Accountant/RegisteredStudentsController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Accountant;

use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use App\Helpers\PrintHelper;
use Yajra\DataTables\DataTables;
use App\Http\Controllers\Controller;

class RegisteredStudentsController extends Controller
{
    public function index()
    {
        $studyDates  = StudyDate::all();
        $studyYears  = StudyYear::all();
        $departments = Department::all();
        return view('dashboard.admin.reports.accountant.registered_students',compact('studyDates', 'departments', 'studyYears'));
    } //end of index

    public function queryData()
    {

        return Student::
            WhenStudyYearId(request()->study_year_id)
            ->WhenDepartmentId(request()->department_id)
            ->WhenStudyDateId(request()->study_date_id)
            ->withRegistered()
            ->get();
    }

    public function data()
    {
        $students = $this->queryData();

        return DataTables::of($students)->addIndexColumn()->toJson();
    } //end of data

    public function print() {
        return PrintHelper::printRegisteredStudents($this->queryData());
    }

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Accountant/PaymentFeesController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Accountant;

use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use App\Models\Department;
use App\Helpers\PrintHelper;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Yajra\DataTables\DataTables;

class PaymentFeesController extends Controller
{
    public function index()
    {
        $studyDates  = StudyDate::all();
        $studyYears  = StudyYear::all();
        $departments = Department::all();

        return view('dashboard.admin.reports.accountant.payment_fees', compact('studyDates', 'departments', 'studyYears'));

    }//end of index

    public function queryData() {
        $students = Student::with(['currency','registration' => function($q) {

            $q
                ->withActiveStudyDate()
                ->with('payments','discounts','totalDiscount');
        }])
        ->WhenStudyDateId(request()->study_date_id)
        ->WhenStudyYearId(request()->study_year_id)
        ->WhenDepartmentId(request()->department_id)
        ->latest()
        ->get();


        return $students;
    }

    public function data()
    {
        $students = $this->queryData();

        return DataTables::of($students)
        ->editColumn('total',function(Student $student) {
            return $student->registration?->total ?? 0 . ' ' . $student->currency?->code;
        })
        ->addColumn('reminder',function(Student $student) {
            return $student->registration?->reminder ?? 0  . ' ' . $student->currency?->code;
        })
        ->addColumn('discounts',function(Student $student) {
            return $student->registration?->discounts_sum ?? 0  . ' ' . $student->currency?->code;
        })
        ->addColumn('payment',function(Student $student) {
            return $student->registration?->payment ?? 0  . ' ' . $student->currency?->code;
        })
        ->addIndexColumn()->toJson();

    }//end of data

    public function print() {
        // return PrintHelper::printCompletedStudents($this->queryData());
    }

}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Controllers/Dashboard/Admin/Reports/Accountant/CompletedFeesStudentsController.php

      
-----------------------------------------------


      <?php

namespace App\Http\Controllers\Dashboard\Admin\Reports\Accountant;

use App\Helpers\PrintHelper;
use App\Http\Controllers\Controller;
use App\Models\Department;
use App\Models\Student;
use App\Models\StudyDate;
use App\Models\StudyYear;
use Yajra\DataTables\DataTables;

class CompletedFeesStudentsController extends Controller
{
    public function index()
    {
        $studyDates  = StudyDate::all();
        $studyYears  = StudyYear::all();
        $departments = Department::all();

        return view('dashboard.admin.reports.accountant.completed_students', compact('studyDates', 'departments', 'studyYears'));

    }//end of index

    public function queryData() {
        $students = Student::withCount('registration')->having('registration_count', '>',0)
            ->with('currency')
            ->WhenStudyDateId(request()->study_date_id)
            ->WhenStudyYearId(request()->study_year_id)
            ->WhenDepartmentId(request()->department_id)
            // ->withCompleted()
            ->latest()
            ->get()
            ->filter(function($student) {
                return $student->registration->reminder == 0;
            });

        return $students;
    }



    public function data()
    {
        $students = $this->queryData();

        return DataTables::of($students)
        ->addColumn('total',function(Student $student) {
            return $student->registration->total . ' ' . $student->currency?->code;
        })
        ->addColumn('discounts',function(Student $student) {
            // dd($student->registration->discounts);
            return $student->registration->discounts_sum . ' ' .$student->currency?->code;
        })
        ->addColumn('payment',function(Student $student) {
            return $student->registration->payment . ' ' . $student->currency?->code;
        })
        ->addIndexColumn()->toJson();

    }//end of data

    public function print() {
        return PrintHelper::printCompletedStudents($this->queryData());
    }

}//end of controller

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearnig/Teacher/Courses/Lecture/Tabs/VideosTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearnig\Teacher\Courses\Lecture\Tabs;

use Livewire\Component;

class VideosTab extends Component
{
    public function render()
    {
        return view('livewire.elearnig.teacher.courses.lecture.tabs.videos-tab');
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/Tabs/VideosTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture\Tabs;

use Livewire\Component;
use Illuminate\Support\Str;
use Livewire\WithFileUploads;
use App\Models\Elearning\Lecture;
use Illuminate\Support\Facades\DB;
use App\Models\Elearning\Attachment;
use Illuminate\Support\Facades\Storage;
use App\Http\Actions\AttachmentThumbnailHandlerAction;
use App\Services\AttachmentService;

class VideosTab extends Component
{
    use WithFileUploads;
    public $lecture;
    public $uploadedVideo;
    public $attachment_type_video = Attachment::ATTACHMENT_TYPE_VIDEO;
    public $activeVideo;

    public $listeners = ['lectureChanged'];

    public function render()
    {
        return view('livewire.elearning.teacher.courses.lecture.tabs.videos-tab');
    }

    public function mount(Lecture $lecture)
    {
        $this->lecture = $lecture;
        $this->activeVideo = $lecture->attachments?->first();
    }

    public function lectureChanged(Lecture $lecture)
    {
        $this->lecture = $lecture;
        $this->activeVideo = $lecture->attachments?->first();
    }

    public function setActiveVideo(Attachment $attachment)
    {
        $this->activeVideo = $attachment;
        $this->emit('videoSrcChanged', $attachment);

    }

    public function uploadVideoAttachment()
    {
        $this->validate([
            'uploadedVideo' => 'file|mimes:mp4'
        ]);

        return DB::transaction(function () {
            $filename = Str::uuid()  . '.' . $this->uploadedVideo->getClientOriginalExtension();

            $path = Storage::putFileAs('elearning/teacher/attachments/videos', $this->uploadedVideo, $filename);

            $thumbnail =  AttachmentService::getVideoPath($path);
            $duration = AttachmentService::getVideoDuration($path);

            Attachment::create([
                'type' => Attachment::ATTACHMENT_TYPE_VIDEO,
                'lecture_id' => $this->lecture->id,
                'title' => $this->uploadedVideo->getClientOriginalName(),
                'path' => $path,
                'thumbnail' => $thumbnail,
                'duration' => $duration,
            ]);
            

            $this->lecture = $this->lecture->fresh('attachments');

            $this->uploadedVideo = null;

            session()->flash('success', __('site.updated_successfully'));
        });
    }

    public function deleteVideoAttachment(Attachment $attachment)
    {
        Storage::delete($attachment->path);

        Storage::delete($attachment->thumbnail);

        $attachment->delete();

        $this->lecture = $this->lecture->fresh('attachments');

        session()->flash('success', __('site.deleted_successfully'));
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/Tabs/AttendanceTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture\Tabs;

use App\Models\Elearning\Lecture;
use Livewire\Component;

class AttendanceTab extends Component
{
    public $lecture;
    public $students;
    public $studentsChanges = [];

    public function render()
    {
        return view('livewire.elearning.teacher.courses.lecture.tabs.attendance-tab');
    }

    public function mount(Lecture $lecture , $students)
    {
        $this->lecture = $lecture;
        $this->students = $students;

        $this->students = $students;

        $absentStudents = $lecture->lectureAttendances()->get();
        $absentStudents->each(function ($student) {
            $this->studentsChanges[$student->student_id] = [
                'absent' => true,
            ];
        });

    }

    public function updateAbsence($studentId)
    {
        $hasAbsent = $this->studentsChanges[$studentId]['absent'];

        if ($hasAbsent) {
            $this->lecture->lectureAttendances()->updateOrCreate([
                'student_id' => $studentId,
            ]);
        } else {
            $this->lecture->lectureAttendances()->where('student_id', $studentId)->delete();
        }
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/Tabs/AttachmentsTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture\Tabs;

use Livewire\Component;
use Illuminate\Support\Str;
use Livewire\WithFileUploads;
use App\Models\Elearning\Lecture;
use Illuminate\Support\Facades\DB;
use App\Models\Elearning\Attachment;
use Illuminate\Support\Facades\Storage;
use Jantinnerezo\LivewireAlert\LivewireAlert;

class AttachmentsTab extends Component
{
    use WithFileUploads;
    use LivewireAlert;
    public $lecture;
    public $attachment_type_file = Attachment::ATTACHMENT_TYPE_FILE;
    public $uploadedAttachment;
    public function render()
    {
        return view('livewire.elearning.teacher.courses.lecture.tabs.attachments-tab');
    }

    public  function mount(Lecture $lecture)
    {
        $this->lecture = $lecture;
    }

    protected function rules() {
        return [
            'uploadedAttachment' => 'required|file|max:1024|mimes:pdf,doc,docx,xls,xlsx,ppt,pptx,zip,rar',
        ];
    }

    public function uploadAttachment()
    {
        $this->validate();
        return DB::transaction(function () {
            $attachment = Attachment::create([
                'type' => Attachment::ATTACHMENT_TYPE_FILE,
                'lecture_id' => $this->lecture->id,
                'title' => $this->uploadedAttachment->getClientOriginalName(),
            ]);

            $path = Storage::put('elearning/teacher/attachments/files', $this->uploadedAttachment);

            $attachment->update(['path' => $path]);

            $this->uploadedAttachment = null;

            $this->lecture = $this->lecture->fresh('attachments');

            session()->flash('success', __('site.updated_successfully'));
        });
    }

    public function deleteAttachment(Attachment $attachment)
    {
        return DB::transaction(function () use ($attachment) {
            $attachment->delete();
            $this->lecture = $this->lecture->fresh('attachments');
            $this->alert('success', 'deleted successfully');
        });
    }

    public function downloadAttachment(Attachment $attachment)
    {
        $this->alert('success', 'downloaded successfully'); 

        return Storage::download(Str::after($attachment->path, 'storage/'), $attachment->title);
    }
}

      
      

-----------------------------------------------


      File name :../UniSoftLaravel/app/Http/Livewire/Elearning/Teacher/Courses/Lecture/Tabs/AssignmentTab.php

      
-----------------------------------------------


      <?php

namespace App\Http\Livewire\Elearning\Teacher\Courses\Lecture\Tabs;

use Livewire\Component;
use App\Models\Elearning\Lecture;

class AssignmentTab extends Component
{
    public $assignment;
    public $lecture;
    public function render()
    {
        return view('livewire.elearning.teacher.courses.lecture.tabs.assignment-tab');
    }

    public function mount(Lecture $lecture)
    {
        $this->lecture = $lecture;
        $this->assignment = $lecture->assignment ?? $lecture->assignment()->make();
    }

    protected function rules() {
        return [
            'assignment.title' => ['required', 'max:255'],
            'assignment.description' => ['nullable'],
            'assignment.full_mark' => ['required', 'integer'],
            'assignment.deadline' => ['required'],
        ];

    }

    public function saveAssignment()
    {
        $this->validate();

        $this->assignment->lecture_id = $this->lecture->id;

        $this->assignment->save();

        session()->flash('success', __('site.updated_successfully'));
    }
}

      